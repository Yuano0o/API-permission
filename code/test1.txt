Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\accessibilityservice\AccessibilityService.java
Method: 
Permission: android.Manifest.permission.USE_FINGERPRINT

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\accounts\AccountManager.java
Method: 
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS_FULL

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: 
Permission: android.Manifest.permission.REORDER_TASKS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: 
Permission: android.Manifest.permission.REORDER_TASKS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: 
Permission: Manifest.permission.PACKAGE_USAGE_STATS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: 
Permission: Manifest.permission.PACKAGE_USAGE_STATS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: 
Permission: Manifest.permission.PACKAGE_USAGE_STATS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: 
Permission: Manifest.permission.PACKAGE_USAGE_STATS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: 
Permission: Manifest.permission.KILL_BACKGROUND_PROCESSES

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: 
Permission: Manifest.permission.KILL_UID

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: 
Permission: Manifest.permission.FORCE_STOP_PACKAGES

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: 
Permission: anyOf = {
            "android.permission.INTERACT_ACROSS_USERS",
            "android.permission.INTERACT_ACROSS_USERS_FULL"
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: 
Permission: Manifest.permission.DUMP

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: 
Permission: Manifest.permission.RESTRICTED_VR_ACCESS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\AlarmManager.java
Method: 
Permission: android.Manifest.permission.UPDATE_DEVICE_STATS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\AlarmManager.java
Method: 
Permission: android.Manifest.permission.UPDATE_DEVICE_STATS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\AppOpsManager.java
Method: 
Permission: android.Manifest.permission.UPDATE_APP_OPS_STATS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\BroadcastOptions.java
Method: 
Permission: android.Manifest.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\KeyguardManager.java
Method: 
Permission: Manifest.permission.DISABLE_KEYGUARD

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\KeyguardManager.java
Method: 
Permission: Manifest.permission.DISABLE_KEYGUARD

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\KeyguardManager.java
Method: 
Permission: Manifest.permission.DISABLE_KEYGUARD

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\Notification.java
Method: 
Permission: android.Manifest.permission.NOTIFICATION_DURING_SETUP)
    public static final String EXTRA_ALLOW_DURING_SETUP = "android.allowDuringSetup";

    /**
     * {@link #extras} key: A
     * {@link android.content.ContentUris content URI} pointing to an image that can be displayed
     * in the background when the notification is selected. The URI must point to an image stream
     * suitable for passing into
     * {@link android.graphics.BitmapFactory#decodeStream(java.io.InputStream)
     * BitmapFactory.decodeStream}; all other content types will be ignored. The content provider
     * URI used for this purpose must require no permissions to read the image data.
     */
    public static final String EXTRA_BACKGROUND_IMAGE_URI = "android.backgroundImageUri";

    /**
     * {@link #extras} key: A
     * {@link android.media.session.MediaSession.Token} associated with a
     * {@link android.app.Notification.MediaStyle} notification.
     */
    public static final String EXTRA_MEDIA_SESSION = "android.mediaSession";

    /**
     * {@link #extras} key: the indices of actions to be shown in the compact view,
     * as supplied to (e.g.) {@link MediaStyle#setShowActionsInCompactView(int...)}.
     */
    public static final String EXTRA_COMPACT_ACTIONS = "android.compactActions";

    /**
     * {@link #extras} key: the username to be displayed for all messages sent by the user including
     * direct replies
     * {@link android.app.Notification.MessagingStyle} notification. This extra is a
     * {@link CharSequence}
     */
    public static final String EXTRA_SELF_DISPLAY_NAME = "android.selfDisplayName";

    /**
     * {@link #extras} key: a {@link CharSequence} to be displayed as the title to a conversation
     * represented by a {@link android.app.Notification.MessagingStyle}
     */
    public static final String EXTRA_CONVERSATION_TITLE = "android.conversationTitle";

    /**
     * {@link #extras} key: an array of {@link android.app.Notification.MessagingStyle.Message}
     * bundles provided by a
     * {@link android.app.Notification.MessagingStyle} notification. This extra is a parcelable
     * array of bundles.
     */
    public static final String EXTRA_MESSAGES = "android.messages";

    /**
     * {@link #extras} key: an array of
     * {@link android.app.Notification.MessagingStyle#addHistoricMessage historic}
     * {@link android.app.Notification.MessagingStyle.Message} bundles provided by a
     * {@link android.app.Notification.MessagingStyle} notification. This extra is a parcelable
     * array of bundles.
     */
    public static final String EXTRA_HISTORIC_MESSAGES = "android.messages.historic";

    /**
     * {@link #extras} key: whether the notification should be colorized as
     * supplied to {@link Builder#setColorized(boolean)}}.
     */
    public static final String EXTRA_COLORIZED = "android.colorized";

    /**
     * @hide
     */
    public static final String EXTRA_BUILDER_APPLICATION_INFO = "android.appInfo";

    /**
     * @hide
     */
    public static final String EXTRA_CONTAINS_CUSTOM_VIEW = "android.contains.customView";

    /**
     * {@link #extras} key: the audio contents of this notification.
     *
     * This is for use when rendering the notification on an audio-focused interface;
     * the audio contents are a complete sound sample that contains the contents/body of the
     * notification. This may be used in substitute of a Text-to-Speech reading of the
     * notification. For example if the notification represents a voice message this should point
     * to the audio of that message.
     *
     * The data stored under this key should be a String representation of a Uri that contains the
     * audio contents in one of the following formats: WAV, PCM 16-bit, AMR-WB.
     *
     * This extra is unnecessary if you are using {@code MessagingStyle} since each {@code Message}
     * has a field for holding data URI. That field can be used for audio.
     * See {@code Message#setData}.
     *
     * Example usage:
     * <pre>
     * {@code
     * Notification.Builder myBuilder = (build your Notification as normal);
     * myBuilder.getExtras().putString(EXTRA_AUDIO_CONTENTS_URI, myAudioUri.toString());
     * }
     * </pre>
     */
    public static final String EXTRA_AUDIO_CONTENTS_URI = "android.audioContents";

    /** @hide */
    @SystemApi
    @RequiresPermission(android.Manifest.permission.SUBSTITUTE_NOTIFICATION_APP_NAME)
    public static final String EXTRA_SUBSTITUTE_APP_NAME = "android.substName";

    /**
     * This is set on the notification shown by the activity manager about all apps
     * running in the background.  It indicates that the notification should be shown
     * only if any of the given apps do not already have a {@link #FLAG_FOREGROUND_SERVICE}
     * notification currently visible to the user.  This is a string array of all
     * package names of the apps.
     * @hide
     */
    public static final String EXTRA_FOREGROUND_APPS = "android.foregroundApps";

    private Icon mSmallIcon;
    private Icon mLargeIcon;

    private String mChannelId;
    private long mTimeout;

    private String mShortcutId;
    private CharSequence mSettingsText;

    /** @hide */
    @IntDef(prefix = { "GROUP_ALERT_" }, value = {
            GROUP_ALERT_ALL, GROUP_ALERT_CHILDREN, GROUP_ALERT_SUMMARY
    })
    @Retention(RetentionPolicy.SOURCE)
    public @interface GroupAlertBehavior {}

    /**
     * Constant for {@link Builder#setGroupAlertBehavior(int)}, meaning that all notifications in a
     * group with sound or vibration ought to make sound or vibrate (respectively), so this
     * notification will not be muted when it is in a group.
     */
    public static final int GROUP_ALERT_ALL = 0;

    /**
     * Constant for {@link Builder#setGroupAlertBehavior(int)}, meaning that all children
     * notification in a group should be silenced (no sound or vibration) even if they are posted
     * to a {@link NotificationChannel} that has sound and/or vibration. Use this constant to
     * mute this notification if this notification is a group child.
     *
     * <p> For example, you might want to use this constant if you post a number of children
     * notifications at once (say, after a periodic sync), and only need to notify the user
     * audibly once.
     */
    public static final int GROUP_ALERT_SUMMARY = 1;

    /**
     * Constant for {@link Builder#setGroupAlertBehavior(int)}, meaning that the summary
     * notification in a group should be silenced (no sound or vibration) even if they are
     * posted to a {@link NotificationChannel} that has sound and/or vibration. Use this constant
     * to mute this notification if this notification is a group summary.
     *
     * <p>For example, you might want to use this constant if only the children notifications
     * in your group have content and the summary is only used to visually group notifications.
     */
    public static final int GROUP_ALERT_CHILDREN = 2;

    private int mGroupAlertBehavior = GROUP_ALERT_ALL;

    /**
     * If this notification is being shown as a badge, always show as a number.
     */
    public static final int BADGE_ICON_NONE = 0;

    /**
     * If this notification is being shown as a badge, use the {@link #getSmallIcon()} to
     * represent this notification.
     */
    public static final int BADGE_ICON_SMALL = 1;

    /**
     * If this notification is being shown as a badge, use the {@link #getLargeIcon()} to
     * represent this notification.
     */
    public static final int BADGE_ICON_LARGE = 2;
    private int mBadgeIcon = BADGE_ICON_NONE;

    /**
     * Structure to encapsulate a named action that can be shown as part of this notification.
     * It must include an icon, a label, and a {@link PendingIntent} to be fired when the action is
     * selected by the user.
     * <p>
     * Apps should use {@link Notification.Builder#addAction(int, CharSequence, PendingIntent)}
     * or {@link Notification.Builder#addAction(Notification.Action)}
     * to attach actions.
     */
    public static class Action implements Parcelable {
        /**
         * {@link #extras} key: Keys to a {@link Parcelable} {@link ArrayList} of
         * {@link RemoteInput}s.
         *
         * This is intended for {@link RemoteInput}s that only accept data, meaning
         * {@link RemoteInput#getAllowFreeFormInput} is false, {@link RemoteInput#getChoices}
         * is null or empty, and {@link RemoteInput#getAllowedDataTypes is non-null and not
         * empty. These {@link RemoteInput}s will be ignored by devices that do not
         * support non-text-based {@link RemoteInput}s. See {@link Builder#build}.
         *
         * You can test if a RemoteInput matches these constraints using
         * {@link RemoteInput#isDataOnly}.
         */
        private static final String EXTRA_DATA_ONLY_INPUTS = "android.extra.DATA_ONLY_INPUTS";

        private final Bundle mExtras;
        private Icon mIcon;
        private final RemoteInput[] mRemoteInputs;
        private boolean mAllowGeneratedReplies = true;

        /**
         * Small icon representing the action.
         *
         * @deprecated Use {@link Action#getIcon()} instead.
         */
        @Deprecated
        public int icon;

        /**
         * Title of the action.
         */
        public CharSequence title;

        /**
         * Intent to send when the user invokes this action. May be null, in which case the action
         * may be rendered in a disabled presentation by the system UI.
         */
        public PendingIntent actionIntent;

        private Action(Parcel in) {
            if (in.readInt() != 0) {
                mIcon = Icon.CREATOR.createFromParcel(in);
                if (mIcon.getType() == Icon.TYPE_RESOURCE) {
                    icon = mIcon.getResId();
                }
            }
            title = TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(in);
            if (in.readInt() == 1) {
                actionIntent = PendingIntent.CREATOR.createFromParcel(in);
            }
            mExtras = Bundle.setDefusable(in.readBundle(), true);
            mRemoteInputs = in.createTypedArray(RemoteInput.CREATOR);
            mAllowGeneratedReplies = in.readInt() == 1;
        }

        /**
         * @deprecated Use {@link android.app.Notification.Action.Builder}.
         */
        @Deprecated
        public Action(int icon, CharSequence title, PendingIntent intent) {
            this(Icon.createWithResource("", icon), title, intent, new Bundle(), null, true);
        }

        /** Keep in sync with {@link Notification.Action.Builder#Builder(Action)}! */
        private Action(Icon icon, CharSequence title, PendingIntent intent, Bundle extras,
                RemoteInput[] remoteInputs, boolean allowGeneratedReplies) {
            this.mIcon = icon;
            if (icon != null && icon.getType() == Icon.TYPE_RESOURCE) {
                this.icon = icon.getResId();
            }
            this.title = title;
            this.actionIntent = intent;
            this.mExtras = extras != null ? extras : new Bundle();
            this.mRemoteInputs = remoteInputs;
            this.mAllowGeneratedReplies = allowGeneratedReplies;
        }

        /**
         * Return an icon representing the action.
         */
        public Icon getIcon() {
            if (mIcon == null && icon != 0) {
                // you snuck an icon in here without using the builder; let's try to keep it
                mIcon = Icon.createWithResource("", icon);
            }
            return mIcon;
        }

        /**
         * Get additional metadata carried around with this Action.
         */
        public Bundle getExtras() {
            return mExtras;
        }

        /**
         * Return whether the platform should automatically generate possible replies for this
         * {@link Action}
         */
        public boolean getAllowGeneratedReplies() {
            return mAllowGeneratedReplies;
        }

        /**
         * Get the list of inputs to be collected from the user when this action is sent.
         * May return null if no remote inputs were added. Only returns inputs which accept
         * a text input. For inputs which only accept data use {@link #getDataOnlyRemoteInputs}.
         */
        public RemoteInput[] getRemoteInputs() {
            return mRemoteInputs;
        }

        /**
         * Get the list of inputs to be collected from the user that ONLY accept data when this
         * action is sent. These remote inputs are guaranteed to return true on a call to
         * {@link RemoteInput#isDataOnly}.
         *
         * Returns null if there are no data-only remote inputs.
         *
         * This method exists so that legacy RemoteInput collectors that pre-date the addition
         * of non-textual RemoteInputs do not access these remote inputs.
         */
        public RemoteInput[] getDataOnlyRemoteInputs() {
            return (RemoteInput[]) mExtras.getParcelableArray(EXTRA_DATA_ONLY_INPUTS);
        }

        /**
         * Builder class for {@link Action} objects.
         */
        public static final class Builder {
            private final Icon mIcon;
            private final CharSequence mTitle;
            private final PendingIntent mIntent;
            private boolean mAllowGeneratedReplies = true;
            private final Bundle mExtras;
            private ArrayList<RemoteInput> mRemoteInputs;

            /**
             * Construct a new builder for {@link Action} object.
             * @param icon icon to show for this action
             * @param title the title of the action
             * @param intent the {@link PendingIntent} to fire when users trigger this action
             */
            @Deprecated
            public Builder(int icon, CharSequence title, PendingIntent intent) {
                this(Icon.createWithResource("", icon), title, intent);
            }

            /**
             * Construct a new builder for {@link Action} object.
             * @param icon icon to show for this action
             * @param title the title of the action
             * @param intent the {@link PendingIntent} to fire when users trigger this action
             */
            public Builder(Icon icon, CharSequence title, PendingIntent intent) {
                this(icon, title, intent, new Bundle(), null, true);
            }

            /**
             * Construct a new builder for {@link Action} object using the fields from an
             * {@link Action}.
             * @param action the action to read fields from.
             */
            public Builder(Action action) {
                this(action.getIcon(), action.title, action.actionIntent,
                        new Bundle(action.mExtras), action.getRemoteInputs(),
                        action.getAllowGeneratedReplies());
            }

            private Builder(Icon icon, CharSequence title, PendingIntent intent, Bundle extras,
                    RemoteInput[] remoteInputs, boolean allowGeneratedReplies) {
                mIcon = icon;
                mTitle = title;
                mIntent = intent;
                mExtras = extras;
                if (remoteInputs != null) {
                    mRemoteInputs = new ArrayList<RemoteInput>(remoteInputs.length);
                    Collections.addAll(mRemoteInputs, remoteInputs);
                }
                mAllowGeneratedReplies = allowGeneratedReplies;
            }

            /**
             * Merge additional metadata into this builder.
             *
             * <p>Values within the Bundle will replace existing extras values in this Builder.
             *
             * @see Notification.Action#extras
             */
            public Builder addExtras(Bundle extras) {
                if (extras != null) {
                    mExtras.putAll(extras);
                }
                return this;
            }

            /**
             * Get the metadata Bundle used by this Builder.
             *
             * <p>The returned Bundle is shared with this Builder.
             */
            public Bundle getExtras() {
                return mExtras;
            }

            /**
             * Add an input to be collected from the user when this action is sent.
             * Response values can be retrieved from the fired intent by using the
             * {@link RemoteInput#getResultsFromIntent} function.
             * @param remoteInput a {@link RemoteInput} to add to the action
             * @return this object for method chaining
             */
            public Builder addRemoteInput(RemoteInput remoteInput) {
                if (mRemoteInputs == null) {
                    mRemoteInputs = new ArrayList<RemoteInput>();
                }
                mRemoteInputs.add(remoteInput);
                return this;
            }

            /**
             * Set whether the platform should automatically generate possible replies to add to
             * {@link RemoteInput#getChoices()}. If the {@link Action} doesn't have a
             * {@link RemoteInput}, this has no effect.
             * @param allowGeneratedReplies {@code true} to allow generated replies, {@code false}
             * otherwise
             * @return this object for method chaining
             * The default value is {@code true}
             */
            public Builder setAllowGeneratedReplies(boolean allowGeneratedReplies) {
                mAllowGeneratedReplies = allowGeneratedReplies;
                return this;
            }

            /**
             * Apply an extender to this action builder. Extenders may be used to add
             * metadata or change options on this builder.
             */
            public Builder extend(Extender extender) {
                extender.extend(this);
                return this;
            }

            /**
             * Combine all of the options that have been set and return a new {@link Action}
             * object.
             * @return the built action
             */
            public Action build() {
                ArrayList<RemoteInput> dataOnlyInputs = new ArrayList<>();
                RemoteInput[] previousDataInputs =
                    (RemoteInput[]) mExtras.getParcelableArray(EXTRA_DATA_ONLY_INPUTS);
                if (previousDataInputs != null) {
                    for (RemoteInput input : previousDataInputs) {
                        dataOnlyInputs.add(input);
                    }
                }
                List<RemoteInput> textInputs = new ArrayList<>();
                if (mRemoteInputs != null) {
                    for (RemoteInput input : mRemoteInputs) {
                        if (input.isDataOnly()) {
                            dataOnlyInputs.add(input);
                        } else {
                            textInputs.add(input);
                        }
                    }
                }
                if (!dataOnlyInputs.isEmpty()) {
                    RemoteInput[] dataInputsArr =
                            dataOnlyInputs.toArray(new RemoteInput[dataOnlyInputs.size()]);
                    mExtras.putParcelableArray(EXTRA_DATA_ONLY_INPUTS, dataInputsArr);
                }
                RemoteInput[] textInputsArr = textInputs.isEmpty()
                        ? null : textInputs.toArray(new RemoteInput[textInputs.size()]);
                return new Action(mIcon, mTitle, mIntent, mExtras, textInputsArr,
                        mAllowGeneratedReplies);
            }
        }

        @Override
        public Action clone() {
            return new Action(
                    getIcon(),
                    title,
                    actionIntent, // safe to alias
                    mExtras == null ? new Bundle() : new Bundle(mExtras),
                    getRemoteInputs(),
                    getAllowGeneratedReplies());
        }
        @Override
        public int describeContents() {
            return 0;
        }
        @Override
        public void writeToParcel(Parcel out, int flags) {
            final Icon ic = getIcon();
            if (ic != null) {
                out.writeInt(1);
                ic.writeToParcel(out, 0);
            } else {
                out.writeInt(0);
            }
            TextUtils.writeToParcel(title, out, flags);
            if (actionIntent != null) {
                out.writeInt(1);
                actionIntent.writeToParcel(out, flags);
            } else {
                out.writeInt(0);
            }
            out.writeBundle(mExtras);
            out.writeTypedArray(mRemoteInputs, flags);
            out.writeInt(mAllowGeneratedReplies ? 1 : 0);
        }
        public static final Parcelable.Creator<Action> CREATOR =
                new Parcelable.Creator<Action>() {
            public Action createFromParcel(Parcel in) {
                return new Action(in);
            }
            public Action[] newArray(int size) {
                return new Action[size];
            }
        };

        /**
         * Extender interface for use with {@link Builder#extend}. Extenders may be used to add
         * metadata or change options on an action builder.
         */
        public interface Extender {
            /**
             * Apply this extender to a notification action builder.
             * @param builder the builder to be modified.
             * @return the build object for chaining.
             */
            public Builder extend(Builder builder);
        }

        /**
         * Wearable extender for notification actions. To add extensions to an action,
         * create a new {@link android.app.Notification.Action.WearableExtender} object using
         * the {@code WearableExtender()} constructor and apply it to a
         * {@link android.app.Notification.Action.Builder} using
         * {@link android.app.Notification.Action.Builder#extend}.
         *
         * <pre class="prettyprint">
         * Notification.Action action = new Notification.Action.Builder(
         *         R.drawable.archive_all, "Archive all", actionIntent)
         *         .extend(new Notification.Action.WearableExtender()
         *                 .setAvailableOffline(false))
         *         .build();</pre>
         */
        public static final class WearableExtender implements Extender {
            /** Notification action extra which contains wearable extensions */
            private static final String EXTRA_WEARABLE_EXTENSIONS = "android.wearable.EXTENSIONS";

            // Keys within EXTRA_WEARABLE_EXTENSIONS for wearable options.
            private static final String KEY_FLAGS = "flags";
            private static final String KEY_IN_PROGRESS_LABEL = "inProgressLabel";
            private static final String KEY_CONFIRM_LABEL = "confirmLabel";
            private static final String KEY_CANCEL_LABEL = "cancelLabel";

            // Flags bitwise-ored to mFlags
            private static final int FLAG_AVAILABLE_OFFLINE = 0x1;
            private static final int FLAG_HINT_LAUNCHES_ACTIVITY = 1 << 1;
            private static final int FLAG_HINT_DISPLAY_INLINE = 1 << 2;

            // Default value for flags integer
            private static final int DEFAULT_FLAGS = FLAG_AVAILABLE_OFFLINE;

            private int mFlags = DEFAULT_FLAGS;

            private CharSequence mInProgressLabel;
            private CharSequence mConfirmLabel;
            private CharSequence mCancelLabel;

            /**
             * Create a {@link android.app.Notification.Action.WearableExtender} with default
             * options.
             */
            public WearableExtender() {
            }

            /**
             * Create a {@link android.app.Notification.Action.WearableExtender} by reading
             * wearable options present in an existing notification action.
             * @param action the notification action to inspect.
             */
            public WearableExtender(Action action) {
                Bundle wearableBundle = action.getExtras().getBundle(EXTRA_WEARABLE_EXTENSIONS);
                if (wearableBundle != null) {
                    mFlags = wearableBundle.getInt(KEY_FLAGS, DEFAULT_FLAGS);
                    mInProgressLabel = wearableBundle.getCharSequence(KEY_IN_PROGRESS_LABEL);
                    mConfirmLabel = wearableBundle.getCharSequence(KEY_CONFIRM_LABEL);
                    mCancelLabel = wearableBundle.getCharSequence(KEY_CANCEL_LABEL);
                }
            }

            /**
             * Apply wearable extensions to a notification action that is being built. This is
             * typically called by the {@link android.app.Notification.Action.Builder#extend}
             * method of {@link android.app.Notification.Action.Builder}.
             */
            @Override
            public Action.Builder extend(Action.Builder builder) {
                Bundle wearableBundle = new Bundle();

                if (mFlags != DEFAULT_FLAGS) {
                    wearableBundle.putInt(KEY_FLAGS, mFlags);
                }
                if (mInProgressLabel != null) {
                    wearableBundle.putCharSequence(KEY_IN_PROGRESS_LABEL, mInProgressLabel);
                }
                if (mConfirmLabel != null) {
                    wearableBundle.putCharSequence(KEY_CONFIRM_LABEL, mConfirmLabel);
                }
                if (mCancelLabel != null) {
                    wearableBundle.putCharSequence(KEY_CANCEL_LABEL, mCancelLabel);
                }

                builder.getExtras().putBundle(EXTRA_WEARABLE_EXTENSIONS, wearableBundle);
                return builder;
            }

            @Override
            public WearableExtender clone() {
                WearableExtender that = new WearableExtender();
                that.mFlags = this.mFlags;
                that.mInProgressLabel = this.mInProgressLabel;
                that.mConfirmLabel = this.mConfirmLabel;
                that.mCancelLabel = this.mCancelLabel;
                return that;
            }

            /**
             * Set whether this action is available when the wearable device is not connected to
             * a companion device. The user can still trigger this action when the wearable device is
             * offline, but a visual hint will indicate that the action may not be available.
             * Defaults to true.
             */
            public WearableExtender setAvailableOffline(boolean availableOffline) {
                setFlag(FLAG_AVAILABLE_OFFLINE, availableOffline);
                return this;
            }

            /**
             * Get whether this action is available when the wearable device is not connected to
             * a companion device. The user can still trigger this action when the wearable device is
             * offline, but a visual hint will indicate that the action may not be available.
             * Defaults to true.
             */
            public boolean isAvailableOffline() {
                return (mFlags & FLAG_AVAILABLE_OFFLINE) != 0;
            }

            private void setFlag(int mask, boolean value) {
                if (value) {
                    mFlags |= mask;
                } else {
                    mFlags &= ~mask;
                }
            }

            /**
             * Set a label to display while the wearable is preparing to automatically execute the
             * action. This is usually a 'ing' verb ending in ellipsis like "Sending..."
             *
             * @param label the label to display while the action is being prepared to execute
             * @return this object for method chaining
             */
            public WearableExtender setInProgressLabel(CharSequence label) {
                mInProgressLabel = label;
                return this;
            }

            /**
             * Get the label to display while the wearable is preparing to automatically execute
             * the action. This is usually a 'ing' verb ending in ellipsis like "Sending..."
             *
             * @return the label to display while the action is being prepared to execute
             */
            public CharSequence getInProgressLabel() {
                return mInProgressLabel;
            }

            /**
             * Set a label to display to confirm that the action should be executed.
             * This is usually an imperative verb like "Send".
             *
             * @param label the label to confirm the action should be executed
             * @return this object for method chaining
             */
            public WearableExtender setConfirmLabel(CharSequence label) {
                mConfirmLabel = label;
                return this;
            }

            /**
             * Get the label to display to confirm that the action should be executed.
             * This is usually an imperative verb like "Send".
             *
             * @return the label to confirm the action should be executed
             */
            public CharSequence getConfirmLabel() {
                return mConfirmLabel;
            }

            /**
             * Set a label to display to cancel the action.
             * This is usually an imperative verb, like "Cancel".
             *
             * @param label the label to display to cancel the action
             * @return this object for method chaining
             */
            public WearableExtender setCancelLabel(CharSequence label) {
                mCancelLabel = label;
                return this;
            }

            /**
             * Get the label to display to cancel the action.
             * This is usually an imperative verb like "Cancel".
             *
             * @return the label to display to cancel the action
             */
            public CharSequence getCancelLabel() {
                return mCancelLabel;
            }

            /**
             * Set a hint that this Action will launch an {@link Activity} directly, telling the
             * platform that it can generate the appropriate transitions.
             * @param hintLaunchesActivity {@code true} if the content intent will launch
             * an activity and transitions should be generated, false otherwise.
             * @return this object for method chaining
             */
            public WearableExtender setHintLaunchesActivity(
                    boolean hintLaunchesActivity) {
                setFlag(FLAG_HINT_LAUNCHES_ACTIVITY, hintLaunchesActivity);
                return this;
            }

            /**
             * Get a hint that this Action will launch an {@link Activity} directly, telling the
             * platform that it can generate the appropriate transitions
             * @return {@code true} if the content intent will launch an activity and transitions
             * should be generated, false otherwise. The default value is {@code false} if this was
             * never set.
             */
            public boolean getHintLaunchesActivity() {
                return (mFlags & FLAG_HINT_LAUNCHES_ACTIVITY) != 0;
            }

            /**
             * Set a hint that this Action should be displayed inline.
             *
             * @param hintDisplayInline {@code true} if action should be displayed inline, false
             *        otherwise
             * @return this object for method chaining
             */
            public WearableExtender setHintDisplayActionInline(
                    boolean hintDisplayInline) {
                setFlag(FLAG_HINT_DISPLAY_INLINE, hintDisplayInline);
                return this;
            }

            /**
             * Get a hint that this Action should be displayed inline.
             *
             * @return {@code true} if the Action should be displayed inline, {@code false}
             *         otherwise. The default value is {@code false} if this was never set.
             */
            public boolean getHintDisplayActionInline() {
                return (mFlags & FLAG_HINT_DISPLAY_INLINE) != 0;
            }
        }
    }

    /**
     * Array of all {@link Action} structures attached to this notification by
     * {@link Builder#addAction(int, CharSequence, PendingIntent)}. Mostly useful for instances of
     * {@link android.service.notification.NotificationListenerService} that provide an alternative
     * interface for invoking actions.
     */
    public Action[] actions;

    /**
     * Replacement version of this notification whose content will be shown
     * in an insecure context such as atop a secure keyguard. See {@link #visibility}
     * and {@link #VISIBILITY_PUBLIC}.
     */
    public Notification publicVersion;

    /**
     * Constructs a Notification object with default values.
     * You might want to consider using {@link Builder} instead.
     */
    public Notification()
    {
        this.when = System.currentTimeMillis();
        this.creationTime = System.currentTimeMillis();
        this.priority = PRIORITY_DEFAULT;
    }

    /**
     * @hide
     */
    public Notification(Context context, int icon, CharSequence tickerText, long when,
            CharSequence contentTitle, CharSequence contentText, Intent contentIntent)
    {
        new Builder(context)
                .setWhen(when)
                .setSmallIcon(icon)
                .setTicker(tickerText)
                .setContentTitle(contentTitle)
                .setContentText(contentText)
                .setContentIntent(PendingIntent.getActivity(context, 0, contentIntent, 0))
                .buildInto(this);
    }

    /**
     * Constructs a Notification object with the information needed to
     * have a status bar icon without the standard expanded view.
     *
     * @param icon          The resource id of the icon to put in the status bar.
     * @param tickerText    The text that flows by in the status bar when the notification first
     *                      activates.
     * @param when          The time to show in the time field.  In the System.currentTimeMillis
     *                      timebase.
     *
     * @deprecated Use {@link Builder} instead.
     */
    @Deprecated
    public Notification(int icon, CharSequence tickerText, long when)
    {
        this.icon = icon;
        this.tickerText = tickerText;
        this.when = when;
        this.creationTime = System.currentTimeMillis();
    }

    /**
     * Unflatten the notification from a parcel.
     */
    @SuppressWarnings("unchecked"

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\VrManager.java
Method: 
Permission: android.Manifest.permission.RESTRICTED_VR_ACCESS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\VrManager.java
Method: 
Permission: android.Manifest.permission.RESTRICTED_VR_ACCESS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\WallpaperManager.java
Method: 
Permission: android.Manifest.permission.SET_WALLPAPER_HINTS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\WallpaperManager.java
Method: 
Permission: android.Manifest.permission.SET_WALLPAPER

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\WallpaperManager.java
Method: 
Permission: android.Manifest.permission.SET_WALLPAPER

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\WallpaperManager.java
Method: 
Permission: android.Manifest.permission.SET_WALLPAPER_COMPONENT

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\admin\DevicePolicyManager.java
Method: 
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS_FULL

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\admin\DevicePolicyManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\admin\DevicePolicyManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\admin\DevicePolicyManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\admin\DevicePolicyManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_DEVICE_ADMINS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\admin\DevicePolicyManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\admin\DevicePolicyManager.java
Method: 
Permission: android.Manifest.permission.NOTIFY_PENDING_SYSTEM_UPDATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\admin\DevicePolicyManager.java
Method: 
Permission: android.Manifest.permission.NOTIFY_PENDING_SYSTEM_UPDATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\admin\DevicePolicyManager.java
Method: 
Permission: allOf = {
     *       Manifest.permission.MANAGE_USERS,
     *       Manifest.permission.INTERACT_ACROSS_USERS_FULL})
     */
    public void setOrganizationColorForUser(@ColorInt int color, @UserIdInt int userId) {
        try {
            // always enforce alpha channel to have 100% opacity
            color |= 0xFF000000;
            mService.setOrganizationColorForUser(color, userId);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
    }

    /**
     * Called by a profile owner of a managed profile to retrieve the color used for customization.
     * This color is used as background color of the confirm credentials screen for that user.
     *
     * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
     * @return The 24bit (0xRRGGBB) representation of the color to be used.
     * @throws SecurityException if {@code admin} is not a profile owner.
     */
    public @ColorInt int getOrganizationColor(@NonNull ComponentName admin) {
        throwIfParentInstance("getOrganizationColor");
        try {
            return mService.getOrganizationColor(admin);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
    }

    /**
     * @hide
     * Retrieve the customization color for a given user.
     *
     * @param userHandle The user id of the user we're interested in.
     * @return The 24bit (0xRRGGBB) representation of the color to be used.
     */
    public @ColorInt int getOrganizationColorForUser(int userHandle) {
        try {
            return mService.getOrganizationColorForUser(userHandle);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
    }

    /**
     * Called by the device owner or profile owner to set the name of the organization under
     * management.
     * <p>
     * If the organization name needs to be localized, it is the responsibility of the
     * {@link DeviceAdminReceiver} to listen to the {@link Intent#ACTION_LOCALE_CHANGED} broadcast
     * and set a new version of this string accordingly.
     *
     * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
     * @param title The organization name or {@code null} to clear a previously set name.
     * @throws SecurityException if {@code admin} is not a device or profile owner.
     */
    public void setOrganizationName(@NonNull ComponentName admin, @Nullable CharSequence title) {
        throwIfParentInstance("setOrganizationName");
        try {
            mService.setOrganizationName(admin, title);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
    }

    /**
     * Called by a profile owner of a managed profile to retrieve the name of the organization under
     * management.
     *
     * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
     * @return The organization name or {@code null} if none is set.
     * @throws SecurityException if {@code admin} is not a profile owner.
     */
    public @Nullable CharSequence getOrganizationName(@NonNull ComponentName admin) {
        throwIfParentInstance("getOrganizationName");
        try {
            return mService.getOrganizationName(admin);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
    }

    /**
     * Called by the system to retrieve the name of the organization managing the device.
     *
     * @return The organization name or {@code null} if none is set.
     * @throws SecurityException if the caller is not the device owner, does not hold the
     *         MANAGE_USERS permission and is not the system.
     *
     * @hide
     */
    @SystemApi
    @TestApi
    @SuppressLint("Doclava125"

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\admin\DevicePolicyManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\admin\DevicePolicyManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: 
Permission: android.Manifest.permission.BACKUP

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: 
Permission: android.Manifest.permission.BACKUP

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: 
Permission: android.Manifest.permission.BACKUP

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: 
Permission: android.Manifest.permission.BACKUP

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: 
Permission: android.Manifest.permission.BACKUP

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: 
Permission: android.Manifest.permission.BACKUP

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: 
Permission: android.Manifest.permission.BACKUP

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: 
Permission: android.Manifest.permission.BACKUP

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: 
Permission: android.Manifest.permission.BACKUP

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: 
Permission: android.Manifest.permission.BACKUP

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: 
Permission: android.Manifest.permission.BACKUP

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: 
Permission: android.Manifest.permission.BACKUP

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: 
Permission: android.Manifest.permission.BACKUP

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: 
Permission: android.Manifest.permission.BACKUP

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\job\JobInfo.java
Method: 
Permission: android.Manifest.permission.RECEIVE_BOOT_COMPLETED

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\job\JobScheduler.java
Method: 
Permission: android.Manifest.permission.UPDATE_DEVICE_STATS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\trust\TrustManager.java
Method: 
Permission: Manifest.permission.ACCESS_KEYGUARD_SECURE_STORAGE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\trust\TrustManager.java
Method: 
Permission: android.Manifest.permission.TRUST_LISTENER

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\app\usage\UsageStatsManager.java
Method: 
Permission: android.Manifest.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothA2dp.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: 
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: 
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: 
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: 
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: 
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: 
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: 
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: 
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothDevice.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothDevice.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothDevice.java
Method: 
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothDevice.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothDevice.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothDevice.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothDevice.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothDevice.java
Method: 
Permission: Manifest.permission.BLUETOOTH_PRIVILEGED

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothDevice.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothDevice.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothManager.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothManager.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothManager.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothProfile.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothProfile.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothProfile.java
Method: 
Permission: Manifest.permission.BLUETOOTH

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\le\BluetoothLeScanner.java
Method: 
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\le\BluetoothLeScanner.java
Method: 
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\le\BluetoothLeScanner.java
Method: 
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\le\BluetoothLeScanner.java
Method: 
Permission: allOf = {
            Manifest.permission.BLUETOOTH_ADMIN, Manifest.permission.UPDATE_DEVICE_STATS }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\le\BluetoothLeScanner.java
Method: 
Permission: allOf = {
            Manifest.permission.BLUETOOTH_ADMIN, Manifest.permission.UPDATE_DEVICE_STATS }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\le\BluetoothLeScanner.java
Method: 
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\bluetooth\le\BluetoothLeScanner.java
Method: 
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS_FULL

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS_FULL

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS_FULL

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: android.Manifest.permission.BROADCAST_STICKY

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: android.Manifest.permission.BROADCAST_STICKY

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: android.Manifest.permission.BROADCAST_STICKY

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: allOf = {
            android.Manifest.permission.INTERACT_ACROSS_USERS,
            android.Manifest.permission.BROADCAST_STICKY
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: allOf = {
            android.Manifest.permission.INTERACT_ACROSS_USERS,
            android.Manifest.permission.BROADCAST_STICKY
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: allOf = {
            android.Manifest.permission.INTERACT_ACROSS_USERS,
            android.Manifest.permission.BROADCAST_STICKY
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: allOf = {
            android.Manifest.permission.INTERACT_ACROSS_USERS,
            android.Manifest.permission.BROADCAST_STICKY
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS_FULL

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: 
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageInstaller.java
Method: 
Permission: anyOf = {
            Manifest.permission.DELETE_PACKAGES,
            Manifest.permission.REQUEST_DELETE_PACKAGES}

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageInstaller.java
Method: 
Permission: android.Manifest.permission.INSTALL_PACKAGES

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageInstaller.java
Method: 
Permission: android.Manifest.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageInstaller.java
Method: 
Permission: android.Manifest.permission.ALLOCATE_AGGRESSIVE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: 
Permission: Manifest.permission.INTERACT_ACROSS_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: 
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS_FULL

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: 
Permission: android.Manifest.permission.GRANT_RUNTIME_PERMISSIONS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: 
Permission: android.Manifest.permission.REVOKE_RUNTIME_PERMISSIONS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: 
Permission: anyOf = {
            android.Manifest.permission.GRANT_RUNTIME_PERMISSIONS,
            android.Manifest.permission.REVOKE_RUNTIME_PERMISSIONS
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: 
Permission: anyOf = {
            android.Manifest.permission.GRANT_RUNTIME_PERMISSIONS,
            android.Manifest.permission.REVOKE_RUNTIME_PERMISSIONS
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: 
Permission: Manifest.permission.ACCESS_INSTANT_APPS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: 
Permission: Manifest.permission.ACCESS_INSTANT_APPS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: 
Permission: anyOf = {
            Manifest.permission.INSTALL_PACKAGES,
            Manifest.permission.INTERACT_ACROSS_USERS_FULL}

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: 
Permission: android.Manifest.permission.INTENT_FILTER_VERIFICATION_AGENT

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: 
Permission: android.Manifest.permission.SET_PREFERRED_APPLICATIONS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: 
Permission: android.Manifest.permission.SET_PREFERRED_APPLICATIONS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: 
Permission: Manifest.permission.INSTALL_PACKAGES

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: 
Permission: Manifest.permission.DELETE_PACKAGES

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: 
Permission: anyOf = {
            Manifest.permission.DELETE_PACKAGES,
            Manifest.permission.INTERACT_ACROSS_USERS_FULL}

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: 
Permission: Manifest.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: 
Permission: Manifest.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\camera2\CameraManager.java
Method: 
Permission: android.Manifest.permission.CAMERA

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: 
Permission: USE_FINGERPRINT

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: 
Permission: USE_FINGERPRINT

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: 
Permission: MANAGE_FINGERPRINT

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: 
Permission: MANAGE_FINGERPRINT

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: 
Permission: MANAGE_FINGERPRINT

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: 
Permission: MANAGE_FINGERPRINT

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: 
Permission: MANAGE_FINGERPRINT

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: 
Permission: MANAGE_FINGERPRINT

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: 
Permission: MANAGE_FINGERPRINT

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: 
Permission: USE_FINGERPRINT

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: 
Permission: USE_FINGERPRINT

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: 
Permission: USE_FINGERPRINT

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: 
Permission: allOf = {
            USE_FINGERPRINT,
            INTERACT_ACROSS_USERS}

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: 
Permission: USE_FINGERPRINT

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\hdmi\HdmiControlManager.java
Method: 
Permission: android.Manifest.permission.HDMI_CEC

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\hdmi\HdmiControlManager.java
Method: 
Permission: android.Manifest.permission.HDMI_CEC

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\hdmi\HdmiControlManager.java
Method: 
Permission: android.Manifest.permission.HDMI_CEC

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\location\ContextHubManager.java
Method: 
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\location\ContextHubManager.java
Method: 
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\location\ContextHubManager.java
Method: 
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\location\ContextHubManager.java
Method: 
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\location\ContextHubManager.java
Method: 
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\location\ContextHubManager.java
Method: 
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\hardware\location\ContextHubManager.java
Method: 
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: ACCESS_FINE_LOCATION

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: ACCESS_FINE_LOCATION

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: ACCESS_FINE_LOCATION

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: ACCESS_FINE_LOCATION

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: ACCESS_FINE_LOCATION

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: ACCESS_FINE_LOCATION

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: ACCESS_FINE_LOCATION

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: ACCESS_FINE_LOCATION

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: ACCESS_FINE_LOCATION

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: ACCESS_FINE_LOCATION

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: Manifest.permission.LOCATION_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: Manifest.permission.LOCATION_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: Manifest.permission.LOCATION_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: 
Permission: Manifest.permission.LOCATION_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\AudioManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_AUDIO_ROUTING

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\AudioManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_AUDIO_ROUTING

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\RingtoneManager.java
Method: 
Permission: Manifest.permission.WRITE_SECURE_SETTINGS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\session\MediaSessionManager.java
Method: 
Permission: android.Manifest.permission.SET_VOLUME_KEY_LONG_PRESS_LISTENER

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\session\MediaSessionManager.java
Method: 
Permission: android.Manifest.permission.SET_MEDIA_KEY_LISTENER

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\soundtrigger\SoundTriggerDetector.java
Method: 
Permission: android.Manifest.permission.MANAGE_SOUND_TRIGGER

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\soundtrigger\SoundTriggerDetector.java
Method: 
Permission: android.Manifest.permission.MANAGE_SOUND_TRIGGER

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\soundtrigger\SoundTriggerManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_SOUND_TRIGGER

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\soundtrigger\SoundTriggerManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_SOUND_TRIGGER

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\soundtrigger\SoundTriggerManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_SOUND_TRIGGER

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\soundtrigger\SoundTriggerManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_SOUND_TRIGGER

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PARENTAL_CONTROLS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PARENTAL_CONTROLS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PARENTAL_CONTROLS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: 
Permission: android.Manifest.permission.NOTIFY_TV_INPUTS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: 
Permission: android.Manifest.permission.NOTIFY_TV_INPUTS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: 
Permission: android.Manifest.permission.NOTIFY_TV_INPUTS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: 
Permission: android.Manifest.permission.CAPTURE_TV_INPUT

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: 
Permission: android.Manifest.permission.CAPTURE_TV_INPUT

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: 
Permission: android.Manifest.permission.TV_INPUT_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: 
Permission: android.Manifest.permission.TV_INPUT_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: 
Permission: android.Manifest.permission.TV_INPUT_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: 
Permission: android.Manifest.permission.TV_INPUT_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\media\tv\TvView.java
Method: 
Permission: android.Manifest.permission.MODIFY_PARENTAL_CONTROLS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.CONNECTIVITY_INTERNAL

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.CONNECTIVITY_INTERNAL

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.TETHER_PRIVILEGED

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.TETHER_PRIVILEGED

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.CONNECTIVITY_INTERNAL

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.CONNECTIVITY_INTERNAL

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.CONNECTIVITY_INTERNAL

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.CONNECTIVITY_INTERNAL

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.CONNECTIVITY_INTERNAL

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\NetworkScoreManager.java
Method: 
Permission: android.Manifest.permission.REQUEST_NETWORK_SCORES

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\NetworkScoreManager.java
Method: 
Permission: android.Manifest.permission.SCORE_NETWORKS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\NetworkScoreManager.java
Method: 
Permission: android.Manifest.permission.REQUEST_NETWORK_SCORES

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\NetworkScoreManager.java
Method: 
Permission: android.Manifest.permission.SCORE_NETWORKS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\NetworkScoreManager.java
Method: 
Permission: android.Manifest.permission.REQUEST_NETWORK_SCORES

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\TrafficStats.java
Method: 
Permission: android.Manifest.permission.UPDATE_DEVICE_STATS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\TrafficStats.java
Method: 
Permission: android.Manifest.permission.UPDATE_DEVICE_STATS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\VpnService.java
Method: 
Permission: android.Manifest.permission.CONTROL_VPN

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\wifi\RttManager.java
Method: 
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\wifi\RttManager.java
Method: 
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\wifi\RttManager.java
Method: 
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\wifi\RttManager.java
Method: 
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiManager.java
Method: 
Permission: android.Manifest.permission.READ_WIFI_CREDENTIAL

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiManager.java
Method: 
Permission: android.Manifest.permission.READ_WIFI_CREDENTIAL

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiManager.java
Method: 
Permission: android.Manifest.permission.UPDATE_DEVICE_STATS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiManager.java
Method: 
Permission: android.Manifest.permission.TETHER_PRIVILEGED

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_WIFI_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_WIFI_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_WIFI_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiManager.java
Method: 
Permission: android.Manifest.permission.CHANGE_WIFI_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiScanner.java
Method: 
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiScanner.java
Method: 
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiScanner.java
Method: 
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiScanner.java
Method: 
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiScanner.java
Method: 
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiScanner.java
Method: 
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiScanner.java
Method: 
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\nfc\NfcAdapter.java
Method: 
Permission: android.Manifest.permission.WRITE_SECURE_SETTINGS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\nfc\NfcAdapter.java
Method: 
Permission: android.Manifest.permission.WRITE_SECURE_SETTINGS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\nfc\NfcAdapter.java
Method: 
Permission: android.Manifest.permission.WRITE_SECURE_SETTINGS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\nfc\NfcAdapter.java
Method: 
Permission: android.Manifest.permission.WRITE_SECURE_SETTINGS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\nfc\NfcAdapter.java
Method: 
Permission: android.Manifest.permission.WRITE_SECURE_SETTINGS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\nfc\NfcAdapter.java
Method: 
Permission: android.Manifest.permission.WRITE_SECURE_SETTINGS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\nfc\NfcAdapter.java
Method: 
Permission: android.Manifest.permission.WRITE_SECURE_SETTINGS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\Build.java
Method: 
Permission: Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\IncidentManager.java
Method: 
Permission: allOf = {
            android.Manifest.permission.DUMP,
            android.Manifest.permission.PACKAGE_USAGE_STATS
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\IncidentManager.java
Method: 
Permission: allOf = {
            android.Manifest.permission.DUMP,
            android.Manifest.permission.PACKAGE_USAGE_STATS
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\PowerManager.java
Method: 
Permission: anyOf = {
            android.Manifest.permission.DEVICE_POWER,
            android.Manifest.permission.USER_ACTIVITY
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\RecoverySystem.java
Method: 
Permission: android.Manifest.permission.RECOVERY

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\RecoverySystem.java
Method: 
Permission: android.Manifest.permission.RECOVERY

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\RecoverySystem.java
Method: 
Permission: android.Manifest.permission.RECOVERY

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\RecoverySystem.java
Method: 
Permission: android.Manifest.permission.RECOVERY

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\RecoverySystem.java
Method: 
Permission: android.Manifest.permission.RECOVERY

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\RecoverySystem.java
Method: 
Permission: android.Manifest.permission.RECOVERY

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\RecoverySystem.java
Method: 
Permission: allOf = {
            android.Manifest.permission.RECOVERY,
            android.Manifest.permission.REBOOT
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\UserManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\UserManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\UserManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\UserManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\UserManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\UserManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\UserManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\UserManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\UserManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_USERS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\UserManager.java
Method: 
Permission:  allOf = {
            Manifest.permission.INTERACT_ACROSS_USERS_FULL,
            Manifest.permission.MANAGE_USERS
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\UserManager.java
Method: 
Permission:  allOf = {
            Manifest.permission.INTERACT_ACROSS_USERS_FULL,
            Manifest.permission.MANAGE_USERS
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\Vibrator.java
Method: 
Permission: android.Manifest.permission.VIBRATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\Vibrator.java
Method: 
Permission: android.Manifest.permission.VIBRATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\Vibrator.java
Method: 
Permission: android.Manifest.permission.VIBRATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\Vibrator.java
Method: 
Permission: android.Manifest.permission.VIBRATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\Vibrator.java
Method: 
Permission: android.Manifest.permission.VIBRATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\Vibrator.java
Method: 
Permission: android.Manifest.permission.VIBRATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\Vibrator.java
Method: 
Permission: android.Manifest.permission.VIBRATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\Vibrator.java
Method: 
Permission: android.Manifest.permission.VIBRATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\os\storage\StorageManager.java
Method: 
Permission: android.Manifest.permission.ALLOCATE_AGGRESSIVE)
    @SystemApi
    public static final int FLAG_ALLOCATE_AGGRESSIVE = 1 << 0;

    /**
     * Flag indicating that a disk space allocation request should defy any
     * reserved disk space.
     *
     * @hide
     */
    public static final int FLAG_ALLOCATE_DEFY_RESERVED = 1 << 1;

    /** @hide */
    @IntDef(flag = true, value = {
            FLAG_ALLOCATE_AGGRESSIVE,
            FLAG_ALLOCATE_DEFY_RESERVED,
    })
    @Retention(RetentionPolicy.SOURCE)
    public @interface AllocateFlags {}

    /**
     * Return the maximum number of new bytes that your app can allocate for
     * itself on the given storage volume. This value is typically larger than
     * {@link File#getUsableSpace()}, since the system may be willing to delete
     * cached files to satisfy an allocation request. You can then allocate
     * space for yourself using {@link #allocateBytes(UUID, long, int)} or
     * {@link #allocateBytes(FileDescriptor, long, int)}.
     * <p>
     * This method is best used as a pre-flight check, such as deciding if there
     * is enough space to store an entire music album before you allocate space
     * for each audio file in the album. Attempts to allocate disk space beyond
     * the returned value will fail.
     * <p>
     * If the returned value is not large enough for the data you'd like to
     * persist, you can launch {@link #ACTION_MANAGE_STORAGE} with the
     * {@link #EXTRA_UUID} and {@link #EXTRA_REQUESTED_BYTES} options to help
     * involve the user in freeing up disk space.
     * <p>
     * If you're progressively allocating an unbounded amount of storage space
     * (such as when recording a video) you should avoid calling this method
     * more than once every 30 seconds.
     * <p class="note">
     * Note: if your app uses the {@code android:sharedUserId} manifest feature,
     * then allocatable space for all packages in your shared UID is tracked
     * together as a single unit.
     * </p>
     *
     * @param storageUuid the UUID of the storage volume where you're
     *            considering allocating disk space, since allocatable space can
     *            vary widely depending on the underlying storage device. The
     *            UUID for a specific path can be obtained using
     *            {@link #getUuidForPath(File)}.
     * @return the maximum number of new bytes that the calling app can allocate
     *         using {@link #allocateBytes(UUID, long, int)} or
     *         {@link #allocateBytes(FileDescriptor, long, int)}.
     * @throws IOException when the storage device isn't present, or when it
     *             doesn't support allocating space.
     */
    @WorkerThread
    public @BytesLong long getAllocatableBytes(@NonNull UUID storageUuid)
            throws IOException {
        return getAllocatableBytes(storageUuid, 0);
    }

    /** @hide */
    @SystemApi
    @WorkerThread
    @SuppressLint("Doclava125"

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\provider\Settings.java
Method: 
Permission: Manifest.permission.WRITE_SECURE_SETTINGS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\provider\Settings.java
Method: 
Permission: Manifest.permission.WRITE_SECURE_SETTINGS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\provider\Settings.java
Method: 
Permission: Manifest.permission.WRITE_SECURE_SETTINGS)
        public static final String SYNC_PARENT_SOUNDS = "sync_parent_sounds";

        /** @hide */
        public static final String IMMERSIVE_MODE_CONFIRMATIONS = "immersive_mode_confirmations";

        /**
         * This is the query URI for finding a print service to install.
         *
         * @hide
         */
        public static final String PRINT_SERVICE_SEARCH_URI = "print_service_search_uri";

        /**
         * This is the query URI for finding a NFC payment service to install.
         *
         * @hide
         */
        public static final String PAYMENT_SERVICE_SEARCH_URI = "payment_service_search_uri";

        /**
         * This is the query URI for finding a auto fill service to install.
         *
         * @hide
         */
        public static final String AUTOFILL_SERVICE_SEARCH_URI = "autofill_service_search_uri";

        /**
         * If enabled, apps should try to skip any introductory hints on first launch. This might
         * apply to users that are already familiar with the environment or temporary users.
         * <p>
         * Type : int (0 to show hints, 1 to skip showing hints)
         */
        public static final String SKIP_FIRST_USE_HINTS = "skip_first_use_hints";

        /**
         * Persisted playback time after a user confirmation of an unsafe volume level.
         *
         * @hide
         */
        public static final String UNSAFE_VOLUME_MUSIC_ACTIVE_MS = "unsafe_volume_music_active_ms";

        /**
         * This preference enables notification display on the lockscreen.
         * @hide
         */
        public static final String LOCK_SCREEN_SHOW_NOTIFICATIONS =
                "lock_screen_show_notifications";

        /**
         * This preference stores the last stack active task time for each user, which affects what
         * tasks will be visible in Overview.
         * @hide
         */
        public static final String OVERVIEW_LAST_STACK_ACTIVE_TIME =
                "overview_last_stack_active_time";

        /**
         * List of TV inputs that are currently hidden. This is a string
         * containing the IDs of all hidden TV inputs. Each ID is encoded by
         * {@link android.net.Uri#encode(String)} and separated by ':'.
         * @hide
         */
        public static final String TV_INPUT_HIDDEN_INPUTS = "tv_input_hidden_inputs";

        /**
         * List of custom TV input labels. This is a string containing <TV input id, custom name>
         * pairs. TV input id and custom name are encoded by {@link android.net.Uri#encode(String)}
         * and separated by ','. Each pair is separated by ':'.
         * @hide
         */
        public static final String TV_INPUT_CUSTOM_LABELS = "tv_input_custom_labels";

        /**
         * Whether automatic routing of system audio to USB audio peripheral is disabled.
         * The value is boolean (1 or 0), where 1 means automatic routing is disabled,
         * and 0 means automatic routing is enabled.
         *
         * @hide
         */
        public static final String USB_AUDIO_AUTOMATIC_ROUTING_DISABLED =
                "usb_audio_automatic_routing_disabled";

        /**
         * The timeout in milliseconds before the device fully goes to sleep after
         * a period of inactivity.  This value sets an upper bound on how long the device
         * will stay awake or dreaming without user activity.  It should generally
         * be longer than {@link Settings.System#SCREEN_OFF_TIMEOUT} as otherwise the device
         * will sleep before it ever has a chance to dream.
         * <p>
         * Use -1 to disable this timeout.
         * </p>
         *
         * @hide
         */
        public static final String SLEEP_TIMEOUT = "sleep_timeout";

        /**
         * Controls whether double tap to wake is enabled.
         * @hide
         */
        public static final String DOUBLE_TAP_TO_WAKE = "double_tap_to_wake";

        /**
         * The current assistant component. It could be a voice interaction service,
         * or an activity that handles ACTION_ASSIST, or empty which means using the default
         * handling.
         *
         * @hide
         */
        public static final String ASSISTANT = "assistant";

        /**
         * Whether the camera launch gesture should be disabled.
         *
         * @hide
         */
        public static final String CAMERA_GESTURE_DISABLED = "camera_gesture_disabled";

        /**
         * Whether the camera launch gesture to double tap the power button when the screen is off
         * should be disabled.
         *
         * @hide
         */
        public static final String CAMERA_DOUBLE_TAP_POWER_GESTURE_DISABLED =
                "camera_double_tap_power_gesture_disabled";

        /**
         * Whether the camera double twist gesture to flip between front and back mode should be
         * enabled.
         *
         * @hide
         */
        public static final String CAMERA_DOUBLE_TWIST_TO_FLIP_ENABLED =
                "camera_double_twist_to_flip_enabled";

        /**
         * Whether the assist gesture should be enabled.
         *
         * @hide
         */
        public static final String ASSIST_GESTURE_ENABLED = "assist_gesture_enabled";

        /**
         * Sensitivity control for the assist gesture.
         *
         * @hide
         */
        public static final String ASSIST_GESTURE_SENSITIVITY = "assist_gesture_sensitivity";

        /**
         * Control whether Night display is currently activated.
         * @hide
         */
        public static final String NIGHT_DISPLAY_ACTIVATED = "night_display_activated";

        /**
         * Control whether Night display will automatically activate/deactivate.
         * @hide
         */
        public static final String NIGHT_DISPLAY_AUTO_MODE = "night_display_auto_mode";

        /**
         * Control the color temperature of Night Display, represented in Kelvin.
         * @hide
         */
        public static final String NIGHT_DISPLAY_COLOR_TEMPERATURE =
                "night_display_color_temperature";

        /**
         * Custom time when Night display is scheduled to activate.
         * Represented as milliseconds from midnight (e.g. 79200000 == 10pm).
         * @hide
         */
        public static final String NIGHT_DISPLAY_CUSTOM_START_TIME =
                "night_display_custom_start_time";

        /**
         * Custom time when Night display is scheduled to deactivate.
         * Represented as milliseconds from midnight (e.g. 21600000 == 6am).
         * @hide
         */
        public static final String NIGHT_DISPLAY_CUSTOM_END_TIME = "night_display_custom_end_time";

        /**
         * Time in milliseconds (since epoch) when Night display was last activated. Use to decide
         * whether to apply the current activated state after a reboot or user change.
         * @hide
         */
        public static final String NIGHT_DISPLAY_LAST_ACTIVATED_TIME =
                "night_display_last_activated_time";

        /**
         * Names of the service components that the current user has explicitly allowed to
         * be a VR mode listener, separated by ':'.
         *
         * @hide
         */
        public static final String ENABLED_VR_LISTENERS = "enabled_vr_listeners";

        /**
         * Behavior of the display while in VR mode.
         *
         * One of {@link #VR_DISPLAY_MODE_LOW_PERSISTENCE} or {@link #VR_DISPLAY_MODE_OFF}.
         *
         * @hide
         */
        public static final String VR_DISPLAY_MODE = "vr_display_mode";

        /**
         * Lower the display persistence while the system is in VR mode.
         *
         * @see PackageManager#FEATURE_VR_MODE_HIGH_PERFORMANCE
         *
         * @hide.
         */
        public static final int VR_DISPLAY_MODE_LOW_PERSISTENCE = 0;

        /**
         * Do not alter the display persistence while the system is in VR mode.
         *
         * @see PackageManager#FEATURE_VR_MODE_HIGH_PERFORMANCE
         *
         * @hide.
         */
        public static final int VR_DISPLAY_MODE_OFF = 1;

        /**
         * Whether CarrierAppUtils#disableCarrierAppsUntilPrivileged has been executed at least
         * once.
         *
         * <p>This is used to ensure that we only take one pass which will disable apps that are not
         * privileged (if any). From then on, we only want to enable apps (when a matching SIM is
         * inserted), to avoid disabling an app that the user might actively be using.
         *
         * <p>Will be set to 1 once executed.
         *
         * @hide
         */
        public static final String CARRIER_APPS_HANDLED = "carrier_apps_handled";

        /**
         * Whether parent user can access remote contact in managed profile.
         *
         * @hide
         */
        public static final String MANAGED_PROFILE_CONTACT_REMOTE_SEARCH =
                "managed_profile_contact_remote_search";

        /**
         * Whether or not the automatic storage manager is enabled and should run on the device.
         *
         * @hide
         */
        public static final String AUTOMATIC_STORAGE_MANAGER_ENABLED =
                "automatic_storage_manager_enabled";

        /**
         * How many days of information for the automatic storage manager to retain on the device.
         *
         * @hide
         */
        public static final String AUTOMATIC_STORAGE_MANAGER_DAYS_TO_RETAIN =
                "automatic_storage_manager_days_to_retain";

        /**
         * Default number of days of information for the automatic storage manager to retain.
         *
         * @hide
         */
        public static final int AUTOMATIC_STORAGE_MANAGER_DAYS_TO_RETAIN_DEFAULT = 90;

        /**
         * How many bytes the automatic storage manager has cleared out.
         *
         * @hide
         */
        public static final String AUTOMATIC_STORAGE_MANAGER_BYTES_CLEARED =
                "automatic_storage_manager_bytes_cleared";


        /**
         * Last run time for the automatic storage manager.
         *
         * @hide
         */
        public static final String AUTOMATIC_STORAGE_MANAGER_LAST_RUN =
                "automatic_storage_manager_last_run";

        /**
         * Whether SystemUI navigation keys is enabled.
         * @hide
         */
        public static final String SYSTEM_NAVIGATION_KEYS_ENABLED =
                "system_navigation_keys_enabled";

        /**
         * Holds comma separated list of ordering of QS tiles.
         * @hide
         */
        public static final String QS_TILES = "sysui_qs_tiles";

        /**
         * Whether preloaded APKs have been installed for the user.
         * @hide
         */
        public static final String DEMO_USER_SETUP_COMPLETE
                = "demo_user_setup_complete";

        /**
         * Specifies whether the web action API is enabled.
         *
         * @hide
         */
        @SystemApi
        public static final String INSTANT_APPS_ENABLED = "instant_apps_enabled";

        /**
         * Has this pairable device been paired or upgraded from a previously paired system.
         * @hide
         */
        public static final String DEVICE_PAIRED = "device_paired";

        /**
         * Integer state indicating whether package verifier is enabled.
         * TODO(b/34259924): Remove this setting.
         *
         * @hide
         */
        public static final String PACKAGE_VERIFIER_STATE = "package_verifier_state";

        /**
         * Specifies additional package name for broadcasting the CMAS messages.
         * @hide
         */
        public static final String CMAS_ADDITIONAL_BROADCAST_PKG = "cmas_additional_broadcast_pkg";

        /**
         * Whether the launcher should show any notification badges.
         * The value is boolean (1 or 0).
         * @hide
         */
        public static final String NOTIFICATION_BADGING = "notification_badging";

        /**
         * This are the settings to be backed up.
         *
         * NOTE: Settings are backed up and restored in the order they appear
         *       in this array. If you have one setting depending on another,
         *       make sure that they are ordered appropriately.
         *
         * @hide
         */
        public static final String[] SETTINGS_TO_BACKUP = {
            BUGREPORT_IN_POWER_MENU,                            // moved to global
            ALLOW_MOCK_LOCATION,
            PARENTAL_CONTROL_ENABLED,
            PARENTAL_CONTROL_REDIRECT_URL,
            USB_MASS_STORAGE_ENABLED,                           // moved to global
            ACCESSIBILITY_DISPLAY_INVERSION_ENABLED,
            ACCESSIBILITY_DISPLAY_DALTONIZER,
            ACCESSIBILITY_DISPLAY_DALTONIZER_ENABLED,
            ACCESSIBILITY_DISPLAY_MAGNIFICATION_ENABLED,
            ACCESSIBILITY_DISPLAY_MAGNIFICATION_NAVBAR_ENABLED,
            AUTOFILL_SERVICE,
            ACCESSIBILITY_DISPLAY_MAGNIFICATION_SCALE,
            ENABLED_ACCESSIBILITY_SERVICES,
            ENABLED_NOTIFICATION_LISTENERS,
            ENABLED_VR_LISTENERS,
            ENABLED_INPUT_METHODS,
            TOUCH_EXPLORATION_GRANTED_ACCESSIBILITY_SERVICES,
            TOUCH_EXPLORATION_ENABLED,
            ACCESSIBILITY_ENABLED,
            ACCESSIBILITY_SHORTCUT_TARGET_SERVICE,
            ACCESSIBILITY_BUTTON_TARGET_COMPONENT,
            ACCESSIBILITY_SHORTCUT_DIALOG_SHOWN,
            ACCESSIBILITY_SHORTCUT_ENABLED,
            ACCESSIBILITY_SHORTCUT_ON_LOCK_SCREEN,
            ACCESSIBILITY_SPEAK_PASSWORD,
            ACCESSIBILITY_HIGH_TEXT_CONTRAST_ENABLED,
            ACCESSIBILITY_CAPTIONING_PRESET,
            ACCESSIBILITY_CAPTIONING_ENABLED,
            ACCESSIBILITY_CAPTIONING_LOCALE,
            ACCESSIBILITY_CAPTIONING_BACKGROUND_COLOR,
            ACCESSIBILITY_CAPTIONING_FOREGROUND_COLOR,
            ACCESSIBILITY_CAPTIONING_EDGE_TYPE,
            ACCESSIBILITY_CAPTIONING_EDGE_COLOR,
            ACCESSIBILITY_CAPTIONING_TYPEFACE,
            ACCESSIBILITY_CAPTIONING_FONT_SCALE,
            ACCESSIBILITY_CAPTIONING_WINDOW_COLOR,
            TTS_USE_DEFAULTS,
            TTS_DEFAULT_RATE,
            TTS_DEFAULT_PITCH,
            TTS_DEFAULT_SYNTH,
            TTS_DEFAULT_LANG,
            TTS_DEFAULT_COUNTRY,
            TTS_ENABLED_PLUGINS,
            TTS_DEFAULT_LOCALE,
            SHOW_IME_WITH_HARD_KEYBOARD,
            WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON,            // moved to global
            WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY,               // moved to global
            WIFI_NUM_OPEN_NETWORKS_KEPT,                        // moved to global
            SELECTED_SPELL_CHECKER,
            SELECTED_SPELL_CHECKER_SUBTYPE,
            SPELL_CHECKER_ENABLED,
            MOUNT_PLAY_NOTIFICATION_SND,
            MOUNT_UMS_AUTOSTART,
            MOUNT_UMS_PROMPT,
            MOUNT_UMS_NOTIFY_ENABLED,
            SLEEP_TIMEOUT,
            DOUBLE_TAP_TO_WAKE,
            WAKE_GESTURE_ENABLED,
            LONG_PRESS_TIMEOUT,
            CAMERA_GESTURE_DISABLED,
            ACCESSIBILITY_AUTOCLICK_ENABLED,
            ACCESSIBILITY_AUTOCLICK_DELAY,
            ACCESSIBILITY_LARGE_POINTER_ICON,
            PREFERRED_TTY_MODE,
            ENHANCED_VOICE_PRIVACY_ENABLED,
            TTY_MODE_ENABLED,
            INCALL_POWER_BUTTON_BEHAVIOR,
            NIGHT_DISPLAY_CUSTOM_START_TIME,
            NIGHT_DISPLAY_CUSTOM_END_TIME,
            NIGHT_DISPLAY_COLOR_TEMPERATURE,
            NIGHT_DISPLAY_AUTO_MODE,
            NIGHT_DISPLAY_LAST_ACTIVATED_TIME,
            NIGHT_DISPLAY_ACTIVATED,
            SYNC_PARENT_SOUNDS,
            CAMERA_DOUBLE_TWIST_TO_FLIP_ENABLED,
            CAMERA_DOUBLE_TAP_POWER_GESTURE_DISABLED,
            SYSTEM_NAVIGATION_KEYS_ENABLED,
            QS_TILES,
            DOZE_ENABLED,
            DOZE_PULSE_ON_PICK_UP,
            DOZE_PULSE_ON_DOUBLE_TAP,
            NFC_PAYMENT_DEFAULT_COMPONENT,
            AUTOMATIC_STORAGE_MANAGER_DAYS_TO_RETAIN,
            ASSIST_GESTURE_ENABLED,
            ASSIST_GESTURE_SENSITIVITY,
            VR_DISPLAY_MODE,
            NOTIFICATION_BADGING
        };

        /**
         * These entries are considered common between the personal and the managed profile,
         * since the managed profile doesn't get to change them.
         */
        private static final Set<String> CLONE_TO_MANAGED_PROFILE = new ArraySet<>();

        static {
            CLONE_TO_MANAGED_PROFILE.add(ACCESSIBILITY_ENABLED);
            CLONE_TO_MANAGED_PROFILE.add(ALLOW_MOCK_LOCATION);
            CLONE_TO_MANAGED_PROFILE.add(ALLOWED_GEOLOCATION_ORIGINS);
            CLONE_TO_MANAGED_PROFILE.add(AUTOFILL_SERVICE);
            CLONE_TO_MANAGED_PROFILE.add(DEFAULT_INPUT_METHOD);
            CLONE_TO_MANAGED_PROFILE.add(ENABLED_ACCESSIBILITY_SERVICES);
            CLONE_TO_MANAGED_PROFILE.add(ENABLED_INPUT_METHODS);
            CLONE_TO_MANAGED_PROFILE.add(LOCATION_MODE);
            CLONE_TO_MANAGED_PROFILE.add(LOCATION_PREVIOUS_MODE);
            CLONE_TO_MANAGED_PROFILE.add(LOCATION_PROVIDERS_ALLOWED);
            CLONE_TO_MANAGED_PROFILE.add(SELECTED_INPUT_METHOD_SUBTYPE);
            CLONE_TO_MANAGED_PROFILE.add(SELECTED_SPELL_CHECKER);
            CLONE_TO_MANAGED_PROFILE.add(SELECTED_SPELL_CHECKER_SUBTYPE);
        }

        /** @hide */
        public static void getCloneToManagedProfileSettings(Set<String> outKeySet) {
            outKeySet.addAll(CLONE_TO_MANAGED_PROFILE);
        }

        /**
         * Secure settings which can be accessed by instant apps.
         * @hide
         */
        public static final Set<String> INSTANT_APP_SETTINGS = new ArraySet<>();
        static {
            INSTANT_APP_SETTINGS.add(ENABLED_ACCESSIBILITY_SERVICES);
            INSTANT_APP_SETTINGS.add(ACCESSIBILITY_SPEAK_PASSWORD);
            INSTANT_APP_SETTINGS.add(ACCESSIBILITY_DISPLAY_INVERSION_ENABLED);
            INSTANT_APP_SETTINGS.add(ACCESSIBILITY_CAPTIONING_ENABLED);
            INSTANT_APP_SETTINGS.add(ACCESSIBILITY_CAPTIONING_PRESET);
            INSTANT_APP_SETTINGS.add(ACCESSIBILITY_CAPTIONING_EDGE_TYPE);
            INSTANT_APP_SETTINGS.add(ACCESSIBILITY_CAPTIONING_EDGE_COLOR);
            INSTANT_APP_SETTINGS.add(ACCESSIBILITY_CAPTIONING_LOCALE);
            INSTANT_APP_SETTINGS.add(ACCESSIBILITY_CAPTIONING_BACKGROUND_COLOR);
            INSTANT_APP_SETTINGS.add(ACCESSIBILITY_CAPTIONING_FOREGROUND_COLOR);
            INSTANT_APP_SETTINGS.add(ACCESSIBILITY_CAPTIONING_TYPEFACE);
            INSTANT_APP_SETTINGS.add(ACCESSIBILITY_CAPTIONING_FONT_SCALE);
            INSTANT_APP_SETTINGS.add(ACCESSIBILITY_CAPTIONING_WINDOW_COLOR);
            INSTANT_APP_SETTINGS.add(ACCESSIBILITY_DISPLAY_DALTONIZER_ENABLED);
            INSTANT_APP_SETTINGS.add(ACCESSIBILITY_DISPLAY_DALTONIZER);
            INSTANT_APP_SETTINGS.add(ACCESSIBILITY_AUTOCLICK_DELAY);
            INSTANT_APP_SETTINGS.add(ACCESSIBILITY_AUTOCLICK_ENABLED);
            INSTANT_APP_SETTINGS.add(ACCESSIBILITY_LARGE_POINTER_ICON);

            INSTANT_APP_SETTINGS.add(DEFAULT_INPUT_METHOD);
            INSTANT_APP_SETTINGS.add(ENABLED_INPUT_METHODS);

            INSTANT_APP_SETTINGS.add(ANDROID_ID);

            INSTANT_APP_SETTINGS.add(PACKAGE_VERIFIER_USER_CONSENT);
            INSTANT_APP_SETTINGS.add(ALLOW_MOCK_LOCATION);
        }

        /**
         * Helper method for determining if a location provider is enabled.
         *
         * @param cr the content resolver to use
         * @param provider the location provider to query
         * @return true if the provider is enabled
         *
         * @deprecated use {@link #LOCATION_MODE} or
         *             {@link LocationManager#isProviderEnabled(String)}
         */
        @Deprecated
        public static final boolean isLocationProviderEnabled(ContentResolver cr, String provider) {
            return isLocationProviderEnabledForUser(cr, provider, UserHandle.myUserId());
        }

        /**
         * Helper method for determining if a location provider is enabled.
         * @param cr the content resolver to use
         * @param provider the location provider to query
         * @param userId the userId to query
         * @return true if the provider is enabled
         * @deprecated use {@link #LOCATION_MODE} or
         *             {@link LocationManager#isProviderEnabled(String)}
         * @hide
         */
        @Deprecated
        public static final boolean isLocationProviderEnabledForUser(ContentResolver cr, String provider, int userId) {
            String allowedProviders = Settings.Secure.getStringForUser(cr,
                    LOCATION_PROVIDERS_ALLOWED, userId);
            return TextUtils.delimitedStringContains(allowedProviders, ',', provider);
        }

        /**
         * Thread-safe method for enabling or disabling a single location provider.
         * @param cr the content resolver to use
         * @param provider the location provider to enable or disable
         * @param enabled true if the provider should be enabled
         * @deprecated use {@link #putInt(ContentResolver, String, int)} and {@link #LOCATION_MODE}
         */
        @Deprecated
        public static final void setLocationProviderEnabled(ContentResolver cr,
                String provider, boolean enabled) {
            setLocationProviderEnabledForUser(cr, provider, enabled, UserHandle.myUserId());
        }

        /**
         * Thread-safe method for enabling or disabling a single location provider.
         *
         * @param cr the content resolver to use
         * @param provider the location provider to enable or disable
         * @param enabled true if the provider should be enabled
         * @param userId the userId for which to enable/disable providers
         * @return true if the value was set, false on database errors
         * @deprecated use {@link #putIntForUser(ContentResolver, String, int, int)} and
         *             {@link #LOCATION_MODE}
         * @hide
         */
        @Deprecated
        public static final boolean setLocationProviderEnabledForUser(ContentResolver cr,
                String provider, boolean enabled, int userId) {
            synchronized (mLocationSettingsLock) {
                // to ensure thread safety, we write the provider name with a '+' or '-'
                // and let the SettingsProvider handle it rather than reading and modifying
                // the list of enabled providers.
                if (enabled) {
                    provider = "+" + provider;
                } else {
                    provider = "-" + provider;
                }
                return putStringForUser(cr, Settings.Secure.LOCATION_PROVIDERS_ALLOWED, provider,
                        userId);
            }
        }

        /**
         * Saves the current location mode into {@link #LOCATION_PREVIOUS_MODE}.
         */
        private static final boolean saveLocationModeForUser(ContentResolver cr, int userId) {
            final int mode = getLocationModeForUser(cr, userId);
            return putIntForUser(cr, Settings.Secure.LOCATION_PREVIOUS_MODE, mode, userId);
        }

        /**
         * Restores the current location mode from {@link #LOCATION_PREVIOUS_MODE}.
         */
        private static final boolean restoreLocationModeForUser(ContentResolver cr, int userId) {
            int mode = getIntForUser(cr, Settings.Secure.LOCATION_PREVIOUS_MODE,
                    LOCATION_MODE_HIGH_ACCURACY, userId);
            // Make sure that the previous mode is never "off". Otherwise the user won't be able to
            // turn on location any longer.
            if (mode == LOCATION_MODE_OFF) {
                mode = LOCATION_MODE_HIGH_ACCURACY;
            }
            return setLocationModeForUser(cr, mode, userId);
        }

        /**
         * Thread-safe method for setting the location mode to one of
         * {@link #LOCATION_MODE_HIGH_ACCURACY}, {@link #LOCATION_MODE_SENSORS_ONLY},
         * {@link #LOCATION_MODE_BATTERY_SAVING}, or {@link #LOCATION_MODE_OFF}.
         * Necessary because the mode is a composite of the underlying location provider
         * settings.
         *
         * @param cr the content resolver to use
         * @param mode such as {@link #LOCATION_MODE_HIGH_ACCURACY}
         * @param userId the userId for which to change mode
         * @return true if the value was set, false on database errors
         *
         * @throws IllegalArgumentException if mode is not one of the supported values
         */
        private static final boolean setLocationModeForUser(ContentResolver cr, int mode,
                int userId) {
            synchronized (mLocationSettingsLock) {
                boolean gps = false;
                boolean network = false;
                switch (mode) {
                    case LOCATION_MODE_PREVIOUS:
                        // Retrieve the actual mode and set to that mode.
                        return restoreLocationModeForUser(cr, userId);
                    case LOCATION_MODE_OFF:
                        saveLocationModeForUser(cr, userId);
                        break;
                    case LOCATION_MODE_SENSORS_ONLY:
                        gps = true;
                        break;
                    case LOCATION_MODE_BATTERY_SAVING:
                        network = true;
                        break;
                    case LOCATION_MODE_HIGH_ACCURACY:
                        gps = true;
                        network = true;
                        break;
                    default:
                        throw new IllegalArgumentException("Invalid location mode: " + mode);
                }
                // Note it's important that we set the NLP mode first. The Google implementation
                // of NLP clears its NLP consent setting any time it receives a
                // LocationManager.PROVIDERS_CHANGED_ACTION broadcast and NLP is disabled. Also,
                // it shows an NLP consent dialog any time it receives the broadcast, NLP is
                // enabled, and the NLP consent is not set. If 1) we were to enable GPS first,
                // 2) a setup wizard has its own NLP consent UI that sets the NLP consent setting,
                // and 3) the receiver happened to complete before we enabled NLP, then the Google
                // NLP would detect the attempt to enable NLP and show a redundant NLP consent
                // dialog. Then the people who wrote the setup wizard would be sad.
                boolean nlpSuccess = Settings.Secure.setLocationProviderEnabledForUser(
                        cr, LocationManager.NETWORK_PROVIDER, network, userId);
                boolean gpsSuccess = Settings.Secure.setLocationProviderEnabledForUser(
                        cr, LocationManager.GPS_PROVIDER, gps, userId);
                return gpsSuccess && nlpSuccess;
            }
        }

        /**
         * Thread-safe method for reading the location mode, returns one of
         * {@link #LOCATION_MODE_HIGH_ACCURACY}, {@link #LOCATION_MODE_SENSORS_ONLY},
         * {@link #LOCATION_MODE_BATTERY_SAVING}, or {@link #LOCATION_MODE_OFF}. Necessary
         * because the mode is a composite of the underlying location provider settings.
         *
         * @param cr the content resolver to use
         * @param userId the userId for which to read the mode
         * @return the location mode
         */
        private static final int getLocationModeForUser(ContentResolver cr, int userId) {
            synchronized (mLocationSettingsLock) {
                boolean gpsEnabled = Settings.Secure.isLocationProviderEnabledForUser(
                        cr, LocationManager.GPS_PROVIDER, userId);
                boolean networkEnabled = Settings.Secure.isLocationProviderEnabledForUser(
                        cr, LocationManager.NETWORK_PROVIDER, userId);
                if (gpsEnabled && networkEnabled) {
                    return LOCATION_MODE_HIGH_ACCURACY;
                } else if (gpsEnabled) {
                    return LOCATION_MODE_SENSORS_ONLY;
                } else if (networkEnabled) {
                    return LOCATION_MODE_BATTERY_SAVING;
                } else {
                    return LOCATION_MODE_OFF;
                }
            }
        }
    }

    /**
     * Global system settings, containing preferences that always apply identically
     * to all defined users.  Applications can read these but are not allowed to write;
     * like the "Secure" settings, these are for preferences that the user must
     * explicitly modify through the system UI or specialized APIs for those values.
     */
    public static final class Global extends NameValueTable {
        /**
         * The content:// style URL for global secure settings items.  Not public.
         */
        public static final Uri CONTENT_URI = Uri.parse("content://" + AUTHORITY + "/global");

        /**
         * Whether users are allowed to add more users or guest from lockscreen.
         * <p>
         * Type: int
         * @hide
         */
        public static final String ADD_USERS_WHEN_LOCKED = "add_users_when_locked";

        /**
         * Setting whether the global gesture for enabling accessibility is enabled.
         * If this gesture is enabled the user will be able to perfrom it to enable
         * the accessibility state without visiting the settings app.
         *
         * @hide
         * No longer used. Should be removed once all dependencies have been updated.
         */
        public static final String ENABLE_ACCESSIBILITY_GLOBAL_GESTURE_ENABLED =
                "enable_accessibility_global_gesture_enabled";

        /**
         * Whether Airplane Mode is on.
         */
        public static final String AIRPLANE_MODE_ON = "airplane_mode_on";

        /**
         * Whether Theater Mode is on.
         * {@hide}
         */
        @SystemApi
        public static final String THEATER_MODE_ON = "theater_mode_on";

        /**
         * Constant for use in AIRPLANE_MODE_RADIOS to specify Bluetooth radio.
         */
        public static final String RADIO_BLUETOOTH = "bluetooth";

        /**
         * Constant for use in AIRPLANE_MODE_RADIOS to specify Wi-Fi radio.
         */
        public static final String RADIO_WIFI = "wifi";

        /**
         * {@hide}
         */
        public static final String RADIO_WIMAX = "wimax";
        /**
         * Constant for use in AIRPLANE_MODE_RADIOS to specify Cellular radio.
         */
        public static final String RADIO_CELL = "cell";

        /**
         * Constant for use in AIRPLANE_MODE_RADIOS to specify NFC radio.
         */
        public static final String RADIO_NFC = "nfc";

        /**
         * A comma separated list of radios that need to be disabled when airplane mode
         * is on. This overrides WIFI_ON and BLUETOOTH_ON, if Wi-Fi and bluetooth are
         * included in the comma separated list.
         */
        public static final String AIRPLANE_MODE_RADIOS = "airplane_mode_radios";

        /**
         * A comma separated list of radios that should to be disabled when airplane mode
         * is on, but can be manually reenabled by the user.  For example, if RADIO_WIFI is
         * added to both AIRPLANE_MODE_RADIOS and AIRPLANE_MODE_TOGGLEABLE_RADIOS, then Wifi
         * will be turned off when entering airplane mode, but the user will be able to reenable
         * Wifi in the Settings app.
         *
         * {@hide}
         */
        public static final String AIRPLANE_MODE_TOGGLEABLE_RADIOS = "airplane_mode_toggleable_radios";

        /**
         * A Long representing a bitmap of profiles that should be disabled when bluetooth starts.
         * See {@link android.bluetooth.BluetoothProfile}.
         * {@hide}
         */
        public static final String BLUETOOTH_DISABLED_PROFILES = "bluetooth_disabled_profiles";

        /**
         * A semi-colon separated list of Bluetooth interoperability workarounds.
         * Each entry is a partial Bluetooth device address string and an integer representing
         * the feature to be disabled, separated by a comma. The integer must correspond
         * to a interoperability feature as defined in "interop.h" in /system/bt.
         * <p>
         * Example: <br/>
         *   "00:11:22,0;01:02:03:04,2"
         * @hide
         */
       public static final String BLUETOOTH_INTEROPERABILITY_LIST = "bluetooth_interoperability_list";

        /**
         * The policy for deciding when Wi-Fi should go to sleep (which will in
         * turn switch to using the mobile data as an Internet connection).
         * <p>
         * Set to one of {@link #WIFI_SLEEP_POLICY_DEFAULT},
         * {@link #WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED}, or
         * {@link #WIFI_SLEEP_POLICY_NEVER}.
         */
        public static final String WIFI_SLEEP_POLICY = "wifi_sleep_policy";

        /**
         * Value for {@link #WIFI_SLEEP_POLICY} to use the default Wi-Fi sleep
         * policy, which is to sleep shortly after the turning off
         * according to the {@link #STAY_ON_WHILE_PLUGGED_IN} setting.
         */
        public static final int WIFI_SLEEP_POLICY_DEFAULT = 0;

        /**
         * Value for {@link #WIFI_SLEEP_POLICY} to use the default policy when
         * the device is on battery, and never go to sleep when the device is
         * plugged in.
         */
        public static final int WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED = 1;

        /**
         * Value for {@link #WIFI_SLEEP_POLICY} to never go to sleep.
         */
        public static final int WIFI_SLEEP_POLICY_NEVER = 2;

        /**
         * Value to specify if the user prefers the date, time and time zone
         * to be automatically fetched from the network (NITZ). 1=yes, 0=no
         */
        public static final String AUTO_TIME = "auto_time";

        /**
         * Value to specify if the user prefers the time zone
         * to be automatically fetched from the network (NITZ). 1=yes, 0=no
         */
        public static final String AUTO_TIME_ZONE = "auto_time_zone";

        /**
         * URI for the car dock "in" event sound.
         * @hide
         */
        public static final String CAR_DOCK_SOUND = "car_dock_sound";

        /**
         * URI for the car dock "out" event sound.
         * @hide
         */
        public static final String CAR_UNDOCK_SOUND = "car_undock_sound";

        /**
         * URI for the desk dock "in" event sound.
         * @hide
         */
        public static final String DESK_DOCK_SOUND = "desk_dock_sound";

        /**
         * URI for the desk dock "out" event sound.
         * @hide
         */
        public static final String DESK_UNDOCK_SOUND = "desk_undock_sound";

        /**
         * Whether to play a sound for dock events.
         * @hide
         */
        public static final String DOCK_SOUNDS_ENABLED = "dock_sounds_enabled";

        /**
         * Whether to play a sound for dock events, only when an accessibility service is on.
         * @hide
         */
        public static final String DOCK_SOUNDS_ENABLED_WHEN_ACCESSIBILITY = "dock_sounds_enabled_when_accessbility";

        /**
         * URI for the "device locked" (keyguard shown) sound.
         * @hide
         */
        public static final String LOCK_SOUND = "lock_sound";

        /**
         * URI for the "device unlocked" sound.
         * @hide
         */
        public static final String UNLOCK_SOUND = "unlock_sound";

        /**
         * URI for the "device is trusted" sound, which is played when the device enters the trusted
         * state without unlocking.
         * @hide
         */
        public static final String TRUSTED_SOUND = "trusted_sound";

        /**
         * URI for the low battery sound file.
         * @hide
         */
        public static final String LOW_BATTERY_SOUND = "low_battery_sound";

        /**
         * Whether to play a sound for low-battery alerts.
         * @hide
         */
        public static final String POWER_SOUNDS_ENABLED = "power_sounds_enabled";

        /**
         * URI for the "wireless charging started" sound.
         * @hide
         */
        public static final String WIRELESS_CHARGING_STARTED_SOUND =
                "wireless_charging_started_sound";

        /**
         * Whether to play a sound for charging events.
         * @hide
         */
        public static final String CHARGING_SOUNDS_ENABLED = "charging_sounds_enabled";

        /**
         * Whether we keep the device on while the device is plugged in.
         * Supported values are:
         * <ul>
         * <li>{@code 0} to never stay on while plugged in</li>
         * <li>{@link BatteryManager#BATTERY_PLUGGED_AC} to stay on for AC charger</li>
         * <li>{@link BatteryManager#BATTERY_PLUGGED_USB} to stay on for USB charger</li>
         * <li>{@link BatteryManager#BATTERY_PLUGGED_WIRELESS} to stay on for wireless charger</li>
         * </ul>
         * These values can be OR-ed together.
         */
        public static final String STAY_ON_WHILE_PLUGGED_IN = "stay_on_while_plugged_in";

        /**
         * When the user has enable the option to have a "bug report" command
         * in the power menu.
         * @hide
         */
        public static final String BUGREPORT_IN_POWER_MENU = "bugreport_in_power_menu";

        /**
         * Whether ADB is enabled.
         */
        public static final String ADB_ENABLED = "adb_enabled";

        /**
         * Whether Views are allowed to save their attribute data.
         * @hide
         */
        public static final String DEBUG_VIEW_ATTRIBUTES = "debug_view_attributes";

        /**
         * Whether assisted GPS should be enabled or not.
         * @hide
         */
        public static final String ASSISTED_GPS_ENABLED = "assisted_gps_enabled";

        /**
         * Whether bluetooth is enabled/disabled
         * 0=disabled. 1=enabled.
         */
        public static final String BLUETOOTH_ON = "bluetooth_on";

        /**
         * CDMA Cell Broadcast SMS
         *                            0 = CDMA Cell Broadcast SMS disabled
         *                            1 = CDMA Cell Broadcast SMS enabled
         * @hide
         */
        public static final String CDMA_CELL_BROADCAST_SMS =
                "cdma_cell_broadcast_sms";

        /**
         * The CDMA roaming mode 0 = Home Networks, CDMA default
         *                       1 = Roaming on Affiliated networks
         *                       2 = Roaming on any networks
         * @hide
         */
        public static final String CDMA_ROAMING_MODE = "roaming_settings";

        /**
         * The CDMA subscription mode 0 = RUIM/SIM (default)
         *                                1 = NV
         * @hide
         */
        public static final String CDMA_SUBSCRIPTION_MODE = "subscription_mode";

        /** Inactivity timeout to track mobile data activity.
        *
        * If set to a positive integer, it indicates the inactivity timeout value in seconds to
        * infer the data activity of mobile network. After a period of no activity on mobile
        * networks with length specified by the timeout, an {@code ACTION_DATA_ACTIVITY_CHANGE}
        * intent is fired to indicate a transition of network status from "active" to "idle". Any
        * subsequent activity on mobile networks triggers the firing of {@code
        * ACTION_DATA_ACTIVITY_CHANGE} intent indicating transition from "idle" to "active".
        *
        * Network activity refers to transmitting or receiving data on the network interfaces.
        *
        * Tracking is disabled if set to zero or negative value.
        *
        * @hide
        */
       public static final String DATA_ACTIVITY_TIMEOUT_MOBILE = "data_activity_timeout_mobile";

       /** Timeout to tracking Wifi data activity. Same as {@code DATA_ACTIVITY_TIMEOUT_MOBILE}
        * but for Wifi network.
        * @hide
        */
       public static final String DATA_ACTIVITY_TIMEOUT_WIFI = "data_activity_timeout_wifi";

       /**
        * Whether or not data roaming is enabled. (0 = false, 1 = true)
        */
       public static final String DATA_ROAMING = "data_roaming";

       /**
        * The value passed to a Mobile DataConnection via bringUp which defines the
        * number of retries to preform when setting up the initial connection. The default
        * value defined in DataConnectionTrackerBase#DEFAULT_MDC_INITIAL_RETRY is currently 1.
        * @hide
        */
       public static final String MDC_INITIAL_MAX_RETRY = "mdc_initial_max_retry";

       /**
        * Whether any package can be on external storage. When this is true, any
        * package, regardless of manifest values, is a candidate for installing
        * or moving onto external storage. (0 = false, 1 = true)
        * @hide
        */
       public static final String FORCE_ALLOW_ON_EXTERNAL = "force_allow_on_external";

        /**
         * Whether any activity can be resized. When this is true, any
         * activity, regardless of manifest values, can be resized for multi-window.
         * (0 = false, 1 = true)
         * @hide
         */
        public static final String DEVELOPMENT_FORCE_RESIZABLE_ACTIVITIES
                = "force_resizable_activities";

        /**
         * Whether to enable experimental freeform support for windows.
         * @hide
         */
        public static final String DEVELOPMENT_ENABLE_FREEFORM_WINDOWS_SUPPORT
                = "enable_freeform_support";

       /**
        * Whether user has enabled development settings.
        */
       public static final String DEVELOPMENT_SETTINGS_ENABLED = "development_settings_enabled";

       /**
        * Whether the device has been provisioned (0 = false, 1 = true).
        * <p>On a multiuser device with a separate system user, the screen may be locked
        * as soon as this is set to true and further activities cannot be launched on the
        * system user unless they are marked to show over keyguard.
        */
       public static final String DEVICE_PROVISIONED = "device_provisioned";

       /**
        * Whether mobile data should be allowed while the device is being provisioned.
        * This allows the provisioning process to turn off mobile data before the user
        * has an opportunity to set things up, preventing other processes from burning
        * precious bytes before wifi is setup.
        * (0 = false, 1 = true)
        * @hide
        */
       public static final String DEVICE_PROVISIONING_MOBILE_DATA_ENABLED =
               "device_provisioning_mobile_data";

       /**
        * The saved value for WindowManagerService.setForcedDisplaySize().
        * Two integers separated by a comma.  If unset, then use the real display size.
        * @hide
        */
       public static final String DISPLAY_SIZE_FORCED = "display_size_forced";

       /**
        * The saved value for WindowManagerService.setForcedDisplayScalingMode().
        * 0 or unset if scaling is automatic, 1 if scaling is disabled.
        * @hide
        */
       public static final String DISPLAY_SCALING_FORCE = "display_scaling_force";

       /**
        * The maximum size, in bytes, of a download that the download manager will transfer over
        * a non-wifi connection.
        * @hide
        */
       public static final String DOWNLOAD_MAX_BYTES_OVER_MOBILE =
               "download_manager_max_bytes_over_mobile";

       /**
        * The recommended maximum size, in bytes, of a download that the download manager should
        * transfer over a non-wifi connection. Over this size, the use will be warned, but will
        * have the option to start the download over the mobile connection anyway.
        * @hide
        */
       public static final String DOWNLOAD_RECOMMENDED_MAX_BYTES_OVER_MOBILE =
               "download_manager_recommended_max_bytes_over_mobile";

       /**
        * @deprecated Use {@link android.provider.Settings.Secure#INSTALL_NON_MARKET_APPS} instead
        */
       @Deprecated
       public static final String INSTALL_NON_MARKET_APPS = Secure.INSTALL_NON_MARKET_APPS;

       /**
        * Whether HDMI control shall be enabled. If disabled, no CEC/MHL command will be
        * sent or processed. (0 = false, 1 = true)
        * @hide
        */
       public static final String HDMI_CONTROL_ENABLED = "hdmi_control_enabled";

       /**
        * Whether HDMI System Audio Control feature is enabled. If enabled, TV will try to turn on
        * system audio mode if there's a connected CEC-enabled AV Receiver. Then audio stream will
        * be played on AVR instead of TV spaeker. If disabled, the system audio mode will never be
        * activated.
        * @hide
        */
        public static final String HDMI_SYSTEM_AUDIO_CONTROL_ENABLED =
                "hdmi_system_audio_control_enabled";

       /**
        * Whether TV will automatically turn on upon reception of the CEC command
        * &lt;Text View On&gt; or &lt;Image View On&gt;. (0 = false, 1 = true)
        * @hide
        */
       public static final String HDMI_CONTROL_AUTO_WAKEUP_ENABLED =
               "hdmi_control_auto_wakeup_enabled";

       /**
        * Whether TV will also turn off other CEC devices when it goes to standby mode.
        * (0 = false, 1 = true)
        * @hide
        */
       public static final String HDMI_CONTROL_AUTO_DEVICE_OFF_ENABLED =
               "hdmi_control_auto_device_off_enabled";

       /**
        * The interval in milliseconds at which location requests will be throttled when they are
        * coming from the background.
        * @hide
        */
       public static final String LOCATION_BACKGROUND_THROTTLE_INTERVAL_MS =
                "location_background_throttle_interval_ms";

        /**
         * Most frequent location update interval in milliseconds that proximity alert is allowed
         * to request.
         * @hide
         */
        public static final String LOCATION_BACKGROUND_THROTTLE_PROXIMITY_ALERT_INTERVAL_MS =
                "location_background_throttle_proximity_alert_interval_ms";

        /**
         * Packages that are whitelisted for background throttling (throttling will not be applied).
         * @hide
         */
        public static final String LOCATION_BACKGROUND_THROTTLE_PACKAGE_WHITELIST =
            "location_background_throttle_package_whitelist";

        /**
         * The interval in milliseconds at which wifi scan requests will be throttled when they are
         * coming from the background.
         * @hide
         */
        public static final String WIFI_SCAN_BACKGROUND_THROTTLE_INTERVAL_MS =
                "wifi_scan_background_throttle_interval_ms";

        /**
         * Packages that are whitelisted to be exempt for wifi background throttling.
         * @hide
         */
        public static final String WIFI_SCAN_BACKGROUND_THROTTLE_PACKAGE_WHITELIST =
                "wifi_scan_background_throttle_package_whitelist";

        /**
        * Whether TV will switch to MHL port when a mobile device is plugged in.
        * (0 = false, 1 = true)
        * @hide
        */
       public static final String MHL_INPUT_SWITCHING_ENABLED = "mhl_input_switching_enabled";

       /**
        * Whether TV will charge the mobile device connected at MHL port. (0 = false, 1 = true)
        * @hide
        */
       public static final String MHL_POWER_CHARGE_ENABLED = "mhl_power_charge_enabled";

       /**
        * Whether mobile data connections are allowed by the user.  See
        * ConnectivityManager for more info.
        * @hide
        */
       public static final String MOBILE_DATA = "mobile_data";

       /**
        * Whether the mobile data connection should remain active even when higher
        * priority networks like WiFi are active, to help make network switching faster.
        *
        * See ConnectivityService for more info.
        *
        * (0 = disabled, 1 = enabled)
        * @hide
        */
       public static final String MOBILE_DATA_ALWAYS_ON = "mobile_data_always_on";

        /**
         * Size of the event buffer for IP connectivity metrics.
         * @hide
         */
        public static final String CONNECTIVITY_METRICS_BUFFER_SIZE =
              "connectivity_metrics_buffer_size";

       /** {@hide} */
       public static final String NETSTATS_ENABLED = "netstats_enabled";
       /** {@hide} */
       public static final String NETSTATS_POLL_INTERVAL = "netstats_poll_interval";
       /** {@hide} */
       public static final String NETSTATS_TIME_CACHE_MAX_AGE = "netstats_time_cache_max_age";
       /** {@hide} */
       public static final String NETSTATS_GLOBAL_ALERT_BYTES = "netstats_global_alert_bytes";
       /** {@hide} */
       public static final String NETSTATS_SAMPLE_ENABLED = "netstats_sample_enabled";

       /** {@hide} */
       public static final String NETSTATS_DEV_BUCKET_DURATION = "netstats_dev_bucket_duration";
       /** {@hide} */
       public static final String NETSTATS_DEV_PERSIST_BYTES = "netstats_dev_persist_bytes";
       /** {@hide} */
       public static final String NETSTATS_DEV_ROTATE_AGE = "netstats_dev_rotate_age";
       /** {@hide} */
       public static final String NETSTATS_DEV_DELETE_AGE = "netstats_dev_delete_age";

       /** {@hide} */
       public static final String NETSTATS_UID_BUCKET_DURATION = "netstats_uid_bucket_duration";
       /** {@hide} */
       public static final String NETSTATS_UID_PERSIST_BYTES = "netstats_uid_persist_bytes";
       /** {@hide} */
       public static final String NETSTATS_UID_ROTATE_AGE = "netstats_uid_rotate_age";
       /** {@hide} */
       public static final String NETSTATS_UID_DELETE_AGE = "netstats_uid_delete_age";

       /** {@hide} */
       public static final String NETSTATS_UID_TAG_BUCKET_DURATION = "netstats_uid_tag_bucket_duration";
       /** {@hide} */
       public static final String NETSTATS_UID_TAG_PERSIST_BYTES = "netstats_uid_tag_persist_bytes";
       /** {@hide} */
       public static final String NETSTATS_UID_TAG_ROTATE_AGE = "netstats_uid_tag_rotate_age";
       /** {@hide} */
       public static final String NETSTATS_UID_TAG_DELETE_AGE = "netstats_uid_tag_delete_age";

       /**
        * User preference for which network(s) should be used. Only the
        * connectivity service should touch this.
        */
       public static final String NETWORK_PREFERENCE = "network_preference";

       /**
        * Which package name to use for network scoring. If null, or if the package is not a valid
        * scorer app, external network scores will neither be requested nor accepted.
        * @hide
        */
       public static final String NETWORK_SCORER_APP = "network_scorer_app";

       /**
        * If the NITZ_UPDATE_DIFF time is exceeded then an automatic adjustment
        * to SystemClock will be allowed even if NITZ_UPDATE_SPACING has not been
        * exceeded.
        * @hide
        */
       public static final String NITZ_UPDATE_DIFF = "nitz_update_diff";

       /**
        * The length of time in milli-seconds that automatic small adjustments to
        * SystemClock are ignored if NITZ_UPDATE_DIFF is not exceeded.
        * @hide
        */
       public static final String NITZ_UPDATE_SPACING = "nitz_update_spacing";

       /** Preferred NTP server. {@hide} */
       public static final String NTP_SERVER = "ntp_server";
       /** Timeout in milliseconds to wait for NTP server. {@hide} */
       public static final String NTP_TIMEOUT = "ntp_timeout";

       /** {@hide} */
       public static final String STORAGE_BENCHMARK_INTERVAL = "storage_benchmark_interval";

       /**
        * Sample validity in seconds to configure for the system DNS resolver.
        * {@hide}
        */
       public static final String DNS_RESOLVER_SAMPLE_VALIDITY_SECONDS =
               "dns_resolver_sample_validity_seconds";

       /**
        * Success threshold in percent for use with the system DNS resolver.
        * {@hide}
        */
       public static final String DNS_RESOLVER_SUCCESS_THRESHOLD_PERCENT =
                "dns_resolver_success_threshold_percent";

       /**
        * Minimum number of samples needed for statistics to be considered meaningful in the
        * system DNS resolver.
        * {@hide}
        */
       public static final String DNS_RESOLVER_MIN_SAMPLES = "dns_resolver_min_samples";

       /**
        * Maximum number taken into account for statistics purposes in the system DNS resolver.
        * {@hide}
        */
       public static final String DNS_RESOLVER_MAX_SAMPLES = "dns_resolver_max_samples";

       /**
        * Whether to disable the automatic scheduling of system updates.
        * 1 = system updates won't be automatically scheduled (will always
        * present notification instead).
        * 0 = system updates will be automatically scheduled. (default)
        * @hide
        */
       @SystemApi
       public static final String OTA_DISABLE_AUTOMATIC_UPDATE = "ota_disable_automatic_update";

       /**
        * Whether the package manager should send package verification broadcasts for verifiers to
        * review apps prior to installation.
        * 1 = request apps to be verified prior to installation, if a verifier exists.
        * 0 = do not verify apps before installation
        * @hide
        */
       public static final String PACKAGE_VERIFIER_ENABLE = "package_verifier_enable";

       /** Timeout for package verification.
        * @hide */
       public static final String PACKAGE_VERIFIER_TIMEOUT = "verifier_timeout";

       /** Default response code for package verification.
        * @hide */
       public static final String PACKAGE_VERIFIER_DEFAULT_RESPONSE = "verifier_default_response";

       /**
        * Show package verification setting in the Settings app.
        * 1 = show (default)
        * 0 = hide
        * @hide
        */
       public static final String PACKAGE_VERIFIER_SETTING_VISIBLE = "verifier_setting_visible";

       /**
        * Run package verification on apps installed through ADB/ADT/USB
        * 1 = perform package verification on ADB installs (default)
        * 0 = bypass package verification on ADB installs
        * @hide
        */
       public static final String PACKAGE_VERIFIER_INCLUDE_ADB = "verifier_verify_adb_installs";

       /**
        * Time since last fstrim (milliseconds) after which we force one to happen
        * during device startup.  If unset, the default is 3 days.
        * @hide
        */
       public static final String FSTRIM_MANDATORY_INTERVAL = "fstrim_mandatory_interval";

       /**
        * The interval in milliseconds at which to check packet counts on the
        * mobile data interface when screen is on, to detect possible data
        * connection problems.
        * @hide
        */
       public static final String PDP_WATCHDOG_POLL_INTERVAL_MS =
               "pdp_watchdog_poll_interval_ms";

       /**
        * The interval in milliseconds at which to check packet counts on the
        * mobile data interface when screen is off, to detect possible data
        * connection problems.
        * @hide
        */
       public static final String PDP_WATCHDOG_LONG_POLL_INTERVAL_MS =
               "pdp_watchdog_long_poll_interval_ms";

       /**
        * The interval in milliseconds at which to check packet counts on the
        * mobile data interface after {@link #PDP_WATCHDOG_TRIGGER_PACKET_COUNT}
        * outgoing packets has been reached without incoming packets.
        * @hide
        */
       public static final String PDP_WATCHDOG_ERROR_POLL_INTERVAL_MS =
               "pdp_watchdog_error_poll_interval_ms";

       /**
        * The number of outgoing packets sent without seeing an incoming packet
        * that triggers a countdown (of {@link #PDP_WATCHDOG_ERROR_POLL_COUNT}
        * device is logged to the event log
        * @hide
        */
       public static final String PDP_WATCHDOG_TRIGGER_PACKET_COUNT =
               "pdp_watchdog_trigger_packet_count";

       /**
        * The number of polls to perform (at {@link #PDP_WATCHDOG_ERROR_POLL_INTERVAL_MS})
        * after hitting {@link #PDP_WATCHDOG_TRIGGER_PACKET_COUNT} before
        * attempting data connection recovery.
        * @hide
        */
       public static final String PDP_WATCHDOG_ERROR_POLL_COUNT =
               "pdp_watchdog_error_poll_count";

       /**
        * The number of failed PDP reset attempts before moving to something more
        * drastic: re-registering to the network.
        * @hide
        */
       public static final String PDP_WATCHDOG_MAX_PDP_RESET_FAIL_COUNT =
               "pdp_watchdog_max_pdp_reset_fail_count";

       /**
        * A positive value indicates how often the SamplingProfiler
        * should take snapshots. Zero value means SamplingProfiler
        * is disabled.
        *
        * @hide
        */
       public static final String SAMPLING_PROFILER_MS = "sampling_profiler_ms";

       /**
        * URL to open browser on to allow user to manage a prepay account
        * @hide
        */
       public static final String SETUP_PREPAID_DATA_SERVICE_URL =
               "setup_prepaid_data_service_url";

       /**
        * URL to attempt a GET on to see if this is a prepay device
        * @hide
        */
       public static final String SETUP_PREPAID_DETECTION_TARGET_URL =
               "setup_prepaid_detection_target_url";

       /**
        * Host to check for a redirect to after an attempt to GET
        * SETUP_PREPAID_DETECTION_TARGET_URL. (If we redirected there,
        * this is a prepaid device with zero balance.)
        * @hide
        */
       public static final String SETUP_PREPAID_DETECTION_REDIR_HOST =
               "setup_prepaid_detection_redir_host";

       /**
        * The interval in milliseconds at which to check the number of SMS sent out without asking
        * for use permit, to limit the un-authorized SMS usage.
        *
        * @hide
        */
       public static final String SMS_OUTGOING_CHECK_INTERVAL_MS =
               "sms_outgoing_check_interval_ms";

       /**
        * The number of outgoing SMS sent without asking for user permit (of {@link
        * #SMS_OUTGOING_CHECK_INTERVAL_MS}
        *
        * @hide
        */
       public static final String SMS_OUTGOING_CHECK_MAX_COUNT =
               "sms_outgoing_check_max_count";

       /**
        * Used to disable SMS short code confirmation - defaults to true.
        * True indcates we will do the check, etc.  Set to false to disable.
        * @see com.android.internal.telephony.SmsUsageMonitor
        * @hide
        */
       public static final String SMS_SHORT_CODE_CONFIRMATION = "sms_short_code_confirmation";

        /**
         * Used to select which country we use to determine premium sms codes.
         * One of com.android.internal.telephony.SMSDispatcher.PREMIUM_RULE_USE_SIM,
         * com.android.internal.telephony.SMSDispatcher.PREMIUM_RULE_USE_NETWORK,
         * or com.android.internal.telephony.SMSDispatcher.PREMIUM_RULE_USE_BOTH.
         * @hide
         */
        public static final String SMS_SHORT_CODE_RULE = "sms_short_code_rule";

       /**
        * Used to select TCP's default initial receiver window size in segments - defaults to a build config value
        * @hide
        */
       public static final String TCP_DEFAULT_INIT_RWND = "tcp_default_init_rwnd";

       /**
        * Used to disable Tethering on a device - defaults to true
        * @hide
        */
       public static final String TETHER_SUPPORTED = "tether_supported";

       /**
        * Used to require DUN APN on the device or not - defaults to a build config value
        * which defaults to false
        * @hide
        */
       public static final String TETHER_DUN_REQUIRED = "tether_dun_required";

       /**
        * Used to hold a gservices-provisioned apn value for DUN.  If set, or the
        * corresponding build config values are set it will override the APN DB
        * values.
        * Consists of a comma seperated list of strings:
        * "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
        * note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN"
        * @hide
        */
       public static final String TETHER_DUN_APN = "tether_dun_apn";

       /**
        * List of carrier apps which are whitelisted to prompt the user for install when
        * a sim card with matching uicc carrier privilege rules is inserted.
        *
        * The value is "package1;package2;..."
        * @hide
        */
       public static final String CARRIER_APP_WHITELIST = "carrier_app_whitelist";

       /**
        * USB Mass Storage Enabled
        */
       public static final String USB_MASS_STORAGE_ENABLED = "usb_mass_storage_enabled";

       /**
        * If this setting is set (to anything), then all references
        * to Gmail on the device must change to Google Mail.
        */
       public static final String USE_GOOGLE_MAIL = "use_google_mail";

        /**
         * Webview Data reduction proxy key.
         * @hide
         */
        public static final String WEBVIEW_DATA_REDUCTION_PROXY_KEY =
                "webview_data_reduction_proxy_key";

       /**
        * Whether or not the WebView fallback mechanism should be enabled.
        * 0=disabled, 1=enabled.
        * @hide
        */
       public static final String WEBVIEW_FALLBACK_LOGIC_ENABLED =
               "webview_fallback_logic_enabled";

       /**
        * Name of the package used as WebView provider (if unset the provider is instead determined
        * by the system).
        * @hide
        */
       public static final String WEBVIEW_PROVIDER = "webview_provider";

       /**
        * Developer setting to enable WebView multiprocess rendering.
        * @hide
        */
       @SystemApi
       public static final String WEBVIEW_MULTIPROCESS = "webview_multiprocess";

       /**
        * The maximum number of notifications shown in 24 hours when switching networks.
        * @hide
        */
       public static final String NETWORK_SWITCH_NOTIFICATION_DAILY_LIMIT =
              "network_switch_notification_daily_limit";

       /**
        * The minimum time in milliseconds between notifications when switching networks.
        * @hide
        */
       public static final String NETWORK_SWITCH_NOTIFICATION_RATE_LIMIT_MILLIS =
              "network_switch_notification_rate_limit_millis";

       /**
        * Whether to automatically switch away from wifi networks that lose Internet access.
        * Only meaningful if config_networkAvoidBadWifi is set to 0, otherwise the system always
        * avoids such networks. Valid values are:
        *
        * 0: Don't avoid bad wifi, don't prompt the user. Get stuck on bad wifi like it's 2013.
        * null: Ask the user whether to switch away from bad wifi.
        * 1: Avoid bad wifi.
        *
        * @hide
        */
       public static final String NETWORK_AVOID_BAD_WIFI = "network_avoid_bad_wifi";

       /**
        * User setting for ConnectivityManager.getMeteredMultipathPreference(). This value may be
        * overridden by the system based on device or application state. If null, the value
        * specified by config_networkMeteredMultipathPreference is used.
        *
        * @hide
        */
       public static final String NETWORK_METERED_MULTIPATH_PREFERENCE =
               "network_metered_multipath_preference";

       /**
        * The thresholds of the wifi throughput badging (SD, HD etc.) as a comma-delimited list of
        * colon-delimited key-value pairs. The key is the badging enum value defined in
        * android.net.ScoredNetwork and the value is the minimum sustained network throughput in
        * kbps required for the badge. For example: "10:3000,20:5000,30:25000"
        *
        * @hide
        */
       @SystemApi
       public static final String WIFI_BADGING_THRESHOLDS = "wifi_badging_thresholds";

       /**
        * Whether Wifi display is enabled/disabled
        * 0=disabled. 1=enabled.
        * @hide
        */
       public static final String WIFI_DISPLAY_ON = "wifi_display_on";

       /**
        * Whether Wifi display certification mode is enabled/disabled
        * 0=disabled. 1=enabled.
        * @hide
        */
       public static final String WIFI_DISPLAY_CERTIFICATION_ON =
               "wifi_display_certification_on";

       /**
        * WPS Configuration method used by Wifi display, this setting only
        * takes effect when WIFI_DISPLAY_CERTIFICATION_ON is 1 (enabled).
        *
        * Possible values are:
        *
        * WpsInfo.INVALID: use default WPS method chosen by framework
        * WpsInfo.PBC    : use Push button
        * WpsInfo.KEYPAD : use Keypad
        * WpsInfo.DISPLAY: use Display
        * @hide
        */
       public static final String WIFI_DISPLAY_WPS_CONFIG =
           "wifi_display_wps_config";

       /**
        * Whether to notify the user of open networks.
        * <p>
        * If not connected and the scan results have an open network, we will
        * put this notification up. If we attempt to connect to a network or
        * the open network(s) disappear, we remove the notification. When we
        * show the notification, we will not show it again for
        * {@link android.provider.Settings.Secure#WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY} time.
        *
        * @deprecated This feature is no longer controlled by this setting in
        * {@link android.os.Build.VERSION_CODES#O}.
        */
       @Deprecated
       public static final String WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON =
               "wifi_networks_available_notification_on";

       /**
        * {@hide}
        */
       public static final String WIMAX_NETWORKS_AVAILABLE_NOTIFICATION_ON =
               "wimax_networks_available_notification_on";

       /**
        * Delay (in seconds) before repeating the Wi-Fi networks available notification.
        * Connecting to a network will reset the timer.
        */
       public static final String WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY =
               "wifi_networks_available_repeat_delay";

       /**
        * 802.11 country code in ISO 3166 format
        * @hide
        */
       public static final String WIFI_COUNTRY_CODE = "wifi_country_code";

       /**
        * The interval in milliseconds to issue wake up scans when wifi needs
        * to connect. This is necessary to connect to an access point when
        * device is on the move and the screen is off.
        * @hide
        */
       public static final String WIFI_FRAMEWORK_SCAN_INTERVAL_MS =
               "wifi_framework_scan_interval_ms";

       /**
        * The interval in milliseconds after which Wi-Fi is considered idle.
        * When idle, it is possible for the device to be switched from Wi-Fi to
        * the mobile data network.
        * @hide
        */
       public static final String WIFI_IDLE_MS = "wifi_idle_ms";

       /**
        * When the number of open networks exceeds this number, the
        * least-recently-used excess networks will be removed.
        */
       public static final String WIFI_NUM_OPEN_NETWORKS_KEPT = "wifi_num_open_networks_kept";

       /**
        * Whether the Wi-Fi should be on.  Only the Wi-Fi service should touch this.
        */
       public static final String WIFI_ON = "wifi_on";

       /**
        * Setting to allow scans to be enabled even wifi is turned off for connectivity.
        * @hide
        */
       public static final String WIFI_SCAN_ALWAYS_AVAILABLE =
                "wifi_scan_always_enabled";

        /**
         * Value to specify if Wi-Fi Wakeup feature is enabled.
         *
         * Type: int (0 for false, 1 for true)
         * @hide
         */
        @SystemApi
        public static final String WIFI_WAKEUP_ENABLED = "wifi_wakeup_enabled";

        /**
         * Value to specify if Wi-Fi Wakeup is available.
         *
         * Wi-Fi Wakeup will only operate if it's available
         * and {@link #WIFI_WAKEUP_ENABLED} is true.
         *
         * Type: int (0 for false, 1 for true)
         * @hide
         */
        public static final String WIFI_WAKEUP_AVAILABLE = "wifi_wakeup_available";

        /**
         * Value to specify whether network quality scores and badging should be shown in the UI.
         *
         * Type: int (0 for false, 1 for true)
         * @hide
         */
        public static final String NETWORK_SCORING_UI_ENABLED = "network_scoring_ui_enabled";

        /**
         * Value to specify if network recommendations from
         * {@link com.android.server.NetworkScoreService} are enabled.
         *
         * Type: int
         * Valid values:
         *   -1 = Forced off
         *    0 = Disabled
         *    1 = Enabled
         *
         * Most readers of this setting should simply check if value == 1 to determined the
         * enabled state.
         * @hide
         */
        public static final String NETWORK_RECOMMENDATIONS_ENABLED =
                "network_recommendations_enabled";

        /**
         * Which package name to use for network recommendations. If null, network recommendations
         * will neither be requested nor accepted.
         *
         * Use {@link NetworkScoreManager#getActiveScorerPackage()} to read this value and
         * {@link NetworkScoreManager#setActiveScorer(String)} to write it.
         *
         * Type: string - package name
         * @hide
         */
        public static final String NETWORK_RECOMMENDATIONS_PACKAGE =
                "network_recommendations_package";

        /**
         * The package name of the application that connect and secures high quality open wifi
         * networks automatically.
         *
         * Type: string package name or null if the feature is either not provided or disabled.
         * @hide
         */
        public static final String USE_OPEN_WIFI_PACKAGE = "use_open_wifi_package";

        /**
         * The number of milliseconds the {@link com.android.server.NetworkScoreService}
         * will give a recommendation request to complete before returning a default response.
         *
         * Type: long
         * @hide
         * @deprecated to be removed
         */
        public static final String NETWORK_RECOMMENDATION_REQUEST_TIMEOUT_MS =
                "network_recommendation_request_timeout_ms";

        /**
         * The expiration time in milliseconds for the {@link android.net.WifiKey} request cache in
         * {@link com.android.server.wifi.RecommendedNetworkEvaluator}.
         *
         * Type: long
         * @hide
         */
        public static final String RECOMMENDED_NETWORK_EVALUATOR_CACHE_EXPIRY_MS =
                "recommended_network_evaluator_cache_expiry_ms";

       /**
        * Settings to allow BLE scans to be enabled even when Bluetooth is turned off for
        * connectivity.
        * @hide
        */
       public static final String BLE_SCAN_ALWAYS_AVAILABLE =
               "ble_scan_always_enabled";

       /**
        * Used to save the Wifi_ON state prior to tethering.
        * This state will be checked to restore Wifi after
        * the user turns off tethering.
        *
        * @hide
        */
       public static final String WIFI_SAVED_STATE = "wifi_saved_state";

       /**
        * The interval in milliseconds to scan as used by the wifi supplicant
        * @hide
        */
       public static final String WIFI_SUPPLICANT_SCAN_INTERVAL_MS =
               "wifi_supplicant_scan_interval_ms";

        /**
         * whether frameworks handles wifi auto-join
         * @hide
         */
       public static final String WIFI_ENHANCED_AUTO_JOIN =
                "wifi_enhanced_auto_join";

        /**
         * whether settings show RSSI
         * @hide
         */
        public static final String WIFI_NETWORK_SHOW_RSSI =
                "wifi_network_show_rssi";

        /**
        * The interval in milliseconds to scan at supplicant when p2p is connected
        * @hide
        */
       public static final String WIFI_SCAN_INTERVAL_WHEN_P2P_CONNECTED_MS =
               "wifi_scan_interval_p2p_connected_ms";

       /**
        * Whether the Wi-Fi watchdog is enabled.
        */
       public static final String WIFI_WATCHDOG_ON = "wifi_watchdog_on";

       /**
        * Setting to turn off poor network avoidance on Wi-Fi. Feature is enabled by default and
        * the setting needs to be set to 0 to disable it.
        * @hide
        */
       public static final String WIFI_WATCHDOG_POOR_NETWORK_TEST_ENABLED =
               "wifi_watchdog_poor_network_test_enabled";

       /**
        * Setting to turn on suspend optimizations at screen off on Wi-Fi. Enabled by default and
        * needs to be set to 0 to disable it.
        * @hide
        */
       public static final String WIFI_SUSPEND_OPTIMIZATIONS_ENABLED =
               "wifi_suspend_optimizations_enabled";

       /**
        * Setting to enable verbose logging in Wi-Fi; disabled by default, and setting to 1
        * will enable it. In the future, additional values may be supported.
        * @hide
        */
       public static final String WIFI_VERBOSE_LOGGING_ENABLED =
               "wifi_verbose_logging_enabled";

       /**
        * The maximum number of times we will retry a connection to an access
        * point for which we have failed in acquiring an IP address from DHCP.
        * A value of N means that we will make N+1 connection attempts in all.
        */
       public static final String WIFI_MAX_DHCP_RETRY_COUNT = "wifi_max_dhcp_retry_count";

       /**
        * Maximum amount of time in milliseconds to hold a wakelock while waiting for mobile
        * data connectivity to be established after a disconnect from Wi-Fi.
        */
       public static final String WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS =
           "wifi_mobile_data_transition_wakelock_timeout_ms";

       /**
        * This setting controls whether WiFi configurations created by a Device Owner app
        * should be locked down (that is, be editable or removable only by the Device Owner App,
        * not even by Settings app).
        * This setting takes integer values. Non-zero values mean DO created configurations
        * are locked down. Value of zero means they are not. Default value in the absence of
        * actual value to this setting is 0.
        */
       public static final String WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN =
               "wifi_device_owner_configs_lockdown";

       /**
        * The operational wifi frequency band
        * Set to one of {@link WifiManager#WIFI_FREQUENCY_BAND_AUTO},
        * {@link WifiManager#WIFI_FREQUENCY_BAND_5GHZ} or
        * {@link WifiManager#WIFI_FREQUENCY_BAND_2GHZ}
        *
        * @hide
        */
       public static final String WIFI_FREQUENCY_BAND = "wifi_frequency_band";

       /**
        * The Wi-Fi peer-to-peer device name
        * @hide
        */
       public static final String WIFI_P2P_DEVICE_NAME = "wifi_p2p_device_name";

       /**
        * The min time between wifi disable and wifi enable
        * @hide
        */
       public static final String WIFI_REENABLE_DELAY_MS = "wifi_reenable_delay";

       /**
        * Timeout for ephemeral networks when all known BSSIDs go out of range. We will disconnect
        * from an ephemeral network if there is no BSSID for that network with a non-null score that
        * has been seen in this time period.
        *
        * If this is less than or equal to zero, we use a more conservative behavior and only check
        * for a non-null score from the currently connected or target BSSID.
        * @hide
        */
       public static final String WIFI_EPHEMERAL_OUT_OF_RANGE_TIMEOUT_MS =
               "wifi_ephemeral_out_of_range_timeout_ms";

       /**
        * The number of milliseconds to delay when checking for data stalls during
        * non-aggressive detection. (screen is turned off.)
        * @hide
        */
       public static final String DATA_STALL_ALARM_NON_AGGRESSIVE_DELAY_IN_MS =
               "data_stall_alarm_non_aggressive_delay_in_ms";

       /**
        * The number of milliseconds to delay when checking for data stalls during
        * aggressive detection. (screen on or suspected data stall)
        * @hide
        */
       public static final String DATA_STALL_ALARM_AGGRESSIVE_DELAY_IN_MS =
               "data_stall_alarm_aggressive_delay_in_ms";

       /**
        * The number of milliseconds to allow the provisioning apn to remain active
        * @hide
        */
       public static final String PROVISIONING_APN_ALARM_DELAY_IN_MS =
               "provisioning_apn_alarm_delay_in_ms";

       /**
        * The interval in milliseconds at which to check gprs registration
        * after the first registration mismatch of gprs and voice service,
        * to detect possible data network registration problems.
        *
        * @hide
        */
       public static final String GPRS_REGISTER_CHECK_PERIOD_MS =
               "gprs_register_check_period_ms";

       /**
        * Nonzero causes Log.wtf() to crash.
        * @hide
        */
       public static final String WTF_IS_FATAL = "wtf_is_fatal";

       /**
        * Ringer mode. This is used internally, changing this value will not
        * change the ringer mode. See AudioManager.
        */
       public static final String MODE_RINGER = "mode_ringer";

       /**
        * Overlay display devices setting.
        * The associated value is a specially formatted string that describes the
        * size and density of simulated secondary display devices.
        * <p>
        * Format: {width}x{height}/{dpi};...
        * </p><p>
        * Example:
        * <ul>
        * <li><code>1280x720/213</code>: make one overlay that is 1280x720 at 213dpi.</li>
        * <li><code>1920x1080/320;1280x720/213</code>: make two overlays, the first
        * at 1080p and the second at 720p.</li>
        * <li>If the value is empty, then no overlay display devices are created.</li>
        * </ul></p>
        *
        * @hide
        */
       public static final String OVERLAY_DISPLAY_DEVICES = "overlay_display_devices";

        /**
         * Threshold values for the duration and level of a discharge cycle,
         * under which we log discharge cycle info.
         *
         * @hide
         */
        public static final String
                BATTERY_DISCHARGE_DURATION_THRESHOLD = "battery_discharge_duration_threshold";

        /** @hide */
        public static final String BATTERY_DISCHARGE_THRESHOLD = "battery_discharge_threshold";

        /**
         * Flag for allowing ActivityManagerService to send ACTION_APP_ERROR
         * intents on application crashes and ANRs. If this is disabled, the
         * crash/ANR dialog will never display the "Report" button.
         * <p>
         * Type: int (0 = disallow, 1 = allow)
         *
         * @hide
         */
        public static final String SEND_ACTION_APP_ERROR = "send_action_app_error";

        /**
         * Maximum age of entries kept by {@link DropBoxManager}.
         *
         * @hide
         */
        public static final String DROPBOX_AGE_SECONDS = "dropbox_age_seconds";

        /**
         * Maximum number of entry files which {@link DropBoxManager} will keep
         * around.
         *
         * @hide
         */
        public static final String DROPBOX_MAX_FILES = "dropbox_max_files";

        /**
         * Maximum amount of disk space used by {@link DropBoxManager} no matter
         * what.
         *
         * @hide
         */
        public static final String DROPBOX_QUOTA_KB = "dropbox_quota_kb";

        /**
         * Percent of free disk (excluding reserve) which {@link DropBoxManager}
         * will use.
         *
         * @hide
         */
        public static final String DROPBOX_QUOTA_PERCENT = "dropbox_quota_percent";

        /**
         * Percent of total disk which {@link DropBoxManager} will never dip
         * into.
         *
         * @hide
         */
        public static final String DROPBOX_RESERVE_PERCENT = "dropbox_reserve_percent";

        /**
         * Prefix for per-tag dropbox disable/enable settings.
         *
         * @hide
         */
        public static final String DROPBOX_TAG_PREFIX = "dropbox:";

        /**
         * Lines of logcat to include with system crash/ANR/etc. reports, as a
         * prefix of the dropbox tag of the report type. For example,
         * "logcat_for_system_server_anr" controls the lines of logcat captured
         * with system server ANR reports. 0 to disable.
         *
         * @hide
         */
        public static final String ERROR_LOGCAT_PREFIX = "logcat_for_";

        /**
         * The interval in minutes after which the amount of free storage left
         * on the device is logged to the event log
         *
         * @hide
         */
        public static final String SYS_FREE_STORAGE_LOG_INTERVAL = "sys_free_storage_log_interval";

        /**
         * Threshold for the amount of change in disk free space required to
         * report the amount of free space. Used to prevent spamming the logs
         * when the disk free space isn't changing frequently.
         *
         * @hide
         */
        public static final String
                DISK_FREE_CHANGE_REPORTING_THRESHOLD = "disk_free_change_reporting_threshold";

        /**
         * Minimum percentage of free storage on the device that is used to
         * determine if the device is running low on storage. The default is 10.
         * <p>
         * Say this value is set to 10, the device is considered running low on
         * storage if 90% or more of the device storage is filled up.
         *
         * @hide
         */
        public static final String
                SYS_STORAGE_THRESHOLD_PERCENTAGE = "sys_storage_threshold_percentage";

        /**
         * Maximum byte size of the low storage threshold. This is to ensure
         * that {@link #SYS_STORAGE_THRESHOLD_PERCENTAGE} does not result in an
         * overly large threshold for large storage devices. Currently this must
         * be less than 2GB. This default is 500MB.
         *
         * @hide
         */
        public static final String
                SYS_STORAGE_THRESHOLD_MAX_BYTES = "sys_storage_threshold_max_bytes";

        /**
         * Minimum bytes of free storage on the device before the data partition
         * is considered full. By default, 1 MB is reserved to avoid system-wide
         * SQLite disk full exceptions.
         *
         * @hide
         */
        public static final String
                SYS_STORAGE_FULL_THRESHOLD_BYTES = "sys_storage_full_threshold_bytes";

        /**
         * Minimum percentage of storage on the device that is reserved for
         * cached data.
         *
         * @hide
         */
        public static final String
                SYS_STORAGE_CACHE_PERCENTAGE = "sys_storage_cache_percentage";

        /**
         * Maximum bytes of storage on the device that is reserved for cached
         * data.
         *
         * @hide
         */
        public static final String
                SYS_STORAGE_CACHE_MAX_BYTES = "sys_storage_cache_max_bytes";

        /**
         * The maximum reconnect delay for short network outages or when the
         * network is suspended due to phone use.
         *
         * @hide
         */
        public static final String
                SYNC_MAX_RETRY_DELAY_IN_SECONDS = "sync_max_retry_delay_in_seconds";

        /**
         * The number of milliseconds to delay before sending out
         * {@link ConnectivityManager#CONNECTIVITY_ACTION} broadcasts. Ignored.
         *
         * @hide
         */
        public static final String CONNECTIVITY_CHANGE_DELAY = "connectivity_change_delay";


        /**
         * Network sampling interval, in seconds. We'll generate link information
         * about bytes/packets sent and error rates based on data sampled in this interval
         *
         * @hide
         */

        public static final String CONNECTIVITY_SAMPLING_INTERVAL_IN_SECONDS =
                "connectivity_sampling_interval_in_seconds";

        /**
         * The series of successively longer delays used in retrying to download PAC file.
         * Last delay is used between successful PAC downloads.
         *
         * @hide
         */
        public static final String PAC_CHANGE_DELAY = "pac_change_delay";

        /**
         * Don't attempt to detect captive portals.
         *
         * @hide
         */
        public static final int CAPTIVE_PORTAL_MODE_IGNORE = 0;

        /**
         * When detecting a captive portal, display a notification that
         * prompts the user to sign in.
         *
         * @hide
         */
        public static final int CAPTIVE_PORTAL_MODE_PROMPT = 1;

        /**
         * When detecting a captive portal, immediately disconnect from the
         * network and do not reconnect to that network in the future.
         *
         * @hide
         */
        public static final int CAPTIVE_PORTAL_MODE_AVOID = 2;

        /**
         * What to do when connecting a network that presents a captive portal.
         * Must be one of the CAPTIVE_PORTAL_MODE_* constants above.
         *
         * The default for this setting is CAPTIVE_PORTAL_MODE_PROMPT.
         * @hide
         */
        public static final String CAPTIVE_PORTAL_MODE = "captive_portal_mode";

        /**
         * Setting to turn off captive portal detection. Feature is enabled by
         * default and the setting needs to be set to 0 to disable it.
         *
         * @deprecated use CAPTIVE_PORTAL_MODE_IGNORE to disable captive portal detection
         * @hide
         */
        @Deprecated
        public static final String
                CAPTIVE_PORTAL_DETECTION_ENABLED = "captive_portal_detection_enabled";

        /**
         * The server used for captive portal detection upon a new conection. A
         * 204 response code from the server is used for validation.
         * TODO: remove this deprecated symbol.
         *
         * @hide
         */
        public static final String CAPTIVE_PORTAL_SERVER = "captive_portal_server";

        /**
         * The URL used for HTTPS captive portal detection upon a new connection.
         * A 204 response code from the server is used for validation.
         *
         * @hide
         */
        public static final String CAPTIVE_PORTAL_HTTPS_URL = "captive_portal_https_url";

        /**
         * The URL used for HTTP captive portal detection upon a new connection.
         * A 204 response code from the server is used for validation.
         *
         * @hide
         */
        public static final String CAPTIVE_PORTAL_HTTP_URL = "captive_portal_http_url";

        /**
         * The URL used for fallback HTTP captive portal detection when previous HTTP
         * and HTTPS captive portal detection attemps did not return a conclusive answer.
         *
         * @hide
         */
        public static final String CAPTIVE_PORTAL_FALLBACK_URL = "captive_portal_fallback_url";

        /**
         * A comma separated list of URLs used for captive portal detection in addition to the
         * fallback HTTP url associated with the CAPTIVE_PORTAL_FALLBACK_URL settings.
         *
         * @hide
         */
        public static final String CAPTIVE_PORTAL_OTHER_FALLBACK_URLS =
                "captive_portal_other_fallback_urls";

        /**
         * Whether to use HTTPS for network validation. This is enabled by default and the setting
         * needs to be set to 0 to disable it. This setting is a misnomer because captive portals
         * don't actually use HTTPS, but it's consistent with the other settings.
         *
         * @hide
         */
        public static final String CAPTIVE_PORTAL_USE_HTTPS = "captive_portal_use_https";

        /**
         * Which User-Agent string to use in the header of the captive portal detection probes.
         * The User-Agent field is unset when this setting has no value (HttpUrlConnection default).
         *
         * @hide
         */
        public static final String CAPTIVE_PORTAL_USER_AGENT = "captive_portal_user_agent";

        /**
         * Whether network service discovery is enabled.
         *
         * @hide
         */
        public static final String NSD_ON = "nsd_on";

        /**
         * Let user pick default install location.
         *
         * @hide
         */
        public static final String SET_INSTALL_LOCATION = "set_install_location";

        /**
         * Default install location value.
         * 0 = auto, let system decide
         * 1 = internal
         * 2 = sdcard
         * @hide
         */
        public static final String DEFAULT_INSTALL_LOCATION = "default_install_location";

        /**
         * ms during which to consume extra events related to Inet connection
         * condition after a transtion to fully-connected
         *
         * @hide
         */
        public static final String
                INET_CONDITION_DEBOUNCE_UP_DELAY = "inet_condition_debounce_up_delay";

        /**
         * ms during which to consume extra events related to Inet connection
         * condtion after a transtion to partly-connected
         *
         * @hide
         */
        public static final String
                INET_CONDITION_DEBOUNCE_DOWN_DELAY = "inet_condition_debounce_down_delay";

        /** {@hide} */
        public static final String
                READ_EXTERNAL_STORAGE_ENFORCED_DEFAULT = "read_external_storage_enforced_default";

        /**
         * Host name and port for global http proxy. Uses ':' seperator for
         * between host and port.
         */
        public static final String HTTP_PROXY = "http_proxy";

        /**
         * Host name for global http proxy. Set via ConnectivityManager.
         *
         * @hide
         */
        public static final String GLOBAL_HTTP_PROXY_HOST = "global_http_proxy_host";

        /**
         * Integer host port for global http proxy. Set via ConnectivityManager.
         *
         * @hide
         */
        public static final String GLOBAL_HTTP_PROXY_PORT = "global_http_proxy_port";

        /**
         * Exclusion list for global proxy. This string contains a list of
         * comma-separated domains where the global proxy does not apply.
         * Domains should be listed in a comma- separated list. Example of
         * acceptable formats: ".domain1.com,my.domain2.com" Use
         * ConnectivityManager to set/get.
         *
         * @hide
         */
        public static final String
                GLOBAL_HTTP_PROXY_EXCLUSION_LIST = "global_http_proxy_exclusion_list";

        /**
         * The location PAC File for the proxy.
         * @hide
         */
        public static final String
                GLOBAL_HTTP_PROXY_PAC = "global_proxy_pac_url";

        /**
         * Enables the UI setting to allow the user to specify the global HTTP
         * proxy and associated exclusion list.
         *
         * @hide
         */
        public static final String SET_GLOBAL_HTTP_PROXY = "set_global_http_proxy";

        /**
         * Setting for default DNS in case nobody suggests one
         *
         * @hide
         */
        public static final String DEFAULT_DNS_SERVER = "default_dns_server";

        /** {@hide} */
        public static final String
                BLUETOOTH_HEADSET_PRIORITY_PREFIX = "bluetooth_headset_priority_";
        /** {@hide} */
        public static final String
                BLUETOOTH_A2DP_SINK_PRIORITY_PREFIX = "bluetooth_a2dp_sink_priority_";
        /** {@hide} */
        public static final String
                BLUETOOTH_A2DP_SRC_PRIORITY_PREFIX = "bluetooth_a2dp_src_priority_";
        /** {@hide} */
        public static final String BLUETOOTH_A2DP_SUPPORTS_OPTIONAL_CODECS_PREFIX =
                "bluetooth_a2dp_supports_optional_codecs_";
        /** {@hide} */
        public static final String BLUETOOTH_A2DP_OPTIONAL_CODECS_ENABLED_PREFIX =
                "bluetooth_a2dp_optional_codecs_enabled_";
        /** {@hide} */
        public static final String
                BLUETOOTH_INPUT_DEVICE_PRIORITY_PREFIX = "bluetooth_input_device_priority_";
        /** {@hide} */
        public static final String
                BLUETOOTH_MAP_PRIORITY_PREFIX = "bluetooth_map_priority_";
        /** {@hide} */
        public static final String
                BLUETOOTH_MAP_CLIENT_PRIORITY_PREFIX = "bluetooth_map_client_priority_";
        /** {@hide} */
        public static final String
                BLUETOOTH_PBAP_CLIENT_PRIORITY_PREFIX = "bluetooth_pbap_client_priority_";
        /** {@hide} */
        public static final String
                BLUETOOTH_SAP_PRIORITY_PREFIX = "bluetooth_sap_priority_";
        /** {@hide} */
        public static final String
                BLUETOOTH_PAN_PRIORITY_PREFIX = "bluetooth_pan_priority_";

        /**
         * Activity manager specific settings.
         * This is encoded as a key=value list, separated by commas. Ex:
         *
         * "gc_timeout=5000,max_cached_processes=24"
         *
         * The following keys are supported:
         *
         * <pre>
         * max_cached_processes                 (int)
         * background_settle_time               (long)
         * fgservice_min_shown_time             (long)
         * fgservice_min_report_time            (long)
         * fgservice_screen_on_before_time      (long)
         * fgservice_screen_on_after_time       (long)
         * content_provider_retain_time         (long)
         * gc_timeout                           (long)
         * gc_min_interval                      (long)
         * full_pss_min_interval                (long)
         * full_pss_lowered_interval            (long)
         * power_check_delay                    (long)
         * wake_lock_min_check_duration         (long)
         * cpu_min_check_duration               (long)
         * service_usage_interaction_time       (long)
         * usage_stats_interaction_interval     (long)
         * service_restart_duration             (long)
         * service_reset_run_duration           (long)
         * service_restart_duration_factor      (int)
         * service_min_restart_time_between     (long)
         * service_max_inactivity               (long)
         * service_bg_start_timeout             (long)
         * </pre>
         *
         * <p>
         * Type: string
         * @hide
         * @see com.android.server.am.ActivityManagerConstants
         */
        public static final String ACTIVITY_MANAGER_CONSTANTS = "activity_manager_constants";

        /**
         * Device Idle (Doze) specific settings.
         * This is encoded as a key=value list, separated by commas. Ex:
         *
         * "inactive_to=60000,sensing_to=400000"
         *
         * The following keys are supported:
         *
         * <pre>
         * inactive_to                      (long)
         * sensing_to                       (long)
         * motion_inactive_to               (long)
         * idle_after_inactive_to           (long)
         * idle_pending_to                  (long)
         * max_idle_pending_to              (long)
         * idle_pending_factor              (float)
         * idle_to                          (long)
         * max_idle_to                      (long)
         * idle_factor                      (float)
         * min_time_to_alarm                (long)
         * max_temp_app_whitelist_duration  (long)
         * notification_whitelist_duration  (long)
         * </pre>
         *
         * <p>
         * Type: string
         * @hide
         * @see com.android.server.DeviceIdleController.Constants
         */
        public static final String DEVICE_IDLE_CONSTANTS = "device_idle_constants";

        /**
         * Device Idle (Doze) specific settings for watches. See {@code #DEVICE_IDLE_CONSTANTS}
         *
         * <p>
         * Type: string
         * @hide
         * @see com.android.server.DeviceIdleController.Constants
         */
        public static final String DEVICE_IDLE_CONSTANTS_WATCH = "device_idle_constants_watch";

        /**
         * Battery Saver specific settings
         * This is encoded as a key=value list, separated by commas. Ex:
         *
         * "vibration_disabled=true,adjust_brightness_factor=0.5"
         *
         * The following keys are supported:
         *
         * <pre>
         * vibration_disabled                (boolean)
         * animation_disabled                (boolean)
         * soundtrigger_disabled             (boolean)
         * fullbackup_deferred               (boolean)
         * keyvaluebackup_deferred           (boolean)
         * firewall_disabled                 (boolean)
         * gps_mode                          (int)
         * adjust_brightness_disabled        (boolean)
         * adjust_brightness_factor          (float)
         * </pre>
         * @hide
         * @see com.android.server.power.BatterySaverPolicy
         */
        public static final String BATTERY_SAVER_CONSTANTS = "battery_saver_constants";

        /**
         * App standby (app idle) specific settings.
         * This is encoded as a key=value list, separated by commas. Ex:
         *
         * "idle_duration=5000,parole_interval=4500"
         *
         * The following keys are supported:
         *
         * <pre>
         * idle_duration2       (long)
         * wallclock_threshold  (long)
         * parole_interval      (long)
         * parole_duration      (long)
         *
         * idle_duration        (long) // This is deprecated and used to circumvent b/26355386.
         * </pre>
         *
         * <p>
         * Type: string
         * @hide
         * @see com.android.server.usage.UsageStatsService.SettingsObserver
         */
        public static final String APP_IDLE_CONSTANTS = "app_idle_constants";

        /**
         * Power manager specific settings.
         * This is encoded as a key=value list, separated by commas. Ex:
         *
         * "no_cached_wake_locks=1"
         *
         * The following keys are supported:
         *
         * <pre>
         * no_cached_wake_locks                 (boolean)
         * </pre>
         *
         * <p>
         * Type: string
         * @hide
         * @see com.android.server.power.PowerManagerConstants
         */
        public static final String POWER_MANAGER_CONSTANTS = "power_manager_constants";

        /**
         * Alarm manager specific settings.
         * This is encoded as a key=value list, separated by commas. Ex:
         *
         * "min_futurity=5000,allow_while_idle_short_time=4500"
         *
         * The following keys are supported:
         *
         * <pre>
         * min_futurity                         (long)
         * min_interval                         (long)
         * allow_while_idle_short_time          (long)
         * allow_while_idle_long_time           (long)
         * allow_while_idle_whitelist_duration  (long)
         * </pre>
         *
         * <p>
         * Type: string
         * @hide
         * @see com.android.server.AlarmManagerService.Constants
         */
        public static final String ALARM_MANAGER_CONSTANTS = "alarm_manager_constants";

        /**
         * Job scheduler specific settings.
         * This is encoded as a key=value list, separated by commas. Ex:
         *
         * "min_ready_jobs_count=2,moderate_use_factor=.5"
         *
         * The following keys are supported:
         *
         * <pre>
         * min_idle_count                       (int)
         * min_charging_count                   (int)
         * min_connectivity_count               (int)
         * min_content_count                    (int)
         * min_ready_jobs_count                 (int)
         * heavy_use_factor                     (float)
         * moderate_use_factor                  (float)
         * fg_job_count                         (int)
         * bg_normal_job_count                  (int)
         * bg_moderate_job_count                (int)
         * bg_low_job_count                     (int)
         * bg_critical_job_count                (int)
         * </pre>
         *
         * <p>
         * Type: string
         * @hide
         * @see com.android.server.job.JobSchedulerService.Constants
         */
        public static final String JOB_SCHEDULER_CONSTANTS = "job_scheduler_constants";

        /**
         * ShortcutManager specific settings.
         * This is encoded as a key=value list, separated by commas. Ex:
         *
         * "reset_interval_sec=86400,max_updates_per_interval=1"
         *
         * The following keys are supported:
         *
         * <pre>
         * reset_interval_sec              (long)
         * max_updates_per_interval        (int)
         * max_icon_dimension_dp           (int, DP)
         * max_icon_dimension_dp_lowram    (int, DP)
         * max_shortcuts                   (int)
         * icon_quality                    (int, 0-100)
         * icon_format                     (String)
         * </pre>
         *
         * <p>
         * Type: string
         * @hide
         * @see com.android.server.pm.ShortcutService.ConfigConstants
         */
        public static final String SHORTCUT_MANAGER_CONSTANTS = "shortcut_manager_constants";

        /**
         * DevicePolicyManager specific settings.
         * This is encoded as a key=value list, separated by commas. Ex:
         *
         * <pre>
         * das_died_service_reconnect_backoff_sec       (long)
         * das_died_service_reconnect_backoff_increase  (float)
         * das_died_service_reconnect_max_backoff_sec   (long)
         * </pre>
         *
         * <p>
         * Type: string
         * @hide
         * see also com.android.server.devicepolicy.DevicePolicyConstants
         */
        public static final String DEVICE_POLICY_CONSTANTS = "device_policy_constants";

        /**
         * Get the key that retrieves a bluetooth headset's priority.
         * @hide
         */
        public static final String getBluetoothHeadsetPriorityKey(String address) {
            return BLUETOOTH_HEADSET_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
        }

        /**
         * Get the key that retrieves a bluetooth a2dp sink's priority.
         * @hide
         */
        public static final String getBluetoothA2dpSinkPriorityKey(String address) {
            return BLUETOOTH_A2DP_SINK_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
        }

        /**
         * Get the key that retrieves a bluetooth a2dp src's priority.
         * @hide
         */
        public static final String getBluetoothA2dpSrcPriorityKey(String address) {
            return BLUETOOTH_A2DP_SRC_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
        }

        /**
         * Get the key that retrieves a bluetooth a2dp device's ability to support optional codecs.
         * @hide
         */
        public static final String getBluetoothA2dpSupportsOptionalCodecsKey(String address) {
            return BLUETOOTH_A2DP_SUPPORTS_OPTIONAL_CODECS_PREFIX +
                    address.toUpperCase(Locale.ROOT);
        }

        /**
         * Get the key that retrieves whether a bluetooth a2dp device should have optional codecs
         * enabled.
         * @hide
         */
        public static final String getBluetoothA2dpOptionalCodecsEnabledKey(String address) {
            return BLUETOOTH_A2DP_OPTIONAL_CODECS_ENABLED_PREFIX +
                    address.toUpperCase(Locale.ROOT);
        }

        /**
         * Get the key that retrieves a bluetooth Input Device's priority.
         * @hide
         */
        public static final String getBluetoothInputDevicePriorityKey(String address) {
            return BLUETOOTH_INPUT_DEVICE_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
        }

        /**
         * Get the key that retrieves a bluetooth pan client priority.
         * @hide
         */
        public static final String getBluetoothPanPriorityKey(String address) {
            return BLUETOOTH_PAN_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
        }

        /**
         * Get the key that retrieves a bluetooth map priority.
         * @hide
         */
        public static final String getBluetoothMapPriorityKey(String address) {
            return BLUETOOTH_MAP_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
        }

        /**
         * Get the key that retrieves a bluetooth map client priority.
         * @hide
         */
        public static final String getBluetoothMapClientPriorityKey(String address) {
            return BLUETOOTH_MAP_CLIENT_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
        }

        /**
         * Get the key that retrieves a bluetooth pbap client priority.
         * @hide
         */
        public static final String getBluetoothPbapClientPriorityKey(String address) {
            return BLUETOOTH_PBAP_CLIENT_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
        }

        /**
         * Get the key that retrieves a bluetooth sap priority.
         * @hide
         */
        public static final String getBluetoothSapPriorityKey(String address) {
            return BLUETOOTH_SAP_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
        }

        /**
         * Scaling factor for normal window animations. Setting to 0 will
         * disable window animations.
         */
        public static final String WINDOW_ANIMATION_SCALE = "window_animation_scale";

        /**
         * Scaling factor for activity transition animations. Setting to 0 will
         * disable window animations.
         */
        public static final String TRANSITION_ANIMATION_SCALE = "transition_animation_scale";

        /**
         * Scaling factor for Animator-based animations. This affects both the
         * start delay and duration of all such animations. Setting to 0 will
         * cause animations to end immediately. The default value is 1.
         */
        public static final String ANIMATOR_DURATION_SCALE = "animator_duration_scale";

        /**
         * Scaling factor for normal window animations. Setting to 0 will
         * disable window animations.
         *
         * @hide
         */
        public static final String FANCY_IME_ANIMATIONS = "fancy_ime_animations";

        /**
         * If 0, the compatibility mode is off for all applications.
         * If 1, older applications run under compatibility mode.
         * TODO: remove this settings before code freeze (bug/1907571)
         * @hide
         */
        public static final String COMPATIBILITY_MODE = "compatibility_mode";

        /**
         * CDMA only settings
         * Emergency Tone  0 = Off
         *                 1 = Alert
         *                 2 = Vibrate
         * @hide
         */
        public static final String EMERGENCY_TONE = "emergency_tone";

        /**
         * CDMA only settings
         * Whether the auto retry is enabled. The value is
         * boolean (1 or 0).
         * @hide
         */
        public static final String CALL_AUTO_RETRY = "call_auto_retry";

        /**
         * A setting that can be read whether the emergency affordance is currently needed.
         * The value is a boolean (1 or 0).
         * @hide
         */
        public static final String EMERGENCY_AFFORDANCE_NEEDED = "emergency_affordance_needed";

        /**
         * See RIL_PreferredNetworkType in ril.h
         * @hide
         */
        public static final String PREFERRED_NETWORK_MODE =
                "preferred_network_mode";

        /**
         * Name of an application package to be debugged.
         */
        public static final String DEBUG_APP = "debug_app";

        /**
         * If 1, when launching DEBUG_APP it will wait for the debugger before
         * starting user code.  If 0, it will run normally.
         */
        public static final String WAIT_FOR_DEBUGGER = "wait_for_debugger";

        /**
         * Control whether the process CPU usage meter should be shown.
         *
         * @deprecated This functionality is no longer available as of
         * {@link android.os.Build.VERSION_CODES#N_MR1}.
         */
        @Deprecated
        public static final String SHOW_PROCESSES = "show_processes";

        /**
         * If 1 low power mode is enabled.
         * @hide
         */
        public static final String LOW_POWER_MODE = "low_power";

        /**
         * Battery level [1-99] at which low power mode automatically turns on.
         * If 0, it will not automatically turn on.
         * @hide
         */
        public static final String LOW_POWER_MODE_TRIGGER_LEVEL = "low_power_trigger_level";

         /**
         * If not 0, the activity manager will aggressively finish activities and
         * processes as soon as they are no longer needed.  If 0, the normal
         * extended lifetime is used.
         */
        public static final String ALWAYS_FINISH_ACTIVITIES = "always_finish_activities";

        /**
         * Use Dock audio output for media:
         *      0 = disabled
         *      1 = enabled
         * @hide
         */
        public static final String DOCK_AUDIO_MEDIA_ENABLED = "dock_audio_media_enabled";

        /**
         * The surround sound formats AC3, DTS or IEC61937 are
         * available for use if they are detected.
         * This is the default mode.
         *
         * Note that AUTO is equivalent to ALWAYS for Android TVs and other
         * devices that have an S/PDIF output. This is because S/PDIF
         * is unidirectional and the TV cannot know if a decoder is
         * connected. So it assumes they are always available.
         * @hide
         */
         public static final int ENCODED_SURROUND_OUTPUT_AUTO = 0;

        /**
         * AC3, DTS or IEC61937 are NEVER available, even if they
         * are detected by the hardware. Those formats will not be
         * reported.
         *
         * An example use case would be an AVR reports that it is capable of
         * surround sound decoding but is broken. If NEVER is chosen
         * then apps must use PCM output instead of encoded output.
         * @hide
         */
         public static final int ENCODED_SURROUND_OUTPUT_NEVER = 1;

        /**
         * AC3, DTS or IEC61937 are ALWAYS available, even if they
         * are not detected by the hardware. Those formats will be
         * reported as part of the HDMI output capability. Applications
         * are then free to use either PCM or encoded output.
         *
         * An example use case would be a when TV was connected over
         * TOS-link to an AVR. But the TV could not see it because TOS-link
         * is unidirectional.
         * @hide
         */
         public static final int ENCODED_SURROUND_OUTPUT_ALWAYS = 2;

        /**
         * Set to ENCODED_SURROUND_OUTPUT_AUTO,
         * ENCODED_SURROUND_OUTPUT_NEVER or
         * ENCODED_SURROUND_OUTPUT_ALWAYS
         * @hide
         */
        public static final String ENCODED_SURROUND_OUTPUT = "encoded_surround_output";

        /**
         * Persisted safe headphone volume management state by AudioService
         * @hide
         */
        public static final String AUDIO_SAFE_VOLUME_STATE = "audio_safe_volume_state";

        /**
         * URL for tzinfo (time zone) updates
         * @hide
         */
        public static final String TZINFO_UPDATE_CONTENT_URL = "tzinfo_content_url";

        /**
         * URL for tzinfo (time zone) update metadata
         * @hide
         */
        public static final String TZINFO_UPDATE_METADATA_URL = "tzinfo_metadata_url";

        /**
         * URL for selinux (mandatory access control) updates
         * @hide
         */
        public static final String SELINUX_UPDATE_CONTENT_URL = "selinux_content_url";

        /**
         * URL for selinux (mandatory access control) update metadata
         * @hide
         */
        public static final String SELINUX_UPDATE_METADATA_URL = "selinux_metadata_url";

        /**
         * URL for sms short code updates
         * @hide
         */
        public static final String SMS_SHORT_CODES_UPDATE_CONTENT_URL =
                "sms_short_codes_content_url";

        /**
         * URL for sms short code update metadata
         * @hide
         */
        public static final String SMS_SHORT_CODES_UPDATE_METADATA_URL =
                "sms_short_codes_metadata_url";

        /**
         * URL for apn_db updates
         * @hide
         */
        public static final String APN_DB_UPDATE_CONTENT_URL = "apn_db_content_url";

        /**
         * URL for apn_db update metadata
         * @hide
         */
        public static final String APN_DB_UPDATE_METADATA_URL = "apn_db_metadata_url";

        /**
         * URL for cert pinlist updates
         * @hide
         */
        public static final String CERT_PIN_UPDATE_CONTENT_URL = "cert_pin_content_url";

        /**
         * URL for cert pinlist updates
         * @hide
         */
        public static final String CERT_PIN_UPDATE_METADATA_URL = "cert_pin_metadata_url";

        /**
         * URL for intent firewall updates
         * @hide
         */
        public static final String INTENT_FIREWALL_UPDATE_CONTENT_URL =
                "intent_firewall_content_url";

        /**
         * URL for intent firewall update metadata
         * @hide
         */
        public static final String INTENT_FIREWALL_UPDATE_METADATA_URL =
                "intent_firewall_metadata_url";

        /**
         * URL for lang id model updates
         * @hide
         */
        public static final String LANG_ID_UPDATE_CONTENT_URL = "lang_id_content_url";

        /**
         * URL for lang id model update metadata
         * @hide
         */
        public static final String LANG_ID_UPDATE_METADATA_URL = "lang_id_metadata_url";

        /**
         * URL for smart selection model updates
         * @hide
         */
        public static final String SMART_SELECTION_UPDATE_CONTENT_URL =
                "smart_selection_content_url";

        /**
         * URL for smart selection model update metadata
         * @hide
         */
        public static final String SMART_SELECTION_UPDATE_METADATA_URL =
                "smart_selection_metadata_url";

        /**
         * SELinux enforcement status. If 0, permissive; if 1, enforcing.
         * @hide
         */
        public static final String SELINUX_STATUS = "selinux_status";

        /**
         * Developer setting to force RTL layout.
         * @hide
         */
        public static final String DEVELOPMENT_FORCE_RTL = "debug.force_rtl";

        /**
         * Milliseconds after screen-off after which low battery sounds will be silenced.
         *
         * If zero, battery sounds will always play.
         * Defaults to @integer/def_low_battery_sound_timeout in SettingsProvider.
         *
         * @hide
         */
        public static final String LOW_BATTERY_SOUND_TIMEOUT = "low_battery_sound_timeout";

        /**
         * Milliseconds to wait before bouncing Wi-Fi after settings is restored. Note that after
         * the caller is done with this, they should call {@link ContentResolver#delete} to
         * clean up any value that they may have written.
         *
         * @hide
         */
        public static final String WIFI_BOUNCE_DELAY_OVERRIDE_MS = "wifi_bounce_delay_override_ms";

        /**
         * Defines global runtime overrides to window policy.
         *
         * See {@link com.android.server.policy.PolicyControl} for value format.
         *
         * @hide
         */
        public static final String POLICY_CONTROL = "policy_control";

        /**
         * Defines global zen mode.  ZEN_MODE_OFF, ZEN_MODE_IMPORTANT_INTERRUPTIONS,
         * or ZEN_MODE_NO_INTERRUPTIONS.
         *
         * @hide
         */
        public static final String ZEN_MODE = "zen_mode";

        /** @hide */ public static final int ZEN_MODE_OFF = 0;
        /** @hide */ public static final int ZEN_MODE_IMPORTANT_INTERRUPTIONS = 1;
        /** @hide */ public static final int ZEN_MODE_NO_INTERRUPTIONS = 2;
        /** @hide */ public static final int ZEN_MODE_ALARMS = 3;

        /** @hide */ public static String zenModeToString(int mode) {
            if (mode == ZEN_MODE_IMPORTANT_INTERRUPTIONS) return "ZEN_MODE_IMPORTANT_INTERRUPTIONS";
            if (mode == ZEN_MODE_ALARMS) return "ZEN_MODE_ALARMS";
            if (mode == ZEN_MODE_NO_INTERRUPTIONS) return "ZEN_MODE_NO_INTERRUPTIONS";
            return "ZEN_MODE_OFF";
        }

        /** @hide */ public static boolean isValidZenMode(int value) {
            switch (value) {
                case Global.ZEN_MODE_OFF:
                case Global.ZEN_MODE_IMPORTANT_INTERRUPTIONS:
                case Global.ZEN_MODE_ALARMS:
                case Global.ZEN_MODE_NO_INTERRUPTIONS:
                    return true;
                default:
                    return false;
            }
        }

        /**
         * Value of the ringer before entering zen mode.
         *
         * @hide
         */
        public static final String ZEN_MODE_RINGER_LEVEL = "zen_mode_ringer_level";

        /**
         * Opaque value, changes when persisted zen mode configuration changes.
         *
         * @hide
         */
        public static final String ZEN_MODE_CONFIG_ETAG = "zen_mode_config_etag";

        /**
         * Defines global heads up toggle.  One of HEADS_UP_OFF, HEADS_UP_ON.
         *
         * @hide
         */
        public static final String HEADS_UP_NOTIFICATIONS_ENABLED =
                "heads_up_notifications_enabled";

        /** @hide */ public static final int HEADS_UP_OFF = 0;
        /** @hide */ public static final int HEADS_UP_ON = 1;

        /**
         * The name of the device
         */
        public static final String DEVICE_NAME = "device_name";

        /**
         * Whether the NetworkScoringService has been first initialized.
         * <p>
         * Type: int (0 for false, 1 for true)
         * @hide
         */
        public static final String NETWORK_SCORING_PROVISIONED = "network_scoring_provisioned";

        /**
         * Whether the user wants to be prompted for password to decrypt the device on boot.
         * This only matters if the storage is encrypted.
         * <p>
         * Type: int (0 for false, 1 for true)
         * @hide
         */
        public static final String REQUIRE_PASSWORD_TO_DECRYPT = "require_password_to_decrypt";

        /**
         * Whether the Volte is enabled
         * <p>
         * Type: int (0 for false, 1 for true)
         * @hide
         */
        public static final String ENHANCED_4G_MODE_ENABLED = "volte_vt_enabled";

        /**
         * Whether VT (Video Telephony over IMS) is enabled
         * <p>
         * Type: int (0 for false, 1 for true)
         *
         * @hide
         */
        public static final String VT_IMS_ENABLED = "vt_ims_enabled";

        /**
         * Whether WFC is enabled
         * <p>
         * Type: int (0 for false, 1 for true)
         *
         * @hide
         */
        public static final String WFC_IMS_ENABLED = "wfc_ims_enabled";

        /**
         * WFC mode on home/non-roaming network.
         * <p>
         * Type: int - 2=Wi-Fi preferred, 1=Cellular preferred, 0=Wi-Fi only
         *
         * @hide
         */
        public static final String WFC_IMS_MODE = "wfc_ims_mode";

        /**
         * WFC mode on roaming network.
         * <p>
         * Type: int - see {@link #WFC_IMS_MODE} for values
         *
         * @hide
         */
        public static final String WFC_IMS_ROAMING_MODE = "wfc_ims_roaming_mode";

        /**
         * Whether WFC roaming is enabled
         * <p>
         * Type: int (0 for false, 1 for true)
         *
         * @hide
         */
        public static final String WFC_IMS_ROAMING_ENABLED = "wfc_ims_roaming_enabled";

        /**
         * Whether user can enable/disable LTE as a preferred network. A carrier might control
         * this via gservices, OMA-DM, carrier app, etc.
         * <p>
         * Type: int (0 for false, 1 for true)
         * @hide
         */
        public static final String LTE_SERVICE_FORCED = "lte_service_forced";

        /**
         * Ephemeral app cookie max size in bytes.
         * <p>
         * Type: int
         * @hide
         */
        public static final String EPHEMERAL_COOKIE_MAX_SIZE_BYTES =
                "ephemeral_cookie_max_size_bytes";

        /**
         * Toggle to enable/disable the entire ephemeral feature. By default, ephemeral is
         * enabled. Set to zero to disable.
         * <p>
         * Type: int (0 for false, 1 for true)
         *
         * @hide
         */
        public static final String ENABLE_EPHEMERAL_FEATURE = "enable_ephemeral_feature";

        /**
         * Toggle to enable/disable dexopt for instant applications. The default is for dexopt
         * to be disabled.
         * <p>
         * Type: int (0 to disable, 1 to enable)
         *
         * @hide
         */
        public static final String INSTANT_APP_DEXOPT_ENABLED = "instant_app_dexopt_enabled";

        /**
         * The min period for caching installed instant apps in milliseconds.
         * <p>
         * Type: long
         * @hide
         */
        public static final String INSTALLED_INSTANT_APP_MIN_CACHE_PERIOD =
                "installed_instant_app_min_cache_period";

        /**
         * The max period for caching installed instant apps in milliseconds.
         * <p>
         * Type: long
         * @hide
         */
        public static final String INSTALLED_INSTANT_APP_MAX_CACHE_PERIOD =
                "installed_instant_app_max_cache_period";

        /**
         * The min period for caching uninstalled instant apps in milliseconds.
         * <p>
         * Type: long
         * @hide
         */
        public static final String UNINSTALLED_INSTANT_APP_MIN_CACHE_PERIOD =
                "uninstalled_instant_app_min_cache_period";

        /**
         * The max period for caching uninstalled instant apps in milliseconds.
         * <p>
         * Type: long
         * @hide
         */
        public static final String UNINSTALLED_INSTANT_APP_MAX_CACHE_PERIOD =
                "uninstalled_instant_app_max_cache_period";

        /**
         * The min period for caching unused static shared libs in milliseconds.
         * <p>
         * Type: long
         * @hide
         */
        public static final String UNUSED_STATIC_SHARED_LIB_MIN_CACHE_PERIOD =
                "unused_static_shared_lib_min_cache_period";

        /**
         * Allows switching users when system user is locked.
         * <p>
         * Type: int
         * @hide
         */
        public static final String ALLOW_USER_SWITCHING_WHEN_SYSTEM_USER_LOCKED =
                "allow_user_switching_when_system_user_locked";

        /**
         * Boot count since the device starts running APK level 24.
         * <p>
         * Type: int
         */
        public static final String BOOT_COUNT = "boot_count";

        /**
         * Whether the safe boot is disallowed.
         *
         * <p>This setting should have the identical value as the corresponding user restriction.
         * The purpose of the setting is to make the restriction available in early boot stages
         * before the user restrictions are loaded.
         * @hide
         */
        public static final String SAFE_BOOT_DISALLOWED = "safe_boot_disallowed";

        /**
         * Whether this device is currently in retail demo mode. If true, device
         * usage is severely limited.
         * <p>
         * Type: int (0 for false, 1 for true)
         * @hide
         */
        public static final String DEVICE_DEMO_MODE = "device_demo_mode";

        /**
         * Retail mode specific settings. This is encoded as a key=value list, separated by commas.
         * Ex: "user_inactivity_timeout_ms=30000,warning_dialog_timeout_ms=10000". The following
         * keys are supported:
         *
         * <pre>
         * user_inactivity_timeout_ms  (long)
         * warning_dialog_timeout_ms   (long)
         * </pre>
         * <p>
         * Type: string
         *
         * @hide
         */
        public static final String RETAIL_DEMO_MODE_CONSTANTS = "retail_demo_mode_constants";

        /**
         * Indicates the maximum time that an app is blocked for the network rules to get updated.
         *
         * Type: long
         *
         * @hide
         */
        public static final String NETWORK_ACCESS_TIMEOUT_MS = "network_access_timeout_ms";

        /**
         * The reason for the settings database being downgraded. This is only for
         * troubleshooting purposes and its value should not be interpreted in any way.
         *
         * Type: string
         *
         * @hide
         */
        public static final String DATABASE_DOWNGRADE_REASON = "database_downgrade_reason";

        /**
         * The build id of when the settings database was first created (or re-created due it
         * being missing).
         *
         * Type: string
         *
         * @hide
         */
        public static final String DATABASE_CREATION_BUILDID = "database_creation_buildid";

        /**
         * Flag to toggle journal mode WAL on or off for the contacts database. WAL is enabled by
         * default. Set to 0 to disable.
         *
         * @hide
         */
        public static final String CONTACTS_DATABASE_WAL_ENABLED = "contacts_database_wal_enabled";

        /**
         * Flag to enable the link to location permissions in location setting. Set to 0 to disable.
         *
         * @hide
         */
        public static final String LOCATION_SETTINGS_LINK_TO_PERMISSIONS_ENABLED =
                "location_settings_link_to_permissions_enabled";

        /**
         * Settings to backup. This is here so that it's in the same place as the settings
         * keys and easy to update.
         *
         * These keys may be mentioned in the SETTINGS_TO_BACKUP arrays in System
         * and Secure as well.  This is because those tables drive both backup and
         * restore, and restore needs to properly whitelist keys that used to live
         * in those namespaces.  The keys will only actually be backed up / restored
         * if they are also mentioned in this table (Global.SETTINGS_TO_BACKUP).
         *
         * NOTE: Settings are backed up and restored in the order they appear
         *       in this array. If you have one setting depending on another,
         *       make sure that they are ordered appropriately.
         *
         * @hide
         */
        public static final String[] SETTINGS_TO_BACKUP = {
            BUGREPORT_IN_POWER_MENU,
            STAY_ON_WHILE_PLUGGED_IN,
            AUTO_TIME,
            AUTO_TIME_ZONE,
            POWER_SOUNDS_ENABLED,
            DOCK_SOUNDS_ENABLED,
            CHARGING_SOUNDS_ENABLED,
            USB_MASS_STORAGE_ENABLED,
            NETWORK_RECOMMENDATIONS_ENABLED,
            WIFI_WAKEUP_ENABLED,
            WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON,
            USE_OPEN_WIFI_PACKAGE,
            WIFI_WATCHDOG_POOR_NETWORK_TEST_ENABLED,
            EMERGENCY_TONE,
            CALL_AUTO_RETRY,
            DOCK_AUDIO_MEDIA_ENABLED,
            ENCODED_SURROUND_OUTPUT,
            LOW_POWER_MODE_TRIGGER_LEVEL,
            BLUETOOTH_ON
        };

        private static final ContentProviderHolder sProviderHolder =
                new ContentProviderHolder(CONTENT_URI);

        // Populated lazily, guarded by class object:
        private static final NameValueCache sNameValueCache = new NameValueCache(
                    CONTENT_URI,
                    CALL_METHOD_GET_GLOBAL,
                    CALL_METHOD_PUT_GLOBAL,
                    sProviderHolder);

        // Certain settings have been moved from global to the per-user secure namespace
        private static final HashSet<String> MOVED_TO_SECURE;
        static {
            MOVED_TO_SECURE = new HashSet<>(1);
            MOVED_TO_SECURE.add(Settings.Global.INSTALL_NON_MARKET_APPS);
        }

        /** @hide */
        public static void getMovedToSecureSettings(Set<String> outKeySet) {
            outKeySet.addAll(MOVED_TO_SECURE);
        }

        /**
         * Look up a name in the database.
         * @param resolver to access the database with
         * @param name to look up in the table
         * @return the corresponding value, or null if not present
         */
        public static String getString(ContentResolver resolver, String name) {
            return getStringForUser(resolver, name, UserHandle.myUserId());
        }

        /** @hide */
        public static String getStringForUser(ContentResolver resolver, String name,
                int userHandle) {
            if (MOVED_TO_SECURE.contains(name)) {
                Log.w(TAG, "Setting " + name + " has moved from android.provider.Settings.Global"
                        + " to android.provider.Settings.Secure, returning read-only value.");
                return Secure.getStringForUser(resolver, name, userHandle);
            }
            return sNameValueCache.getStringForUser(resolver, name, userHandle);
        }

        /**
         * Store a name/value pair into the database.
         * @param resolver to access the database with
         * @param name to store
         * @param value to associate with the name
         * @return true if the value was set, false on database errors
         */
        public static boolean putString(ContentResolver resolver,
                String name, String value) {
            return putStringForUser(resolver, name, value, null, false, UserHandle.myUserId());
        }

        /**
         * Store a name/value pair into the database.
         * <p>
         * The method takes an optional tag to associate with the setting
         * which can be used to clear only settings made by your package and
         * associated with this tag by passing the tag to {@link
         * #resetToDefaults(ContentResolver, String)}. Anyone can override
         * the current tag. Also if another package changes the setting
         * then the tag will be set to the one specified in the set call
         * which can be null. Also any of the settings setters that do not
         * take a tag as an argument effectively clears the tag.
         * </p><p>
         * For example, if you set settings A and B with tags T1 and T2 and
         * another app changes setting A (potentially to the same value), it
         * can assign to it a tag T3 (note that now the package that changed
         * the setting is not yours). Now if you reset your changes for T1 and
         * T2 only setting B will be reset and A not (as it was changed by
         * another package) but since A did not change you are in the desired
         * initial state. Now if the other app changes the value of A (assuming
         * you registered an observer in the beginning) you would detect that
         * the setting was changed by another app and handle this appropriately
         * (ignore, set back to some value, etc).
         * </p><p>
         * Also the method takes an argument whether to make the value the
         * default for this setting. If the system already specified a default
         * value, then the one passed in here will <strong>not</strong>
         * be set as the default.
         * </p>
         *
         * @param resolver to access the database with.
         * @param name to store.
         * @param value to associate with the name.
         * @param tag to associated with the setting.
         * @param makeDefault whether to make the value the default one.
         * @return true if the value was set, false on database errors.
         *
         * @see #resetToDefaults(ContentResolver, String)
         *
         * @hide
         */
        @SystemApi
        @RequiresPermission(Manifest.permission.WRITE_SECURE_SETTINGS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\provider\Settings.java
Method: 
Permission: Manifest.permission.WRITE_SECURE_SETTINGS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\security\keystore\AttestationUtils.java
Method: 
Permission: Manifest.permission.READ_PRIVILEGED_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\service\oemlock\OemLockManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\service\oemlock\OemLockManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\service\oemlock\OemLockManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_USER_OEM_UNLOCK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\service\oemlock\OemLockManager.java
Method: 
Permission: android.Manifest.permission.MANAGE_USER_OEM_UNLOCK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\service\persistentdata\PersistentDataBlockManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_PDB_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\service\persistentdata\PersistentDataBlockManager.java
Method: 
Permission: android.Manifest.permission.OEM_UNLOCK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\service\persistentdata\PersistentDataBlockManager.java
Method: 
Permission: android.Manifest.permission.OEM_UNLOCK_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\service\persistentdata\PersistentDataBlockManager.java
Method: 
Permission: anyOf = {
            android.Manifest.permission.READ_OEM_UNLOCK_STATE,
            android.Manifest.permission.OEM_UNLOCK_STATE
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\service\persistentdata\PersistentDataBlockManager.java
Method: 
Permission: anyOf = {
            android.Manifest.permission.READ_OEM_UNLOCK_STATE,
            android.Manifest.permission.OEM_UNLOCK_STATE
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: anyOf = {
            android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,
            android.Manifest.permission.READ_PHONE_STATE
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: anyOf = {
            android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,
            android.Manifest.permission.READ_PHONE_STATE
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: anyOf =
            {Manifest.permission.ANSWER_PHONE_CALLS, Manifest.permission.MODIFY_PHONE_STATE}

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: anyOf =
            {Manifest.permission.ANSWER_PHONE_CALLS, Manifest.permission.MODIFY_PHONE_STATE}

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: anyOf = {
            android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,
            android.Manifest.permission.READ_PHONE_STATE
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: anyOf = {android.Manifest.permission.CALL_PHONE,
            android.Manifest.permission.MANAGE_OWN_CALLS}

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: 
Permission: Manifest.permission.DUMP

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\CarrierConfigManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\SmsManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\SmsManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE)
    public static final String ACTION_PHONE_STATE_CHANGED =
            "android.intent.action.PHONE_STATE";

    /**
     * The Phone app sends this intent when a user opts to respond-via-message during an incoming
     * call. By default, the device's default SMS app consumes this message and sends a text message
     * to the caller. A third party app can also provide this functionality by consuming this Intent
     * with a {@link android.app.Service} and sending the message using its own messaging system.
     * <p>The intent contains a URI (available from {@link android.content.Intent#getData})
     * describing the recipient, using either the {@code sms:}, {@code smsto:}, {@code mms:},
     * or {@code mmsto:} URI schema. Each of these URI schema carry the recipient information the
     * same way: the path part of the URI contains the recipient's phone number or a comma-separated
     * set of phone numbers if there are multiple recipients. For example, {@code
     * smsto:2065551234}.</p>
     *
     * <p>The intent may also contain extras for the message text (in {@link
     * android.content.Intent#EXTRA_TEXT}) and a message subject
     * (in {@link android.content.Intent#EXTRA_SUBJECT}).</p>
     *
     * <p class="note"><strong>Note:</strong>
     * The intent-filter that consumes this Intent needs to be in a {@link android.app.Service}
     * that requires the
     * permission {@link android.Manifest.permission#SEND_RESPOND_VIA_MESSAGE}.</p>
     * <p>For example, the service that receives this intent can be declared in the manifest file
     * with an intent filter like this:</p>
     * <pre>
     * &lt;!-- Service that delivers SMS messages received from the phone "quick response" -->
     * &lt;service android:name=".HeadlessSmsSendService"
     *          android:permission="android.permission.SEND_RESPOND_VIA_MESSAGE"
     *          android:exported="true" >
     *   &lt;intent-filter>
     *     &lt;action android:name="android.intent.action.RESPOND_VIA_MESSAGE" />
     *     &lt;category android:name="android.intent.category.DEFAULT" />
     *     &lt;data android:scheme="sms" />
     *     &lt;data android:scheme="smsto" />
     *     &lt;data android:scheme="mms" />
     *     &lt;data android:scheme="mmsto" />
     *   &lt;/intent-filter>
     * &lt;/service></pre>
     * <p>
     * Output: nothing.
     */
    @SdkConstant(SdkConstantType.SERVICE_ACTION)
    public static final String ACTION_RESPOND_VIA_MESSAGE =
            "android.intent.action.RESPOND_VIA_MESSAGE";

    /**
     * The emergency dialer may choose to present activities with intent filters for this
     * action as emergency assistance buttons that launch the activity when clicked.
     *
     * @hide
     */
    @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
    public static final String ACTION_EMERGENCY_ASSISTANCE =
            "android.telephony.action.EMERGENCY_ASSISTANCE";

    /**
     * A boolean meta-data value indicating whether the voicemail settings should be hidden in the
     * call settings page launched by
     * {@link android.telecom.TelecomManager#ACTION_SHOW_CALL_SETTINGS}.
     * Dialer implementations (see {@link android.telecom.TelecomManager#getDefaultDialerPackage()})
     * which would also like to manage voicemail settings should set this meta-data to {@code true}
     * in the manifest registration of their application.
     *
     * @see android.telecom.TelecomManager#ACTION_SHOW_CALL_SETTINGS
     * @see #ACTION_CONFIGURE_VOICEMAIL
     * @see #EXTRA_HIDE_PUBLIC_SETTINGS
     */
    public static final String METADATA_HIDE_VOICEMAIL_SETTINGS_MENU =
            "android.telephony.HIDE_VOICEMAIL_SETTINGS_MENU";

    /**
     * Open the voicemail settings activity to make changes to voicemail configuration.
     *
     * <p>
     * The {@link #EXTRA_HIDE_PUBLIC_SETTINGS} hides settings the dialer will modify through public
     * API if set.
     *
     * @see #EXTRA_HIDE_PUBLIC_SETTINGS
     */
    @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
    public static final String ACTION_CONFIGURE_VOICEMAIL =
            "android.telephony.action.CONFIGURE_VOICEMAIL";

    /**
     * The boolean value indicating whether the voicemail settings activity launched by {@link
     * #ACTION_CONFIGURE_VOICEMAIL} should hide settings accessible through public API. This is
     * used by dialer implementations which provides their own voicemail settings UI, but still
     * needs to expose device specific voicemail settings to the user.
     *
     * @see #ACTION_CONFIGURE_VOICEMAIL
     * @see #METADATA_HIDE_VOICEMAIL_SETTINGS_MENU
     */
    public static final String EXTRA_HIDE_PUBLIC_SETTINGS =
            "android.telephony.extra.HIDE_PUBLIC_SETTINGS";

    /**
     * @hide
     */
    public static final boolean EMERGENCY_ASSISTANCE_ENABLED = true;

    /**
     * The lookup key used with the {@link #ACTION_PHONE_STATE_CHANGED} broadcast
     * for a String containing the new call state.
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getStringExtra(String)}.
     *
     * @see #EXTRA_STATE_IDLE
     * @see #EXTRA_STATE_RINGING
     * @see #EXTRA_STATE_OFFHOOK
     */
    public static final String EXTRA_STATE = PhoneConstants.STATE_KEY;

    /**
     * Value used with {@link #EXTRA_STATE} corresponding to
     * {@link #CALL_STATE_IDLE}.
     */
    public static final String EXTRA_STATE_IDLE = PhoneConstants.State.IDLE.toString();

    /**
     * Value used with {@link #EXTRA_STATE} corresponding to
     * {@link #CALL_STATE_RINGING}.
     */
    public static final String EXTRA_STATE_RINGING = PhoneConstants.State.RINGING.toString();

    /**
     * Value used with {@link #EXTRA_STATE} corresponding to
     * {@link #CALL_STATE_OFFHOOK}.
     */
    public static final String EXTRA_STATE_OFFHOOK = PhoneConstants.State.OFFHOOK.toString();

    /**
     * The lookup key used with the {@link #ACTION_PHONE_STATE_CHANGED} broadcast
     * for a String containing the incoming phone number.
     * Only valid when the new call state is RINGING.
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getStringExtra(String)}.
     */
    public static final String EXTRA_INCOMING_NUMBER = "incoming_number";

    /**
     * Broadcast intent action indicating that a precise call state
     * (cellular) on the device has changed.
     *
     * <p>
     * The {@link #EXTRA_RINGING_CALL_STATE} extra indicates the ringing call state.
     * The {@link #EXTRA_FOREGROUND_CALL_STATE} extra indicates the foreground call state.
     * The {@link #EXTRA_BACKGROUND_CALL_STATE} extra indicates the background call state.
     * The {@link #EXTRA_DISCONNECT_CAUSE} extra indicates the disconnect cause.
     * The {@link #EXTRA_PRECISE_DISCONNECT_CAUSE} extra indicates the precise disconnect cause.
     *
     * <p class="note">
     * Requires the READ_PRECISE_PHONE_STATE permission.
     *
     * @see #EXTRA_RINGING_CALL_STATE
     * @see #EXTRA_FOREGROUND_CALL_STATE
     * @see #EXTRA_BACKGROUND_CALL_STATE
     * @see #EXTRA_DISCONNECT_CAUSE
     * @see #EXTRA_PRECISE_DISCONNECT_CAUSE
     *
     * <p class="note">
     * Requires the READ_PRECISE_PHONE_STATE permission.
     *
     * @hide
     */
    @SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
    public static final String ACTION_PRECISE_CALL_STATE_CHANGED =
            "android.intent.action.PRECISE_CALL_STATE";

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_CALL_STATE_CHANGED} broadcast
     * for an integer containing the state of the current ringing call.
     *
     * @see PreciseCallState#PRECISE_CALL_STATE_NOT_VALID
     * @see PreciseCallState#PRECISE_CALL_STATE_IDLE
     * @see PreciseCallState#PRECISE_CALL_STATE_ACTIVE
     * @see PreciseCallState#PRECISE_CALL_STATE_HOLDING
     * @see PreciseCallState#PRECISE_CALL_STATE_DIALING
     * @see PreciseCallState#PRECISE_CALL_STATE_ALERTING
     * @see PreciseCallState#PRECISE_CALL_STATE_INCOMING
     * @see PreciseCallState#PRECISE_CALL_STATE_WAITING
     * @see PreciseCallState#PRECISE_CALL_STATE_DISCONNECTED
     * @see PreciseCallState#PRECISE_CALL_STATE_DISCONNECTING
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getIntExtra(String name, int defaultValue)}.
     *
     * @hide
     */
    public static final String EXTRA_RINGING_CALL_STATE = "ringing_state";

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_CALL_STATE_CHANGED} broadcast
     * for an integer containing the state of the current foreground call.
     *
     * @see PreciseCallState#PRECISE_CALL_STATE_NOT_VALID
     * @see PreciseCallState#PRECISE_CALL_STATE_IDLE
     * @see PreciseCallState#PRECISE_CALL_STATE_ACTIVE
     * @see PreciseCallState#PRECISE_CALL_STATE_HOLDING
     * @see PreciseCallState#PRECISE_CALL_STATE_DIALING
     * @see PreciseCallState#PRECISE_CALL_STATE_ALERTING
     * @see PreciseCallState#PRECISE_CALL_STATE_INCOMING
     * @see PreciseCallState#PRECISE_CALL_STATE_WAITING
     * @see PreciseCallState#PRECISE_CALL_STATE_DISCONNECTED
     * @see PreciseCallState#PRECISE_CALL_STATE_DISCONNECTING
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getIntExtra(String name, int defaultValue)}.
     *
     * @hide
     */
    public static final String EXTRA_FOREGROUND_CALL_STATE = "foreground_state";

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_CALL_STATE_CHANGED} broadcast
     * for an integer containing the state of the current background call.
     *
     * @see PreciseCallState#PRECISE_CALL_STATE_NOT_VALID
     * @see PreciseCallState#PRECISE_CALL_STATE_IDLE
     * @see PreciseCallState#PRECISE_CALL_STATE_ACTIVE
     * @see PreciseCallState#PRECISE_CALL_STATE_HOLDING
     * @see PreciseCallState#PRECISE_CALL_STATE_DIALING
     * @see PreciseCallState#PRECISE_CALL_STATE_ALERTING
     * @see PreciseCallState#PRECISE_CALL_STATE_INCOMING
     * @see PreciseCallState#PRECISE_CALL_STATE_WAITING
     * @see PreciseCallState#PRECISE_CALL_STATE_DISCONNECTED
     * @see PreciseCallState#PRECISE_CALL_STATE_DISCONNECTING
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getIntExtra(String name, int defaultValue)}.
     *
     * @hide
     */
    public static final String EXTRA_BACKGROUND_CALL_STATE = "background_state";

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_CALL_STATE_CHANGED} broadcast
     * for an integer containing the disconnect cause.
     *
     * @see DisconnectCause
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getIntExtra(String name, int defaultValue)}.
     *
     * @hide
     */
    public static final String EXTRA_DISCONNECT_CAUSE = "disconnect_cause";

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_CALL_STATE_CHANGED} broadcast
     * for an integer containing the disconnect cause provided by the RIL.
     *
     * @see PreciseDisconnectCause
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getIntExtra(String name, int defaultValue)}.
     *
     * @hide
     */
    public static final String EXTRA_PRECISE_DISCONNECT_CAUSE = "precise_disconnect_cause";

    /**
     * Broadcast intent action indicating a data connection has changed,
     * providing precise information about the connection.
     *
     * <p>
     * The {@link #EXTRA_DATA_STATE} extra indicates the connection state.
     * The {@link #EXTRA_DATA_NETWORK_TYPE} extra indicates the connection network type.
     * The {@link #EXTRA_DATA_APN_TYPE} extra indicates the APN type.
     * The {@link #EXTRA_DATA_APN} extra indicates the APN.
     * The {@link #EXTRA_DATA_CHANGE_REASON} extra indicates the connection change reason.
     * The {@link #EXTRA_DATA_IFACE_PROPERTIES} extra indicates the connection interface.
     * The {@link #EXTRA_DATA_FAILURE_CAUSE} extra indicates the connection fail cause.
     *
     * <p class="note">
     * Requires the READ_PRECISE_PHONE_STATE permission.
     *
     * @see #EXTRA_DATA_STATE
     * @see #EXTRA_DATA_NETWORK_TYPE
     * @see #EXTRA_DATA_APN_TYPE
     * @see #EXTRA_DATA_APN
     * @see #EXTRA_DATA_CHANGE_REASON
     * @see #EXTRA_DATA_IFACE
     * @see #EXTRA_DATA_FAILURE_CAUSE
     * @hide
     *
     * @deprecated If the app is running in the background, it won't be able to receive this
     * broadcast. Apps should use ConnectivityManager {@link #registerNetworkCallback(
     * android.net.NetworkRequest, ConnectivityManager.NetworkCallback)} to listen for network
     * changes.
     */
    @SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
    @Deprecated
    public static final String ACTION_PRECISE_DATA_CONNECTION_STATE_CHANGED =
            "android.intent.action.PRECISE_DATA_CONNECTION_STATE_CHANGED";

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_DATA_CONNECTION_STATE_CHANGED} broadcast
     * for an integer containing the state of the current data connection.
     *
     * @see TelephonyManager#DATA_UNKNOWN
     * @see TelephonyManager#DATA_DISCONNECTED
     * @see TelephonyManager#DATA_CONNECTING
     * @see TelephonyManager#DATA_CONNECTED
     * @see TelephonyManager#DATA_SUSPENDED
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getIntExtra(String name, int defaultValue)}.
     *
     * @hide
     */
    public static final String EXTRA_DATA_STATE = PhoneConstants.STATE_KEY;

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_DATA_CONNECTION_STATE_CHANGED} broadcast
     * for an integer containing the network type.
     *
     * @see TelephonyManager#NETWORK_TYPE_UNKNOWN
     * @see TelephonyManager#NETWORK_TYPE_GPRS
     * @see TelephonyManager#NETWORK_TYPE_EDGE
     * @see TelephonyManager#NETWORK_TYPE_UMTS
     * @see TelephonyManager#NETWORK_TYPE_CDMA
     * @see TelephonyManager#NETWORK_TYPE_EVDO_0
     * @see TelephonyManager#NETWORK_TYPE_EVDO_A
     * @see TelephonyManager#NETWORK_TYPE_1xRTT
     * @see TelephonyManager#NETWORK_TYPE_HSDPA
     * @see TelephonyManager#NETWORK_TYPE_HSUPA
     * @see TelephonyManager#NETWORK_TYPE_HSPA
     * @see TelephonyManager#NETWORK_TYPE_IDEN
     * @see TelephonyManager#NETWORK_TYPE_EVDO_B
     * @see TelephonyManager#NETWORK_TYPE_LTE
     * @see TelephonyManager#NETWORK_TYPE_EHRPD
     * @see TelephonyManager#NETWORK_TYPE_HSPAP
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getIntExtra(String name, int defaultValue)}.
     *
     * @hide
     */
    public static final String EXTRA_DATA_NETWORK_TYPE = PhoneConstants.DATA_NETWORK_TYPE_KEY;

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_DATA_CONNECTION_STATE_CHANGED} broadcast
     * for an String containing the data APN type.
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getStringExtra(String name)}.
     *
     * @hide
     */
    public static final String EXTRA_DATA_APN_TYPE = PhoneConstants.DATA_APN_TYPE_KEY;

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_DATA_CONNECTION_STATE_CHANGED} broadcast
     * for an String containing the data APN.
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getStringExtra(String name)}.
     *
     * @hide
     */
    public static final String EXTRA_DATA_APN = PhoneConstants.DATA_APN_KEY;

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_DATA_CONNECTION_STATE_CHANGED} broadcast
     * for an String representation of the change reason.
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getStringExtra(String name)}.
     *
     * @hide
     */
    public static final String EXTRA_DATA_CHANGE_REASON = PhoneConstants.STATE_CHANGE_REASON_KEY;

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_DATA_CONNECTION_STATE_CHANGED} broadcast
     * for an String representation of the data interface.
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getParcelableExtra(String name)}.
     *
     * @hide
     */
    public static final String EXTRA_DATA_LINK_PROPERTIES_KEY = PhoneConstants.DATA_LINK_PROPERTIES_KEY;

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_DATA_CONNECTION_STATE_CHANGED} broadcast
     * for the data connection fail cause.
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getStringExtra(String name)}.
     *
     * @hide
     */
    public static final String EXTRA_DATA_FAILURE_CAUSE = PhoneConstants.DATA_FAILURE_CAUSE_KEY;

    /**
     * Broadcast intent action for letting the default dialer to know to show voicemail
     * notification.
     *
     * <p>
     * The {@link #EXTRA_PHONE_ACCOUNT_HANDLE} extra indicates which {@link PhoneAccountHandle} the
     * voicemail is received on.
     * The {@link #EXTRA_NOTIFICATION_COUNT} extra indicates the total numbers of unheard
     * voicemails.
     * The {@link #EXTRA_VOICEMAIL_NUMBER} extra indicates the voicemail number if available.
     * The {@link #EXTRA_CALL_VOICEMAIL_INTENT} extra is a {@link android.app.PendingIntent} that
     * will call the voicemail number when sent. This extra will be empty if the voicemail number
     * is not set, and {@link #EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT} will be set instead.
     * The {@link #EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT} extra is a
     * {@link android.app.PendingIntent} that will launch the voicemail settings. This extra is only
     * available when the voicemail number is not set.
     *
     * @see #EXTRA_PHONE_ACCOUNT_HANDLE
     * @see #EXTRA_NOTIFICATION_COUNT
     * @see #EXTRA_VOICEMAIL_NUMBER
     * @see #EXTRA_CALL_VOICEMAIL_INTENT
     * @see #EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT
     */
    public static final String ACTION_SHOW_VOICEMAIL_NOTIFICATION =
            "android.telephony.action.SHOW_VOICEMAIL_NOTIFICATION";

    /**
     * The extra used with an {@link #ACTION_SHOW_VOICEMAIL_NOTIFICATION} {@code Intent} to specify
     * the {@link PhoneAccountHandle} the notification is for.
     * <p class="note">
     * Retrieve with {@link android.content.Intent#getParcelableExtra(String)}.
     */
    public static final String EXTRA_PHONE_ACCOUNT_HANDLE =
            "android.telephony.extra.PHONE_ACCOUNT_HANDLE";

    /**
     * The number of voice messages associated with the notification.
     */
    public static final String EXTRA_NOTIFICATION_COUNT =
            "android.telephony.extra.NOTIFICATION_COUNT";

    /**
     * The voicemail number.
     */
    public static final String EXTRA_VOICEMAIL_NUMBER =
            "android.telephony.extra.VOICEMAIL_NUMBER";

    /**
     * The intent to call voicemail.
     */
    public static final String EXTRA_CALL_VOICEMAIL_INTENT =
            "android.telephony.extra.CALL_VOICEMAIL_INTENT";

    /**
     * The intent to launch voicemail settings.
     */
    public static final String EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT =
            "android.telephony.extra.LAUNCH_VOICEMAIL_SETTINGS_INTENT";

    /**
     * {@link android.telecom.Connection} event used to indicate that an IMS call has be
     * successfully handed over from WIFI to LTE.
     * <p>
     * Sent via {@link android.telecom.Connection#sendConnectionEvent(String, Bundle)}.
     * The {@link Bundle} parameter is expected to be null when this connection event is used.
     * @hide
     */
    public static final String EVENT_HANDOVER_VIDEO_FROM_WIFI_TO_LTE =
            "android.telephony.event.EVENT_HANDOVER_VIDEO_FROM_WIFI_TO_LTE";

    /**
     * {@link android.telecom.Connection} event used to indicate that an IMS call failed to be
     * handed over from LTE to WIFI.
     * <p>
     * Sent via {@link android.telecom.Connection#sendConnectionEvent(String, Bundle)}.
     * The {@link Bundle} parameter is expected to be null when this connection event is used.
     * @hide
     */
    public static final String EVENT_HANDOVER_TO_WIFI_FAILED =
            "android.telephony.event.EVENT_HANDOVER_TO_WIFI_FAILED";

    /**
     * {@link android.telecom.Connection} event used to indicate that a video call was downgraded to
     * audio because the data limit was reached.
     * <p>
     * Sent via {@link android.telecom.Connection#sendConnectionEvent(String, Bundle)}.
     * The {@link Bundle} parameter is expected to be null when this connection event is used.
     * @hide
     */
    public static final String EVENT_DOWNGRADE_DATA_LIMIT_REACHED =
            "android.telephony.event.EVENT_DOWNGRADE_DATA_LIMIT_REACHED";

    /**
     * {@link android.telecom.Connection} event used to indicate that a video call was downgraded to
     * audio because the data was disabled.
     * <p>
     * Sent via {@link android.telecom.Connection#sendConnectionEvent(String, Bundle)}.
     * The {@link Bundle} parameter is expected to be null when this connection event is used.
     * @hide
     */
    public static final String EVENT_DOWNGRADE_DATA_DISABLED =
            "android.telephony.event.EVENT_DOWNGRADE_DATA_DISABLED";

    /**
     * {@link android.telecom.Connection} event used to indicate that the InCall UI should notify
     * the user when an international call is placed while on WFC only.
     * <p>
     * Used when the carrier config value
     * {@link CarrierConfigManager#KEY_NOTIFY_INTERNATIONAL_CALL_ON_WFC_BOOL} is true, the device
     * is on WFC (VoLTE not available) and an international number is dialed.
     * <p>
     * Sent via {@link android.telecom.Connection#sendConnectionEvent(String, Bundle)}.
     * The {@link Bundle} parameter is expected to be null when this connection event is used.
     * @hide
     */
    public static final String EVENT_NOTIFY_INTERNATIONAL_CALL_ON_WFC =
            "android.telephony.event.EVENT_NOTIFY_INTERNATIONAL_CALL_ON_WFC";

    /* Visual voicemail protocols */

    /**
     * The OMTP protocol.
     */
    public static final String VVM_TYPE_OMTP = "vvm_type_omtp";

    /**
     * A flavor of OMTP protocol with a different mobile originated (MO) format
     */
    public static final String VVM_TYPE_CVVM = "vvm_type_cvvm";

    /**
     * Key in bundle returned by {@link #getVisualVoicemailPackageName()}, indicating whether visual
     * voicemail was enabled or disabled by the user. If the user never explicitly changed this
     * setting, this key will not exist.
     *
     * @see #getVisualVoicemailSettings()
     * @hide
     */
    @SystemApi
    public static final String EXTRA_VISUAL_VOICEMAIL_ENABLED_BY_USER_BOOL =
            "android.telephony.extra.VISUAL_VOICEMAIL_ENABLED_BY_USER_BOOL";

    /**
     * Key in bundle returned by {@link #getVisualVoicemailPackageName()}, indicating the voicemail
     * access PIN scrambled during the auto provisioning process. The user is expected to reset
     * their PIN if this value is not {@code null}.
     *
     * @see #getVisualVoicemailSettings()
     * @hide
     */
    @SystemApi
    public static final String EXTRA_VOICEMAIL_SCRAMBLED_PIN_STRING =
            "android.telephony.extra.VOICEMAIL_SCRAMBLED_PIN_STRING";

    /**
     * @hide
     */
    public static final String USSD_RESPONSE = "USSD_RESPONSE";

    /**
     * USSD return code success.
     * @hide
     */
    public static final int USSD_RETURN_SUCCESS = 100;

    /**
     * Failed code returned when the mobile network has failed to complete a USSD request.
     * <p>
     * Returned via {@link TelephonyManager.UssdResponseCallback#onReceiveUssdResponseFailed(
     * TelephonyManager, String, int)}.
     */
    public static final int USSD_RETURN_FAILURE = -1;

    /**
     * Failure code returned when a USSD request has failed to execute because the Telephony
     * service is unavailable.
     * <p>
     * Returned via {@link TelephonyManager.UssdResponseCallback#onReceiveUssdResponseFailed(
     * TelephonyManager, String, int)}.
     */
    public static final int USSD_ERROR_SERVICE_UNAVAIL = -2;

    //
    //
    // Device Info
    //
    //

    /**
     * Returns the software version number for the device, for example,
     * the IMEI/SV for GSM phones. Return null if the software version is
     * not available.
     */
    @RequiresPermission(android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: anyOf = {
            android.Manifest.permission.ACCESS_COARSE_LOCATION,
            android.Manifest.permission.ACCESS_FINE_LOCATION
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.CONTROL_LOCATION_UPDATES

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.CONTROL_LOCATION_UPDATES

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.CONTROL_LOCATION_UPDATES

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_COARSE_LOCATION

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: anyOf = {
            android.Manifest.permission.READ_PHONE_STATE,
            android.Manifest.permission.READ_SMS,
            android.Manifest.permission.READ_PHONE_NUMBERS
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: anyOf = {
            android.Manifest.permission.READ_PHONE_STATE,
            android.Manifest.permission.READ_SMS,
            android.Manifest.permission.READ_PHONE_NUMBERS
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.CALL_PRIVILEGED

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.CALL_PRIVILEGED

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE)
    @SuppressLint("Doclava125"

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.SEND_SMS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.ACCESS_COARSE_LOCATION

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.CALL_PHONE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.CALL_PHONE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: anyOf = {
            android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,
            android.Manifest.permission.READ_PHONE_STATE
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: anyOf = {
            android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,
            android.Manifest.permission.READ_PHONE_STATE
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: anyOf = {
            android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,
            android.Manifest.permission.READ_PHONE_STATE
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: anyOf = {
            android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,
            android.Manifest.permission.READ_PHONE_STATE
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.CALL_PHONE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: anyOf = {
            android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,
            android.Manifest.permission.READ_PHONE_STATE
    }

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: 
Permission: android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\view\Display.java
Method: 
Permission: CONFIGURE_DISPLAY_COLOR_MODE

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/android\view\inputmethod\InputMethodManager.java
Method: 
Permission: WRITE_SECURE_SETTINGS

Path:D:/CLASS/1 Now/texwork/shared/permission/android-sdk-sources-for-api-level-26-master/com\android\settingslib\SuggestionParser.java
Method: 
Permission: Manifest.permission.MANAGE_USERS

