Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\accessibilityservice\AccessibilityService.java
Method: @NonNull FingerprintGestureController getFingerprintGestureController()
Permission: android.Manifest.permission.USE_FINGERPRINT

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\accounts\AccountManager.java
Method: AccountManagerFuture<Bundle> finishSessionAsUser(
            final Bundle sessionBundle,
            final Activity activity,
            final UserHandle userHandle,
            AccountManagerCallback<Bundle> callback,
            Handler handler)
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS_FULL

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\annotation\RequiresPermission.java
Method: @interface Read {
        RequiresPermission value()
Permission: READ_HISTORY_BOOKMARKS))
 *   {@literal @}RequiresPermission.Write(@RequiresPermission(WRITE_HISTORY_BOOKMARKS))
 *   public static final Uri BOOKMARKS_URI = Uri.parse("content://browser/bookmarks");
 * }</pre>
 * <p>
 * When specified on a parameter, the annotation indicates that the method requires
 * a permission which depends on the value of the parameter. For example, consider
 * {@link android.app.Activity#startActivity(Intent)}:
 * <pre>{@code
 *   public void startActivity(@RequiresPermission Intent intent) { ... }
 * }</pre>
 * Notice how there are no actual permission names listed in the annotation. The actual
 * permissions required will depend on the particular intent passed in. For example,
 * the code may look like this:
 * <pre>{@code
 *   Intent intent = new Intent(Intent.ACTION_CALL);
 *   startActivity(intent);
 * }</pre>
 * and the actual permission requirement for this particular intent is described on
 * the Intent name itself:
 * <pre>{@code
 *   {@literal @}RequiresPermission(Manifest.permission.CALL_PHONE)
 *   public static final String ACTION_CALL = "android.intent.action.CALL";
 * }</pre>
 *
 * @hide
 */
@Retention(SOURCE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: void moveTaskToFront(int taskId, @MoveTaskFlags int flags)
Permission: android.Manifest.permission.REORDER_TASKS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: void moveTaskToFront(int taskId, @MoveTaskFlags int flags, Bundle options)
Permission: android.Manifest.permission.REORDER_TASKS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: @RunningAppProcessInfo.Importance int getPackageImportance(String packageName)
Permission: Manifest.permission.PACKAGE_USAGE_STATS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: @RunningAppProcessInfo.Importance int getUidImportance(int uid)
Permission: Manifest.permission.PACKAGE_USAGE_STATS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: void addOnUidImportanceListener(OnUidImportanceListener listener,
            @RunningAppProcessInfo.Importance int importanceCutpoint)
Permission: Manifest.permission.PACKAGE_USAGE_STATS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: void removeOnUidImportanceListener(OnUidImportanceListener listener)
Permission: Manifest.permission.PACKAGE_USAGE_STATS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: void killBackgroundProcesses(String packageName)
Permission: Manifest.permission.KILL_BACKGROUND_PROCESSES

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: void killUid(int uid, String reason)
Permission: Manifest.permission.KILL_UID

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: void forceStopPackage(String packageName)
Permission: Manifest.permission.FORCE_STOP_PACKAGES

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: static int getCurrentUser()
Permission: anyOf = {
            "android.permission.INTERACT_ACROSS_USERS",
            "android.permission.INTERACT_ACROSS_USERS_FULL"
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: void dumpPackageState(FileDescriptor fd, String packageName)
Permission: Manifest.permission.DUMP

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\ActivityManager.java
Method: static void setPersistentVrThread(int tid)
Permission: Manifest.permission.RESTRICTED_VR_ACCESS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\AlarmManager.java
Method: void set(@AlarmType int type, long triggerAtMillis, long windowMillis,
            long intervalMillis, PendingIntent operation, WorkSource workSource)
Permission: android.Manifest.permission.UPDATE_DEVICE_STATS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\AlarmManager.java
Method: void set(@AlarmType int type, long triggerAtMillis, long windowMillis,
            long intervalMillis, OnAlarmListener listener, Handler targetHandler,
            WorkSource workSource)
Permission: android.Manifest.permission.UPDATE_DEVICE_STATS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\AppOpsManager.java
Method: void setUidMode(String appOp, int uid, int mode)
Permission: android.Manifest.permission.UPDATE_APP_OPS_STATS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\BroadcastOptions.java
Method: void setTemporaryAppWhitelistDuration(long duration)
Permission: android.Manifest.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\KeyguardManager.java
Method: void disableKeyguard()
Permission: Manifest.permission.DISABLE_KEYGUARD

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\KeyguardManager.java
Method: void reenableKeyguard()
Permission: Manifest.permission.DISABLE_KEYGUARD

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\KeyguardManager.java
Method: void exitKeyguardSecurely(final OnKeyguardExitResult callback)
Permission: Manifest.permission.DISABLE_KEYGUARD

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\Notification.java
Method: {@link MediaStyle#setShowActionsInCompactView(int...)
Permission: android.Manifest.permission.NOTIFICATION_DURING_SETUP)
    public static final String EXTRA_ALLOW_DURING_SETUP = "android.allowDuringSetup";

    /**
     * {@link #extras} key: A
     * {@link android.content.ContentUris content URI} pointing to an image that can be displayed
     * in the background when the notification is selected. The URI must point to an image stream
     * suitable for passing into
     * {@link android.graphics.BitmapFactory#decodeStream(java.io.InputStream)
     * BitmapFactory.decodeStream}; all other content types will be ignored. The content provider
     * URI used for this purpose must require no permissions to read the image data.
     */
    public static final String EXTRA_BACKGROUND_IMAGE_URI = "android.backgroundImageUri";

    /**
     * {@link #extras} key: A
     * {@link android.media.session.MediaSession.Token} associated with a
     * {@link android.app.Notification.MediaStyle} notification.
     */
    public static final String EXTRA_MEDIA_SESSION = "android.mediaSession";

    /**
     * {@link #extras} key: the indices of actions to be shown in the compact view,
     * as supplied to (e.g.

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\Notification.java
Method: {
            if (in.readInt()
Permission: android.Manifest.permission.SUBSTITUTE_NOTIFICATION_APP_NAME)
    public static final String EXTRA_SUBSTITUTE_APP_NAME = "android.substName";

    /**
     * This is set on the notification shown by the activity manager about all apps
     * running in the background.  It indicates that the notification should be shown
     * only if any of the given apps do not already have a {@link #FLAG_FOREGROUND_SERVICE}
     * notification currently visible to the user.  This is a string array of all
     * package names of the apps.
     * @hide
     */
    public static final String EXTRA_FOREGROUND_APPS = "android.foregroundApps";

    private Icon mSmallIcon;
    private Icon mLargeIcon;

    private String mChannelId;
    private long mTimeout;

    private String mShortcutId;
    private CharSequence mSettingsText;

    /** @hide */
    @IntDef(prefix = { "GROUP_ALERT_" }, value = {
            GROUP_ALERT_ALL, GROUP_ALERT_CHILDREN, GROUP_ALERT_SUMMARY
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\VrManager.java
Method: void setPersistentVrModeEnabled(boolean enabled)
Permission: android.Manifest.permission.RESTRICTED_VR_ACCESS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\VrManager.java
Method: void setVr2dDisplayProperties(
            Vr2dDisplayProperties vr2dDisplayProp)
Permission: android.Manifest.permission.RESTRICTED_VR_ACCESS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\WallpaperManager.java
Method: void setDisplayPadding(Rect padding)
Permission: android.Manifest.permission.SET_WALLPAPER_HINTS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\WallpaperManager.java
Method: void clearWallpaper()
Permission: android.Manifest.permission.SET_WALLPAPER

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\WallpaperManager.java
Method: void clearWallpaper(@SetWallpaperFlags int which, int userId)
Permission: android.Manifest.permission.SET_WALLPAPER

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\WallpaperManager.java
Method: boolean setWallpaperComponent(ComponentName name)
Permission: android.Manifest.permission.SET_WALLPAPER_COMPONENT

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\admin\DevicePolicyManager.java
Method: boolean packageHasActiveAdmins(String packageName)
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS_FULL

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\admin\DevicePolicyManager.java
Method: ComponentName getDeviceOwnerComponentOnAnyUser()
Permission: android.Manifest.permission.MANAGE_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\admin\DevicePolicyManager.java
Method: @Nullable String getDeviceOwner()
Permission: android.Manifest.permission.MANAGE_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\admin\DevicePolicyManager.java
Method: String getDeviceOwnerNameOnAnyUser()
Permission: android.Manifest.permission.MANAGE_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\admin\DevicePolicyManager.java
Method: boolean setActiveProfileOwner(@NonNull ComponentName admin, @Deprecated String ownerName)
Permission: android.Manifest.permission.MANAGE_DEVICE_ADMINS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\admin\DevicePolicyManager.java
Method: @Nullable String getProfileOwnerNameAsUser(int userId)
Permission: android.Manifest.permission.MANAGE_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\admin\DevicePolicyManager.java
Method: void notifyPendingSystemUpdate(long updateReceivedTime)
Permission: android.Manifest.permission.NOTIFY_PENDING_SYSTEM_UPDATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\admin\DevicePolicyManager.java
Method: void notifyPendingSystemUpdate(long updateReceivedTime, boolean isSecurityPatch)
Permission: android.Manifest.permission.NOTIFY_PENDING_SYSTEM_UPDATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\admin\DevicePolicyManager.java
Method: {
            throw re.rethrowFromSystemServer()
Permission: allOf = {
     *       Manifest.permission.MANAGE_USERS,
     *       Manifest.permission.INTERACT_ACROSS_USERS_FULL})
     */
    public void setOrganizationColorForUser(@ColorInt int color, @UserIdInt int userId) {
        try {
            // always enforce alpha channel to have 100% opacity
            color |= 0xFF000000;
            mService.setOrganizationColorForUser(color, userId);
        } catch (RemoteException re

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\admin\DevicePolicyManager.java
Method: void setDeviceProvisioningConfigApplied()
Permission: android.Manifest.permission.MANAGE_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\admin\DevicePolicyManager.java
Method: boolean isDeviceProvisioningConfigApplied()
Permission: android.Manifest.permission.MANAGE_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: RestoreSession beginRestoreSession()
Permission: android.Manifest.permission.BACKUP

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: void setBackupEnabled(boolean isEnabled)
Permission: android.Manifest.permission.BACKUP

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: boolean isBackupEnabled()
Permission: android.Manifest.permission.BACKUP

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: void setAutoRestore(boolean isEnabled)
Permission: android.Manifest.permission.BACKUP

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: String getCurrentTransport()
Permission: android.Manifest.permission.BACKUP

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: String[] listAllTransports()
Permission: android.Manifest.permission.BACKUP

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: String selectBackupTransport(String transport)
Permission: android.Manifest.permission.BACKUP

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: void selectBackupTransport(ComponentName transport,
            SelectBackupTransportCallback listener)
Permission: android.Manifest.permission.BACKUP

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: void backupNow()
Permission: android.Manifest.permission.BACKUP

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: long getAvailableRestoreToken(String packageName)
Permission: android.Manifest.permission.BACKUP

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: boolean isAppEligibleForBackup(String packageName)
Permission: android.Manifest.permission.BACKUP

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: int requestBackup(String[] packages, BackupObserver observer)
Permission: android.Manifest.permission.BACKUP

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: int requestBackup(String[] packages, BackupObserver observer,
            BackupManagerMonitor monitor, int flags)
Permission: android.Manifest.permission.BACKUP

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\backup\BackupManager.java
Method: void cancelBackups()
Permission: android.Manifest.permission.BACKUP

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\job\JobInfo.java
Method: Builder setPersisted(boolean isPersisted)
Permission: android.Manifest.permission.RECEIVE_BOOT_COMPLETED

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\job\JobScheduler.java
Method: abstract @Result int scheduleAsPackage(@NonNull JobInfo job, @NonNull String packageName,
            int userId, String tag)
Permission: android.Manifest.permission.UPDATE_DEVICE_STATS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\trust\TrustManager.java
Method: void setDeviceLockedForUser(int userId, boolean locked)
Permission: Manifest.permission.ACCESS_KEYGUARD_SECURE_STORAGE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\trust\TrustManager.java
Method: boolean isTrustUsuallyManaged(int userId)
Permission: android.Manifest.permission.TRUST_LISTENER

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\app\usage\UsageStatsManager.java
Method: void whitelistAppTemporarily(String packageName, long duration, UserHandle user)
Permission: android.Manifest.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothA2dp.java
Method: int getPriority(BluetoothDevice device)
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: boolean isEnabled()
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: int getState()
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: int getLeState()
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: boolean enable()
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: boolean disable()
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: String getAddress()
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: boolean setName(String name)
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: int getScanMode()
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: boolean startDiscovery()
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: boolean cancelDiscovery()
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: boolean isDiscovering()
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: Set<BluetoothDevice> getBondedDevices()
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: int getProfileConnectionState(int profile)
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: BluetoothServerSocket listenUsingRfcommWithServiceRecord(String name, UUID uuid)
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(String name, UUID uuid)
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: boolean startLeScan(LeScanCallback callback)
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: boolean startLeScan(final UUID[] serviceUuids, final LeScanCallback callback)
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothAdapter.java
Method: void stopLeScan(LeScanCallback callback)
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothDevice.java
Method: String getName()
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothDevice.java
Method: int getType()
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothDevice.java
Method: boolean createBond()
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothDevice.java
Method: int getBondState()
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothDevice.java
Method: BluetoothClass getBluetoothClass()
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothDevice.java
Method: ParcelUuid[] getUuids()
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothDevice.java
Method: boolean fetchUuidsWithSdp()
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothDevice.java
Method: boolean setPairingConfirmation(boolean confirm)
Permission: Manifest.permission.BLUETOOTH_PRIVILEGED

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothDevice.java
Method: BluetoothSocket createRfcommSocketToServiceRecord(UUID uuid)
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothDevice.java
Method: BluetoothSocket createInsecureRfcommSocketToServiceRecord(UUID uuid)
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothManager.java
Method: int getConnectionState(BluetoothDevice device, int profile)
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothManager.java
Method: List<BluetoothDevice> getConnectedDevices(int profile)
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothManager.java
Method: List<BluetoothDevice> getDevicesMatchingConnectionStates(int profile, int[] states)
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothProfile.java
Method: List<BluetoothDevice> getConnectedDevices()
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothProfile.java
Method: List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\BluetoothProfile.java
Method: int getConnectionState(BluetoothDevice device)
Permission: Manifest.permission.BLUETOOTH

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\le\BluetoothLeScanner.java
Method: void startScan(final ScanCallback callback)
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\le\BluetoothLeScanner.java
Method: void startScan(List<ScanFilter> filters, ScanSettings settings,
            final ScanCallback callback)
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\le\BluetoothLeScanner.java
Method: int startScan(@Nullable List<ScanFilter> filters, @Nullable ScanSettings settings,
            @NonNull PendingIntent callbackIntent)
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\le\BluetoothLeScanner.java
Method: void startScanFromSource(final WorkSource workSource, final ScanCallback callback)
Permission: allOf = {
            Manifest.permission.BLUETOOTH_ADMIN, Manifest.permission.UPDATE_DEVICE_STATS }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\le\BluetoothLeScanner.java
Method: void startScanFromSource(List<ScanFilter> filters, ScanSettings settings,
                                    final WorkSource workSource, final ScanCallback callback)
Permission: allOf = {
            Manifest.permission.BLUETOOTH_ADMIN, Manifest.permission.UPDATE_DEVICE_STATS }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\le\BluetoothLeScanner.java
Method: void stopScan(ScanCallback callback)
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\bluetooth\le\BluetoothLeScanner.java
Method: void stopScan(PendingIntent callbackIntent)
Permission: Manifest.permission.BLUETOOTH_ADMIN

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: void startActivityAsUser(@RequiresPermission Intent intent, UserHandle user)
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS_FULL

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: void startActivityAsUser(@RequiresPermission Intent intent, @Nullable Bundle options,
            UserHandle userId)
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS_FULL

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: void startActivitiesAsUser(Intent[] intents, Bundle options, UserHandle userHandle)
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS_FULL

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: abstract void sendBroadcastAsUser(@RequiresPermission Intent intent,
            UserHandle user)
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: abstract void sendBroadcastAsUser(@RequiresPermission Intent intent,
            UserHandle user, @Nullable String receiverPermission)
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: abstract void sendBroadcastAsUser(@RequiresPermission Intent intent,
            UserHandle user, @Nullable String receiverPermission, @Nullable Bundle options)
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: abstract void sendBroadcastAsUser(@RequiresPermission Intent intent,
            UserHandle user, @Nullable String receiverPermission, int appOp)
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: abstract void sendOrderedBroadcastAsUser(@RequiresPermission Intent intent,
            UserHandle user, @Nullable String receiverPermission, BroadcastReceiver resultReceiver,
            @Nullable Handler scheduler, int initialCode, @Nullable String initialData,
            @Nullable  Bundle initialExtras)
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: abstract void sendOrderedBroadcastAsUser(Intent intent, UserHandle user,
            @Nullable String receiverPermission, int appOp, BroadcastReceiver resultReceiver,
            @Nullable Handler scheduler, int initialCode, @Nullable String initialData,
            @Nullable  Bundle initialExtras)
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: abstract void sendOrderedBroadcastAsUser(Intent intent, UserHandle user,
            @Nullable String receiverPermission, int appOp, @Nullable Bundle options,
            BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode,
            @Nullable String initialData, @Nullable  Bundle initialExtras)
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: abstract void sendStickyBroadcast(@RequiresPermission Intent intent)
Permission: android.Manifest.permission.BROADCAST_STICKY

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: abstract void sendStickyOrderedBroadcast(@RequiresPermission Intent intent,
            BroadcastReceiver resultReceiver,
            @Nullable Handler scheduler, int initialCode, @Nullable String initialData,
            @Nullable Bundle initialExtras)
Permission: android.Manifest.permission.BROADCAST_STICKY

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: abstract void removeStickyBroadcast(@RequiresPermission Intent intent)
Permission: android.Manifest.permission.BROADCAST_STICKY

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: abstract void sendStickyBroadcastAsUser(@RequiresPermission Intent intent,
            UserHandle user)
Permission: allOf = {
            android.Manifest.permission.INTERACT_ACROSS_USERS,
            android.Manifest.permission.BROADCAST_STICKY
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: abstract void sendStickyBroadcastAsUser(@RequiresPermission Intent intent,
            UserHandle user, Bundle options)
Permission: allOf = {
            android.Manifest.permission.INTERACT_ACROSS_USERS,
            android.Manifest.permission.BROADCAST_STICKY
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: abstract void sendStickyOrderedBroadcastAsUser(@RequiresPermission Intent intent,
            UserHandle user, BroadcastReceiver resultReceiver,
            @Nullable Handler scheduler, int initialCode, @Nullable String initialData,
            @Nullable Bundle initialExtras)
Permission: allOf = {
            android.Manifest.permission.INTERACT_ACROSS_USERS,
            android.Manifest.permission.BROADCAST_STICKY
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: abstract void removeStickyBroadcastAsUser(@RequiresPermission Intent intent,
            UserHandle user)
Permission: allOf = {
            android.Manifest.permission.INTERACT_ACROSS_USERS,
            android.Manifest.permission.BROADCAST_STICKY
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: abstract Intent registerReceiverAsUser(BroadcastReceiver receiver,
            UserHandle user, IntentFilter filter, @Nullable String broadcastPermission,
            @Nullable Handler scheduler)
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS_FULL

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: abstract ComponentName startForegroundServiceAsUser(Intent service, UserHandle user)
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: abstract ComponentName startServiceAsUser(Intent service, UserHandle user)
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: abstract boolean stopServiceAsUser(Intent service, UserHandle user)
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: boolean bindServiceAsUser(@RequiresPermission Intent service, ServiceConnection conn,
            int flags, UserHandle user)
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\Context.java
Method: boolean bindServiceAsUser(Intent service, ServiceConnection conn, int flags,
            Handler handler, UserHandle user)
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageInstaller.java
Method: void uninstall(@NonNull VersionedPackage versionedPackage,
            @NonNull IntentSender statusReceiver)
Permission: anyOf = {
            Manifest.permission.DELETE_PACKAGES,
            Manifest.permission.REQUEST_DELETE_PACKAGES}

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageInstaller.java
Method: void setPermissionsResult(int sessionId, boolean accepted)
Permission: android.Manifest.permission.INSTALL_PACKAGES

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageInstaller.java
Method: void setGrantedRuntimePermissions(String[] permissions)
Permission: android.Manifest.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageInstaller.java
Method: void setAllocateAggressive(boolean allocateAggressive)
Permission: android.Manifest.permission.ALLOCATE_AGGRESSIVE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: abstract PackageInfo getPackageInfoAsUser(String packageName,
            @PackageInfoFlags int flags, @UserIdInt int userId)
Permission: Manifest.permission.INTERACT_ACROSS_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: abstract List<PackageInfo> getInstalledPackagesAsUser(@PackageInfoFlags int flags,
            @UserIdInt int userId)
Permission: android.Manifest.permission.INTERACT_ACROSS_USERS_FULL

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: abstract void grantRuntimePermission(@NonNull String packageName,
            @NonNull String permissionName, @NonNull UserHandle user)
Permission: android.Manifest.permission.GRANT_RUNTIME_PERMISSIONS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: abstract void revokeRuntimePermission(@NonNull String packageName,
            @NonNull String permissionName, @NonNull UserHandle user)
Permission: android.Manifest.permission.REVOKE_RUNTIME_PERMISSIONS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: abstract @PermissionFlags int getPermissionFlags(String permissionName,
            String packageName, @NonNull UserHandle user)
Permission: anyOf = {
            android.Manifest.permission.GRANT_RUNTIME_PERMISSIONS,
            android.Manifest.permission.REVOKE_RUNTIME_PERMISSIONS
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: abstract void updatePermissionFlags(String permissionName,
            String packageName, @PermissionFlags int flagMask, @PermissionFlags int flagValues,
            @NonNull UserHandle user)
Permission: anyOf = {
            android.Manifest.permission.GRANT_RUNTIME_PERMISSIONS,
            android.Manifest.permission.REVOKE_RUNTIME_PERMISSIONS
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: abstract @NonNull List<InstantAppInfo> getInstantApps()
Permission: Manifest.permission.ACCESS_INSTANT_APPS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: abstract @Nullable Drawable getInstantAppIcon(String packageName)
Permission: Manifest.permission.ACCESS_INSTANT_APPS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: abstract int installExistingPackageAsUser(String packageName, @UserIdInt int userId)
Permission: anyOf = {
            Manifest.permission.INSTALL_PACKAGES,
            Manifest.permission.INTERACT_ACROSS_USERS_FULL}

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: abstract void verifyIntentFilter(int verificationId, int verificationCode,
            List<String> failedDomains)
Permission: android.Manifest.permission.INTENT_FILTER_VERIFICATION_AGENT

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: abstract boolean updateIntentVerificationStatusAsUser(String packageName, int status,
            @UserIdInt int userId)
Permission: android.Manifest.permission.SET_PREFERRED_APPLICATIONS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: abstract boolean setDefaultBrowserPackageNameAsUser(String packageName,
            @UserIdInt int userId)
Permission: android.Manifest.permission.SET_PREFERRED_APPLICATIONS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: abstract void setUpdateAvailable(String packageName, boolean updateAvaialble)
Permission: Manifest.permission.INSTALL_PACKAGES

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: abstract void deletePackage(String packageName, IPackageDeleteObserver observer,
            @DeleteFlags int flags)
Permission: Manifest.permission.DELETE_PACKAGES

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: abstract void deletePackageAsUser(@NonNull String packageName,
            IPackageDeleteObserver observer, @DeleteFlags int flags, @UserIdInt int userId)
Permission: anyOf = {
            Manifest.permission.DELETE_PACKAGES,
            Manifest.permission.INTERACT_ACROSS_USERS_FULL}

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: abstract void addOnPermissionsChangeListener(OnPermissionsChangedListener listener)
Permission: Manifest.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\content\pm\PackageManager.java
Method: abstract void removeOnPermissionsChangeListener(OnPermissionsChangedListener listener)
Permission: Manifest.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\camera2\CameraManager.java
Method: void openCamera(@NonNull String cameraId,
            @NonNull final CameraDevice.StateCallback callback, @Nullable Handler handler)
Permission: android.Manifest.permission.CAMERA

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: void authenticate(@Nullable CryptoObject crypto, @Nullable CancellationSignal cancel,
            int flags, @NonNull AuthenticationCallback callback, @Nullable Handler handler)
Permission: USE_FINGERPRINT

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: void authenticate(@Nullable CryptoObject crypto, @Nullable CancellationSignal cancel,
            int flags, @NonNull AuthenticationCallback callback, Handler handler, int userId)
Permission: USE_FINGERPRINT

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: void enroll(byte [] token, CancellationSignal cancel, int flags,
            int userId, EnrollmentCallback callback)
Permission: MANAGE_FINGERPRINT

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: long preEnroll()
Permission: MANAGE_FINGERPRINT

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: int postEnroll()
Permission: MANAGE_FINGERPRINT

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: void setActiveUser(int userId)
Permission: MANAGE_FINGERPRINT

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: void remove(Fingerprint fp, int userId, RemovalCallback callback)
Permission: MANAGE_FINGERPRINT

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: void enumerate(int userId, @NonNull EnumerateCallback callback)
Permission: MANAGE_FINGERPRINT

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: void rename(int fpId, int userId, String newName)
Permission: MANAGE_FINGERPRINT

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: List<Fingerprint> getEnrolledFingerprints(int userId)
Permission: USE_FINGERPRINT

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: List<Fingerprint> getEnrolledFingerprints()
Permission: USE_FINGERPRINT

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: boolean hasEnrolledFingerprints()
Permission: USE_FINGERPRINT

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: boolean hasEnrolledFingerprints(int userId)
Permission: allOf = {
            USE_FINGERPRINT,
            INTERACT_ACROSS_USERS}

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\fingerprint\FingerprintManager.java
Method: boolean isHardwareDetected()
Permission: USE_FINGERPRINT

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\hdmi\HdmiControlManager.java
Method: void setStandbyMode(boolean isStandbyModeOn)
Permission: android.Manifest.permission.HDMI_CEC

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\hdmi\HdmiControlManager.java
Method: void addHotplugEventListener(HotplugEventListener listener)
Permission: android.Manifest.permission.HDMI_CEC

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\hdmi\HdmiControlManager.java
Method: void removeHotplugEventListener(HotplugEventListener listener)
Permission: android.Manifest.permission.HDMI_CEC

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\location\ContextHubManager.java
Method: int[] getContextHubHandles()
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\location\ContextHubManager.java
Method: ContextHubInfo getContextHubInfo(int hubHandle)
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\location\ContextHubManager.java
Method: int loadNanoApp(int hubHandle, NanoApp app)
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\location\ContextHubManager.java
Method: int unloadNanoApp(int nanoAppHandle)
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\location\ContextHubManager.java
Method: NanoAppInstanceInfo getNanoAppInstanceInfo(int nanoAppHandle)
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\location\ContextHubManager.java
Method: int[] findNanoAppOnHub(int hubHandle, NanoAppFilter filter)
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\hardware\location\ContextHubManager.java
Method: int sendMessage(int hubHandle, int nanoAppHandle, ContextHubMessage message)
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: void requestLocationUpdates(String provider, long minTime, float minDistance,
            LocationListener listener)
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: void requestLocationUpdates(String provider, long minTime, float minDistance,
            LocationListener listener, Looper looper)
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: void requestLocationUpdates(long minTime, float minDistance, Criteria criteria,
            LocationListener listener, Looper looper)
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: void requestLocationUpdates(String provider, long minTime, float minDistance,
            PendingIntent intent)
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: void requestLocationUpdates(long minTime, float minDistance, Criteria criteria,
            PendingIntent intent)
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: void requestSingleUpdate(String provider, LocationListener listener, Looper looper)
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: void requestSingleUpdate(Criteria criteria, LocationListener listener, Looper looper)
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: void requestSingleUpdate(String provider, PendingIntent intent)
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: void requestSingleUpdate(Criteria criteria, PendingIntent intent)
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: void requestLocationUpdates(LocationRequest request, LocationListener listener,
            Looper looper)
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: void requestLocationUpdates(LocationRequest request, PendingIntent intent)
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: void addProximityAlert(double latitude, double longitude, float radius, long expiration,
            PendingIntent intent)
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: void addGeofence(LocationRequest request, Geofence fence, PendingIntent intent)
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: Location getLastKnownLocation(String provider)
Permission: anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: boolean addGpsStatusListener(GpsStatus.Listener listener)
Permission: ACCESS_FINE_LOCATION

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: boolean registerGnssStatusCallback(GnssStatus.Callback callback)
Permission: ACCESS_FINE_LOCATION

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: boolean registerGnssStatusCallback(GnssStatus.Callback callback, Handler handler)
Permission: ACCESS_FINE_LOCATION

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: boolean addNmeaListener(GpsStatus.NmeaListener listener)
Permission: ACCESS_FINE_LOCATION

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: boolean addNmeaListener(OnNmeaMessageListener listener)
Permission: ACCESS_FINE_LOCATION

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: boolean addNmeaListener(OnNmeaMessageListener listener, Handler handler)
Permission: ACCESS_FINE_LOCATION

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: boolean registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback callback)
Permission: ACCESS_FINE_LOCATION

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: boolean registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback callback,
            Handler handler)
Permission: ACCESS_FINE_LOCATION

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: boolean registerGnssNavigationMessageCallback(
            GnssNavigationMessage.Callback callback, Handler handler)
Permission: ACCESS_FINE_LOCATION

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: GpsStatus getGpsStatus(GpsStatus status)
Permission: ACCESS_FINE_LOCATION

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: int getGnssBatchSize()
Permission: Manifest.permission.LOCATION_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: boolean registerGnssBatchedLocationCallback(long periodNanos, boolean wakeOnFifoFull,
                                  BatchedLocationCallback callback, Handler handler)
Permission: Manifest.permission.LOCATION_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: void flushGnssBatch()
Permission: Manifest.permission.LOCATION_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\location\LocationManager.java
Method: boolean unregisterGnssBatchedLocationCallback(BatchedLocationCallback callback)
Permission: Manifest.permission.LOCATION_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\AudioManager.java
Method: int registerAudioPolicy(@NonNull AudioPolicy policy)
Permission: android.Manifest.permission.MODIFY_AUDIO_ROUTING

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\AudioManager.java
Method: void unregisterAudioPolicyAsync(@NonNull AudioPolicy policy)
Permission: android.Manifest.permission.MODIFY_AUDIO_ROUTING

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\RingtoneManager.java
Method: static void enableSyncFromParent(Context userContext)
Permission: Manifest.permission.WRITE_SECURE_SETTINGS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\session\MediaSessionManager.java
Method: void setOnVolumeKeyLongPressListener(
            OnVolumeKeyLongPressListener listener, @Nullable Handler handler)
Permission: android.Manifest.permission.SET_VOLUME_KEY_LONG_PRESS_LISTENER

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\session\MediaSessionManager.java
Method: void setOnMediaKeyListener(OnMediaKeyListener listener, @Nullable Handler handler)
Permission: android.Manifest.permission.SET_MEDIA_KEY_LISTENER

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\soundtrigger\SoundTriggerDetector.java
Method: boolean startRecognition(@RecognitionFlags int recognitionFlags)
Permission: android.Manifest.permission.MANAGE_SOUND_TRIGGER

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\soundtrigger\SoundTriggerDetector.java
Method: boolean stopRecognition()
Permission: android.Manifest.permission.MANAGE_SOUND_TRIGGER

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\soundtrigger\SoundTriggerManager.java
Method: void updateModel(Model model)
Permission: android.Manifest.permission.MANAGE_SOUND_TRIGGER

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\soundtrigger\SoundTriggerManager.java
Method: Model getModel(UUID soundModelId)
Permission: android.Manifest.permission.MANAGE_SOUND_TRIGGER

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\soundtrigger\SoundTriggerManager.java
Method: void deleteModel(UUID soundModelId)
Permission: android.Manifest.permission.MANAGE_SOUND_TRIGGER

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\soundtrigger\SoundTriggerManager.java
Method: SoundTriggerDetector createSoundTriggerDetector(UUID soundModelId,
            @NonNull SoundTriggerDetector.Callback callback, @Nullable Handler handler)
Permission: android.Manifest.permission.MANAGE_SOUND_TRIGGER

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: void setParentalControlsEnabled(boolean enabled)
Permission: android.Manifest.permission.MODIFY_PARENTAL_CONTROLS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: void addBlockedRating(@NonNull TvContentRating rating)
Permission: android.Manifest.permission.MODIFY_PARENTAL_CONTROLS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: void removeBlockedRating(@NonNull TvContentRating rating)
Permission: android.Manifest.permission.MODIFY_PARENTAL_CONTROLS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: void notifyPreviewProgramBrowsableDisabled(String packageName, long programId)
Permission: android.Manifest.permission.NOTIFY_TV_INPUTS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: void notifyWatchNextProgramBrowsableDisabled(String packageName, long programId)
Permission: android.Manifest.permission.NOTIFY_TV_INPUTS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: void notifyPreviewProgramAddedToWatchNext(String packageName, long previewProgramId,
            long watchNextProgramId)
Permission: android.Manifest.permission.NOTIFY_TV_INPUTS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: List<TvStreamConfig> getAvailableTvStreamConfigList(String inputId)
Permission: android.Manifest.permission.CAPTURE_TV_INPUT

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: boolean captureFrame(String inputId, Surface surface, TvStreamConfig config)
Permission: android.Manifest.permission.CAPTURE_TV_INPUT

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: List<TvInputHardwareInfo> getHardwareList()
Permission: android.Manifest.permission.TV_INPUT_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: Hardware acquireTvInputHardware(int deviceId, final HardwareCallback callback,
            TvInputInfo info)
Permission: android.Manifest.permission.TV_INPUT_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: Hardware acquireTvInputHardware(int deviceId, TvInputInfo info,
            final HardwareCallback callback)
Permission: android.Manifest.permission.TV_INPUT_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\tv\TvInputManager.java
Method: void releaseTvInputHardware(int deviceId, Hardware hardware)
Permission: android.Manifest.permission.TV_INPUT_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\media\tv\TvView.java
Method: void unblockContent(TvContentRating unblockedRating)
Permission: android.Manifest.permission.MODIFY_PARENTAL_CONTROLS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: int getNetworkPreference()
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: NetworkInfo getActiveNetworkInfo()
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: Network getActiveNetwork()
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: Network getActiveNetworkForUid(int uid)
Permission: android.Manifest.permission.CONNECTIVITY_INTERNAL

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: NetworkInfo getActiveNetworkInfoForUid(int uid)
Permission: android.Manifest.permission.CONNECTIVITY_INTERNAL

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: NetworkInfo getNetworkInfo(int networkType)
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: NetworkInfo getNetworkInfo(Network network)
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: NetworkInfo[] getAllNetworkInfo()
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: Network getNetworkForType(int networkType)
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: Network[] getAllNetworks()
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: LinkProperties getActiveLinkProperties()
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: LinkProperties getLinkProperties(int networkType)
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: LinkProperties getLinkProperties(Network network)
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: NetworkCapabilities getNetworkCapabilities(Network network)
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: NetworkQuotaInfo getActiveNetworkQuotaInfo()
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: String[] getTetherableIfaces()
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: String[] getTetheredIfaces()
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: String[] getTetheringErroredIfaces()
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: boolean isTetheringSupported()
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: void startTethering(int type, boolean showProvisioningUi,
            final OnStartTetheringCallback callback, Handler handler)
Permission: android.Manifest.permission.TETHER_PRIVILEGED

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: void stopTethering(int type)
Permission: android.Manifest.permission.TETHER_PRIVILEGED

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: String[] getTetherableUsbRegexs()
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: String[] getTetherableWifiRegexs()
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: String[] getTetherableBluetoothRegexs()
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: int getLastTetherError(String iface)
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: void setGlobalProxy(ProxyInfo p)
Permission: android.Manifest.permission.CONNECTIVITY_INTERNAL

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: boolean isNetworkSupported(int networkType)
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: boolean isActiveNetworkMetered()
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: void setAirplaneMode(boolean enable)
Permission: android.Manifest.permission.CONNECTIVITY_INTERNAL

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: void registerNetworkCallback(NetworkRequest request, NetworkCallback networkCallback)
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: void registerNetworkCallback(
            NetworkRequest request, NetworkCallback networkCallback, Handler handler)
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: void registerNetworkCallback(NetworkRequest request, PendingIntent operation)
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: void registerDefaultNetworkCallback(NetworkCallback networkCallback)
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: void registerDefaultNetworkCallback(NetworkCallback networkCallback, Handler handler)
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: void setAcceptUnvalidated(Network network, boolean accept, boolean always)
Permission: android.Manifest.permission.CONNECTIVITY_INTERNAL

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: void setAvoidUnvalidated(Network network)
Permission: android.Manifest.permission.CONNECTIVITY_INTERNAL

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: void startCaptivePortalApp(Network network)
Permission: android.Manifest.permission.CONNECTIVITY_INTERNAL

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\ConnectivityManager.java
Method: @MultipathPreference int getMultipathPreference(Network network)
Permission: android.Manifest.permission.ACCESS_NETWORK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\NetworkScoreManager.java
Method: NetworkScorerAppData getActiveScorer()
Permission: android.Manifest.permission.REQUEST_NETWORK_SCORES

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\NetworkScoreManager.java
Method: boolean updateScores(ScoredNetwork[] networks)
Permission: android.Manifest.permission.SCORE_NETWORKS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\NetworkScoreManager.java
Method: boolean clearScores()
Permission: android.Manifest.permission.REQUEST_NETWORK_SCORES

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\NetworkScoreManager.java
Method: boolean setActiveScorer(String packageName)
Permission: android.Manifest.permission.SCORE_NETWORKS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\NetworkScoreManager.java
Method: void disableScoring()
Permission: android.Manifest.permission.REQUEST_NETWORK_SCORES

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\TrafficStats.java
Method: static void setThreadStatsUid(int uid)
Permission: android.Manifest.permission.UPDATE_DEVICE_STATS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\TrafficStats.java
Method: static void clearThreadStatsUid()
Permission: android.Manifest.permission.UPDATE_DEVICE_STATS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\VpnService.java
Method: static void prepareAndAuthorize(Context context)
Permission: android.Manifest.permission.CONTROL_VPN

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\wifi\RttManager.java
Method: void startRanging(RttParams[] params, RttListener listener)
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\wifi\RttManager.java
Method: void stopRanging(RttListener listener)
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\wifi\RttManager.java
Method: void enableResponder(ResponderCallback callback)
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\wifi\RttManager.java
Method: void disableResponder(ResponderCallback callback)
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiManager.java
Method: List<WifiConfiguration> getPrivilegedConfiguredNetworks()
Permission: android.Manifest.permission.READ_WIFI_CREDENTIAL

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiManager.java
Method: WifiConnectionStatistics getConnectionStatistics()
Permission: android.Manifest.permission.READ_WIFI_CREDENTIAL

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiManager.java
Method: boolean startScan(WorkSource workSource)
Permission: android.Manifest.permission.UPDATE_DEVICE_STATS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiManager.java
Method: boolean setWifiApEnabled(WifiConfiguration wifiConfig, boolean enabled)
Permission: android.Manifest.permission.TETHER_PRIVILEGED

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiManager.java
Method: int getWifiApState()
Permission: android.Manifest.permission.ACCESS_WIFI_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiManager.java
Method: boolean isWifiApEnabled()
Permission: android.Manifest.permission.ACCESS_WIFI_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiManager.java
Method: WifiConfiguration getWifiApConfiguration()
Permission: android.Manifest.permission.ACCESS_WIFI_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiManager.java
Method: boolean setWifiApConfiguration(WifiConfiguration wifiConfig)
Permission: android.Manifest.permission.CHANGE_WIFI_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiScanner.java
Method: void startBackgroundScan(ScanSettings settings, ScanListener listener)
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiScanner.java
Method: void startBackgroundScan(ScanSettings settings, ScanListener listener,
            WorkSource workSource)
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiScanner.java
Method: void stopBackgroundScan(ScanListener listener)
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiScanner.java
Method: boolean getScanResults()
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiScanner.java
Method: void startScan(ScanSettings settings, ScanListener listener)
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiScanner.java
Method: void startScan(ScanSettings settings, ScanListener listener, WorkSource workSource)
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\net\wifi\WifiScanner.java
Method: void stopScan(ScanListener listener)
Permission: android.Manifest.permission.LOCATION_HARDWARE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\nfc\NfcAdapter.java
Method: boolean enable()
Permission: android.Manifest.permission.WRITE_SECURE_SETTINGS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\nfc\NfcAdapter.java
Method: boolean disable()
Permission: android.Manifest.permission.WRITE_SECURE_SETTINGS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\nfc\NfcAdapter.java
Method: boolean disable(boolean persist)
Permission: android.Manifest.permission.WRITE_SECURE_SETTINGS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\nfc\NfcAdapter.java
Method: boolean enableNdefPush()
Permission: android.Manifest.permission.WRITE_SECURE_SETTINGS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\nfc\NfcAdapter.java
Method: boolean disableNdefPush()
Permission: android.Manifest.permission.WRITE_SECURE_SETTINGS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\nfc\NfcAdapter.java
Method: boolean addNfcUnlockHandler(final NfcUnlockHandler unlockHandler,
                                       String[] tagTechnologies)
Permission: android.Manifest.permission.WRITE_SECURE_SETTINGS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\nfc\NfcAdapter.java
Method: boolean removeNfcUnlockHandler(NfcUnlockHandler unlockHandler)
Permission: android.Manifest.permission.WRITE_SECURE_SETTINGS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\Build.java
Method: static String getSerial()
Permission: Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\IncidentManager.java
Method: void reportIncident(IncidentReportArgs args)
Permission: allOf = {
            android.Manifest.permission.DUMP,
            android.Manifest.permission.PACKAGE_USAGE_STATS
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\IncidentManager.java
Method: void reportIncident(String settingName, byte[] headerProto)
Permission: allOf = {
            android.Manifest.permission.DUMP,
            android.Manifest.permission.PACKAGE_USAGE_STATS
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\PowerManager.java
Method: void userActivity(long when, int event, int flags)
Permission: anyOf = {
            android.Manifest.permission.DEVICE_POWER,
            android.Manifest.permission.USER_ACTIVITY
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\RecoverySystem.java
Method: static void processPackage(Context context,
                                      File packageFile,
                                      final ProgressListener listener,
                                      final Handler handler)
Permission: android.Manifest.permission.RECOVERY

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\RecoverySystem.java
Method: static void processPackage(Context context,
                                      File packageFile,
                                      final ProgressListener listener)
Permission: android.Manifest.permission.RECOVERY

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\RecoverySystem.java
Method: static void installPackage(Context context, File packageFile)
Permission: android.Manifest.permission.RECOVERY

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\RecoverySystem.java
Method: static void installPackage(Context context, File packageFile, boolean processed)
Permission: android.Manifest.permission.RECOVERY

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\RecoverySystem.java
Method: static void scheduleUpdateOnBoot(Context context, File packageFile)
Permission: android.Manifest.permission.RECOVERY

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\RecoverySystem.java
Method: static void cancelScheduledUpdate(Context context)
Permission: android.Manifest.permission.RECOVERY

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\RecoverySystem.java
Method: static void rebootWipeAb(Context context, File packageFile, String reason)
Permission: allOf = {
            android.Manifest.permission.RECOVERY,
            android.Manifest.permission.REBOOT
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\UserManager.java
Method: boolean isManagedProfile()
Permission: android.Manifest.permission.MANAGE_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\UserManager.java
Method: boolean isManagedProfile(@UserIdInt int userId)
Permission: android.Manifest.permission.MANAGE_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\UserManager.java
Method: int getUserRestrictionSource(String restrictionKey, UserHandle userHandle)
Permission: android.Manifest.permission.MANAGE_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\UserManager.java
Method: List<EnforcingUser> getUserRestrictionSources(
            String restrictionKey, UserHandle userHandle)
Permission: android.Manifest.permission.MANAGE_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\UserManager.java
Method: String getSeedAccountName()
Permission: android.Manifest.permission.MANAGE_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\UserManager.java
Method: String getSeedAccountType()
Permission: android.Manifest.permission.MANAGE_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\UserManager.java
Method: PersistableBundle getSeedAccountOptions()
Permission: android.Manifest.permission.MANAGE_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\UserManager.java
Method: void clearSeedAccountData()
Permission: android.Manifest.permission.MANAGE_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\UserManager.java
Method: long[] getSerialNumbersOfUsers(boolean excludeDying)
Permission: android.Manifest.permission.MANAGE_USERS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\UserManager.java
Method: @Nullable String getUserAccount(@UserIdInt int userHandle)
Permission:  allOf = {
            Manifest.permission.INTERACT_ACROSS_USERS_FULL,
            Manifest.permission.MANAGE_USERS
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\UserManager.java
Method: void setUserAccount(@UserIdInt int userHandle, @Nullable String accountName)
Permission:  allOf = {
            Manifest.permission.INTERACT_ACROSS_USERS_FULL,
            Manifest.permission.MANAGE_USERS
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\Vibrator.java
Method: void vibrate(long milliseconds)
Permission: android.Manifest.permission.VIBRATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\Vibrator.java
Method: void vibrate(long milliseconds, AudioAttributes attributes)
Permission: android.Manifest.permission.VIBRATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\Vibrator.java
Method: void vibrate(long[] pattern, int repeat)
Permission: android.Manifest.permission.VIBRATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\Vibrator.java
Method: void vibrate(long[] pattern, int repeat, AudioAttributes attributes)
Permission: android.Manifest.permission.VIBRATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\Vibrator.java
Method: void vibrate(VibrationEffect vibe)
Permission: android.Manifest.permission.VIBRATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\Vibrator.java
Method: void vibrate(VibrationEffect vibe, AudioAttributes attributes)
Permission: android.Manifest.permission.VIBRATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\Vibrator.java
Method: abstract void vibrate(int uid, String opPkg,
            VibrationEffect vibe, AudioAttributes attributes)
Permission: android.Manifest.permission.VIBRATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\Vibrator.java
Method: abstract void cancel()
Permission: android.Manifest.permission.VIBRATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\os\storage\StorageManager.java
Method: throws IOException {
        return getAllocatableBytes(storageUuid, 0)
Permission: android.Manifest.permission.ALLOCATE_AGGRESSIVE)
    @SystemApi
    public static final int FLAG_ALLOCATE_AGGRESSIVE = 1 << 0;

    /**
     * Flag indicating that a disk space allocation request should defy any
     * reserved disk space.
     *
     * @hide
     */
    public static final int FLAG_ALLOCATE_DEFY_RESERVED = 1 << 1;

    /** @hide */
    @IntDef(flag = true, value = {
            FLAG_ALLOCATE_AGGRESSIVE,
            FLAG_ALLOCATE_DEFY_RESERVED,
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\provider\Settings.java
Method: static boolean putString(@NonNull ContentResolver resolver,
                @NonNull String name, @Nullable String value, @Nullable String tag,
                boolean makeDefault)
Permission: Manifest.permission.WRITE_SECURE_SETTINGS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\provider\Settings.java
Method: static void resetToDefaults(@NonNull ContentResolver resolver,
                @Nullable String tag)
Permission: Manifest.permission.WRITE_SECURE_SETTINGS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\provider\Settings.java
Method: {
            outKeySet.addAll(CLONE_TO_MANAGED_PROFILE)
Permission: Manifest.permission.WRITE_SECURE_SETTINGS)
        public static final String SYNC_PARENT_SOUNDS = "sync_parent_sounds";

        /** @hide */
        public static final String IMMERSIVE_MODE_CONFIRMATIONS = "immersive_mode_confirmations";

        /**
         * This is the query URI for finding a print service to install.
         *
         * @hide
         */
        public static final String PRINT_SERVICE_SEARCH_URI = "print_service_search_uri";

        /**
         * This is the query URI for finding a NFC payment service to install.
         *
         * @hide
         */
        public static final String PAYMENT_SERVICE_SEARCH_URI = "payment_service_search_uri";

        /**
         * This is the query URI for finding a auto fill service to install.
         *
         * @hide
         */
        public static final String AUTOFILL_SERVICE_SEARCH_URI = "autofill_service_search_uri";

        /**
         * If enabled, apps should try to skip any introductory hints on first launch. This might
         * apply to users that are already familiar with the environment or temporary users.
         * <p>
         * Type : int (0 to show hints, 1 to skip showing hints)
         */
        public static final String SKIP_FIRST_USE_HINTS = "skip_first_use_hints";

        /**
         * Persisted playback time after a user confirmation of an unsafe volume level.
         *
         * @hide
         */
        public static final String UNSAFE_VOLUME_MUSIC_ACTIVE_MS = "unsafe_volume_music_active_ms";

        /**
         * This preference enables notification display on the lockscreen.
         * @hide
         */
        public static final String LOCK_SCREEN_SHOW_NOTIFICATIONS =
                "lock_screen_show_notifications";

        /**
         * This preference stores the last stack active task time for each user, which affects what
         * tasks will be visible in Overview.
         * @hide
         */
        public static final String OVERVIEW_LAST_STACK_ACTIVE_TIME =
                "overview_last_stack_active_time";

        /**
         * List of TV inputs that are currently hidden. This is a string
         * containing the IDs of all hidden TV inputs. Each ID is encoded by
         * {@link android.net.Uri#encode(String)} and separated by ':'.
         * @hide
         */
        public static final String TV_INPUT_HIDDEN_INPUTS = "tv_input_hidden_inputs";

        /**
         * List of custom TV input labels. This is a string containing <TV input id, custom name>
         * pairs. TV input id and custom name are encoded by {@link android.net.Uri#encode(String)}
         * and separated by ','. Each pair is separated by ':'.
         * @hide
         */
        public static final String TV_INPUT_CUSTOM_LABELS = "tv_input_custom_labels";

        /**
         * Whether automatic routing of system audio to USB audio peripheral is disabled.
         * The value is boolean (1 or 0), where 1 means automatic routing is disabled,
         * and 0 means automatic routing is enabled.
         *
         * @hide
         */
        public static final String USB_AUDIO_AUTOMATIC_ROUTING_DISABLED =
                "usb_audio_automatic_routing_disabled";

        /**
         * The timeout in milliseconds before the device fully goes to sleep after
         * a period of inactivity.  This value sets an upper bound on how long the device
         * will stay awake or dreaming without user activity.  It should generally
         * be longer than {@link Settings.System#SCREEN_OFF_TIMEOUT} as otherwise the device
         * will sleep before it ever has a chance to dream.
         * <p>
         * Use -1 to disable this timeout.
         * </p>
         *
         * @hide
         */
        public static final String SLEEP_TIMEOUT = "sleep_timeout";

        /**
         * Controls whether double tap to wake is enabled.
         * @hide
         */
        public static final String DOUBLE_TAP_TO_WAKE = "double_tap_to_wake";

        /**
         * The current assistant component. It could be a voice interaction service,
         * or an activity that handles ACTION_ASSIST, or empty which means using the default
         * handling.
         *
         * @hide
         */
        public static final String ASSISTANT = "assistant";

        /**
         * Whether the camera launch gesture should be disabled.
         *
         * @hide
         */
        public static final String CAMERA_GESTURE_DISABLED = "camera_gesture_disabled";

        /**
         * Whether the camera launch gesture to double tap the power button when the screen is off
         * should be disabled.
         *
         * @hide
         */
        public static final String CAMERA_DOUBLE_TAP_POWER_GESTURE_DISABLED =
                "camera_double_tap_power_gesture_disabled";

        /**
         * Whether the camera double twist gesture to flip between front and back mode should be
         * enabled.
         *
         * @hide
         */
        public static final String CAMERA_DOUBLE_TWIST_TO_FLIP_ENABLED =
                "camera_double_twist_to_flip_enabled";

        /**
         * Whether the assist gesture should be enabled.
         *
         * @hide
         */
        public static final String ASSIST_GESTURE_ENABLED = "assist_gesture_enabled";

        /**
         * Sensitivity control for the assist gesture.
         *
         * @hide
         */
        public static final String ASSIST_GESTURE_SENSITIVITY = "assist_gesture_sensitivity";

        /**
         * Control whether Night display is currently activated.
         * @hide
         */
        public static final String NIGHT_DISPLAY_ACTIVATED = "night_display_activated";

        /**
         * Control whether Night display will automatically activate/deactivate.
         * @hide
         */
        public static final String NIGHT_DISPLAY_AUTO_MODE = "night_display_auto_mode";

        /**
         * Control the color temperature of Night Display, represented in Kelvin.
         * @hide
         */
        public static final String NIGHT_DISPLAY_COLOR_TEMPERATURE =
                "night_display_color_temperature";

        /**
         * Custom time when Night display is scheduled to activate.
         * Represented as milliseconds from midnight (e.g. 79200000 == 10pm).
         * @hide
         */
        public static final String NIGHT_DISPLAY_CUSTOM_START_TIME =
                "night_display_custom_start_time";

        /**
         * Custom time when Night display is scheduled to deactivate.
         * Represented as milliseconds from midnight (e.g. 21600000 == 6am).
         * @hide
         */
        public static final String NIGHT_DISPLAY_CUSTOM_END_TIME = "night_display_custom_end_time";

        /**
         * Time in milliseconds (since epoch) when Night display was last activated. Use to decide
         * whether to apply the current activated state after a reboot or user change.
         * @hide
         */
        public static final String NIGHT_DISPLAY_LAST_ACTIVATED_TIME =
                "night_display_last_activated_time";

        /**
         * Names of the service components that the current user has explicitly allowed to
         * be a VR mode listener, separated by ':'.
         *
         * @hide
         */
        public static final String ENABLED_VR_LISTENERS = "enabled_vr_listeners";

        /**
         * Behavior of the display while in VR mode.
         *
         * One of {@link #VR_DISPLAY_MODE_LOW_PERSISTENCE} or {@link #VR_DISPLAY_MODE_OFF}.
         *
         * @hide
         */
        public static final String VR_DISPLAY_MODE = "vr_display_mode";

        /**
         * Lower the display persistence while the system is in VR mode.
         *
         * @see PackageManager#FEATURE_VR_MODE_HIGH_PERFORMANCE
         *
         * @hide.
         */
        public static final int VR_DISPLAY_MODE_LOW_PERSISTENCE = 0;

        /**
         * Do not alter the display persistence while the system is in VR mode.
         *
         * @see PackageManager#FEATURE_VR_MODE_HIGH_PERFORMANCE
         *
         * @hide.
         */
        public static final int VR_DISPLAY_MODE_OFF = 1;

        /**
         * Whether CarrierAppUtils#disableCarrierAppsUntilPrivileged has been executed at least
         * once.
         *
         * <p>This is used to ensure that we only take one pass which will disable apps that are not
         * privileged (if any). From then on, we only want to enable apps (when a matching SIM is
         * inserted), to avoid disabling an app that the user might actively be using.
         *
         * <p>Will be set to 1 once executed.
         *
         * @hide
         */
        public static final String CARRIER_APPS_HANDLED = "carrier_apps_handled";

        /**
         * Whether parent user can access remote contact in managed profile.
         *
         * @hide
         */
        public static final String MANAGED_PROFILE_CONTACT_REMOTE_SEARCH =
                "managed_profile_contact_remote_search";

        /**
         * Whether or not the automatic storage manager is enabled and should run on the device.
         *
         * @hide
         */
        public static final String AUTOMATIC_STORAGE_MANAGER_ENABLED =
                "automatic_storage_manager_enabled";

        /**
         * How many days of information for the automatic storage manager to retain on the device.
         *
         * @hide
         */
        public static final String AUTOMATIC_STORAGE_MANAGER_DAYS_TO_RETAIN =
                "automatic_storage_manager_days_to_retain";

        /**
         * Default number of days of information for the automatic storage manager to retain.
         *
         * @hide
         */
        public static final int AUTOMATIC_STORAGE_MANAGER_DAYS_TO_RETAIN_DEFAULT = 90;

        /**
         * How many bytes the automatic storage manager has cleared out.
         *
         * @hide
         */
        public static final String AUTOMATIC_STORAGE_MANAGER_BYTES_CLEARED =
                "automatic_storage_manager_bytes_cleared";


        /**
         * Last run time for the automatic storage manager.
         *
         * @hide
         */
        public static final String AUTOMATIC_STORAGE_MANAGER_LAST_RUN =
                "automatic_storage_manager_last_run";

        /**
         * Whether SystemUI navigation keys is enabled.
         * @hide
         */
        public static final String SYSTEM_NAVIGATION_KEYS_ENABLED =
                "system_navigation_keys_enabled";

        /**
         * Holds comma separated list of ordering of QS tiles.
         * @hide
         */
        public static final String QS_TILES = "sysui_qs_tiles";

        /**
         * Whether preloaded APKs have been installed for the user.
         * @hide
         */
        public static final String DEMO_USER_SETUP_COMPLETE
                = "demo_user_setup_complete";

        /**
         * Specifies whether the web action API is enabled.
         *
         * @hide
         */
        @SystemApi
        public static final String INSTANT_APPS_ENABLED = "instant_apps_enabled";

        /**
         * Has this pairable device been paired or upgraded from a previously paired system.
         * @hide
         */
        public static final String DEVICE_PAIRED = "device_paired";

        /**
         * Integer state indicating whether package verifier is enabled.
         * TODO(b/34259924): Remove this setting.
         *
         * @hide
         */
        public static final String PACKAGE_VERIFIER_STATE = "package_verifier_state";

        /**
         * Specifies additional package name for broadcasting the CMAS messages.
         * @hide
         */
        public static final String CMAS_ADDITIONAL_BROADCAST_PKG = "cmas_additional_broadcast_pkg";

        /**
         * Whether the launcher should show any notification badges.
         * The value is boolean (1 or 0).
         * @hide
         */
        public static final String NOTIFICATION_BADGING = "notification_badging";

        /**
         * This are the settings to be backed up.
         *
         * NOTE: Settings are backed up and restored in the order they appear
         *       in this array. If you have one setting depending on another,
         *       make sure that they are ordered appropriately.
         *
         * @hide
         */
        public static final String[] SETTINGS_TO_BACKUP = {
            BUGREPORT_IN_POWER_MENU,                            // moved to global
            ALLOW_MOCK_LOCATION,
            PARENTAL_CONTROL_ENABLED,
            PARENTAL_CONTROL_REDIRECT_URL,
            USB_MASS_STORAGE_ENABLED,                           // moved to global
            ACCESSIBILITY_DISPLAY_INVERSION_ENABLED,
            ACCESSIBILITY_DISPLAY_DALTONIZER,
            ACCESSIBILITY_DISPLAY_DALTONIZER_ENABLED,
            ACCESSIBILITY_DISPLAY_MAGNIFICATION_ENABLED,
            ACCESSIBILITY_DISPLAY_MAGNIFICATION_NAVBAR_ENABLED,
            AUTOFILL_SERVICE,
            ACCESSIBILITY_DISPLAY_MAGNIFICATION_SCALE,
            ENABLED_ACCESSIBILITY_SERVICES,
            ENABLED_NOTIFICATION_LISTENERS,
            ENABLED_VR_LISTENERS,
            ENABLED_INPUT_METHODS,
            TOUCH_EXPLORATION_GRANTED_ACCESSIBILITY_SERVICES,
            TOUCH_EXPLORATION_ENABLED,
            ACCESSIBILITY_ENABLED,
            ACCESSIBILITY_SHORTCUT_TARGET_SERVICE,
            ACCESSIBILITY_BUTTON_TARGET_COMPONENT,
            ACCESSIBILITY_SHORTCUT_DIALOG_SHOWN,
            ACCESSIBILITY_SHORTCUT_ENABLED,
            ACCESSIBILITY_SHORTCUT_ON_LOCK_SCREEN,
            ACCESSIBILITY_SPEAK_PASSWORD,
            ACCESSIBILITY_HIGH_TEXT_CONTRAST_ENABLED,
            ACCESSIBILITY_CAPTIONING_PRESET,
            ACCESSIBILITY_CAPTIONING_ENABLED,
            ACCESSIBILITY_CAPTIONING_LOCALE,
            ACCESSIBILITY_CAPTIONING_BACKGROUND_COLOR,
            ACCESSIBILITY_CAPTIONING_FOREGROUND_COLOR,
            ACCESSIBILITY_CAPTIONING_EDGE_TYPE,
            ACCESSIBILITY_CAPTIONING_EDGE_COLOR,
            ACCESSIBILITY_CAPTIONING_TYPEFACE,
            ACCESSIBILITY_CAPTIONING_FONT_SCALE,
            ACCESSIBILITY_CAPTIONING_WINDOW_COLOR,
            TTS_USE_DEFAULTS,
            TTS_DEFAULT_RATE,
            TTS_DEFAULT_PITCH,
            TTS_DEFAULT_SYNTH,
            TTS_DEFAULT_LANG,
            TTS_DEFAULT_COUNTRY,
            TTS_ENABLED_PLUGINS,
            TTS_DEFAULT_LOCALE,
            SHOW_IME_WITH_HARD_KEYBOARD,
            WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON,            // moved to global
            WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY,               // moved to global
            WIFI_NUM_OPEN_NETWORKS_KEPT,                        // moved to global
            SELECTED_SPELL_CHECKER,
            SELECTED_SPELL_CHECKER_SUBTYPE,
            SPELL_CHECKER_ENABLED,
            MOUNT_PLAY_NOTIFICATION_SND,
            MOUNT_UMS_AUTOSTART,
            MOUNT_UMS_PROMPT,
            MOUNT_UMS_NOTIFY_ENABLED,
            SLEEP_TIMEOUT,
            DOUBLE_TAP_TO_WAKE,
            WAKE_GESTURE_ENABLED,
            LONG_PRESS_TIMEOUT,
            CAMERA_GESTURE_DISABLED,
            ACCESSIBILITY_AUTOCLICK_ENABLED,
            ACCESSIBILITY_AUTOCLICK_DELAY,
            ACCESSIBILITY_LARGE_POINTER_ICON,
            PREFERRED_TTY_MODE,
            ENHANCED_VOICE_PRIVACY_ENABLED,
            TTY_MODE_ENABLED,
            INCALL_POWER_BUTTON_BEHAVIOR,
            NIGHT_DISPLAY_CUSTOM_START_TIME,
            NIGHT_DISPLAY_CUSTOM_END_TIME,
            NIGHT_DISPLAY_COLOR_TEMPERATURE,
            NIGHT_DISPLAY_AUTO_MODE,
            NIGHT_DISPLAY_LAST_ACTIVATED_TIME,
            NIGHT_DISPLAY_ACTIVATED,
            SYNC_PARENT_SOUNDS,
            CAMERA_DOUBLE_TWIST_TO_FLIP_ENABLED,
            CAMERA_DOUBLE_TAP_POWER_GESTURE_DISABLED,
            SYSTEM_NAVIGATION_KEYS_ENABLED,
            QS_TILES,
            DOZE_ENABLED,
            DOZE_PULSE_ON_PICK_UP,
            DOZE_PULSE_ON_DOUBLE_TAP,
            NFC_PAYMENT_DEFAULT_COMPONENT,
            AUTOMATIC_STORAGE_MANAGER_DAYS_TO_RETAIN,
            ASSIST_GESTURE_ENABLED,
            ASSIST_GESTURE_SENSITIVITY,
            VR_DISPLAY_MODE,
            NOTIFICATION_BADGING
        };

        /**
         * These entries are considered common between the personal and the managed profile,
         * since the managed profile doesn't get to change them.
         */
        private static final Set<String> CLONE_TO_MANAGED_PROFILE = new ArraySet<>();

        static {
            CLONE_TO_MANAGED_PROFILE.add(ACCESSIBILITY_ENABLED);
            CLONE_TO_MANAGED_PROFILE.add(ALLOW_MOCK_LOCATION);
            CLONE_TO_MANAGED_PROFILE.add(ALLOWED_GEOLOCATION_ORIGINS);
            CLONE_TO_MANAGED_PROFILE.add(AUTOFILL_SERVICE);
            CLONE_TO_MANAGED_PROFILE.add(DEFAULT_INPUT_METHOD);
            CLONE_TO_MANAGED_PROFILE.add(ENABLED_ACCESSIBILITY_SERVICES);
            CLONE_TO_MANAGED_PROFILE.add(ENABLED_INPUT_METHODS);
            CLONE_TO_MANAGED_PROFILE.add(LOCATION_MODE);
            CLONE_TO_MANAGED_PROFILE.add(LOCATION_PREVIOUS_MODE);
            CLONE_TO_MANAGED_PROFILE.add(LOCATION_PROVIDERS_ALLOWED);
            CLONE_TO_MANAGED_PROFILE.add(SELECTED_INPUT_METHOD_SUBTYPE);
            CLONE_TO_MANAGED_PROFILE.add(SELECTED_SPELL_CHECKER);
            CLONE_TO_MANAGED_PROFILE.add(SELECTED_SPELL_CHECKER_SUBTYPE);
        }

        /** @hide */
        public static void getCloneToManagedProfileSettings(Set<String> outKeySet

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\provider\Settings.java
Method: static boolean putString(@NonNull ContentResolver resolver,
                @NonNull String name, @Nullable String value, @Nullable String tag,
                boolean makeDefault)
Permission: Manifest.permission.WRITE_SECURE_SETTINGS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\provider\Settings.java
Method: static void resetToDefaults(@NonNull ContentResolver resolver,
                @Nullable String tag)
Permission: Manifest.permission.WRITE_SECURE_SETTINGS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\security\keystore\AttestationUtils.java
Method: static X509Certificate[] attestDeviceIds(Context context,
            @NonNull int[] idTypes, @NonNull byte[] attestationChallenge)
Permission: Manifest.permission.READ_PRIVILEGED_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\service\oemlock\OemLockManager.java
Method: void setOemUnlockAllowedByCarrier(boolean allowed, @Nullable byte[] signature)
Permission: android.Manifest.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\service\oemlock\OemLockManager.java
Method: boolean isOemUnlockAllowedByCarrier()
Permission: android.Manifest.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\service\oemlock\OemLockManager.java
Method: void setOemUnlockAllowedByUser(boolean allowed)
Permission: android.Manifest.permission.MANAGE_USER_OEM_UNLOCK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\service\oemlock\OemLockManager.java
Method: boolean isOemUnlockAllowedByUser()
Permission: android.Manifest.permission.MANAGE_USER_OEM_UNLOCK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\service\persistentdata\PersistentDataBlockManager.java
Method: int getDataBlockSize()
Permission: android.Manifest.permission.ACCESS_PDB_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\service\persistentdata\PersistentDataBlockManager.java
Method: void wipe()
Permission: android.Manifest.permission.OEM_UNLOCK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\service\persistentdata\PersistentDataBlockManager.java
Method: void setOemUnlockEnabled(boolean enabled)
Permission: android.Manifest.permission.OEM_UNLOCK_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\service\persistentdata\PersistentDataBlockManager.java
Method: boolean getOemUnlockEnabled()
Permission: anyOf = {
            android.Manifest.permission.READ_OEM_UNLOCK_STATE,
            android.Manifest.permission.OEM_UNLOCK_STATE
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\service\persistentdata\PersistentDataBlockManager.java
Method: int getFlashLockState()
Permission: anyOf = {
            android.Manifest.permission.READ_OEM_UNLOCK_STATE,
            android.Manifest.permission.OEM_UNLOCK_STATE
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\support\annotation\RequiresPermission.java
Method: @interface Read {
        RequiresPermission value()
Permission: READ_HISTORY_BOOKMARKS))
 *   &#64;RequiresPermission.Write(@RequiresPermission(WRITE_HISTORY_BOOKMARKS))
 *   public static final Uri BOOKMARKS_URI = Uri.parse("content://browser/bookmarks");
 * </code></pre>
 * <p>
 * When specified on a parameter, the annotation indicates that the method requires
 * a permission which depends on the value of the parameter. For example, consider
 * {@code android.app.Activity.startActivity(android.content.Intent)}:
 * <pre>{@code
 *   public void startActivity(@RequiresPermission Intent intent) { ... }
 * }</pre>
 * Notice how there are no actual permission names listed in the annotation. The actual
 * permissions required will depend on the particular intent passed in. For example,
 * the code may look like this:
 * <pre>{@code
 *   Intent intent = new Intent(Intent.ACTION_CALL);
 *   startActivity(intent);
 * }</pre>
 * and the actual permission requirement for this particular intent is described on
 * the Intent name itself:
 * <pre><code>
 *   &#64;RequiresPermission(Manifest.permission.CALL_PHONE)
 *   public static final String ACTION_CALL = "android.intent.action.CALL";
 * </code></pre>
 */
@Retention(CLASS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: PhoneAccountHandle getDefaultOutgoingPhoneAccount(String uriScheme)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: List<PhoneAccountHandle> getPhoneAccountsSupportingScheme(String uriScheme)
Permission: anyOf = {
            android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,
            android.Manifest.permission.READ_PHONE_STATE
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: List<PhoneAccountHandle> getCallCapablePhoneAccounts()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: List<PhoneAccountHandle> getSelfManagedPhoneAccounts()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: boolean isVoiceMailNumber(PhoneAccountHandle accountHandle, String number)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: String getVoiceMailNumber(PhoneAccountHandle accountHandle)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: String getLine1Number(PhoneAccountHandle accountHandle)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: boolean isInCall()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: boolean isInManagedCall()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: boolean isRinging()
Permission: anyOf = {
            android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,
            android.Manifest.permission.READ_PHONE_STATE
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: boolean endCall()
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: void acceptRingingCall()
Permission: anyOf =
            {Manifest.permission.ANSWER_PHONE_CALLS, Manifest.permission.MODIFY_PHONE_STATE}

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: void acceptRingingCall(int videoState)
Permission: anyOf =
            {Manifest.permission.ANSWER_PHONE_CALLS, Manifest.permission.MODIFY_PHONE_STATE}

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: void silenceRinger()
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: boolean isTtySupported()
Permission: anyOf = {
            android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,
            android.Manifest.permission.READ_PHONE_STATE
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: boolean handleMmi(String dialString)
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: boolean handleMmi(String dialString, PhoneAccountHandle accountHandle)
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: Uri getAdnUriForPhoneAccount(PhoneAccountHandle accountHandle)
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: void cancelMissedCallsNotification()
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: void showInCallScreen(boolean showDialpad)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: void placeCall(Uri address, Bundle extras)
Permission: anyOf = {android.Manifest.permission.CALL_PHONE,
            android.Manifest.permission.MANAGE_OWN_CALLS}

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: void enablePhoneAccount(PhoneAccountHandle handle, boolean isEnabled)
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telecom\TelecomManager.java
Method: TelecomAnalytics dumpAnalytics()
Permission: Manifest.permission.DUMP

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\CarrierConfigManager.java
Method: void updateConfigForPhoneId(int phoneId, String simState)
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\SmsManager.java
Method: void sendTextMessageWithoutPersisting(
            String destinationAddress, String scAddress, String text,
            PendingIntent sentIntent, PendingIntent deliveryIntent)
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\SmsManager.java
Method: void sendMultipartTextMessageWithoutPersisting(
            String destinationAddress, String scAddress, List<String> parts,
            List<PendingIntent> sentIntents, List<PendingIntent> deliveryIntents)
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getDeviceSoftwareVersion()
Permission: android.Manifest.permission.READ_PHONE_STATE)
    public static final String ACTION_PHONE_STATE_CHANGED =
            "android.intent.action.PHONE_STATE";

    /**
     * The Phone app sends this intent when a user opts to respond-via-message during an incoming
     * call. By default, the device's default SMS app consumes this message and sends a text message
     * to the caller. A third party app can also provide this functionality by consuming this Intent
     * with a {@link android.app.Service} and sending the message using its own messaging system.
     * <p>The intent contains a URI (available from {@link android.content.Intent#getData})
     * describing the recipient, using either the {@code sms:}, {@code smsto:}, {@code mms:},
     * or {@code mmsto:} URI schema. Each of these URI schema carry the recipient information the
     * same way: the path part of the URI contains the recipient's phone number or a comma-separated
     * set of phone numbers if there are multiple recipients. For example, {@code
     * smsto:2065551234}.</p>
     *
     * <p>The intent may also contain extras for the message text (in {@link
     * android.content.Intent#EXTRA_TEXT}) and a message subject
     * (in {@link android.content.Intent#EXTRA_SUBJECT}).</p>
     *
     * <p class="note"><strong>Note:</strong>
     * The intent-filter that consumes this Intent needs to be in a {@link android.app.Service}
     * that requires the
     * permission {@link android.Manifest.permission#SEND_RESPOND_VIA_MESSAGE}.</p>
     * <p>For example, the service that receives this intent can be declared in the manifest file
     * with an intent filter like this:</p>
     * <pre>
     * &lt;!-- Service that delivers SMS messages received from the phone "quick response" -->
     * &lt;service android:name=".HeadlessSmsSendService"
     *          android:permission="android.permission.SEND_RESPOND_VIA_MESSAGE"
     *          android:exported="true" >
     *   &lt;intent-filter>
     *     &lt;action android:name="android.intent.action.RESPOND_VIA_MESSAGE" />
     *     &lt;category android:name="android.intent.category.DEFAULT" />
     *     &lt;data android:scheme="sms" />
     *     &lt;data android:scheme="smsto" />
     *     &lt;data android:scheme="mms" />
     *     &lt;data android:scheme="mmsto" />
     *   &lt;/intent-filter>
     * &lt;/service></pre>
     * <p>
     * Output: nothing.
     */
    @SdkConstant(SdkConstantType.SERVICE_ACTION)
    public static final String ACTION_RESPOND_VIA_MESSAGE =
            "android.intent.action.RESPOND_VIA_MESSAGE";

    /**
     * The emergency dialer may choose to present activities with intent filters for this
     * action as emergency assistance buttons that launch the activity when clicked.
     *
     * @hide
     */
    @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
    public static final String ACTION_EMERGENCY_ASSISTANCE =
            "android.telephony.action.EMERGENCY_ASSISTANCE";

    /**
     * A boolean meta-data value indicating whether the voicemail settings should be hidden in the
     * call settings page launched by
     * {@link android.telecom.TelecomManager#ACTION_SHOW_CALL_SETTINGS}.
     * Dialer implementations (see {@link android.telecom.TelecomManager#getDefaultDialerPackage()})
     * which would also like to manage voicemail settings should set this meta-data to {@code true}
     * in the manifest registration of their application.
     *
     * @see android.telecom.TelecomManager#ACTION_SHOW_CALL_SETTINGS
     * @see #ACTION_CONFIGURE_VOICEMAIL
     * @see #EXTRA_HIDE_PUBLIC_SETTINGS
     */
    public static final String METADATA_HIDE_VOICEMAIL_SETTINGS_MENU =
            "android.telephony.HIDE_VOICEMAIL_SETTINGS_MENU";

    /**
     * Open the voicemail settings activity to make changes to voicemail configuration.
     *
     * <p>
     * The {@link #EXTRA_HIDE_PUBLIC_SETTINGS} hides settings the dialer will modify through public
     * API if set.
     *
     * @see #EXTRA_HIDE_PUBLIC_SETTINGS
     */
    @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
    public static final String ACTION_CONFIGURE_VOICEMAIL =
            "android.telephony.action.CONFIGURE_VOICEMAIL";

    /**
     * The boolean value indicating whether the voicemail settings activity launched by {@link
     * #ACTION_CONFIGURE_VOICEMAIL} should hide settings accessible through public API. This is
     * used by dialer implementations which provides their own voicemail settings UI, but still
     * needs to expose device specific voicemail settings to the user.
     *
     * @see #ACTION_CONFIGURE_VOICEMAIL
     * @see #METADATA_HIDE_VOICEMAIL_SETTINGS_MENU
     */
    public static final String EXTRA_HIDE_PUBLIC_SETTINGS =
            "android.telephony.extra.HIDE_PUBLIC_SETTINGS";

    /**
     * @hide
     */
    public static final boolean EMERGENCY_ASSISTANCE_ENABLED = true;

    /**
     * The lookup key used with the {@link #ACTION_PHONE_STATE_CHANGED} broadcast
     * for a String containing the new call state.
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getStringExtra(String)}.
     *
     * @see #EXTRA_STATE_IDLE
     * @see #EXTRA_STATE_RINGING
     * @see #EXTRA_STATE_OFFHOOK
     */
    public static final String EXTRA_STATE = PhoneConstants.STATE_KEY;

    /**
     * Value used with {@link #EXTRA_STATE} corresponding to
     * {@link #CALL_STATE_IDLE}.
     */
    public static final String EXTRA_STATE_IDLE = PhoneConstants.State.IDLE.toString();

    /**
     * Value used with {@link #EXTRA_STATE} corresponding to
     * {@link #CALL_STATE_RINGING}.
     */
    public static final String EXTRA_STATE_RINGING = PhoneConstants.State.RINGING.toString();

    /**
     * Value used with {@link #EXTRA_STATE} corresponding to
     * {@link #CALL_STATE_OFFHOOK}.
     */
    public static final String EXTRA_STATE_OFFHOOK = PhoneConstants.State.OFFHOOK.toString();

    /**
     * The lookup key used with the {@link #ACTION_PHONE_STATE_CHANGED} broadcast
     * for a String containing the incoming phone number.
     * Only valid when the new call state is RINGING.
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getStringExtra(String)}.
     */
    public static final String EXTRA_INCOMING_NUMBER = "incoming_number";

    /**
     * Broadcast intent action indicating that a precise call state
     * (cellular) on the device has changed.
     *
     * <p>
     * The {@link #EXTRA_RINGING_CALL_STATE} extra indicates the ringing call state.
     * The {@link #EXTRA_FOREGROUND_CALL_STATE} extra indicates the foreground call state.
     * The {@link #EXTRA_BACKGROUND_CALL_STATE} extra indicates the background call state.
     * The {@link #EXTRA_DISCONNECT_CAUSE} extra indicates the disconnect cause.
     * The {@link #EXTRA_PRECISE_DISCONNECT_CAUSE} extra indicates the precise disconnect cause.
     *
     * <p class="note">
     * Requires the READ_PRECISE_PHONE_STATE permission.
     *
     * @see #EXTRA_RINGING_CALL_STATE
     * @see #EXTRA_FOREGROUND_CALL_STATE
     * @see #EXTRA_BACKGROUND_CALL_STATE
     * @see #EXTRA_DISCONNECT_CAUSE
     * @see #EXTRA_PRECISE_DISCONNECT_CAUSE
     *
     * <p class="note">
     * Requires the READ_PRECISE_PHONE_STATE permission.
     *
     * @hide
     */
    @SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
    public static final String ACTION_PRECISE_CALL_STATE_CHANGED =
            "android.intent.action.PRECISE_CALL_STATE";

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_CALL_STATE_CHANGED} broadcast
     * for an integer containing the state of the current ringing call.
     *
     * @see PreciseCallState#PRECISE_CALL_STATE_NOT_VALID
     * @see PreciseCallState#PRECISE_CALL_STATE_IDLE
     * @see PreciseCallState#PRECISE_CALL_STATE_ACTIVE
     * @see PreciseCallState#PRECISE_CALL_STATE_HOLDING
     * @see PreciseCallState#PRECISE_CALL_STATE_DIALING
     * @see PreciseCallState#PRECISE_CALL_STATE_ALERTING
     * @see PreciseCallState#PRECISE_CALL_STATE_INCOMING
     * @see PreciseCallState#PRECISE_CALL_STATE_WAITING
     * @see PreciseCallState#PRECISE_CALL_STATE_DISCONNECTED
     * @see PreciseCallState#PRECISE_CALL_STATE_DISCONNECTING
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getIntExtra(String name, int defaultValue)}.
     *
     * @hide
     */
    public static final String EXTRA_RINGING_CALL_STATE = "ringing_state";

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_CALL_STATE_CHANGED} broadcast
     * for an integer containing the state of the current foreground call.
     *
     * @see PreciseCallState#PRECISE_CALL_STATE_NOT_VALID
     * @see PreciseCallState#PRECISE_CALL_STATE_IDLE
     * @see PreciseCallState#PRECISE_CALL_STATE_ACTIVE
     * @see PreciseCallState#PRECISE_CALL_STATE_HOLDING
     * @see PreciseCallState#PRECISE_CALL_STATE_DIALING
     * @see PreciseCallState#PRECISE_CALL_STATE_ALERTING
     * @see PreciseCallState#PRECISE_CALL_STATE_INCOMING
     * @see PreciseCallState#PRECISE_CALL_STATE_WAITING
     * @see PreciseCallState#PRECISE_CALL_STATE_DISCONNECTED
     * @see PreciseCallState#PRECISE_CALL_STATE_DISCONNECTING
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getIntExtra(String name, int defaultValue)}.
     *
     * @hide
     */
    public static final String EXTRA_FOREGROUND_CALL_STATE = "foreground_state";

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_CALL_STATE_CHANGED} broadcast
     * for an integer containing the state of the current background call.
     *
     * @see PreciseCallState#PRECISE_CALL_STATE_NOT_VALID
     * @see PreciseCallState#PRECISE_CALL_STATE_IDLE
     * @see PreciseCallState#PRECISE_CALL_STATE_ACTIVE
     * @see PreciseCallState#PRECISE_CALL_STATE_HOLDING
     * @see PreciseCallState#PRECISE_CALL_STATE_DIALING
     * @see PreciseCallState#PRECISE_CALL_STATE_ALERTING
     * @see PreciseCallState#PRECISE_CALL_STATE_INCOMING
     * @see PreciseCallState#PRECISE_CALL_STATE_WAITING
     * @see PreciseCallState#PRECISE_CALL_STATE_DISCONNECTED
     * @see PreciseCallState#PRECISE_CALL_STATE_DISCONNECTING
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getIntExtra(String name, int defaultValue)}.
     *
     * @hide
     */
    public static final String EXTRA_BACKGROUND_CALL_STATE = "background_state";

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_CALL_STATE_CHANGED} broadcast
     * for an integer containing the disconnect cause.
     *
     * @see DisconnectCause
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getIntExtra(String name, int defaultValue)}.
     *
     * @hide
     */
    public static final String EXTRA_DISCONNECT_CAUSE = "disconnect_cause";

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_CALL_STATE_CHANGED} broadcast
     * for an integer containing the disconnect cause provided by the RIL.
     *
     * @see PreciseDisconnectCause
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getIntExtra(String name, int defaultValue)}.
     *
     * @hide
     */
    public static final String EXTRA_PRECISE_DISCONNECT_CAUSE = "precise_disconnect_cause";

    /**
     * Broadcast intent action indicating a data connection has changed,
     * providing precise information about the connection.
     *
     * <p>
     * The {@link #EXTRA_DATA_STATE} extra indicates the connection state.
     * The {@link #EXTRA_DATA_NETWORK_TYPE} extra indicates the connection network type.
     * The {@link #EXTRA_DATA_APN_TYPE} extra indicates the APN type.
     * The {@link #EXTRA_DATA_APN} extra indicates the APN.
     * The {@link #EXTRA_DATA_CHANGE_REASON} extra indicates the connection change reason.
     * The {@link #EXTRA_DATA_IFACE_PROPERTIES} extra indicates the connection interface.
     * The {@link #EXTRA_DATA_FAILURE_CAUSE} extra indicates the connection fail cause.
     *
     * <p class="note">
     * Requires the READ_PRECISE_PHONE_STATE permission.
     *
     * @see #EXTRA_DATA_STATE
     * @see #EXTRA_DATA_NETWORK_TYPE
     * @see #EXTRA_DATA_APN_TYPE
     * @see #EXTRA_DATA_APN
     * @see #EXTRA_DATA_CHANGE_REASON
     * @see #EXTRA_DATA_IFACE
     * @see #EXTRA_DATA_FAILURE_CAUSE
     * @hide
     *
     * @deprecated If the app is running in the background, it won't be able to receive this
     * broadcast. Apps should use ConnectivityManager {@link #registerNetworkCallback(
     * android.net.NetworkRequest, ConnectivityManager.NetworkCallback)} to listen for network
     * changes.
     */
    @SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
    @Deprecated
    public static final String ACTION_PRECISE_DATA_CONNECTION_STATE_CHANGED =
            "android.intent.action.PRECISE_DATA_CONNECTION_STATE_CHANGED";

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_DATA_CONNECTION_STATE_CHANGED} broadcast
     * for an integer containing the state of the current data connection.
     *
     * @see TelephonyManager#DATA_UNKNOWN
     * @see TelephonyManager#DATA_DISCONNECTED
     * @see TelephonyManager#DATA_CONNECTING
     * @see TelephonyManager#DATA_CONNECTED
     * @see TelephonyManager#DATA_SUSPENDED
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getIntExtra(String name, int defaultValue)}.
     *
     * @hide
     */
    public static final String EXTRA_DATA_STATE = PhoneConstants.STATE_KEY;

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_DATA_CONNECTION_STATE_CHANGED} broadcast
     * for an integer containing the network type.
     *
     * @see TelephonyManager#NETWORK_TYPE_UNKNOWN
     * @see TelephonyManager#NETWORK_TYPE_GPRS
     * @see TelephonyManager#NETWORK_TYPE_EDGE
     * @see TelephonyManager#NETWORK_TYPE_UMTS
     * @see TelephonyManager#NETWORK_TYPE_CDMA
     * @see TelephonyManager#NETWORK_TYPE_EVDO_0
     * @see TelephonyManager#NETWORK_TYPE_EVDO_A
     * @see TelephonyManager#NETWORK_TYPE_1xRTT
     * @see TelephonyManager#NETWORK_TYPE_HSDPA
     * @see TelephonyManager#NETWORK_TYPE_HSUPA
     * @see TelephonyManager#NETWORK_TYPE_HSPA
     * @see TelephonyManager#NETWORK_TYPE_IDEN
     * @see TelephonyManager#NETWORK_TYPE_EVDO_B
     * @see TelephonyManager#NETWORK_TYPE_LTE
     * @see TelephonyManager#NETWORK_TYPE_EHRPD
     * @see TelephonyManager#NETWORK_TYPE_HSPAP
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getIntExtra(String name, int defaultValue)}.
     *
     * @hide
     */
    public static final String EXTRA_DATA_NETWORK_TYPE = PhoneConstants.DATA_NETWORK_TYPE_KEY;

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_DATA_CONNECTION_STATE_CHANGED} broadcast
     * for an String containing the data APN type.
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getStringExtra(String name)}.
     *
     * @hide
     */
    public static final String EXTRA_DATA_APN_TYPE = PhoneConstants.DATA_APN_TYPE_KEY;

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_DATA_CONNECTION_STATE_CHANGED} broadcast
     * for an String containing the data APN.
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getStringExtra(String name)}.
     *
     * @hide
     */
    public static final String EXTRA_DATA_APN = PhoneConstants.DATA_APN_KEY;

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_DATA_CONNECTION_STATE_CHANGED} broadcast
     * for an String representation of the change reason.
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getStringExtra(String name)}.
     *
     * @hide
     */
    public static final String EXTRA_DATA_CHANGE_REASON = PhoneConstants.STATE_CHANGE_REASON_KEY;

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_DATA_CONNECTION_STATE_CHANGED} broadcast
     * for an String representation of the data interface.
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getParcelableExtra(String name)}.
     *
     * @hide
     */
    public static final String EXTRA_DATA_LINK_PROPERTIES_KEY = PhoneConstants.DATA_LINK_PROPERTIES_KEY;

    /**
     * The lookup key used with the {@link #ACTION_PRECISE_DATA_CONNECTION_STATE_CHANGED} broadcast
     * for the data connection fail cause.
     *
     * <p class="note">
     * Retrieve with
     * {@link android.content.Intent#getStringExtra(String name)}.
     *
     * @hide
     */
    public static final String EXTRA_DATA_FAILURE_CAUSE = PhoneConstants.DATA_FAILURE_CAUSE_KEY;

    /**
     * Broadcast intent action for letting the default dialer to know to show voicemail
     * notification.
     *
     * <p>
     * The {@link #EXTRA_PHONE_ACCOUNT_HANDLE} extra indicates which {@link PhoneAccountHandle} the
     * voicemail is received on.
     * The {@link #EXTRA_NOTIFICATION_COUNT} extra indicates the total numbers of unheard
     * voicemails.
     * The {@link #EXTRA_VOICEMAIL_NUMBER} extra indicates the voicemail number if available.
     * The {@link #EXTRA_CALL_VOICEMAIL_INTENT} extra is a {@link android.app.PendingIntent} that
     * will call the voicemail number when sent. This extra will be empty if the voicemail number
     * is not set, and {@link #EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT} will be set instead.
     * The {@link #EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT} extra is a
     * {@link android.app.PendingIntent} that will launch the voicemail settings. This extra is only
     * available when the voicemail number is not set.
     *
     * @see #EXTRA_PHONE_ACCOUNT_HANDLE
     * @see #EXTRA_NOTIFICATION_COUNT
     * @see #EXTRA_VOICEMAIL_NUMBER
     * @see #EXTRA_CALL_VOICEMAIL_INTENT
     * @see #EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT
     */
    public static final String ACTION_SHOW_VOICEMAIL_NOTIFICATION =
            "android.telephony.action.SHOW_VOICEMAIL_NOTIFICATION";

    /**
     * The extra used with an {@link #ACTION_SHOW_VOICEMAIL_NOTIFICATION} {@code Intent} to specify
     * the {@link PhoneAccountHandle} the notification is for.
     * <p class="note">
     * Retrieve with {@link android.content.Intent#getParcelableExtra(String)}.
     */
    public static final String EXTRA_PHONE_ACCOUNT_HANDLE =
            "android.telephony.extra.PHONE_ACCOUNT_HANDLE";

    /**
     * The number of voice messages associated with the notification.
     */
    public static final String EXTRA_NOTIFICATION_COUNT =
            "android.telephony.extra.NOTIFICATION_COUNT";

    /**
     * The voicemail number.
     */
    public static final String EXTRA_VOICEMAIL_NUMBER =
            "android.telephony.extra.VOICEMAIL_NUMBER";

    /**
     * The intent to call voicemail.
     */
    public static final String EXTRA_CALL_VOICEMAIL_INTENT =
            "android.telephony.extra.CALL_VOICEMAIL_INTENT";

    /**
     * The intent to launch voicemail settings.
     */
    public static final String EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT =
            "android.telephony.extra.LAUNCH_VOICEMAIL_SETTINGS_INTENT";

    /**
     * {@link android.telecom.Connection} event used to indicate that an IMS call has be
     * successfully handed over from WIFI to LTE.
     * <p>
     * Sent via {@link android.telecom.Connection#sendConnectionEvent(String, Bundle)}.
     * The {@link Bundle} parameter is expected to be null when this connection event is used.
     * @hide
     */
    public static final String EVENT_HANDOVER_VIDEO_FROM_WIFI_TO_LTE =
            "android.telephony.event.EVENT_HANDOVER_VIDEO_FROM_WIFI_TO_LTE";

    /**
     * {@link android.telecom.Connection} event used to indicate that an IMS call failed to be
     * handed over from LTE to WIFI.
     * <p>
     * Sent via {@link android.telecom.Connection#sendConnectionEvent(String, Bundle)}.
     * The {@link Bundle} parameter is expected to be null when this connection event is used.
     * @hide
     */
    public static final String EVENT_HANDOVER_TO_WIFI_FAILED =
            "android.telephony.event.EVENT_HANDOVER_TO_WIFI_FAILED";

    /**
     * {@link android.telecom.Connection} event used to indicate that a video call was downgraded to
     * audio because the data limit was reached.
     * <p>
     * Sent via {@link android.telecom.Connection#sendConnectionEvent(String, Bundle)}.
     * The {@link Bundle} parameter is expected to be null when this connection event is used.
     * @hide
     */
    public static final String EVENT_DOWNGRADE_DATA_LIMIT_REACHED =
            "android.telephony.event.EVENT_DOWNGRADE_DATA_LIMIT_REACHED";

    /**
     * {@link android.telecom.Connection} event used to indicate that a video call was downgraded to
     * audio because the data was disabled.
     * <p>
     * Sent via {@link android.telecom.Connection#sendConnectionEvent(String, Bundle)}.
     * The {@link Bundle} parameter is expected to be null when this connection event is used.
     * @hide
     */
    public static final String EVENT_DOWNGRADE_DATA_DISABLED =
            "android.telephony.event.EVENT_DOWNGRADE_DATA_DISABLED";

    /**
     * {@link android.telecom.Connection} event used to indicate that the InCall UI should notify
     * the user when an international call is placed while on WFC only.
     * <p>
     * Used when the carrier config value
     * {@link CarrierConfigManager#KEY_NOTIFY_INTERNATIONAL_CALL_ON_WFC_BOOL} is true, the device
     * is on WFC (VoLTE not available) and an international number is dialed.
     * <p>
     * Sent via {@link android.telecom.Connection#sendConnectionEvent(String, Bundle)}.
     * The {@link Bundle} parameter is expected to be null when this connection event is used.
     * @hide
     */
    public static final String EVENT_NOTIFY_INTERNATIONAL_CALL_ON_WFC =
            "android.telephony.event.EVENT_NOTIFY_INTERNATIONAL_CALL_ON_WFC";

    /* Visual voicemail protocols */

    /**
     * The OMTP protocol.
     */
    public static final String VVM_TYPE_OMTP = "vvm_type_omtp";

    /**
     * A flavor of OMTP protocol with a different mobile originated (MO) format
     */
    public static final String VVM_TYPE_CVVM = "vvm_type_cvvm";

    /**
     * Key in bundle returned by {@link #getVisualVoicemailPackageName()}, indicating whether visual
     * voicemail was enabled or disabled by the user. If the user never explicitly changed this
     * setting, this key will not exist.
     *
     * @see #getVisualVoicemailSettings()
     * @hide
     */
    @SystemApi
    public static final String EXTRA_VISUAL_VOICEMAIL_ENABLED_BY_USER_BOOL =
            "android.telephony.extra.VISUAL_VOICEMAIL_ENABLED_BY_USER_BOOL";

    /**
     * Key in bundle returned by {@link #getVisualVoicemailPackageName()}, indicating the voicemail
     * access PIN scrambled during the auto provisioning process. The user is expected to reset
     * their PIN if this value is not {@code null}.
     *
     * @see #getVisualVoicemailSettings()
     * @hide
     */
    @SystemApi
    public static final String EXTRA_VOICEMAIL_SCRAMBLED_PIN_STRING =
            "android.telephony.extra.VOICEMAIL_SCRAMBLED_PIN_STRING";

    /**
     * @hide
     */
    public static final String USSD_RESPONSE = "USSD_RESPONSE";

    /**
     * USSD return code success.
     * @hide
     */
    public static final int USSD_RETURN_SUCCESS = 100;

    /**
     * Failed code returned when the mobile network has failed to complete a USSD request.
     * <p>
     * Returned via {@link TelephonyManager.UssdResponseCallback#onReceiveUssdResponseFailed(
     * TelephonyManager, String, int)}.
     */
    public static final int USSD_RETURN_FAILURE = -1;

    /**
     * Failure code returned when a USSD request has failed to execute because the Telephony
     * service is unavailable.
     * <p>
     * Returned via {@link TelephonyManager.UssdResponseCallback#onReceiveUssdResponseFailed(
     * TelephonyManager, String, int)}.
     */
    public static final int USSD_ERROR_SERVICE_UNAVAIL = -2;

    //
    //
    // Device Info
    //
    //

    /**
     * Returns the software version number for the device, for example,
     * the IMEI/SV for GSM phones. Return null if the software version is
     * not available.
     */
    @RequiresPermission(android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getDeviceSoftwareVersion(int slotIndex)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getDeviceId()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getDeviceId(int slotIndex)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getImei()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getImei(int slotIndex)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getMeid()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getMeid(int slotIndex)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: CellLocation getCellLocation()
Permission: anyOf = {
            android.Manifest.permission.ACCESS_COARSE_LOCATION,
            android.Manifest.permission.ACCESS_FINE_LOCATION
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: void enableLocationUpdates()
Permission: android.Manifest.permission.CONTROL_LOCATION_UPDATES

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: void enableLocationUpdates(int subId)
Permission: android.Manifest.permission.CONTROL_LOCATION_UPDATES

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: void disableLocationUpdates()
Permission: android.Manifest.permission.CONTROL_LOCATION_UPDATES

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: List<NeighboringCellInfo> getNeighboringCellInfo()
Permission: android.Manifest.permission.ACCESS_COARSE_LOCATION

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: PersistableBundle getCarrierConfig()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: int getNetworkType(int subId)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: int getDataNetworkType()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: int getDataNetworkType(int subId)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: int getVoiceNetworkType()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: int getVoiceNetworkType(int subId)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getSimSerialNumber()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getSimSerialNumber(int subId)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: int getLteOnCdmaMode()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: int getLteOnCdmaMode(int subId)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getSubscriberId()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getSubscriberId(int subId)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getGroupIdLevel1()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getGroupIdLevel1(int subId)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getLine1Number()
Permission: anyOf = {
            android.Manifest.permission.READ_PHONE_STATE,
            android.Manifest.permission.READ_SMS,
            android.Manifest.permission.READ_PHONE_NUMBERS
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getLine1Number(int subId)
Permission: anyOf = {
            android.Manifest.permission.READ_PHONE_STATE,
            android.Manifest.permission.READ_SMS,
            android.Manifest.permission.READ_PHONE_NUMBERS
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getLine1AlphaTag()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getLine1AlphaTag(int subId)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getMsisdn()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getMsisdn(int subId)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getVoiceMailNumber()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getVoiceMailNumber(int subId)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getCompleteVoiceMailNumber()
Permission: android.Manifest.permission.CALL_PRIVILEGED

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getCompleteVoiceMailNumber(int subId)
Permission: android.Manifest.permission.CALL_PRIVILEGED

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: boolean isVisualVoicemailEnabled(PhoneAccountHandle phoneAccountHandle)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getVisualVoicemailPackageName()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: void sendVisualVoicemailSmsForSubscriber(int subId, String number, int port,
            String text, PendingIntent sentIntent)
Permission: android.Manifest.permission.SEND_SMS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: int getVoiceActivationState(int subId)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: int getDataActivationState(int subId)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: int getVoiceMessageCount()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: int getVoiceMessageCount(int subId)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getVoiceMailAlphaTag()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getVoiceMailAlphaTag(int subId)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: int getCdmaEriIconIndex()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: int getCdmaEriIconIndex(int subId)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: int getCdmaEriIconMode()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: int getCdmaEriIconMode(int subId)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getCdmaEriText()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getCdmaEriText(int subId)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: List<CellInfo> getAllCellInfo()
Permission: android.Manifest.permission.ACCESS_COARSE_LOCATION

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String[] getForbiddenPlmns()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String[] getForbiddenPlmns(int subId, int appType)
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getCdmaMdn()
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getCdmaMdn(int subId)
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getCdmaMin()
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: String getCdmaMin(int subId)
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: void call(String callingPackage, String number)
Permission: android.Manifest.permission.CALL_PHONE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: boolean endCall()
Permission: android.Manifest.permission.CALL_PHONE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: void answerRingingCall()
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: boolean isOffhook()
Permission: anyOf = {
            android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,
            android.Manifest.permission.READ_PHONE_STATE
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: boolean isRinging()
Permission: anyOf = {
            android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,
            android.Manifest.permission.READ_PHONE_STATE
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: boolean isIdle()
Permission: anyOf = {
            android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,
            android.Manifest.permission.READ_PHONE_STATE
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: boolean isRadioOn()
Permission: anyOf = {
            android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,
            android.Manifest.permission.READ_PHONE_STATE
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: boolean supplyPin(String pin)
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: boolean supplyPuk(String puk, String pin)
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: int[] supplyPinReportResult(String pin)
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: int[] supplyPukReportResult(String puk, String pin)
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: void sendUssdRequest(String ussdRequest,
                                final UssdResponseCallback callback, Handler handler)
Permission: android.Manifest.permission.CALL_PHONE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: boolean handlePinMmi(String dialString)
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: boolean handlePinMmiForSubscriber(int subId, String dialString)
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: void toggleRadioOnOff()
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: boolean setRadio(boolean turnOn)
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: boolean setRadioPower(boolean turnOn)
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: boolean enableDataConnectivity()
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: boolean disableDataConnectivity()
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: void setDataEnabled(boolean enable)
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: void setDataEnabled(int subId, boolean enable)
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: void enableVideoCalling(boolean enable)
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: boolean isVideoCallingEnabled()
Permission: anyOf = {
            android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,
            android.Manifest.permission.READ_PHONE_STATE
    }

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: ServiceState getServiceState()
Permission: android.Manifest.permission.READ_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: List<TelephonyHistogram> getTelephonyHistograms()
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: int setAllowedCarriers(int slotIndex, List<CarrierIdentifier> carriers)
Permission: android.Manifest.permission.MODIFY_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\telephony\TelephonyManager.java
Method: List<CarrierIdentifier> getAllowedCarriers(int slotIndex)
Permission: android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\view\Display.java
Method: void requestColorMode(int colorMode)
Permission: CONFIGURE_DISPLAY_COLOR_MODE

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/android\view\inputmethod\InputMethodManager.java
Method: boolean setCurrentInputMethodSubtype(InputMethodSubtype subtype)
Permission: WRITE_SECURE_SETTINGS

Path: D:/CLASS/1 Now/texwork/shared/permission/sdk_source/android-sdk-sources-for-api-level-26-master/com\android\settingslib\SuggestionParser.java
Method: boolean satisifesRequiredUserType(Tile suggestion)
Permission: Manifest.permission.MANAGE_USERS

