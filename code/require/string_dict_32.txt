android.accessibilityservice.AccessibilityService.getFingerprintGestureController()FingerprintGestureController :: android.permission.USE_FINGERPRINT
android.accounts.AccountManager.finishSessionAsUser(Bundle,Activity,UserHandle,AccountManagerCallback<Bundle>,Handler)AccountManagerFuture<Bundle> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.Activity.registerRemoteAnimations(RemoteAnimationDefinition)void :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.Activity.unregisterRemoteAnimations()void :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.ActivityManager.moveTaskToFront(int,int)void :: android.permission.REORDER_TASKS
android.app.ActivityManager.moveTaskToFront(int,int,Bundle)void :: android.permission.REORDER_TASKS
android.app.ActivityManager.clearApplicationUserData(String,IPackageDataObserver)boolean :: android.permission.ACCESS_INSTANT_APPSandroid.permission.CLEAR_APP_USER_DATA
android.app.ActivityManager.getUidProcessState(int)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.getUidProcessCapabilities(int)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.getPackageImportance(String)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.getUidImportance(int)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.addOnUidImportanceListener(OnUidImportanceListener,int)void :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.removeOnUidImportanceListener(OnUidImportanceListener)void :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.killBackgroundProcesses(String)void :: android.permission.KILL_BACKGROUND_PROCESSES
android.app.ActivityManager.killUid(int,String)void :: android.permission.KILL_UID
android.app.ActivityManager.forceStopPackage(String)void :: android.permission.FORCE_STOP_PACKAGES
android.app.ActivityManager.getCurrentUser()int :: android.permission.INTERACT_ACROSS_USERS_FULLandroid.permission.INTERACT_ACROSS_USERS
android.app.ActivityManager.switchUser(UserHandle)boolean :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.app.ActivityManager.getSwitchingFromUserMessage()String :: android.permission.MANAGE_USERS
android.app.ActivityManager.getSwitchingToUserMessage()String :: android.permission.MANAGE_USERS
android.app.ActivityManager.setStopUserOnSwitch(int)void :: android.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS
android.app.ActivityManager.startProfile(UserHandle)boolean :: android.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS_FULL
android.app.ActivityManager.stopProfile(UserHandle)boolean :: android.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS_FULL
android.app.ActivityManager.updateMccMncConfiguration(String,String)boolean :: android.permission.CHANGE_CONFIGURATION
android.app.ActivityManager.stopUser(int,boolean)boolean :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.ActivityManager.dumpPackageState(FileDescriptor,String)void :: android.permission.DUMP
android.app.ActivityManager.setPersistentVrThread(int)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.ActivityManager.scheduleApplicationInfoChanged(List<String>,int)void :: android.permission.CHANGE_CONFIGURATION
android.app.ActivityManager.isProfileForeground(UserHandle)boolean :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.app.ActivityManager.killProcessesWhenImperceptible(int[],String)void :: android.permission.FORCE_STOP_PACKAGES
android.app.ActivityManager.addHomeVisibilityListener(Executor,HomeVisibilityListener)void :: android.permission.SET_ACTIVITY_WATCHER
android.app.ActivityManager.removeHomeVisibilityListener(HomeVisibilityListener)void :: android.permission.SET_ACTIVITY_WATCHER
android.app.ActivityManager.resetAppErrors()void :: android.permission.RESET_APP_ERRORS
android.app.ActivityManager.waitForBroadcastIdle()void :: android.permission.DUMP
android.app.ActivityOptions.makeCustomTaskAnimation(Context,int,int,Handler,OnAnimationStartedListener,OnAnimationFinishedListener)ActivityOptions :: android.permission.START_TASKS_FROM_RECENTS
android.app.ActivityOptions.makeRemoteAnimation(RemoteAnimationAdapter)ActivityOptions :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.ActivityOptions.makeRemoteAnimation(RemoteAnimationAdapter,RemoteTransition)ActivityOptions :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.ActivityOptions.makeRemoteTransition(RemoteTransition)ActivityOptions :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.ActivityOptions.setLaunchTaskId(int)void :: android.permission.START_TASKS_FROM_RECENTS
android.app.ActivityTaskManager.removeRootTasksInWindowingModes(int[])void :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityTaskManager.removeRootTasksWithActivityTypes(int[])void :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityTaskManager.removeAllVisibleRecentTasks()void :: android.permission.REMOVE_TASKS
android.app.ActivityTaskManager.startSystemLockTaskMode(int)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityTaskManager.stopSystemLockTaskMode()void :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityTaskManager.moveTaskToRootTask(int,int,boolean)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityTaskManager.resizeTask(int,Rect)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityTaskManager.clearLaunchParamsForPackages(List<String>)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityTaskManager.removeTask(int)boolean :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityTaskManager.detachNavigationBarFromApp(IBinder)void :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.AlarmManager.setPrioritized(int,long,long,String,Executor,OnAlarmListener)void :: android.permission.SCHEDULE_PRIORITIZED_ALARM
android.app.AlarmManager.setExact(int,long,PendingIntent)void :: android.permission.SCHEDULE_EXACT_ALARMandroid.permission. conditional = true
android.app.AlarmManager.setExact(int,long,String,OnAlarmListener,Handler)void :: android.permission.SCHEDULE_EXACT_ALARMandroid.permission. conditional = true
android.app.AlarmManager.setAlarmClock(AlarmClockInfo,PendingIntent)void :: android.permission.SCHEDULE_EXACT_ALARM
android.app.AlarmManager.set(int,long,long,long,PendingIntent,WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.app.AlarmManager.set(int,long,long,long,OnAlarmListener,Handler,WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.app.AlarmManager.setExact(int,long,String,Executor,WorkSource,OnAlarmListener)void :: android.permission.UPDATE_DEVICE_STATSandroid.permission.SCHEDULE_EXACT_ALARM
android.app.AlarmManager.setExactAndAllowWhileIdle(int,long,PendingIntent)void :: android.permission.SCHEDULE_EXACT_ALARMandroid.permission. conditional = true
android.app.AlarmManager.setTime(long)void :: android.permission.SET_TIME
android.app.AlarmManager.setTimeZone(String)void :: android.permission.SET_TIME_ZONE
android.app.AppOpsManager.getPackagesForOps(String[])List<AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getPackagesForOps(int[])List<AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getOpsForPackage(int,String,int[])List<PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getOpsForPackage(int,String,String...)List<AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getHistoricalOps(HistoricalOpsRequest,Executor,Consumer<HistoricalOps>)void :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getHistoricalOpsFromDiskRaw(HistoricalOpsRequest,Executor,Consumer<HistoricalOps>)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.reloadNonHistoricalState()void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.setUidMode(int,int,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setUidMode(String,int,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setMode(int,int,String,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setMode(String,int,String,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setRestriction(int,int,int,String[])void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.resetAllModes()void :: android.permission.Randroid.permission. trackingBug = 170729553
android.app.AppOpsManager.startWatchingMode(int,String,OnOpChangedListener)void :: android.permission.WATCH_APPOPSandroid.permission. conditional=true
android.app.AppOpsManager.startWatchingMode(int,String,int,OnOpChangedListener)void :: android.permission.WATCH_APPOPSandroid.permission. conditional=true
android.app.AppOpsManager.startWatchingActive(String[],Executor,OnOpActiveChangedListener)void :: android.permission.WATCH_APPOPSandroid.permission. conditional=true
android.app.AppOpsManager.startWatchingStarted(int[],OnOpStartedListener)void :: android.permission.WATCH_APPOPSandroid.permission. conditional=true
android.app.AppOpsManager.startWatchingNoted(int[],OnOpNotedListener)void :: android.permission.WATCH_APPOPSandroid.permission. conditional=true
android.app.AppOpsManager.resetPackageOpsNoHistory(String)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.isOperationActive(int,int,String)boolean :: android.permission.WATCH_APPOPSandroid.permission. conditional=true
android.app.AppOpsManager.setHistoryParameters(int,long,int)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.offsetHistory(long)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.addHistoricalOps(HistoricalOps)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.resetHistoryParameters()void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.clearHistory()void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.rebootHistory(long)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.collectRuntimeAppOpAccessMessage()RuntimeAppOpAccessMessage :: android.permission.GET_APP_OPS_STATS
android.app.BroadcastOptions.setTemporaryAppWhitelistDuration(long)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELISTandroid.permission.START_ACTIVITIES_FROM_BACKGROUNDandroid.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND
android.app.BroadcastOptions.setTemporaryAppAllowlist(long,int,int,String)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELISTandroid.permission.START_ACTIVITIES_FROM_BACKGROUNDandroid.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND
android.app.BroadcastOptions.setBackgroundActivityStartsAllowed(boolean)void :: android.permission.START_ACTIVITIES_FROM_BACKGROUND
android.app.DownloadManager.onMediaStoreDownloadsDeleted(LongSparseArray<String>)void :: android.permission.WRITE_MEDIA_STORAGE
android.app.DreamManager.startDream(ComponentName)void :: android.permission.WRITE_DREAM_STATE
android.app.DreamManager.stopDream()void :: android.permission.WRITE_DREAM_STATE
android.app.DreamManager.setActiveDream(ComponentName)void :: android.permission.WRITE_DREAM_STATE
android.app.DreamManager.isDreaming()boolean :: android.permission.READ_DREAM_STATE
android.app.GameManager.getGameMode(String)int :: android.permission.MANAGE_GAME_MODE
android.app.GameManager.setGameMode(String,int)void :: android.permission.MANAGE_GAME_MODE
android.app.GameManager.getAvailableGameModes(String)int[] :: android.permission.MANAGE_GAME_MODE
android.app.GameManager.isAngleEnabled(String)boolean :: android.permission.MANAGE_GAME_MODE
android.app.KeyguardManager.setPrivateNotificationsAllowed(boolean)void :: android.permission.CONTROL_KEYGUARD_SECURE_NOTIFICATIONS
android.app.KeyguardManager.getPrivateNotificationsAllowed()boolean :: android.permission.CONTROL_KEYGUARD_SECURE_NOTIFICATIONS
android.app.KeyguardManager.disableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.reenableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.requestDismissKeyguard(Activity,CharSequence,KeyguardDismissCallback)void :: android.permission.SHOW_KEYGUARD_MESSAGE
android.app.KeyguardManager.exitKeyguardSecurely(OnKeyguardExitResult)void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.isValidLockPasswordComplexity(int,byte[],int)boolean :: android.permission.SET_INITIAL_LOCK
android.app.KeyguardManager.getMinLockLength(boolean,int)int :: android.permission.SET_INITIAL_LOCK
android.app.KeyguardManager.setLock(int,byte[],int)boolean :: android.permission.SET_INITIAL_LOCK
android.app.KeyguardManager.setLock(int,byte[],int,byte[])boolean :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGEandroid.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS
android.app.KeyguardManager.checkLock(int,byte[])boolean :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGEandroid.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS
android.app.NotificationManager.setNotificationListenerAccessGranted(ComponentName,boolean,boolean)void :: android.permission.MANAGE_NOTIFICATION_LISTENERS
android.app.NotificationManager.getEnabledNotificationListeners()List<ComponentName> :: android.permission.MANAGE_NOTIFICATION_LISTENERS
android.app.NotificationManager.setToastRateLimitingEnabled(boolean)void :: android.permission.MANAGE_TOAST_RATE_LIMITING
android.app.PendingIntent.queryIntentComponents(int)List<ResolveInfo> :: android.permission.MODULE_LIBRARIES
android.app.PendingIntent.intentFilterEquals(PendingIntent)boolean :: android.permission.GET_INTENT_SENDER_INTENT
android.app.StatusBarManager.collapsePanels()void :: android.permission.Intent#ACTION_CLOSE_SYSTEM_DIALOGS
android.app.StatusBarManager.togglePanel()void :: android.permission.STATUS_BAR
android.app.StatusBarManager.handleSystemKey(int)void :: android.permission.STATUS_BAR
android.app.StatusBarManager.setDisabledForSetup(boolean)void :: android.permission.STATUS_BAR
android.app.StatusBarManager.setExpansionDisabledForSimNetworkLock(boolean)void :: android.permission.STATUS_BAR
android.app.StatusBarManager.getDisableInfo()DisableInfo :: android.permission.STATUS_BAR
android.app.UiModeManager.e.rethrowFromSystemServer(){ :: android.permission.getOpPackageName());android.permission.enableCarMode(flagsandroid.permission.priority
android.app.UiModeManager.requestProjection(int)boolean :: android.permission.TOGGLE_AUTOMOTIVE_PROJECTIONandroid.permission.
            conditional = true
android.app.UiModeManager.releaseProjection(int)boolean :: android.permission.TOGGLE_AUTOMOTIVE_PROJECTIONandroid.permission.
            conditional = true
android.app.UiModeManager.getProjectingPackages(int)Set<String> :: android.permission.READ_PROJECTION_STATE
android.app.UiModeManager.getActiveProjectionTypes()int :: android.permission.READ_PROJECTION_STATE
android.app.UiModeManager.addOnProjectionStateChangedListener(int,Executor,OnProjectionStateChangedListener)void :: android.permission.READ_PROJECTION_STATE
android.app.UiModeManager.removeOnProjectionStateChangedListener(OnProjectionStateChangedListener)void :: android.permission.READ_PROJECTION_STATE
android.app.VrManager.registerVrStateCallback(Executor,VrStateCallback)void :: android.permission.RESTRICTED_VR_ACCESSandroid.permission.ACCESS_VR_STATE
android.app.VrManager.unregisterVrStateCallback(VrStateCallback)void :: android.permission.RESTRICTED_VR_ACCESSandroid.permission.ACCESS_VR_STATE
android.app.VrManager.isVrModeEnabled()boolean :: android.permission.RESTRICTED_VR_ACCESSandroid.permission.ACCESS_VR_STATE
android.app.VrManager.isPersistentVrModeEnabled()boolean :: android.permission.RESTRICTED_VR_ACCESSandroid.permission.ACCESS_VR_STATE
android.app.VrManager.setPersistentVrModeEnabled(boolean)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setVr2dDisplayProperties(Vr2dDisplayProperties)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setAndBindVrCompositor(ComponentName)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setStandbyEnabled(boolean)void :: android.permission.ACCESS_VR_MANAGER
android.app.VrManager.setVrInputMethod(ComponentName)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.getVr2dDisplayId()int :: android.permission.RESTRICTED_VR_ACCESS
android.app.WallpaperManager.getDrawable()Drawable :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.getFastDrawable()Drawable :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.peekFastDrawable()Drawable :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.wallpaperSupportsWcg(int)boolean :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.getWallpaperFile(int)ParcelFileDescriptor :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.setResource(int)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setResource(int,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(Bitmap)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(Bitmap,Rect,boolean)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(Bitmap,Rect,boolean,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(InputStream)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(InputStream,Rect,boolean)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(InputStream,Rect,boolean,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setDisplayPadding(Rect)void :: android.permission.SET_WALLPAPER_HINTS
android.app.WallpaperManager.clearWallpaper()void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.clearWallpaper(int,int)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.WallpaperManager.setWallpaperComponent(ComponentName)boolean :: android.permission.SET_WALLPAPER_COMPONENT
android.app.WallpaperManager.setWallpaperComponent(ComponentName,int)boolean :: android.permission.SET_WALLPAPER_COMPONENT
android.app.WallpaperManager.clear()void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.clear(int)void :: android.permission.SET_WALLPAPER
android.app.admin.DevicePolicyManager.packageHasActiveAdmins(String)boolean :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.admin.DevicePolicyManager.getPasswordComplexity()int :: android.permission.REQUEST_PASSWORD_COMPLEXITY
android.app.admin.DevicePolicyManager.setActiveAdmin(ComponentName,boolean,int)void :: android.permission.INTERACT_ACROSS_USERS_FULLandroid.permission.MANAGE_DEVICE_ADMINS
android.app.admin.DevicePolicyManager.setDeviceOwner(ComponentName,String,int)boolean :: android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
android.app.admin.DevicePolicyManager.setDeviceOwnerOnly(ComponentName,String,int)boolean :: android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
android.app.admin.DevicePolicyManager.getDeviceOwnerComponentOnAnyUser()ComponentName :: android.permission.android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERSandroid.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwnerUser()UserHandle :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwner()String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwnerNameOnAnyUser()String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setActiveProfileOwner(ComponentName,String)boolean :: android.permission.MANAGE_DEVICE_ADMINS
android.app.admin.DevicePolicyManager.getProfileOwnerAsUser(UserHandle)ComponentName :: android.permission.
            conditional = trueandroid.permission.INTERACT_ACROSS_USERS
android.app.admin.DevicePolicyManager.getProfileOwnerNameAsUser(int)String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getBluetoothContactSharingDisabled(UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.app.admin.DevicePolicyManager.getPermittedAccessibilityServices(int)List<String> :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getPermittedInputMethodsForCurrentUser()List<String> :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getLogoutUserId()int :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.clearLogoutUser()void :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.clearSystemUpdatePolicyFreezePeriodRecord()void :: android.permission.CLEAR_FREEZE_PERIOD
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long)void :: android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long,boolean)void :: android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManager.forceNetworkLogs()long :: android.permission.FORCE_DEVICE_POLICY_MANAGER_LOGS
android.app.admin.DevicePolicyManager.forceSecurityLogs()long :: android.permission.FORCE_DEVICE_POLICY_MANAGER_LOGS
android.app.admin.DevicePolicyManager.getUserProvisioningState()int :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.forceRemoveActiveAdmin(ComponentName,int)void :: android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
android.app.admin.DevicePolicyManager.isDeviceProvisioned()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setDeviceProvisioningConfigApplied()void :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isDeviceProvisioningConfigApplied()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setProfileOwnerCanAccessDeviceIds(ComponentName)void :: android.permission.
            conditional = trueandroid.permission.GRANT_PROFILE_OWNER_DEVICE_IDS_ACCESS
android.app.admin.DevicePolicyManager.markProfileOwnerOnOrganizationOwnedDevice(ComponentName)void :: android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERSandroid.permission.MARK_DEVICE_ORGANIZATION_OWNED
android.app.admin.DevicePolicyManager.isPackageAllowedToAccessCalendar(String)boolean :: android.permission.INTERACT_ACROSS_USERS_FULLandroid.permission.INTERACT_ACROSS_USERS
android.app.admin.DevicePolicyManager.getCrossProfileCalendarPackages()Set<String> :: android.permission.INTERACT_ACROSS_USERS_FULLandroid.permission.INTERACT_ACROSS_USERS
android.app.admin.DevicePolicyManager.getAllCrossProfilePackages()Set<String> :: android.permission.INTERACT_ACROSS_PROFILESandroid.permission.INTERACT_ACROSS_USERS_FULLandroid.permission.INTERACT_ACROSS_USERS
android.app.admin.DevicePolicyManager.isManagedKiosk()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isUnattendedManagedKiosk()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setNextOperationSafety(int,int)void :: android.permission.MANAGE_DEVICE_ADMINS
android.app.admin.DevicePolicyManager.clearOrganizationId()void :: android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
android.app.admin.DevicePolicyManager.provisionFullyManagedDevice(FullyManagedDeviceProvisioningParams)void :: android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
android.app.admin.DevicePolicyManager.resetDefaultCrossProfileIntentFilters(int)void :: android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
android.app.admin.DevicePolicyManager.getPolicyExemptApps()Set<String> :: android.permission.MANAGE_DEVICE_ADMINS
android.app.backup.BackupManager.beginRestoreSession()RestoreSession :: android.permission.BACKUP
android.app.backup.BackupManager.setBackupEnabled(boolean)void :: android.permission.BACKUP
android.app.backup.BackupManager.isBackupEnabled()boolean :: android.permission.BACKUP
android.app.backup.BackupManager.isBackupServiceActive(UserHandle)boolean :: android.permission.BACKUP
android.app.backup.BackupManager.setAutoRestore(boolean)void :: android.permission.BACKUP
android.app.backup.BackupManager.getCurrentTransport()String :: android.permission.BACKUP
android.app.backup.BackupManager.getCurrentTransportComponent()ComponentName :: android.permission.BACKUP
android.app.backup.BackupManager.listAllTransports()String[] :: android.permission.BACKUP
android.app.backup.BackupManager.updateTransportAttributes(ComponentName,String,Intent,String,Intent,String)void :: android.permission.BACKUP
android.app.backup.BackupManager.updateTransportAttributes(ComponentName,String,Intent,String,Intent,CharSequence)void :: android.permission.BACKUP
android.app.backup.BackupManager.selectBackupTransport(String)String :: android.permission.BACKUP
android.app.backup.BackupManager.selectBackupTransport(ComponentName,SelectBackupTransportCallback)void :: android.permission.BACKUP
android.app.backup.BackupManager.backupNow()void :: android.permission.BACKUP
android.app.backup.BackupManager.getAvailableRestoreToken(String)long :: android.permission.BACKUP
android.app.backup.BackupManager.isAppEligibleForBackup(String)boolean :: android.permission.BACKUP
android.app.backup.BackupManager.requestBackup(String[],BackupObserver)int :: android.permission.BACKUP
android.app.backup.BackupManager.requestBackup(String[],BackupObserver,BackupManagerMonitor,int)int :: android.permission.BACKUP
android.app.backup.BackupManager.cancelBackups()void :: android.permission.BACKUP
android.app.backup.BackupManager.setAncestralSerialNumber(long)void :: android.permission.BACKUP
android.app.backup.BackupManager.getConfigurationIntent(String)Intent :: android.permission.BACKUP
android.app.backup.BackupManager.getDestinationString(String)String :: android.permission.BACKUP
android.app.backup.BackupManager.getDataManagementIntent(String)Intent :: android.permission.BACKUP
android.app.backup.BackupManager.getDataManagementLabel(String)String :: android.permission.BACKUP
android.app.backup.BackupManager.getDataManagementIntentLabel(String)CharSequence :: android.permission.BACKUP
android.app.backup.BackupManager.excludeKeysFromRestore(String,List<String>)void :: android.permission.BACKUP
android.app.compat.CompatChanges.isChangeEnabled(long,String,UserHandle)boolean :: android.permission.LOG_COMPAT_CHANGEandroid.permission.READ_COMPAT_CHANGE_CONFIG
android.app.compat.CompatChanges.isChangeEnabled(long,int)boolean :: android.permission.LOG_COMPAT_CHANGEandroid.permission.READ_COMPAT_CHANGE_CONFIG
android.app.compat.CompatChanges.putPackageOverrides(String,Map<Long,PackageOverride>)void :: android.permission.OVERRIDE_COMPAT_CHANGE_CONFIG_ON_RELEASE_BUILD
android.app.compat.CompatChanges.removePackageOverrides(String,Set<Long>)void :: android.permission.OVERRIDE_COMPAT_CHANGE_CONFIG_ON_RELEASE_BUILD
android.app.contentsuggestions.ContentSuggestionsManager.resetTemporaryService(int)void :: android.permission.MANAGE_CONTENT_SUGGESTIONS
android.app.contentsuggestions.ContentSuggestionsManager.setTemporaryService(int,String,int)void :: android.permission.MANAGE_CONTENT_SUGGESTIONS
android.app.contentsuggestions.ContentSuggestionsManager.setDefaultServiceEnabled(int,boolean)void :: android.permission.MANAGE_CONTENT_SUGGESTIONS
android.app.job.JobInfo.setPersisted(boolean)Builder :: android.permission.RECEIVE_BOOT_COMPLETED
android.app.job.JobScheduler.scheduleAsPackage(JobInfo,String,int,String)int :: android.permission.UPDATE_DEVICE_STATS
android.app.people.PeopleManager.isConversation(String,String)boolean :: android.permission.READ_PEOPLE_DATA
android.app.time.TimeManager.getTimeZoneCapabilitiesAndConfig()TimeZoneCapabilitiesAndConfig :: android.permission.MANAGE_TIME_AND_ZONE_DETECTION
android.app.time.TimeManager.getTimeCapabilitiesAndConfig()TimeCapabilitiesAndConfig :: android.permission.MANAGE_TIME_AND_ZONE_DETECTION
android.app.time.TimeManager.updateTimeConfiguration(TimeConfiguration)boolean :: android.permission.MANAGE_TIME_AND_ZONE_DETECTION
android.app.time.TimeManager.updateTimeZoneConfiguration(TimeZoneConfiguration)boolean :: android.permission.MANAGE_TIME_AND_ZONE_DETECTION
android.app.time.TimeManager.addTimeZoneDetectorListener(Executor,TimeZoneDetectorListener)void :: android.permission.MANAGE_TIME_AND_ZONE_DETECTION
android.app.time.TimeManager.removeTimeZoneDetectorListener(TimeZoneDetectorListener)void :: android.permission.MANAGE_TIME_AND_ZONE_DETECTION
android.app.time.TimeManager.suggestExternalTime(ExternalTimeSuggestion)void :: android.permission.SUGGEST_EXTERNAL_TIME
android.app.timedetector.TimeDetector.suggestTelephonyTime(TelephonyTimeSuggestion)void :: android.permission.SUGGEST_TELEPHONY_TIME_AND_ZONE
android.app.timedetector.TimeDetector.suggestManualTime(ManualTimeSuggestion)boolean :: android.permission.SUGGEST_MANUAL_TIME_AND_ZONE
android.app.timedetector.TimeDetector.suggestNetworkTime(NetworkTimeSuggestion)void :: android.permission.SET_TIME
android.app.timedetector.TimeDetector.suggestGnssTime(GnssTimeSuggestion)void :: android.permission.SET_TIME
android.app.timezonedetector.TimeZoneDetector.suggestManualTimeZone(ManualTimeZoneSuggestion)boolean :: android.permission.SUGGEST_MANUAL_TIME_AND_ZONE
android.app.timezonedetector.TimeZoneDetector.suggestTelephonyTimeZone(TelephonyTimeZoneSuggestion)void :: android.permission.SUGGEST_TELEPHONY_TIME_AND_ZONE
android.app.trust.TrustManager.setDeviceLockedForUser(int,boolean)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.isTrustUsuallyManaged(int)boolean :: android.permission.TRUST_LISTENER
android.app.trust.TrustManager.unlockedByBiometricForUser(int,BiometricSourceType)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.clearAllBiometricRecognized(BiometricSourceType)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.usage.NetworkStatsManager.registerNetworkStatsProvider(String,NetworkStatsProvider)void :: android.permission.PERMISSION_MAINLINE_NETWORK_STACKandroid.permission.NETWORK_STATS_PROVIDER
android.app.usage.NetworkStatsManager.unregisterNetworkStatsProvider(NetworkStatsProvider)void :: android.permission.PERMISSION_MAINLINE_NETWORK_STACKandroid.permission.NETWORK_STATS_PROVIDER
android.app.usage.NetworkStatsManager.notifyNetworkStatus(List<Network>,List<NetworkStateSnapshot>,String,List<UnderlyingNetworkInfo>)void :: android.permission.PERMISSION_MAINLINE_NETWORK_STACKandroid.permission.NETWORK_STACK
android.app.usage.StorageStatsManager.queryCratesForUser(UUID,UserHandle)Collection<CrateInfo> :: android.permission.MANAGE_CRATES
android.app.usage.UsageStatsManager.getAppStandbyBucket(String)int :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.setAppStandbyBucket(String,int)void :: android.permission.CHANGE_APP_IDLE_STATE
android.app.usage.UsageStatsManager.getAppStandbyBuckets()Map<String, :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.setAppStandbyBuckets(Map<String,Integer>)void :: android.permission.CHANGE_APP_IDLE_STATE
android.app.usage.UsageStatsManager.registerAppUsageObserver(int,String[],long,TimeUnit,PendingIntent)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.unregisterAppUsageObserver(int)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.registerUsageSessionObserver(int,String[],Duration,Duration,PendingIntent,PendingIntent)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.unregisterUsageSessionObserver(int)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.registerAppUsageLimitObserver(int,String[],Duration,Duration,PendingIntent)void :: android.permission.OBSERVE_APP_USAGEandroid.permission.SUSPEND_APPS
android.app.usage.UsageStatsManager.unregisterAppUsageLimitObserver(int)void :: android.permission.OBSERVE_APP_USAGEandroid.permission.SUSPEND_APPS
android.app.usage.UsageStatsManager.whitelistAppTemporarily(String,long,UserHandle)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.app.usage.UsageStatsManager.onCarrierPrivilegedAppsChanged()void :: android.permission.BIND_CARRIER_SERVICES
android.app.usage.UsageStatsManager.getLastTimeAnyComponentUsed(String)long :: android.permission.PACKAGE_USAGE_STATSandroid.permission.INTERACT_ACROSS_USERS
android.apphibernation.AppHibernationManager.isHibernatingForUser(String)boolean :: android.permission.MANAGE_APP_HIBERNATION
android.apphibernation.AppHibernationManager.setHibernatingForUser(String,boolean)void :: android.permission.MANAGE_APP_HIBERNATION
android.apphibernation.AppHibernationManager.isHibernatingGlobally(String)boolean :: android.permission.MANAGE_APP_HIBERNATION
android.apphibernation.AppHibernationManager.setHibernatingGlobally(String,boolean)void :: android.permission.MANAGE_APP_HIBERNATION
android.apphibernation.AppHibernationManager.getHibernatingPackagesForUser()List<String> :: android.permission.MANAGE_APP_HIBERNATION
android.bluetooth.BluetoothA2dp.connect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getDevicesMatchingConnectionStates(int[])List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.setActiveDevice(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT)
    @UnsupportedAppUsage(trackingBug = 171933273
android.bluetooth.BluetoothA2dp.getActiveDevice()BluetoothDevice :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.setPriority(BluetoothDevice,int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getPriority(BluetoothDevice)int :: android.permission.Pandroid.permission. trackingBug = 115609023
android.bluetooth.BluetoothA2dp.getConnectionPolicy(BluetoothDevice)int :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.setAvrcpAbsoluteVolume(int)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.isA2dpPlaying(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.shouldSendVolumeKeys(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getCodecStatus(BluetoothDevice)BluetoothCodecStatus :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.setCodecConfigPreference(BluetoothDevice,BluetoothCodecConfig)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.enableOptionalCodecs(BluetoothDevice)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.disableOptionalCodecs(BluetoothDevice)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.enableDisableOptionalCodecs(BluetoothDevice,boolean)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.isOptionalCodecsSupported(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.isOptionalCodecsEnabled(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.setOptionalCodecsEnabled(BluetoothDevice,int)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getDynamicBufferSupport()int :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getBufferConstraints()BufferConstraints :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.setBufferLengthMillis(int,int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.connect(BluetoothDevice)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.getDevicesMatchingConnectionStates(int[])List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.getAudioConfig(BluetoothDevice)BluetoothAudioConfig :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.setPriority(BluetoothDevice,int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.getPriority(BluetoothDevice)int :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.getConnectionPolicy(BluetoothDevice)int :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.isAudioPlaying(BluetoothDevice)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.disableBLE()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.enableBLE()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.enable()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.disable()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.disable(boolean)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getAddress()String :: android.permission.LOCAL_MAC_ADDRESSandroid.permission.android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getName()String :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getNameLengthForAdvertise()int :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.BluetoothAdapter.factoryReset()boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getUuids()ParcelUuid[] :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.setName(String)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getBluetoothClass()BluetoothClass :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.setBluetoothClass(BluetoothClass)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getIoCapability()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.setIoCapability(int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getLeIoCapability()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.setLeIoCapability(int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getScanMode()int :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.setScanMode(int,long)boolean :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.setScanMode(int)boolean :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.getDiscoverableTimeout()int :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.setDiscoverableTimeout(int)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.getDiscoveryEndMillis()long :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.startDiscovery()boolean :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.cancelDiscovery()boolean :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.isDiscovering()boolean :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.removeActiveDevice(int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.MODIFY_PHONE_STATEandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.setActiveDevice(BluetoothDevice,int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.MODIFY_PHONE_STATEandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.connectAllEnabledProfiles(BluetoothDevice)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.MODIFY_PHONE_STATEandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.disconnectAllEnabledProfiles(BluetoothDevice)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getMaxConnectedAudioDevices()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.isHardwareTrackingFiltersAvailable()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getControllerActivityEnergyInfo(int)BluetoothActivityEnergyInfo :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.requestControllerActivityEnergyInfo(ResultReceiver)void :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getMostRecentlyConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getBondedDevices()Set<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingRfcommOn(int)BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingRfcommOn(int,boolean,boolean)BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(String,UUID)BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(String,UUID)BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingEncryptedRfcommWithServiceRecord(String,UUID)BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.createNewRfcommSocketAndRecord(String,UUID,boolean,boolean)BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommOn(int)BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingL2capOn(int,boolean,boolean)BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingL2capOn(int)BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingInsecureL2capOn(int)BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.enableNoAutoConnect()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.generateLocalOobData(int,Executor,OobDataCallback)void :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.startLeScan(LeScanCallback)boolean :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.startLeScan(UUID[],LeScanCallback)boolean :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.stopLeScan(LeScanCallback)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.listenUsingL2capChannel()BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingInsecureL2capChannel()BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.addOnMetadataChangedListener(BluetoothDevice,Executor,OnMetadataChangedListener)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.removeOnMetadataChangedListener(BluetoothDevice,OnMetadataChangedListener)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.registerBluetoothConnectionCallback(Executor,BluetoothConnectionCallback)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.unregisterBluetoothConnectionCallback(BluetoothConnectionCallback)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAvrcpController.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAvrcpController.getDevicesMatchingConnectionStates(int[])List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAvrcpController.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAvrcpController.getPlayerSettings(BluetoothDevice)BluetoothAvrcpPlayerSettings :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAvrcpController.setPlayerApplicationSetting(BluetoothAvrcpPlayerSettings)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAvrcpController.sendGroupNavigationCmd(BluetoothDevice,int,int)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getName()String :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getType()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getAlias()String :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setAlias(String)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getBatteryLevel()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.createBond()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.createBond(int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.createBondOutOfBand(int,OobData,OobData)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.createBondInternal(int,OobData,OobData)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.isBondingInitiatedLocally()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.cancelBondProcess()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.removeBond()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.canBondWithoutDialog()boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.isConnected()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.isEncrypted()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getBluetoothClass()BluetoothClass :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getUuids()ParcelUuid[] :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.fetchUuidsWithSdp()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.sdpSearch(ParcelUuid)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setPin(byte[])boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setPin(String)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setPairingConfirmation(boolean)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.cancelPairing()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getPhonebookAccessPermission()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setSilenceMode(boolean)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.isInSilenceMode()boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setPhonebookAccessPermission(int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getMessageAccessPermission()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setMessageAccessPermission(int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getSimAccessPermission()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setSimAccessPermission(int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.connectGatt(Context,boolean,BluetoothGattCallback)BluetoothGatt :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.connectGatt(Context,boolean,BluetoothGattCallback,int)BluetoothGatt :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.connectGatt(Context,boolean,BluetoothGattCallback,int,int)BluetoothGatt :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.connectGatt(Context,boolean,BluetoothGattCallback,int,int,Handler)BluetoothGatt :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.connectGatt(Context,boolean,BluetoothGattCallback,int,boolean,int,Handler)BluetoothGatt :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setMetadata(int,byte[])boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getMetadata(int)byte[] :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.close()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.registerApp(BluetoothGattCallback,Handler)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.registerApp(BluetoothGattCallback,Handler,boolean)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.unregisterApp()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.disconnect()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.connect()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.setPreferredPhy(int,int,int)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.readPhy()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.discoverServices()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.discoverServiceByUuid(UUID)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.readCharacteristic(BluetoothGattCharacteristic)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.readUsingCharacteristicUuid(UUID,int,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.writeCharacteristic(BluetoothGattCharacteristic)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.readDescriptor(BluetoothGattDescriptor)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.writeDescriptor(BluetoothGattDescriptor)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.beginReliableWrite()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.executeReliableWrite()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.abortReliableWrite()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.abortReliableWrite(BluetoothDevice)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.setCharacteristicNotification(BluetoothGattCharacteristic,boolean)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.refresh()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.readRemoteRssi()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.requestMtu(int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.requestConnectionPriority(int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.requestLeConnectionUpdate(int,int,int,int,int,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.close()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.unregisterCallback()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.connect(BluetoothDevice,boolean)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.cancelConnection(BluetoothDevice)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.setPreferredPhy(BluetoothDevice,int,int,int)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.readPhy(BluetoothDevice)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.sendResponse(BluetoothDevice,int,int,int,byte[])boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.notifyCharacteristicChanged(BluetoothDevice,BluetoothGattCharacteristic,boolean)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.addService(BluetoothGattService)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.removeService(BluetoothGattService)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.clearServices()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.connect(BluetoothDevice)boolean :: android.permission.android.permission.MODIFY_PHONE_STATEandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getDevicesMatchingConnectionStates(int[])List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.setPriority(BluetoothDevice,int)boolean :: android.permission.android.permission.MODIFY_PHONE_STATEandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.MODIFY_PHONE_STATEandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getPriority(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getConnectionPolicy(BluetoothDevice)int :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.isNoiseReductionSupported(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.isVoiceRecognitionSupported(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.startVoiceRecognition(BluetoothDevice)boolean :: android.permission.android.permission.MODIFY_PHONE_STATEandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.stopVoiceRecognition(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.isAudioConnected(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getAudioState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.setAudioRouteAllowed(boolean)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getAudioRouteAllowed()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.setForceScoAudio(boolean)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.isAudioOn()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.connectAudio()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.disconnectAudio()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.startScoUsingVirtualVoiceCall()boolean :: android.permission.android.permission.MODIFY_PHONE_STATEandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.stopScoUsingVirtualVoiceCall()boolean :: android.permission.android.permission.MODIFY_PHONE_STATEandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.phoneStateChanged(int,int,int,String,int,String)void :: android.permission.android.permission.MODIFY_PHONE_STATEandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.clccResponse(int,int,int,int,boolean,String,int)void :: android.permission.android.permission.MODIFY_PHONE_STATEandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.sendVendorSpecificResultCode(BluetoothDevice,String,String)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.setActiveDevice(BluetoothDevice)boolean :: android.permission.android.permission.MODIFY_PHONE_STATEandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getActiveDevice()BluetoothDevice :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.isInbandRingingEnabled()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.connect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getDevicesMatchingConnectionStates(int[])List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.setPriority(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getPriority(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getConnectionPolicy(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.startVoiceRecognition(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.sendVendorAtCommand(BluetoothDevice,int,String)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.stopVoiceRecognition(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getCurrentCalls(BluetoothDevice)List<BluetoothHeadsetClientCall> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getCurrentAgEvents(BluetoothDevice)Bundle :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.acceptCall(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.holdCall(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.rejectCall(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.terminateCall(BluetoothDevice,BluetoothHeadsetClientCall)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.enterPrivateMode(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.explicitCallTransfer(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.dial(BluetoothDevice,String)BluetoothHeadsetClientCall :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.sendDTMF(BluetoothDevice,byte)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getLastVoiceTagNumber(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getAudioState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.setAudioRouteAllowed(BluetoothDevice,boolean)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getAudioRouteAllowed(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.connectAudio(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.disconnectAudio(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getCurrentAgFeatures(BluetoothDevice)Bundle :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.connect(BluetoothDevice)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.disconnect(BluetoothDevice)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.getDevicesMatchingConnectionStates(int[])List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.setActiveDevice(BluetoothDevice)boolean :: android.permission.Randroid.permission. trackingBug = 170729553
android.bluetooth.BluetoothHearingAid.getActiveDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.setPriority(BluetoothDevice,int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.getPriority(BluetoothDevice)int :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.getConnectionPolicy(BluetoothDevice)int :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.setVolume(int)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.getHiSyncId(BluetoothDevice)long :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.getDeviceSide(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.getDeviceMode(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.getDevicesMatchingConnectionStates(int[])List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.registerApp(BluetoothHidDeviceAppSdpSettings,BluetoothHidDeviceAppQosSettings,BluetoothHidDeviceAppQosSettings,Executor,Callback)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.unregisterApp()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.sendReport(BluetoothDevice,int,byte[])boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.replyReport(BluetoothDevice,byte,byte,byte[])boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.reportError(BluetoothDevice,byte)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.getUserAppName()String :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.connect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.connect(BluetoothDevice)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.disconnect(BluetoothDevice)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.getDevicesMatchingConnectionStates(int[])List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.setPriority(BluetoothDevice,int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.getPriority(BluetoothDevice)int :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.getConnectionPolicy(BluetoothDevice)int :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.virtualUnplug(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.getProtocolMode(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.setProtocolMode(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.getReport(BluetoothDevice,byte,byte,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.setReport(BluetoothDevice,byte,String)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.sendData(BluetoothDevice,String)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.getIdleTime(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.setIdleTime(BluetoothDevice,byte)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.connect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.getDevicesMatchingConnectionStates(int[])List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.setActiveDevice(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.getActiveDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.getGroupId(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.getConnectionPolicy(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothManager.getConnectionState(BluetoothDevice,int)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothManager.getConnectedDevices(int)List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothManager.getDevicesMatchingConnectionStates(int,int[])List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothManager.openGattServer(Context,BluetoothGattServerCallback)BluetoothGattServer :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothManager.openGattServer(Context,BluetoothGattServerCallback,boolean)BluetoothGattServer :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothManager.openGattServer(Context,BluetoothGattServerCallback,int)BluetoothGattServer :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothManager.openGattServer(Context,BluetoothGattServerCallback,int,boolean)BluetoothGattServer :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.getState()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.getClient()BluetoothDevice :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.isConnected(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.getConnectedDevices()List<BluetoothDevice> :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.getDevicesMatchingConnectionStates(int[])List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.setPriority(BluetoothDevice,int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.getPriority(BluetoothDevice)int :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.getConnectionPolicy(BluetoothDevice)int :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.isConnected(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.connect(BluetoothDevice)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.disconnect(BluetoothDevice)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.getDevicesMatchingConnectionStates(int[])List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.setPriority(BluetoothDevice,int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.getPriority(BluetoothDevice)int :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.getConnectionPolicy(BluetoothDevice)int :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.sendMessage(BluetoothDevice,Collection<Uri>,String,PendingIntent,PendingIntent)boolean :: android.permission.android.permission.SEND_SMSandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.sendMessage(BluetoothDevice,Uri[],String,PendingIntent,PendingIntent)boolean :: android.permission.android.permission.SEND_SMSandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.getUnreadMessages(BluetoothDevice)boolean :: android.permission.android.permission.READ_SMSandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.isUploadingSupported(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.setMessageStatus(BluetoothDevice,String,int)boolean :: android.permission.android.permission.READ_SMSandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPan.connect(BluetoothDevice)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPan.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPan.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPan.getConnectedDevices()List<BluetoothDevice> :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPan.getDevicesMatchingConnectionStates(int[])List<BluetoothDevice> :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPan.getConnectionState(BluetoothDevice)int :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPan.setBluetoothTethering(boolean)void :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECTandroid.permission.TETHER_PRIVILEGED
android.bluetooth.BluetoothPan.isTetheringOn()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbap.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbap.getConnectionState(BluetoothDevice)int :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbap.getDevicesMatchingConnectionStates(int[])List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbap.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbap.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.connect(BluetoothDevice)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.disconnect(BluetoothDevice)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.getDevicesMatchingConnectionStates(int[])List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.setPriority(BluetoothDevice,int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.getPriority(BluetoothDevice)int :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.getConnectionPolicy(BluetoothDevice)int :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getState()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getClient()BluetoothDevice :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.isConnected(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getDevicesMatchingConnectionStates(int[])List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.setPriority(BluetoothDevice,int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getPriority(BluetoothDevice)int :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getConnectionPolicy(BluetoothDevice)int :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSocket.connect()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSocket.requestMaximumTxDataLength()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.le.AdvertisingSet.enableAdvertising(boolean,int,int)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setAdvertisingData(AdvertiseData)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setScanResponseData(AdvertiseData)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setAdvertisingParameters(AdvertisingSetParameters)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setPeriodicAdvertisingParameters(PeriodicAdvertisingParameters)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setPeriodicAdvertisingData(AdvertiseData)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setPeriodicAdvertisingEnabled(boolean)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.getOwnAddress()void :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(AdvertiseSettings,AdvertiseData,AdvertiseCallback)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(AdvertiseSettings,AdvertiseData,AdvertiseData,AdvertiseCallback)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.stopAdvertising(AdvertiseCallback)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertisingSet(AdvertisingSetParameters,AdvertiseData,AdvertiseData,PeriodicAdvertisingParameters,AdvertiseData,AdvertisingSetCallback)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertisingSet(AdvertisingSetParameters,AdvertiseData,AdvertiseData,PeriodicAdvertisingParameters,AdvertiseData,AdvertisingSetCallback,Handler)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertisingSet(AdvertisingSetParameters,AdvertiseData,AdvertiseData,PeriodicAdvertisingParameters,AdvertiseData,int,int,AdvertisingSetCallback)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertisingSet(AdvertisingSetParameters,AdvertiseData,AdvertiseData,PeriodicAdvertisingParameters,AdvertiseData,int,int,AdvertisingSetCallback,Handler)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.stopAdvertisingSet(AdvertisingSetCallback)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.totalBytes(AdvertiseData,boolean)int :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeScanner.startScan(ScanCallback)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.startScan(List<ScanFilter>,ScanSettings,ScanCallback)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.startScan(List<ScanFilter>,ScanSettings,PendingIntent)int :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(WorkSource,ScanCallback)void :: android.permission.BLUETOOTH_SCANandroid.permission.UPDATE_DEVICE_STATS
android.bluetooth.le.BluetoothLeScanner.startScan(List<ScanFilter>,ScanSettings,WorkSource,ScanCallback,PendingIntent,List<List<ResultStorageDescriptor>>)int :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.stopScan(ScanCallback)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.stopScan(PendingIntent)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.flushPendingScanResults(ScanCallback)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.startTruncatedScan(List<TruncatedFilter>,ScanSettings,ScanCallback)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.stopLeScan()void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.flushPendingBatchResults()void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.isHardwareResourcesAvailableForScan(ScanSettings)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.le.PeriodicAdvertisingManager.registerSync(ScanResult,int,int,PeriodicAdvertisingCallback)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.PeriodicAdvertisingManager.registerSync(ScanResult,int,int,PeriodicAdvertisingCallback,Handler)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.PeriodicAdvertisingManager.unregisterSync(PeriodicAdvertisingCallback)void :: android.permission.BLUETOOTH_SCAN
android.companion.CompanionDeviceManager.associate(AssociationRequest,Callback,Handler)void :: android.permission.REQUEST_COMPANION_PROFILE_WATCHandroid.permission.
            conditional = true
android.companion.CompanionDeviceManager.isDeviceAssociatedForWifiConnection(String,MacAddress,UserHandle)boolean :: android.permission.MANAGE_COMPANION_DEVICES
android.companion.CompanionDeviceManager.getAllAssociations()List<Association> :: android.permission.MANAGE_COMPANION_DEVICES
android.companion.CompanionDeviceManager.canPairWithoutPrompt(String,String,UserHandle)boolean :: android.permission.MANAGE_COMPANION_DEVICES
android.companion.CompanionDeviceManager.startObservingDevicePresence(String)void :: android.permission.REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE
android.companion.CompanionDeviceManager.stopObservingDevicePresence(String)void :: android.permission.REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE
android.companion.CompanionDeviceManager.associate(String,MacAddress,byte[])void :: android.permission.ASSOCIATE_COMPANION_DEVICES
android.content.AttributionSource.getRenouncedPermissions()Set<String> :: android.permission.RENOUNCE_PERMISSIONS
android.content.AttributionSource.setRenouncedPermissions(Set<String>)Builder :: android.permission.RENOUNCE_PERMISSIONS
android.content.ContentProviderClient.setDetectNotResponding(long)void :: android.permission.REMOVE_TASKS
android.content.ContentResolver.putCache(Uri,Bundle)void :: android.permission.CACHE_CONTENT
android.content.ContentResolver.getCache(Uri)Bundle :: android.permission.CACHE_CONTENT
android.content.Context.startActivityAsUser(Intent,UserHandle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.startActivityAsUser(Intent,Bundle,UserHandle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.startActivitiesAsUser(Intent[],Bundle,UserHandle)int :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(Intent,UserHandle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(Intent,UserHandle,String)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(Intent,UserHandle,String,Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(Intent,UserHandle,String,int)void :: android.permission.Randroid.permission. trackingBug = 170729553
android.content.Context.sendOrderedBroadcastAsUser(Intent,UserHandle,String,BroadcastReceiver,Handler,int,String,Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(Intent,UserHandle,String,int,BroadcastReceiver,Handler,int,String,Bundle)void :: android.permission.Randroid.permission. trackingBug = 170729553
android.content.Context.sendOrderedBroadcastAsUser(Intent,UserHandle,String,int,Bundle,BroadcastReceiver,Handler,int,String,Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendStickyBroadcast(Intent)void :: android.permission.BROADCAST_STICKY
android.content.Context.sendStickyBroadcast(Intent,Bundle)void :: android.permission.BROADCAST_STICKY
android.content.Context.sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)void :: android.permission.BROADCAST_STICKY
android.content.Context.removeStickyBroadcast(Intent)void :: android.permission.BROADCAST_STICKY
android.content.Context.sendStickyBroadcastAsUser(Intent,UserHandle)void :: android.permission.BROADCAST_STICKYandroid.permission.INTERACT_ACROSS_USERS
android.content.Context.sendStickyBroadcastAsUser(Intent,UserHandle,Bundle)void :: android.permission.BROADCAST_STICKYandroid.permission.INTERACT_ACROSS_USERS
android.content.Context.sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)void :: android.permission.BROADCAST_STICKYandroid.permission.INTERACT_ACROSS_USERS
android.content.Context.removeStickyBroadcastAsUser(Intent,UserHandle)void :: android.permission.BROADCAST_STICKYandroid.permission.INTERACT_ACROSS_USERS
android.content.Context.registerReceiverForAllUsers(BroadcastReceiver,IntentFilter,String,Handler)Intent :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.registerReceiverAsUser(BroadcastReceiver,UserHandle,IntentFilter,String,Handler)Intent :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startForegroundServiceAsUser(Intent,UserHandle)ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.startServiceAsUser(Intent,UserHandle)ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.stopServiceAsUser(Intent,UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.bindServiceAsUser(Intent,ServiceConnection,int,UserHandle)boolean :: android.permission.INTERACT_ACROSS_PROFILESandroid.permission.INTERACT_ACROSS_USERS
android.content.Context.bindServiceAsUser(Intent,ServiceConnection,int,Handler,UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS)
    @UnsupportedAppUsage(trackingBug = 136728678
android.content.ContextParams.getRenouncedPermissions()Set<String> :: android.permission.RENOUNCE_PERMISSIONS
android.content.ContextParams.setRenouncedPermissions(Set<String>)Builder :: android.permission.RENOUNCE_PERMISSIONS
android.content.om.OverlayManager.setEnabledExclusiveInCategory(String,UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULLandroid.permission.INTERACT_ACROSS_USERS
android.content.om.OverlayManager.setEnabled(String,boolean,UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULLandroid.permission.INTERACT_ACROSS_USERS
android.content.om.OverlayManager.getOverlayInfosForTarget(String,UserHandle)List<OverlayInfo> :: android.permission.INTERACT_ACROSS_USERS_FULLandroid.permission.INTERACT_ACROSS_USERS
android.content.om.OverlayManager.invalidateCachesForOverlay(String,UserHandle)void :: android.permission.android.permission.INTERACT_ACROSS_USERS
android.content.pm.CrossProfileApps.startActivity(Intent,UserHandle,Activity)void :: android.permission.INTERACT_ACROSS_PROFILESandroid.permission.INTERACT_ACROSS_USERS
android.content.pm.CrossProfileApps.startActivity(Intent,UserHandle,Activity,Bundle)void :: android.permission.INTERACT_ACROSS_PROFILESandroid.permission.INTERACT_ACROSS_USERS
android.content.pm.CrossProfileApps.startActivity(ComponentName,UserHandle)void :: android.permission.INTERACT_ACROSS_PROFILES
android.content.pm.CrossProfileApps.setInteractAcrossProfilesAppOp(String,int)void :: android.permission.CONFIGURE_INTERACT_ACROSS_PROFILESandroid.permission.INTERACT_ACROSS_USERS
android.content.pm.CrossProfileApps.resetInteractAcrossProfilesAppOps(Collection<String>,Set<String>)void :: android.permission.CONFIGURE_INTERACT_ACROSS_PROFILESandroid.permission.INTERACT_ACROSS_USERS
android.content.pm.CrossProfileApps.clearInteractAcrossProfilesAppOps()void :: android.permission.CONFIGURE_INTERACT_ACROSS_PROFILESandroid.permission.INTERACT_ACROSS_USERS
android.content.pm.LauncherApps.cacheShortcuts(String,List<String>,UserHandle,int)void :: android.permission.ACCESS_SHORTCUTS
android.content.pm.LauncherApps.uncacheShortcuts(String,List<String>,UserHandle,int)void :: android.permission.ACCESS_SHORTCUTS
android.content.pm.PackageInstaller.uninstall(String,IntentSender)void :: android.permission.REQUEST_DELETE_PACKAGESandroid.permission.DELETE_PACKAGES
android.content.pm.PackageInstaller.uninstall(VersionedPackage,IntentSender)void :: android.permission.REQUEST_DELETE_PACKAGESandroid.permission.DELETE_PACKAGES
android.content.pm.PackageInstaller.uninstall(VersionedPackage,int,IntentSender)void :: android.permission.REQUEST_DELETE_PACKAGESandroid.permission.DELETE_PACKAGES
android.content.pm.PackageInstaller.installExistingPackage(String,int,IntentSender)void :: android.permission.INSTALL_EXISTING_PACKAGESandroid.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller.uninstallExistingPackage(String,IntentSender)void :: android.permission.DELETE_PACKAGES
android.content.pm.PackageInstaller.setPermissionsResult(int,boolean)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller.getDataLoaderParams()DataLoaderParams :: android.permission.USE_INSTALLER_V2
android.content.pm.PackageInstaller.addFile(int,String,long,byte[],byte[])void :: android.permission.USE_INSTALLER_V2
android.content.pm.PackageInstaller.removeFile(int,String)void :: android.permission.USE_INSTALLER_V2
android.content.pm.PackageInstaller.commitTransferred(IntentSender)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller.setGrantedRuntimePermissions(String[])void :: android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageInstaller.setAllocateAggressive(boolean)void :: android.permission.ALLOCATE_AGGRESSIVE
android.content.pm.PackageInstaller.setStaged()void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller.setInstallAsApex()void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller.setDataLoaderParams(DataLoaderParams)void :: android.permission.USE_INSTALLER_V2android.permission.INSTALL_PACKAGES
android.content.pm.PackageManager.getPackageInfoAsUser(String,int,int)PackageInfo :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.getApplicationInfoAsUser(String,int,UserHandle)ApplicationInfo :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.getInstalledPackagesAsUser(int,int)List<PackageInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.grantRuntimePermission(String,String,UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.revokeRuntimePermission(String,String,UserHandle)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.revokeRuntimePermission(String,String,UserHandle,String)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.getPermissionFlags(String,String,UserHandle)int :: android.permission.GET_RUNTIME_PERMISSIONSandroid.permission.GRANT_RUNTIME_PERMISSIONSandroid.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.updatePermissionFlags(String,String,int,int,UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONSandroid.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.getWhitelistedRestrictedPermissions(String,int)Set<String> :: android.permission.
            conditional = trueandroid.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.content.pm.PackageManager.addWhitelistedRestrictedPermission(String,String,int)boolean :: android.permission.
            conditional = trueandroid.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.content.pm.PackageManager.removeWhitelistedRestrictedPermission(String,String,int)boolean :: android.permission.
        conditional = trueandroid.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.content.pm.PackageManager.setAutoRevokeWhitelisted(String,boolean)boolean :: android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONSandroid.permission.
            conditional = true
android.content.pm.PackageManager.isAutoRevokeWhitelisted(String)boolean :: android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONSandroid.permission.
            conditional = true
android.content.pm.PackageManager.getInstantApps()List<InstantAppInfo> :: android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManager.getInstantAppIcon(String)Drawable :: android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManager.getDeclaredSharedLibraries(String,int)List<SharedLibraryInfo> :: android.permission.ACCESS_SHARED_LIBRARIES
android.content.pm.PackageManager.queryIntentActivitiesAsUser(Intent,int,UserHandle)List<ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.queryBroadcastReceiversAsUser(Intent,int,UserHandle)List<ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.queryIntentServicesAsUser(Intent,int,UserHandle)List<ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.queryIntentContentProvidersAsUser(Intent,int,UserHandle)List<ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.installExistingPackageAsUser(String,int)int :: android.permission.INSTALL_EXISTING_PACKAGESandroid.permission.INSTALL_PACKAGESandroid.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.verifyIntentFilter(int,int,List<String>)void :: android.permission.INTENT_FILTER_VERIFICATION_AGENT
android.content.pm.PackageManager.getIntentVerificationStatusAsUser(String,int)int :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.updateIntentVerificationStatusAsUser(String,int,int)boolean :: android.permission.SET_PREFERRED_APPLICATIONS
android.content.pm.PackageManager.getDefaultBrowserPackageNameAsUser(int)String :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.setDefaultBrowserPackageNameAsUser(String,int)boolean :: android.permission.INTERACT_ACROSS_USERS_FULLandroid.permission.SET_PREFERRED_APPLICATIONS
android.content.pm.PackageManager.setUpdateAvailable(String,boolean)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageManager.deletePackage(String,IPackageDeleteObserver,int)void :: android.permission.DELETE_PACKAGES
android.content.pm.PackageManager.deletePackageAsUser(String,IPackageDeleteObserver,int,int)void :: android.permission.INTERACT_ACROSS_USERS_FULLandroid.permission.DELETE_PACKAGES
android.content.pm.PackageManager.setComponentEnabledSetting(ComponentName,int,int)void :: android.permission.
            conditional = trueandroid.permission.CHANGE_COMPONENT_ENABLED_STATE
android.content.pm.PackageManager.setSyntheticAppDetailsActivityEnabled(String,boolean)void :: android.permission.
            conditional = trueandroid.permission.CHANGE_COMPONENT_ENABLED_STATE
android.content.pm.PackageManager.setApplicationEnabledSetting(String,int,int)void :: android.permission.
            conditional = trueandroid.permission.CHANGE_COMPONENT_ENABLED_STATE
android.content.pm.PackageManager.addOnPermissionsChangeListener(OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageManager.removeOnPermissionsChangeListener(OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageManager.setDistractingPackageRestrictions(String[],int)String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.setPackagesSuspended(String[],boolean,PersistableBundle,PersistableBundle,String)String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.setPackagesSuspended(String[],boolean,PersistableBundle,PersistableBundle,SuspendDialogInfo)String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.getUnsuspendablePackages(String[])String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.setHarmfulAppWarning(String,CharSequence)void :: android.permission.SET_HARMFUL_APP_WARNINGS
android.content.pm.PackageManager.getHarmfulAppWarning(String)CharSequence :: android.permission.SET_HARMFUL_APP_WARNINGS
android.content.pm.PackageManager.getHoldLockToken()IBinder :: android.permission.INJECT_EVENTS
android.content.pm.PackageManager.setKeepUninstalledPackages(List<String>)void :: android.permission.KEEP_UNINSTALLED_PACKAGES
android.content.pm.ShortcutManager.getShareTargets(IntentFilter)List<ShareShortcutInfo> :: android.permission.MANAGE_APP_PREDICTIONS
android.content.pm.dex.ArtManager.snapshotRuntimeProfile(int,String,String,Executor,SnapshotRuntimeProfileCallback)void :: android.permission.PACKAGE_USAGE_STATSandroid.permission.READ_RUNTIME_PROFILES
android.content.pm.dex.ArtManager.isRuntimeProfilingEnabled(int)boolean :: android.permission.PACKAGE_USAGE_STATSandroid.permission.READ_RUNTIME_PROFILES
android.content.pm.verify.domain.DomainVerificationManager.queryValidVerificationPackageNames()List<String> :: android.permission.DOMAIN_VERIFICATION_AGENT
android.content.pm.verify.domain.DomainVerificationManager.getDomainVerificationInfo(String)DomainVerificationInfo :: android.permission.DOMAIN_VERIFICATION_AGENT
android.content.pm.verify.domain.DomainVerificationManager.setDomainVerificationStatus(UUID,Set<String>,int)int :: android.permission.DOMAIN_VERIFICATION_AGENT
android.content.pm.verify.domain.DomainVerificationManager.setDomainVerificationLinkHandlingAllowed(String,boolean)void :: android.permission.UPDATE_DOMAIN_VERIFICATION_USER_SELECTION
android.content.pm.verify.domain.DomainVerificationManager.setDomainVerificationUserSelection(UUID,Set<String>,boolean)int :: android.permission.UPDATE_DOMAIN_VERIFICATION_USER_SELECTION
android.content.pm.verify.domain.DomainVerificationManager.getOwnersForDomain(String)SortedSet<DomainOwner> :: android.permission.UPDATE_DOMAIN_VERIFICATION_USER_SELECTION
android.content.rollback.RollbackManager.getAvailableRollbacks()List<RollbackInfo> :: android.permission.MANAGE_ROLLBACKSandroid.permission.TEST_MANAGE_ROLLBACKS
android.content.rollback.RollbackManager.getRecentlyCommittedRollbacks()List<RollbackInfo> :: android.permission.MANAGE_ROLLBACKSandroid.permission.TEST_MANAGE_ROLLBACKS
android.content.rollback.RollbackManager.commitRollback(int,List<VersionedPackage>,IntentSender)void :: android.permission.MANAGE_ROLLBACKSandroid.permission.TEST_MANAGE_ROLLBACKS
android.content.rollback.RollbackManager.reloadPersistedData()void :: android.permission.TEST_MANAGE_ROLLBACKS
android.content.rollback.RollbackManager.expireRollbackForPackage(String)void :: android.permission.TEST_MANAGE_ROLLBACKS
android.content.rollback.RollbackManager.blockRollbackManager(long)void :: android.permission.TEST_MANAGE_ROLLBACKS
android.debug.AdbManager.isAdbWifiSupported()boolean :: android.permission.MANAGE_DEBUGGING
android.debug.AdbManager.isAdbWifiQrSupported()boolean :: android.permission.MANAGE_DEBUGGING
android.graphics.fonts.FontManager.getFontConfig()FontConfig :: android.permission.UPDATE_FONTS
android.graphics.fonts.FontManager.fontFile.getSignature(), :: android.permission.getParcelFileDescriptor(android.permission.UPDATE_FONTS) public @ResultCode int updateFontFamily(
            @NonNull FontFamilyUpdateRequest request
android.hardware.SensorPrivacyManager.addSensorPrivacyListener(int,OnSensorPrivacyChangedListener)void :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.addSensorPrivacyListener(int,int,OnSensorPrivacyChangedListener)void :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.addSensorPrivacyListener(int,Executor,OnSensorPrivacyChangedListener)void :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.addSensorPrivacyListener(int,int,Executor,OnSensorPrivacyChangedListener)void :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.removeSensorPrivacyListener(int,OnSensorPrivacyChangedListener)void :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.isSensorPrivacyEnabled(int)boolean :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.isSensorPrivacyEnabled(int,int)boolean :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.setSensorPrivacy(int,int,boolean)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.setSensorPrivacy(int,int,boolean,int)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.setSensorPrivacyForProfileGroup(int,int,boolean)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.setSensorPrivacyForProfileGroup(int,int,boolean,int)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.suppressSensorPrivacyReminders(int,boolean)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.suppressSensorPrivacyReminders(int,boolean,int)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.setAllSensorPrivacy(boolean)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.addAllSensorPrivacyListener(OnAllSensorPrivacyChangedListener)void :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.removeAllSensorPrivacyListener(OnAllSensorPrivacyChangedListener)void :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.isAllSensorPrivacyEnabled()boolean :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.biometrics.BiometricManager.getButtonLabel()CharSequence :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager.getPromptMessage()CharSequence :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager.getSettingName()CharSequence :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager.getSensorProperties()List<SensorProperties> :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricManager.createTestSession(int)BiometricTestSession :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricManager.getUiPackage()String :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricManager.canAuthenticate()int :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager.canAuthenticate(int)int :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager.canAuthenticate(int,int)int :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.getStrings(int)Strings :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager.hasEnrolledBiometrics(int)boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.registerEnabledOnKeyguardCallback(IBiometricEnabledOnKeyguardCallback)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.invalidateAuthenticatorIds(int,int,IInvalidationCallback)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.resetLockoutTimeBound(IBinder,String,int,int,byte[])void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.setUseDefaultTitle()Builder :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.setTextForDeviceCredential(CharSequence,CharSequence,CharSequence)Builder :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.setAllowedSensorIds(List<Integer>)Builder :: android.permission.TEST_BIOMETRICandroid.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.setAllowBackgroundAuthentication(boolean)Builder :: android.permission.TEST_BIOMETRICandroid.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.shouldUseDefaultTitle()boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.authenticateUser(CancellationSignal,Executor,AuthenticationCallback,int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.authenticateUserForOperation(CancellationSignal,Executor,AuthenticationCallback,int,long)long :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.authenticate(CryptoObject,CancellationSignal,Executor,AuthenticationCallback)void :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricPrompt.authenticate(CancellationSignal,Executor,AuthenticationCallback)void :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.setTestHalEnabled(boolean)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.startEnroll(int)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.finishEnroll(int)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.acceptAuthentication(int)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.rejectAuthentication(int)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.notifyAcquired(int,int)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.notifyError(int,int)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.cleanupInternalState(int)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.close()void :: android.permission.TEST_BIOMETRIC
android.hardware.camera2.CameraManager.isConcurrentSessionConfigurationSupported(Map<String,SessionConfiguration>)boolean :: android.permission.CAMERA
android.hardware.camera2.CameraManager.openCamera(String,CameraDevice.StateCallback,Handler)void :: android.permission.CAMERA
android.hardware.camera2.CameraManager.openCamera(String,Executor,CameraDevice.StateCallback)void :: android.permission.CAMERA
android.hardware.camera2.CameraManager.openCamera(String,int,Executor,CameraDevice.StateCallback)void :: android.permission.CAMERAandroid.permission.SYSTEM_CAMERAandroid.permission.
android.hardware.camera2.CameraManager.onCameraOpened(String,String)void :: android.permission.CAMERA_OPEN_CLOSE_LISTENER
android.hardware.camera2.CameraManager.onCameraClosed(String)void :: android.permission.CAMERA_OPEN_CLOSE_LISTENER
android.hardware.camera2.CameraManager.injectCamera(String,String,String,Executor,CameraInjectionSession.InjectionStatusCallback)void :: android.permission.CAMERA_INJECT_EXTERNAL_CAMERA
android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl.createCameraAdvancedExtensionSession(CameraDevice,Context,ExtensionSessionConfiguration)CameraAdvancedExtensionSessionImpl :: android.permission.CAMERA
android.hardware.camera2.impl.CameraExtensionSessionImpl.createCameraExtensionSession(CameraDevice,Context,ExtensionSessionConfiguration)CameraExtensionSessionImpl :: android.permission.CAMERA
android.hardware.devicestate.DeviceStateManager.requestState(DeviceStateRequest,Executor,DeviceStateRequest.Callback)void :: android.permission.
            conditional = trueandroid.permission.CONTROL_DEVICE_STATE
android.hardware.devicestate.DeviceStateManager.cancelRequest(DeviceStateRequest)void :: android.permission.
            conditional = trueandroid.permission.CONTROL_DEVICE_STATE
android.hardware.display.ColorDisplayManager.setNightDisplayActivated(boolean)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayColorTemperature(int)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.getNightDisplayAutoMode()int :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayAutoMode(int)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayCustomStartTime(LocalTime)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayCustomEndTime(LocalTime)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.isDeviceColorManaged()boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.mManager.setSaturationLevel(saturationLevel)int :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)
    public boolean setSaturationLevel(@IntRange(from = 0android.permission. to = 100
android.hardware.display.ColorDisplayManager.isSaturationActivated()boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.mManager.setAppSaturationLevel(packageName,saturationLevel)int :: android.permission.
            @IntRange(from = 0android.permission. to = 100android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)
    public boolean setAppSaturationLevel(@NonNull String packageName
android.hardware.display.ColorDisplayManager.setDisplayWhiteBalanceEnabled(boolean)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setReduceBrightColorsActivated(boolean)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.mManager.setReduceBrightColorsStrength(strength)int :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)
    public boolean setReduceBrightColorsStrength(@IntRange(from = 0android.permission. to = 100
android.hardware.display.ColorDisplayManager.getTransformCapabilities()int :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.DisplayManager.setSaturationLevel(float)void :: android.permission.CONTROL_DISPLAY_SATURATION
android.hardware.display.DisplayManager.setUserDisabledHdrTypes(int[])void :: android.permission.WRITE_SECURE_SETTINGS
android.hardware.display.DisplayManager.setAreUserDisabledHdrTypesAllowed(boolean)void :: android.permission.WRITE_SECURE_SETTINGS
android.hardware.display.DisplayManager.getBrightnessEvents()List<BrightnessChangeEvent> :: android.permission.BRIGHTNESS_SLIDER_USAGE
android.hardware.display.DisplayManager.getAmbientBrightnessStats()List<AmbientBrightnessDayStats> :: android.permission.ACCESS_AMBIENT_LIGHT_STATS
android.hardware.display.DisplayManager.setBrightnessConfiguration(BrightnessConfiguration)void :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.setBrightnessConfigurationForDisplay(BrightnessConfiguration,String)void :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.getBrightnessConfigurationForDisplay(String)BrightnessConfiguration :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.getBrightnessConfiguration()BrightnessConfiguration :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.getDefaultBrightnessConfiguration()BrightnessConfiguration :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.mGlobal.setBrightness(displayId,brightness)float :: android.permission. to = 1fandroid.permission.CONTROL_DISPLAY_BRIGHTNESS)
    public void setBrightness(int displayIdandroid.permission. @FloatRange(from = 0f
android.hardware.display.DisplayManager.getBrightness(int)float :: android.permission. to = 1fandroid.permission.CONTROL_DISPLAY_BRIGHTNESS)
    @FloatRange(from = 0f
android.hardware.display.DisplayManager.setShouldAlwaysRespectAppRequestedMode(boolean)void :: android.permission.OVERRIDE_DISPLAY_MODE_REQUESTS
android.hardware.display.DisplayManager.shouldAlwaysRespectAppRequestedMode()boolean :: android.permission.OVERRIDE_DISPLAY_MODE_REQUESTS
android.hardware.display.DisplayManager.setRefreshRateSwitchingType(int)void :: android.permission.MODIFY_REFRESH_RATE_SWITCHING_TYPE
android.hardware.face.FaceManager.authenticate(CryptoObject,CancellationSignal,AuthenticationCallback,Handler,int,boolean)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.detectFace(CancellationSignal,FaceDetectionCallback,int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.enroll(int,byte[],CancellationSignal,EnrollmentCallback,int[])void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.enroll(int,byte[],CancellationSignal,EnrollmentCallback,int[],Surface,boolean)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.enrollRemotely(int,byte[],CancellationSignal,EnrollmentCallback,int[])void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.generateChallenge(int,int,GenerateChallengeCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.generateChallenge(int,GenerateChallengeCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.revokeChallenge(int,int,long)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.resetLockout(int,int,byte[])void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.setFeature(int,int,boolean,byte[],SetFeatureCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.getFeature(int,int,GetFeatureCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.remove(Face,int,RemovalCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.removeAll(int,RemovalCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.getEnrolledFaces(int)List<Face> :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.getEnrolledFaces()List<Face> :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.hasEnrolledTemplates()boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.hasEnrolledTemplates(int)boolean :: android.permission.USE_BIOMETRIC_INTERNALandroid.permission.INTERACT_ACROSS_USERS
android.hardware.face.FaceManager.isHardwareDetected()boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.getSensorPropertiesInternal()List<FaceSensorPropertiesInternal> :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.addLockoutResetCallback(LockoutResetCallback)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.getSensorProperties()List<SensorProperties> :: android.permission.TEST_BIOMETRIC
android.hardware.fingerprint.FingerprintManager.createTestSession(int)BiometricTestSession :: android.permission.TEST_BIOMETRIC
android.hardware.fingerprint.FingerprintManager.authenticate(CryptoObject,CancellationSignal,int,AuthenticationCallback,Handler)void :: android.permission.USE_BIOMETRICandroid.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.authenticate(CryptoObject,CancellationSignal,AuthenticationCallback,Handler,int)void :: android.permission.USE_BIOMETRICandroid.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.authenticate(CryptoObject,CancellationSignal,AuthenticationCallback,Handler,int,int,int)void :: android.permission.USE_BIOMETRICandroid.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.detectFingerprint(CancellationSignal,FingerprintDetectionCallback,int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.enroll(byte,CancellationSignal,int,EnrollmentCallback,int)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.generateChallenge(int,int,GenerateChallengeCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.generateChallenge(int,GenerateChallengeCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.revokeChallenge(int,long)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.resetLockout(int,int,byte[])void :: android.permission.RESET_FINGERPRINT_LOCKOUT
android.hardware.fingerprint.FingerprintManager.remove(Fingerprint,int,RemovalCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.removeAll(int,RemovalCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.rename(int,int,String)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints(int)List<Fingerprint> :: android.permission.Randroid.permission. trackingBug = 170729553
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints()List<Fingerprint> :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.setUdfpsOverlayController(IUdfpsOverlayController)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.setSidefpsController(ISidefpsController)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.onPointerDown(int,int,int,float,float)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.onPointerUp(int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.onUiReady(int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints()boolean :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints(int)boolean :: android.permission.USE_FINGERPRINTandroid.permission.INTERACT_ACROSS_USERS
android.hardware.fingerprint.FingerprintManager.isHardwareDetected()boolean :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getSensorPropertiesInternal()List<FingerprintSensorPropertiesInternal> :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.addAuthenticatorsRegisteredCallback(IFingerprintAuthenticatorsRegisteredCallback)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.hdmi.HdmiControlManager.setStandbyMode(boolean)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.toggleAndFollowTvPower()void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.shouldHandleTvPowerKey()boolean :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setHdmiCecVolumeControlEnabled(int)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getHdmiCecVolumeControlEnabled()int :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHotplugEventListener(HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHotplugEventListener(Executor,HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHotplugEventListener(HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHdmiControlStatusChangeListener(HdmiControlStatusChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHdmiControlStatusChangeListener(Executor,HdmiControlStatusChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHdmiControlStatusChangeListener(HdmiControlStatusChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHdmiCecVolumeControlFeatureListener(Executor,HdmiCecVolumeControlFeatureListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHdmiCecVolumeControlFeatureListener(HdmiCecVolumeControlFeatureListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getUserCecSettings()List<String> :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getAllowedCecSettingStringValues(String)List<String> :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getAllowedCecSettingIntValues(String)List<Integer> :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setHdmiCecEnabled(int)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getHdmiCecEnabled()int :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHdmiCecEnabledChangeListener(CecSettingChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHdmiCecEnabledChangeListener(Executor,CecSettingChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHdmiCecEnabledChangeListener(CecSettingChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setHdmiCecVersion(int)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getHdmiCecVersion()int :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setPowerControlMode(String)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getPowerControlMode()String :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setPowerStateChangeOnActiveSourceLost(String)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getPowerStateChangeOnActiveSourceLost()String :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setSystemAudioModeMuting(int)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getSystemAudioModeMuting()int :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setTvWakeOnOneTouchPlay(int)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getTvWakeOnOneTouchPlay()int :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setTvSendStandbyOnSleep(int)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getTvSendStandbyOnSleep()int :: android.permission.HDMI_CEC
android.hardware.input.InputManager.if(opacity)float :: android.permission. to = 1android.permission.WRITE_SECURE_SETTINGS)
    public void setMaximumObscuringOpacityForTouch(@FloatRange(from = 0
android.hardware.input.InputManager.setBlockUntrustedTouchesMode(Context,int)void :: android.permission.WRITE_SECURE_SETTINGS
android.hardware.lights.SystemLightsManager.getLights()List<Light> :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.SystemLightsManager.getLightState(Light)LightState :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.SystemLightsManager.openSession()LightsSession :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.SystemLightsManager.openSession(int)LightsSession :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.SystemLightsManager.SystemLightsSession()SystemLightsSession() :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.SystemLightsManager.requestLights(LightsRequest)void :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.SystemLightsManager.close()void :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.location.ContextHubClient.sendMessageToNanoApp(NanoAppMessage)int :: android.permission.LOCATION_HARDWAREandroid.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.getContextHubHandles()int[] :: android.permission.LOCATION_HARDWAREandroid.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.getContextHubInfo(int)ContextHubInfo :: android.permission.LOCATION_HARDWAREandroid.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.loadNanoApp(int,NanoApp)int :: android.permission.LOCATION_HARDWAREandroid.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.unloadNanoApp(int)int :: android.permission.LOCATION_HARDWAREandroid.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.getNanoAppInstanceInfo(int)NanoAppInstanceInfo :: android.permission.LOCATION_HARDWAREandroid.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.findNanoAppOnHub(int,NanoAppFilter)int[] :: android.permission.LOCATION_HARDWAREandroid.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.sendMessage(int,int,ContextHubMessage)int :: android.permission.LOCATION_HARDWAREandroid.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.getContextHubs()List<ContextHubInfo> :: android.permission.LOCATION_HARDWAREandroid.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.loadNanoApp(ContextHubInfo,NanoAppBinary)ContextHubTransaction<Void> :: android.permission.LOCATION_HARDWAREandroid.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.unloadNanoApp(ContextHubInfo,long)ContextHubTransaction<Void> :: android.permission.LOCATION_HARDWAREandroid.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.enableNanoApp(ContextHubInfo,long)ContextHubTransaction<Void> :: android.permission.LOCATION_HARDWAREandroid.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.disableNanoApp(ContextHubInfo,long)ContextHubTransaction<Void> :: android.permission.LOCATION_HARDWAREandroid.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.queryNanoApps(ContextHubInfo)ContextHubTransaction<List<NanoAppState>> :: android.permission.LOCATION_HARDWAREandroid.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.createClient(Context,ContextHubInfo,Executor,ContextHubClientCallback)ContextHubClient :: android.permission.LOCATION_HARDWAREandroid.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.createClient(ContextHubInfo,ContextHubClientCallback,Executor)ContextHubClient :: android.permission.LOCATION_HARDWAREandroid.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.createClient(ContextHubInfo,ContextHubClientCallback)ContextHubClient :: android.permission.LOCATION_HARDWAREandroid.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.createClient(Context,ContextHubInfo,PendingIntent,long)ContextHubClient :: android.permission.LOCATION_HARDWAREandroid.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.createClient(ContextHubInfo,PendingIntent,long)ContextHubClient :: android.permission.LOCATION_HARDWAREandroid.permission.ACCESS_CONTEXT_HUB
android.hardware.radio.RadioManager.listModules(List<ModuleProperties>)int :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.openTuner(int,BandConfig,boolean,RadioTuner.Callback,Handler)RadioTuner :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.addAnnouncementListener(Set<Integer>,Announcement.OnListUpdatedListener)void :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.addAnnouncementListener(Executor,Set<Integer>,Announcement.OnListUpdatedListener)void :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.removeAnnouncementListener(Announcement.OnListUpdatedListener)void :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.soundtrigger.SoundTrigger.listModulesAsOriginator(ArrayList<ModuleProperties>,Identity)int :: android.permission.CAPTURE_AUDIO_HOTWORDandroid.permission.RECORD_AUDIO
android.hardware.soundtrigger.SoundTrigger.listModulesAsMiddleman(ArrayList<ModuleProperties>,Identity,Identity)int :: android.permission.SOUNDTRIGGER_DELEGATE_IDENTITY
android.hardware.soundtrigger.SoundTrigger.attachModuleAsMiddleman(int,SoundTrigger.StatusListener,Handler,Identity,Identity)SoundTriggerModule :: android.permission.SOUNDTRIGGER_DELEGATE_IDENTITY
android.hardware.soundtrigger.SoundTrigger.attachModuleAsOriginator(int,SoundTrigger.StatusListener,Handler,Identity)SoundTriggerModule :: android.permission.CAPTURE_AUDIO_HOTWORDandroid.permission.RECORD_AUDIO
android.hardware.usb.UsbManager.grantPermission(UsbDevice,String)void :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.setCurrentFunctions(long)void :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.getCurrentFunctions()long :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.getUsbBandwidthMbps()int :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.getGadgetHalVersion()int :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.getUsbHalVersion()int :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.resetUsbGadget()void :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.enableUsbDataSignal(boolean)boolean :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.getPorts()List<UsbPort> :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.enableContaminantDetection(UsbPort,boolean)void :: android.permission.MANAGE_USB
android.hardware.usb.UsbPort.getStatus()UsbPortStatus :: android.permission.MANAGE_USB
android.hardware.usb.UsbPort.setRoles(int,int)void :: android.permission.MANAGE_USB
android.location.LastLocationRequest.setHiddenFromAppOps(boolean)Builder :: android.permission.UPDATE_APP_OPS_STATS
android.location.LastLocationRequest.setAdasGnssBypass(boolean)LastLocationRequest.Builder :: android.permission.WRITE_SECURE_SETTINGS
android.location.LastLocationRequest.setLocationSettingsIgnored(boolean)Builder :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationManager.setExtraLocationControllerPackage(String)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setExtraLocationControllerPackageEnabled(boolean)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setLocationControllerExtraPackage(String)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setLocationControllerExtraPackageEnabled(boolean)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setLocationEnabledForUser(boolean,UserHandle)void :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationManager.setAdasGnssLocationEnabled(boolean)void :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationManager.setProviderEnabledForUser(String,boolean,UserHandle)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationManager.getLastLocation()Location :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.getLastKnownLocation(String)Location :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.getLastKnownLocation(String,LastLocationRequest)Location :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.getCurrentLocation(String,CancellationSignal,Executor,Consumer<Location>)void :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.getCurrentLocation(LocationRequest,CancellationSignal,Executor,Consumer<Location>)void :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.getCurrentLocation(String,LocationRequest,CancellationSignal,Executor,Consumer<Location>)void :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestSingleUpdate(String,LocationListener,Looper)void :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestSingleUpdate(Criteria,LocationListener,Looper)void :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestSingleUpdate(String,PendingIntent)void :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestSingleUpdate(Criteria,PendingIntent)void :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(String,long,float,LocationListener)void :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(String,long,float,LocationListener,Looper)void :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(String,long,float,Executor,LocationListener)void :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(long,float,Criteria,LocationListener,Looper)void :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(long,float,Criteria,Executor,LocationListener)void :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(String,long,float,PendingIntent)void :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(long,float,Criteria,PendingIntent)void :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(LocationRequest,LocationListener,Looper)void :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(LocationRequest,Executor,LocationListener)void :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(LocationRequest,PendingIntent)void :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(String,LocationRequest,Executor,LocationListener)void :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(String,LocationRequest,PendingIntent)void :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.injectLocation(Location)boolean :: android.permission.LOCATION_HARDWAREandroid.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.isProviderPackage(String)boolean :: android.permission.READ_DEVICE_CONFIG
android.location.LocationManager.isProviderPackage(String,String)boolean :: android.permission.READ_DEVICE_CONFIG
android.location.LocationManager.isProviderPackage(String,String,String)boolean :: android.permission.READ_DEVICE_CONFIG
android.location.LocationManager.addProximityAlert(double,double,float,long,PendingIntent)void :: android.permission.ACCESS_FINE_LOCATIONandroid.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.getGpsStatus(GpsStatus)GpsStatus :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addGpsStatusListener(GpsStatus.Listener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(GnssStatus.Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(GnssStatus.Callback,Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(Executor,GnssStatus.Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(GpsStatus.NmeaListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(OnNmeaMessageListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(OnNmeaMessageListener,Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(Executor,OnNmeaMessageListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback,Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(Executor,GnssMeasurementsEvent.Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(GnssRequest,Executor,GnssMeasurementsEvent.Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(GnssMeasurementRequest,Executor,GnssMeasurementsEvent.Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.injectGnssMeasurementCorrections(GnssMeasurementCorrections)void :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssNavigationMessageCallback(GnssNavigationMessage.Callback,Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssNavigationMessageCallback(Executor,GnssNavigationMessage.Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addProviderRequestChangedListener(Executor,ChangedListener)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.removeProviderRequestChangedListener(ProviderRequest.ChangedListener)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.registerGnssBatchedLocationCallback(long,boolean,BatchedLocationCallback,Handler)boolean :: android.permission.LOCATION_HARDWAREandroid.permission.UPDATE_APP_OPS_STATS
android.location.LocationManager.flushGnssBatch()void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.unregisterGnssBatchedLocationCallback(BatchedLocationCallback)boolean :: android.permission.LOCATION_HARDWARE
android.location.LocationRequest.setLocationSettingsIgnored(boolean)LocationRequest :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationRequest.setHiddenFromAppOps(boolean)Builder :: android.permission.UPDATE_APP_OPS_STATS
android.location.LocationRequest.setAdasGnssBypass(boolean)Builder :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationRequest.setLocationSettingsIgnored(boolean)Builder :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationRequest.setLowPower(boolean)Builder :: android.permission.LOCATION_HARDWARE
android.location.LocationRequest.setWorkSource(WorkSource)Builder :: android.permission.UPDATE_DEVICE_STATS
android.media.AudioAttributes.setSystemUsage(int)Builder :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioAttributes.setHotwordModeEnabled(boolean)Builder :: android.permission.CAPTURE_AUDIO_HOTWORD
android.media.AudioManager.setMasterMute(boolean,int)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setVolumeIndexForAttributes(AudioAttributes,int,int)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getVolumeIndexForAttributes(AudioAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getMaxVolumeIndexForAttributes(AudioAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getMinVolumeIndexForAttributes(AudioAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setSupportedSystemUsages(int[])void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getSupportedSystemUsages()int[] :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.forceVolumeControlStream(int)void :: android.permission.MODIFY_PHONE_STATE
android.media.AudioManager.setPreferredDeviceForStrategy(AudioProductStrategy,AudioDeviceAttributes)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.removePreferredDeviceForStrategy(AudioProductStrategy)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getPreferredDeviceForStrategy(AudioProductStrategy)AudioDeviceAttributes :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setPreferredDevicesForStrategy(AudioProductStrategy,List<AudioDeviceAttributes>)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getPreferredDevicesForStrategy(AudioProductStrategy)List<AudioDeviceAttributes> :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.addOnPreferredDeviceForStrategyChangedListener(Executor,OnPreferredDeviceForStrategyChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.removeOnPreferredDeviceForStrategyChangedListener(OnPreferredDeviceForStrategyChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.addOnPreferredDevicesForStrategyChangedListener(Executor,OnPreferredDevicesForStrategyChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.removeOnPreferredDevicesForStrategyChangedListener(OnPreferredDevicesForStrategyChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setPreferredDeviceForCapturePreset(int,AudioDeviceAttributes)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.clearPreferredDevicesForCapturePreset(int)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getPreferredDevicesForCapturePreset(int)List<AudioDeviceAttributes> :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.addOnPreferredDevicesForCapturePresetChangedListener(Executor,OnPreferredDevicesForCapturePresetChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.removeOnPreferredDevicesForCapturePresetChangedListener(OnPreferredDevicesForCapturePresetChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.requestAudioFocus(OnAudioFocusChangeListener,AudioAttributes,int,int)int :: android.permission.MODIFY_PHONE_STATE
android.media.AudioManager.requestAudioFocus(OnAudioFocusChangeListener,AudioAttributes,int,int,AudioPolicy)int :: android.permission.MODIFY_PHONE_STATEandroid.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.requestAudioFocusForTest(AudioFocusRequest,String,int,int)int :: android.permission.QUERY_AUDIO_STATE"
android.media.AudioManager.abandonAudioFocusForTest(AudioFocusRequest,String)int :: android.permission.QUERY_AUDIO_STATE"
android.media.AudioManager.getFadeOutDurationOnFocusLossMillis(AudioAttributes)long :: android.permission.QUERY_AUDIO_STATE")
    public @IntRange(from = 0
android.media.AudioManager.requestAudioFocus(AudioFocusRequest,AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setFocusRequestResult(AudioFocusInfo,int,AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.dispatchAudioFocusChange(AudioFocusInfo,int,AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.registerAudioPolicy(AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.unregisterAudioPolicyAsync(AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.unregisterAudioPolicy(AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getDevicesForAttributes(AudioAttributes)List<AudioDeviceAttributes> :: android.permission.QUERY_AUDIO_STATEandroid.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setDeviceVolumeBehavior(AudioDeviceAttributes,int)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getDeviceVolumeBehavior(AudioDeviceAttributes)int :: android.permission.QUERY_AUDIO_STATEandroid.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.isFullVolumeDevice()boolean :: android.permission.QUERY_AUDIO_STATEandroid.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setWiredDeviceConnectionState(int,int,String,String)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.Objects.requireNonNull(device)long :: android.permission. @IntRange(from = 0android.permission.MODIFY_AUDIO_ROUTING)
    public boolean setAdditionalOutputDeviceDelay(
            @NonNull AudioDeviceInfo device
android.media.AudioManager.setEncodedSurroundMode(int)boolean :: android.permission.WRITE_SETTINGS
android.media.AudioManager.setSurroundFormatEnabled(int,boolean)boolean :: android.permission.WRITE_SETTINGS
android.media.AudioManager.getAudioProductStrategies()List<AudioProductStrategy> :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getAudioVolumeGroups()List<AudioVolumeGroup> :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setMultiAudioFocusEnabled(boolean)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioRecord.AudioRecord(int,int,int,int,int)AudioRecord(int :: android.permission.RECORD_AUDIO
android.media.AudioRecord.AudioRecord(AudioAttributes,AudioFormat,int,int)AudioRecord(AudioAttributes :: android.permission.RECORD_AUDIO
android.media.AudioRecord.setMaxSharedAudioHistoryMillis(long)Builder :: android.permission.CAPTURE_AUDIO_HOTWORD
android.media.AudioRecord.build()AudioRecord :: android.permission.RECORD_AUDIO
android.media.AudioRecord.Objects.requireNonNull(sharedPackage)long :: android.permission.
                                  @IntRange(from = 0android.permission.CAPTURE_AUDIO_HOTWORD)
    @NonNull public MediaSyncEvent shareAudioHistory(@NonNull String sharedPackage
android.media.AudioRecordingConfiguration.getClientUid()int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioSystem.getMasterBalance()float :: android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioSystem.setMasterBalance(float)int :: android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioTrack.if(contentId)int :: android.permission.MODIFY_AUDIO_ROUTING)
        public TunerConfiguration(
                @IntRange(from = 0) int contentIdandroid.permission. @IntRange(from = 1
android.media.AudioTrack.getContentId()int :: android.permission.MODIFY_AUDIO_ROUTING)
        public @IntRange(from = 1
android.media.AudioTrack.getSyncId()int :: android.permission.MODIFY_AUDIO_ROUTING)
        public @IntRange(from = 1
android.media.AudioTrack.setTunerConfiguration(TunerConfiguration)Builder :: android.permission.MODIFY_AUDIO_ROUTING
android.media.MediaCommunicationManager.registerSessionCallback(Executor,SessionCallback)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.MediaPlayer.setOnRtpRxNoticeListener(Context,Executor,OnRtpRxNoticeListener)void :: android.permission.BIND_IMS_SERVICE
android.media.MediaRouter2.getInstance(Context,String)MediaRouter2 :: android.permission.MEDIA_CONTENT_CONTROL
android.media.MediaRouter2.startScan()void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.MediaRouter2.stopScan()void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.MediaRouter2.transfer(RoutingController,MediaRoute2Info)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.MediaRouter2.setRouteVolume(MediaRoute2Info,int)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.RingtoneManager.enableSyncFromParent(Context)void :: android.permission.WRITE_SECURE_SETTINGS
android.media.RingtoneManager.ensureDefaultRingtones(Context)void :: android.permission.WRITE_SETTINGS
android.media.Spatializer.setEnabled(boolean)void :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.Spatializer.getCompatibleAudioDevices()List<AudioDeviceAttributes> :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.Spatializer.addCompatibleAudioDevice(AudioDeviceAttributes)void :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.Spatializer.removeCompatibleAudioDevice(AudioDeviceAttributes)void :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.Spatializer.getHeadTrackingMode()int :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.Spatializer.getDesiredHeadTrackingMode()int :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.Spatializer.getSupportedHeadTrackingModes()List<Integer> :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.Spatializer.setDesiredHeadTrackingMode(int)void :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.Spatializer.recenterHeadTracker()void :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.Spatializer.addOnHeadTrackingModeChangedListener(Executor,OnHeadTrackingModeChangedListener)void :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.Spatializer.removeOnHeadTrackingModeChangedListener(OnHeadTrackingModeChangedListener)void :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.Spatializer.setOnHeadToSoundstagePoseUpdatedListener(Executor,OnHeadToSoundstagePoseUpdatedListener)void :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.Spatializer.clearOnHeadToSoundstagePoseUpdatedListener()void :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.Spatializer.setGlobalTransform(float[])void :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.Spatializer.setEffectParameter(int,byte[])void :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.Spatializer.getEffectParameter(int,byte[])void :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.Spatializer.getOutput()int :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS)
    public @IntRange(from = 0
android.media.Spatializer.setOnSpatializerOutputChangedListener(Executor,OnSpatializerOutputChangedListener)void :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.Spatializer.clearOnSpatializerOutputChangedListener()void :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.audiofx.AudioEffect.AudioEffect(UUID,AudioDeviceAttributes)AudioEffect(@NonNull :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.audiofx.AudioEffect.isEffectSupportedForDevice(UUID,AudioDeviceAttributes)boolean :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.audiofx.SourceDefaultEffect.uuid.toString(), :: android.permission. int priorityandroid.permission.
    public SourceDefaultEffect(UUID typeandroid.permission.MODIFY_DEFAULT_AUDIO_EFFECTSandroid.permission.toString(android.permission. UUID uuid
android.media.audiofx.StreamDefaultEffect.uuid.toString(), :: android.permission. int priorityandroid.permission.MODIFY_DEFAULT_AUDIO_EFFECTSandroid.permission.
    public StreamDefaultEffect(UUID typeandroid.permission.toString(android.permission. UUID uuid
android.media.musicrecognition.MusicRecognitionManager.beginStreamingSearch(RecognitionRequest,Executor,RecognitionCallback)void :: android.permission.MANAGE_MUSIC_RECOGNITION
android.media.session.MediaSessionManager.getMediaKeyEventSession()MediaSession.Token :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.getMediaKeyEventSessionPackageName()String :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.setOnVolumeKeyLongPressListener(OnVolumeKeyLongPressListener,Handler)void :: android.permission.SET_VOLUME_KEY_LONG_PRESS_LISTENER
android.media.session.MediaSessionManager.setOnMediaKeyListener(OnMediaKeyListener,Handler)void :: android.permission.SET_MEDIA_KEY_LISTENER
android.media.session.MediaSessionManager.addOnMediaKeyEventDispatchedListener(Executor,OnMediaKeyEventDispatchedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.removeOnMediaKeyEventDispatchedListener(OnMediaKeyEventDispatchedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.addOnMediaKeyEventSessionChangedListener(Executor,OnMediaKeyEventSessionChangedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.removeOnMediaKeyEventSessionChangedListener(OnMediaKeyEventSessionChangedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.soundtrigger.SoundTriggerDetector.startRecognition(int)boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerDetector.stopRecognition()boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.updateModel(Model)void :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getModel(UUID)Model :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.deleteModel(UUID)void :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.createSoundTriggerDetector(UUID,SoundTriggerDetector.Callback,Handler)SoundTriggerDetector :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.loadSoundModel(SoundModel)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.startRecognition(UUID,Bundle,ComponentName,RecognitionConfig)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.stopRecognition(UUID)int :: android.permission.Randroid.permission. trackingBug = 170729553
android.media.soundtrigger.SoundTriggerManager.unloadSoundModel(UUID)int :: android.permission.Randroid.permission. trackingBug = 170729553
android.media.soundtrigger.SoundTriggerManager.isRecognitionActive(UUID)boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getModelState(UUID)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getModuleProperties()SoundTrigger.ModuleProperties :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.setParameter(UUID,int,int)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getParameter(UUID,int)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.queryParameter(UUID,int)ModelParamRange :: android.permission.MANAGE_SOUND_TRIGGER
android.media.tv.TvInputManager.onCurrentTunedInfosUpdated(List<TunedInfo>)void :: android.permission.ACCESS_TUNED_INFO
android.media.tv.TvInputManager.setParentalControlsEnabled(boolean)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.addBlockedRating(TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.removeBlockedRating(TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.getTvContentRatingSystemList()List<TvContentRatingSystemInfo> :: android.permission.READ_CONTENT_RATING_SYSTEMS
android.media.tv.TvInputManager.notifyPreviewProgramBrowsableDisabled(String,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.notifyWatchNextProgramBrowsableDisabled(String,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.notifyPreviewProgramAddedToWatchNext(String,long,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.getClientPid(String)int :: android.permission.TUNER_RESOURCE_ACCESS
android.media.tv.TvInputManager.getAvailableTvStreamConfigList(String)List<TvStreamConfig> :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.captureFrame(String,Surface,TvStreamConfig)boolean :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.isSingleSessionActive()boolean :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.getHardwareList()List<TvInputHardwareInfo> :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,HardwareCallback,TvInputInfo)Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,TvInputInfo,HardwareCallback)Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,TvInputInfo,String,int,Executor,HardwareCallback)Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.releaseTvInputHardware(int,Hardware)void :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.getDvbDeviceList()List<DvbDeviceInfo> :: android.permission.DVB_DEVICE
android.media.tv.TvInputManager.openDvbDevice(DvbDeviceInfo,int)ParcelFileDescriptor :: android.permission.DVB_DEVICE
android.media.tv.TvInputManager.getCurrentTunedInfos()List<TunedInfo> :: android.permission.ACCESS_TUNED_INFO
android.media.tv.TvView.setMain()void :: android.permission.CHANGE_HDMI_CEC_ACTIVE_SOURCE
android.media.tv.TvView.unblockContent(TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.tuner.Tuner.Tuner(Context,String,int)Tuner(@NonNull :: android.permission.ACCESS_TV_TUNER
android.media.tv.tuner.Tuner.openDescrambler()Descrambler :: android.permission.ACCESS_TV_DESCRAMBLER
android.media.voice.KeyphraseModelManager.getKeyphraseSoundModel(int,Locale)SoundTrigger.KeyphraseSoundModel :: android.permission.MANAGE_VOICE_KEYPHRASES
android.media.voice.KeyphraseModelManager.updateKeyphraseSoundModel(SoundTrigger.KeyphraseSoundModel)void :: android.permission.MANAGE_VOICE_KEYPHRASES
android.media.voice.KeyphraseModelManager.deleteKeyphraseSoundModel(int,Locale)void :: android.permission.MANAGE_VOICE_KEYPHRASES
android.net.EthernetManager.requestTetheredInterface(Executor,TetheredInterfaceCallback)TetheredInterfaceRequest :: android.permission.PERMISSION_MAINLINE_NETWORK_STACKandroid.permission.NETWORK_STACK
android.net.IpSecManager.addAddress(InetAddress,int)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager.removeAddress(InetAddress,int)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager.setUnderlyingNetwork(Network)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager.createIpSecTunnelInterface(InetAddress,InetAddress,Network)IpSecTunnelInterface :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager.applyTunnelModeTransform(IpSecTunnelInterface,int,IpSecTransform)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecTransform.buildTunnelModeTransform(InetAddress,IpSecManager.SecurityParameterIndex)IpSecTransform :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.NetworkPolicyManager.registerSubscriptionCallback(SubscriptionCallback)void :: android.permission.OBSERVE_NETWORK_POLICY
android.net.NetworkPolicyManager.unregisterSubscriptionCallback(SubscriptionCallback)void :: android.permission.OBSERVE_NETWORK_POLICY
android.net.NetworkPolicyManager.getRestrictBackgroundStatus(int)int :: android.permission.PERMISSION_MAINLINE_NETWORK_STACK
android.net.NetworkPolicyManager.isUidNetworkingBlocked(int,boolean)boolean :: android.permission.OBSERVE_NETWORK_POLICY
android.net.NetworkPolicyManager.isUidRestrictedOnMeteredNetworks(int)boolean :: android.permission.OBSERVE_NETWORK_POLICY
android.net.NetworkPolicyManager.getMultipathPreference(Network)int :: android.permission.PERMISSION_MAINLINE_NETWORK_STACK
android.net.NetworkPolicyManager.registerNetworkPolicyCallback(Executor,NetworkPolicyCallback)void :: android.permission.OBSERVE_NETWORK_POLICY
android.net.NetworkPolicyManager.unregisterNetworkPolicyCallback(NetworkPolicyCallback)void :: android.permission.OBSERVE_NETWORK_POLICY
android.net.NetworkScoreManager.getActiveScorerPackage()String :: android.permission.REQUEST_NETWORK_SCORESandroid.permission.SCORE_NETWORKS
android.net.NetworkScoreManager.getActiveScorer()NetworkScorerAppData :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.getAllValidScorers()List<NetworkScorerAppData> :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.updateScores(ScoredNetwork[])boolean :: android.permission.SCORE_NETWORKS
android.net.NetworkScoreManager.clearScores()boolean :: android.permission.REQUEST_NETWORK_SCORESandroid.permission.SCORE_NETWORKS
android.net.NetworkScoreManager.setActiveScorer(String)boolean :: android.permission.REQUEST_NETWORK_SCORESandroid.permission.SCORE_NETWORKS
android.net.NetworkScoreManager.disableScoring()void :: android.permission.REQUEST_NETWORK_SCORESandroid.permission.SCORE_NETWORKS
android.net.NetworkScoreManager.requestScores(NetworkKey[])boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.requestScores(Collection<NetworkKey>)boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.registerNetworkScoreCache(int,INetworkScoreCache)void :: android.permission. INetworkScoreCacheandroid.permission. intandroid.permission.REQUEST_NETWORK_SCORES)
    @Deprecated // migrate to registerNetworkScoreCache(int
android.net.NetworkScoreManager.registerNetworkScoreCache(int,INetworkScoreCache,int)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.unregisterNetworkScoreCache(int,INetworkScoreCache)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.registerNetworkScoreCallback(int,int,Executor,NetworkScoreCallback)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.isCallerActiveScorer(int)boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.PacProxyManager.addPacProxyInstalledListener(Executor,PacProxyInstalledListener)void :: android.permission.PERMISSION_MAINLINE_NETWORK_STACKandroid.permission.NETWORK_SETTINGSandroid.permission.NETWORK_STACK
android.net.PacProxyManager.removePacProxyInstalledListener(PacProxyInstalledListener)void :: android.permission.PERMISSION_MAINLINE_NETWORK_STACKandroid.permission.NETWORK_SETTINGSandroid.permission.NETWORK_STACK
android.net.PacProxyManager.setCurrentProxyScriptUrl(ProxyInfo)void :: android.permission.PERMISSION_MAINLINE_NETWORK_STACKandroid.permission.NETWORK_SETTINGSandroid.permission.NETWORK_STACK
android.net.VpnManager.factoryReset()void :: android.permission.NETWORK_SETTINGS
android.net.VpnManager.setAlwaysOnVpnPackageForUser(int,String,boolean,List<String>)boolean :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.VpnManager.getAlwaysOnVpnPackageForUser(int)String :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.VpnManager.isVpnLockdownEnabled(int)boolean :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.VpnManager.getVpnLockdownAllowlist(int)List<String> :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.VpnService.prepareAndAuthorize(Context)void :: android.permission.CONTROL_VPN
android.net.vcn.VcnManager.setVcnConfig(ParcelUuid,VcnConfig): :: android.permission."carrier privileges") // TODO (b/72967236
android.net.vcn.VcnManager.clearVcnConfig(ParcelUuid): :: android.permission."carrier privileges") // TODO (b/72967236
android.net.vcn.VcnManager.addVcnUnderlyingNetworkPolicyListener(Executor,VcnUnderlyingNetworkPolicyListener)void :: android.permission.NETWORK_FACTORY
android.net.vcn.VcnManager.getUnderlyingNetworkPolicy(NetworkCapabilities,LinkProperties)VcnUnderlyingNetworkPolicy :: android.permission.NETWORK_FACTORY
android.net.vcn.VcnManager.addVcnNetworkPolicyChangeListener(Executor,VcnNetworkPolicyChangeListener)void :: android.permission.NETWORK_FACTORY
android.net.vcn.VcnManager.removeVcnNetworkPolicyChangeListener(VcnNetworkPolicyChangeListener)void :: android.permission.NETWORK_FACTORY
android.net.vcn.VcnManager.applyVcnNetworkPolicy(NetworkCapabilities,LinkProperties)VcnNetworkPolicyResult :: android.permission.NETWORK_FACTORY
android.nfc.NfcAdapter.enable()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disable()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disable(boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.enableSecureNfc(boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.enableNdefPush()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disableNdefPush()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.addNfcUnlockHandler(NfcUnlockHandler,String[])boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.removeNfcUnlockHandler(NfcUnlockHandler)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.setControllerAlwaysOn(boolean)boolean :: android.permission.NFC_SET_CONTROLLER_ALWAYS_ON
android.nfc.NfcAdapter.isControllerAlwaysOn()boolean :: android.permission.NFC_SET_CONTROLLER_ALWAYS_ON
android.nfc.NfcAdapter.isControllerAlwaysOnSupported()boolean :: android.permission.NFC_SET_CONTROLLER_ALWAYS_ON
android.nfc.NfcAdapter.registerControllerAlwaysOnListener(Executor,ControllerAlwaysOnListener)void :: android.permission.NFC_SET_CONTROLLER_ALWAYS_ON
android.nfc.NfcAdapter.unregisterControllerAlwaysOnListener(ControllerAlwaysOnListener)void :: android.permission.NFC_SET_CONTROLLER_ALWAYS_ON
android.nfc.cardemulation.CardEmulation.unsetOffHostForService(ComponentName)boolean :: android.permission.NFC
android.nfc.cardemulation.CardEmulation.setOffHostForService(ComponentName,String)boolean :: android.permission.NFC
android.nfc.cardemulation.CardEmulation.getAidsForPreferredPaymentService()List<String> :: android.permission.NFC_PREFERRED_PAYMENT_INFO
android.nfc.cardemulation.CardEmulation.getRouteDestinationForPreferredPaymentService()String :: android.permission.NFC_PREFERRED_PAYMENT_INFO
android.nfc.cardemulation.CardEmulation.getDescriptionForPreferredPaymentService()CharSequence :: android.permission.NFC_PREFERRED_PAYMENT_INFO
android.os.BatteryManager.setChargingStateUpdateDelayMillis(int)boolean :: android.permission.POWER_SAVER
android.os.BatteryStatsManager.getBatteryUsageStats()BatteryUsageStats :: android.permission.BATTERY_STATS
android.os.BatteryStatsManager.getBatteryUsageStats(BatteryUsageStatsQuery)BatteryUsageStats :: android.permission.BATTERY_STATS
android.os.BatteryStatsManager.getBatteryUsageStats(List<BatteryUsageStatsQuery>)List<BatteryUsageStats> :: android.permission.BATTERY_STATS
android.os.BatteryStatsManager.mBatteryStats.noteWifiRssiChanged(newRssi)int :: android.permission.UPDATE_DEVICE_STATS)
    public void reportWifiRssiChanged(@IntRange(from = -127android.permission. to = 0
android.os.BatteryStatsManager.reportWifiOn()void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiOff()void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiState(int,String)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiScanStartedFromSource(WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiScanStoppedFromSource(WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.mBatteryStats.noteWifiBatchedScanStartedFromSource(ws,csph)int :: android.permission.
            @IntRange(from = 0android.permission.UPDATE_DEVICE_STATS)
    public void reportWifiBatchedScanStartedFromSource(@NonNull WorkSource ws
android.os.BatteryStatsManager.reportWifiBatchedScanStoppedFromSource(WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.getCellularBatteryStats()CellularBatteryStats :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.getWifiBatteryStats()WifiBatteryStats :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportFullWifiLockAcquiredFromSource(WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportFullWifiLockReleasedFromSource(WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiSupplicantStateChanged(int,boolean)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiMulticastEnabled(WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiMulticastDisabled(WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportMobileRadioPowerState(boolean,int)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiRadioPowerState(boolean,int)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportNetworkInterfaceForTransports(String,int[])void :: android.permission.PERMISSION_MAINLINE_NETWORK_STACKandroid.permission.NETWORK_STACK
android.os.BatteryStatsManager.setChargerAcOnline(boolean,boolean)void :: android.permission.DEVICE_POWER
android.os.BatteryStatsManager.setBatteryLevel(int,boolean)void :: android.permission.DEVICE_POWER
android.os.BatteryStatsManager.unplugBattery(boolean)void :: android.permission.DEVICE_POWER
android.os.BatteryStatsManager.resetBattery(boolean)void :: android.permission.DEVICE_POWER
android.os.BatteryStatsManager.suspendBatteryInput()void :: android.permission.DEVICE_POWER
android.os.BugreportManager.startBugreport(ParcelFileDescriptor,ParcelFileDescriptor,BugreportParams,Executor,BugreportCallback)void :: android.permission.DUMP
android.os.BugreportManager.requestBugreport(BugreportParams,CharSequence,CharSequence)void :: android.permission.DUMP
android.os.Build.getSerial()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.os.DeviceIdleManager.endIdle(String)void :: android.permission.DEVICE_POWER
android.os.DropBoxManager.getNextEntry(String,long)Entry :: android.permission.READ_LOGSandroid.permission.PACKAGE_USAGE_STATS
android.os.IncidentManager.reportIncident(IncidentReportArgs)void :: android.permission.DUMPandroid.permission.PACKAGE_USAGE_STATS
android.os.IncidentManager.requestAuthorization(int,String,int,AuthListener)void :: android.permission.REQUEST_INCIDENT_REPORT_APPROVAL
android.os.IncidentManager.requestAuthorization(int,String,int,Executor,AuthListener)void :: android.permission.REQUEST_INCIDENT_REPORT_APPROVAL
android.os.IncidentManager.cancelAuthorization(AuthListener)void :: android.permission.REQUEST_INCIDENT_REPORT_APPROVAL
android.os.IncidentManager.getPendingReports()List<PendingReport> :: android.permission.APPROVE_INCIDENT_REPORTS
android.os.IncidentManager.approveReport(Uri)void :: android.permission.APPROVE_INCIDENT_REPORTS
android.os.IncidentManager.denyReport(Uri)void :: android.permission.APPROVE_INCIDENT_REPORTS
android.os.IncidentManager.getIncidentReportList(String)List<Uri> :: android.permission.DUMPandroid.permission.PACKAGE_USAGE_STATS
android.os.IncidentManager.getIncidentReport(Uri)IncidentReport :: android.permission.DUMPandroid.permission.PACKAGE_USAGE_STATS
android.os.IncidentManager.deleteIncidentReports(Uri)void :: android.permission.DUMPandroid.permission.PACKAGE_USAGE_STATS
android.os.PowerExemptionManager.addToPermanentAllowList(String)void :: android.permission.DEVICE_POWER
android.os.PowerExemptionManager.addToPermanentAllowList(List<String>)void :: android.permission.DEVICE_POWER
android.os.PowerExemptionManager.getAllowListedAppIds(boolean)int[] :: android.permission.DEVICE_POWER
android.os.PowerExemptionManager.removeFromPermanentAllowList(String)void :: android.permission.DEVICE_POWER
android.os.PowerExemptionManager.addToTemporaryAllowList(String,int,String,long)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.os.PowerExemptionManager.addToTemporaryAllowListForEvent(String,int,String,int)long :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.os.PowerManager.userActivity(long,int,int)void :: android.permission.USER_ACTIVITYandroid.permission.DEVICE_POWER
android.os.PowerManager.dream(long)void :: android.permission.READ_DREAM_STATEandroid.permission.WRITE_DREAM_STATE
android.os.PowerManager.reboot(String)void :: android.permission.REBOOT
android.os.PowerManager.rebootSafeMode()void :: android.permission.REBOOT
android.os.PowerManager.setPowerSaveModeEnabled(boolean)boolean :: android.permission.POWER_SAVERandroid.permission.DEVICE_POWER
android.os.PowerManager.setFullPowerSavePolicy(BatterySaverPolicyConfig)boolean :: android.permission.POWER_SAVERandroid.permission.DEVICE_POWER
android.os.PowerManager.setDynamicPowerSaveHint(boolean,int)boolean :: android.permission.POWER_SAVER
android.os.PowerManager.setAdaptivePowerSavePolicy(BatterySaverPolicyConfig)boolean :: android.permission.POWER_SAVERandroid.permission.DEVICE_POWER
android.os.PowerManager.setAdaptivePowerSaveEnabled(boolean)boolean :: android.permission.POWER_SAVERandroid.permission.DEVICE_POWER
android.os.PowerManager.setBatteryDischargePrediction(Duration,boolean)void :: android.permission.BATTERY_PREDICTIONandroid.permission.DEVICE_POWER
android.os.PowerManager.isAmbientDisplayAvailable()boolean :: android.permission.READ_DREAM_STATE
android.os.PowerManager.suppressAmbientDisplay(String,boolean)void :: android.permission.WRITE_DREAM_STATE
android.os.PowerManager.isAmbientDisplaySuppressedForToken(String)boolean :: android.permission.READ_DREAM_STATE
android.os.PowerManager.isAmbientDisplaySuppressed()boolean :: android.permission.READ_DREAM_STATE
android.os.PowerManager.isAmbientDisplaySuppressedForTokenByApp(String,int)boolean :: android.permission.READ_DREAM_STATEandroid.permission.READ_DREAM_SUPPRESSION
android.os.PowerManager.forceSuspend()boolean :: android.permission.DEVICE_POWER
android.os.PowerWhitelistManager.addToWhitelist(String)void :: android.permission.DEVICE_POWER
android.os.PowerWhitelistManager.addToWhitelist(List<String>)void :: android.permission.DEVICE_POWER
android.os.PowerWhitelistManager.removeFromWhitelist(String)void :: android.permission.DEVICE_POWER
android.os.PowerWhitelistManager.whitelistAppTemporarily(String,long,int,String)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.os.PowerWhitelistManager.whitelistAppTemporarily(String,long)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.os.PowerWhitelistManager.whitelistAppTemporarilyForEvent(String,int,String)long :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.os.PowerWhitelistManager.whitelistAppTemporarilyForEvent(String,int,int,String)long :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.os.RecoverySystem.processPackage(Context,File,ProgressListener,Handler)void :: android.permission.RECOVERY
android.os.RecoverySystem.processPackage(Context,File,ProgressListener)void :: android.permission.RECOVERY
android.os.RecoverySystem.installPackage(Context,File)void :: android.permission.RECOVERY
android.os.RecoverySystem.installPackage(Context,File,boolean)void :: android.permission.RECOVERY
android.os.RecoverySystem.prepareForUnattendedUpdate(Context,String,IntentSender)void :: android.permission.REBOOTandroid.permission.RECOVERY
android.os.RecoverySystem.clearPrepareForUnattendedUpdate(Context)void :: android.permission.REBOOTandroid.permission.RECOVERY
android.os.RecoverySystem.rebootAndApply(Context,String,String)void :: android.permission.RECOVERY
android.os.RecoverySystem.isPreparedForUnattendedUpdate(Context)boolean :: android.permission.REBOOTandroid.permission.RECOVERY
android.os.RecoverySystem.rebootAndApply(Context,String,boolean)int :: android.permission.REBOOTandroid.permission.RECOVERY
android.os.RecoverySystem.scheduleUpdateOnBoot(Context,File)void :: android.permission.RECOVERY
android.os.RecoverySystem.cancelScheduledUpdate(Context)void :: android.permission.RECOVERY
android.os.RecoverySystem.rebootWipeAb(Context,File,String)void :: android.permission.REBOOTandroid.permission.RECOVERY
android.os.SystemConfigManager.getDisabledUntilUsedPreinstalledCarrierApps()Set<String> :: android.permission.READ_CARRIER_APP_INFO
android.os.SystemConfigManager.getDisabledUntilUsedPreinstalledCarrierAssociatedApps()Map<String, :: android.permission.READ_CARRIER_APP_INFO
android.os.SystemConfigManager.getDisabledUntilUsedPreinstalledCarrierAssociatedAppEntries()Map<String, :: android.permission.READ_CARRIER_APP_INFO
android.os.SystemConfigManager.getSystemPermissionUids(String)int[] :: android.permission.GET_RUNTIME_PERMISSIONS
android.os.SystemUpdateManager.retrieveSystemUpdateInfo()Bundle :: android.permission.android.permission.READ_SYSTEM_UPDATE_INFOandroid.permission.RECOVERY
android.os.SystemUpdateManager.updateSystemUpdateInfo(PersistableBundle)void :: android.permission.RECOVERY
android.os.UserManager.getUserSwitchability()int :: android.permission.READ_PHONE_STATEandroid.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS
android.os.UserManager.getUserSwitchability(UserHandle)int :: android.permission.READ_PHONE_STATEandroid.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS
android.os.UserManager.getUserType()String :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.getUserName()String :: android.permission.GET_ACCOUNTS_PRIVILEGEDandroid.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.isUserNameSet()boolean :: android.permission.GET_ACCOUNTS_PRIVILEGEDandroid.permission.MANAGE_USERS
android.os.UserManager.isPrimaryUser()boolean :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.isAdminUser()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isUserAdmin(int)boolean :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.isUserOfType(String)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isRestrictedProfile()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isRestrictedProfile(UserHandle)boolean :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.canHaveRestrictedProfile()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.hasRestrictedProfiles()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.getRestrictedProfileParent()UserHandle :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.isGuestUser(int)boolean :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.isGuestUser()boolean :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.isProfile()boolean :: android.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isManagedProfile(int)boolean :: android.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isCloneProfile()boolean :: android.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isEphemeralUser()boolean :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.isUserEphemeral(int)boolean :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.isUserRunning(UserHandle)boolean :: android.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isUserRunning(int)boolean :: android.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isUserRunningOrStopping(UserHandle)boolean :: android.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isUserUnlocked(UserHandle)boolean :: android.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isUserUnlocked(int)boolean :: android.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isUserUnlockingOrUnlocked(UserHandle)boolean :: android.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isUserUnlockingOrUnlocked(int)boolean :: android.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS
android.os.UserManager.getUserInfo(int)UserInfo :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.getUserRestrictionSource(String,UserHandle)int :: android.permission.MANAGE_USERS
android.os.UserManager.getUserRestrictionSources(String,UserHandle)List<EnforcingUser> :: android.permission.MANAGE_USERS
android.os.UserManager.getUserRestrictions(UserHandle)Bundle :: android.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS
android.os.UserManager.hasBaseUserRestriction(String,UserHandle)boolean :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.setUserRestriction(String,boolean)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserRestriction(String,boolean,UserHandle)void :: android.permission.MANAGE_USERS
android.os.UserManager.hasUserRestrictionForUser(String,UserHandle)boolean :: android.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS
android.os.UserManager.createUser(String,String,int)UserInfo :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.preCreateUser(String)UserInfo :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.createGuest(Context,String)UserInfo :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.findCurrentGuestUser()UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.createProfile(String,String,Set<String>)UserHandle :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.createProfileForUser(String,int,int)UserInfo :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.createProfileForUser(String,String,int,int)UserInfo :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.createProfileForUser(String,String,int,int,String[])UserInfo :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.createProfileForUserEvenWhenDisallowed(String,String,int,int,String[])UserInfo :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.createRestrictedProfile(String)UserInfo :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.getPreInstallableSystemPackages(String)Set<String> :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.getSeedAccountName()String :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountType()String :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountOptions()PersistableBundle :: android.permission.MANAGE_USERS
android.os.UserManager.setSeedAccountData(int,String,String,PersistableBundle)void :: android.permission.MANAGE_USERS
android.os.UserManager.clearSeedAccountData()void :: android.permission.MANAGE_USERS
android.os.UserManager.markGuestForDeletion(int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.setUserEnabled(int)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserAdmin(int)void :: android.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS_FULL
android.os.UserManager.evictCredentialEncryptionKey(int)void :: android.permission.MANAGE_USERS
android.os.UserManager.getUserCount()int :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.getUsers()List<UserInfo> :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.getAliveUsers()List<UserInfo> :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.getUsers(boolean)List<UserInfo> :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.getUsers(boolean,boolean,boolean)List<UserInfo> :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.getUserHandles(boolean)List<UserHandle> :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.getSerialNumbersOfUsers(boolean)long[] :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.getUserAccount(int)String :: android.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS_FULL
android.os.UserManager.setUserAccount(int,String)void :: android.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS_FULL
android.os.UserManager.getPrimaryUser()UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.canAddMoreUsers()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.canAddMoreManagedProfiles(int,boolean)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.canAddMoreProfilesToUser(String,int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.getProfiles(int)List<UserInfo> :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.isSameProfileGroup(UserHandle,UserHandle)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isSameProfileGroup(int,int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.getEnabledProfiles(int)List<UserInfo> :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.getEnabledProfiles()List<UserHandle> :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.getAllProfiles()List<UserHandle> :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.getProfiles(boolean)List<UserHandle> :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.getProfileIds(int,boolean)int[] :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.getProfileIdsWithDisabled(int)int[] :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.getEnabledProfileIds(int)int[] :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.getCredentialOwnerProfile(int)int :: android.permission.MANAGE_USERS
android.os.UserManager.getProfileParent(int)UserInfo :: android.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS
android.os.UserManager.getProfileParent(UserHandle)UserHandle :: android.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS
android.os.UserManager.requestQuietModeEnabled(boolean,UserHandle)boolean :: android.permission.MODIFY_QUIET_MODEandroid.permission.MANAGE_USERS
android.os.UserManager.requestQuietModeEnabled(boolean,UserHandle,IntentSender)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isMediaSharedWithParent()boolean :: android.permission.MANAGE_USERSandroid.permission.INTERACT_ACROSS_USERS
android.os.UserManager.removeUser(int)boolean :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.removeUser(UserHandle)boolean :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.removeUserEvenWhenDisallowed(int)boolean :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.removeUserOrSetEphemeral(int,boolean)int :: android.permission.MANAGE_USERSandroid.permission.CREATE_USERS
android.os.UserManager.setUserName(int,String)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserName(String)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserIcon(int,Bitmap)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserIcon(Bitmap)void :: android.permission.MANAGE_USERS
android.os.UserManager.getUserIcon(int)Bitmap :: android.permission.GET_ACCOUNTS_PRIVILEGEDandroid.permission.MANAGE_USERS
android.os.UserManager.getUserIcon()Bitmap :: android.permission.GET_ACCOUNTS_PRIVILEGEDandroid.permission.MANAGE_USERS
android.os.UserManager.setDefaultGuestRestrictions(Bundle)void :: android.permission.MANAGE_USERS
android.os.UserManager.getDefaultGuestRestrictions()Bundle :: android.permission.MANAGE_USERS
android.os.UserManager.someUserHasSeedAccount(String,String)boolean :: android.permission.MANAGE_USERS
android.os.Vibrator.setAlwaysOnEffect(int,VibrationEffect,AudioAttributes)boolean :: android.permission.VIBRATE_ALWAYS_ON
android.os.Vibrator.setAlwaysOnEffect(int,String,int,VibrationEffect,AudioAttributes)boolean :: android.permission.VIBRATE_ALWAYS_ON
android.os.Vibrator.vibrate(long)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long,AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long[],int)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long[],int,AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(VibrationEffect)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(VibrationEffect,AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(int,String,VibrationEffect,String,AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(int,String,VibrationEffect,String,VibrationAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.cancel()void :: android.permission.VIBRATE
android.os.Vibrator.cancel(int)void :: android.permission.VIBRATE
android.os.Vibrator.isVibrating()boolean :: android.permission.ACCESS_VIBRATOR_STATE
android.os.Vibrator.addVibratorStateListener(OnVibratorStateChangedListener)void :: android.permission.ACCESS_VIBRATOR_STATE
android.os.Vibrator.addVibratorStateListener(Executor,OnVibratorStateChangedListener)void :: android.permission.ACCESS_VIBRATOR_STATE
android.os.Vibrator.removeVibratorStateListener(OnVibratorStateChangedListener)void :: android.permission.ACCESS_VIBRATOR_STATE
android.os.VibratorManager.setAlwaysOnEffect(int,String,int,CombinedVibration,VibrationAttributes)boolean :: android.permission.VIBRATE_ALWAYS_ON
android.os.VibratorManager.vibrate(CombinedVibration)void :: android.permission.VIBRATE
android.os.VibratorManager.vibrate(CombinedVibration,VibrationAttributes)void :: android.permission.VIBRATE
android.os.VibratorManager.vibrate(int,String,CombinedVibration,String,VibrationAttributes)void :: android.permission.VIBRATE
android.os.VibratorManager.cancel()void :: android.permission.VIBRATE
android.os.VibratorManager.cancel(int)void :: android.permission.VIBRATE
android.os.image.DynamicSystemClient.bind()void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.image.DynamicSystemClient.unbind()void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.image.DynamicSystemClient.start(Uri,long)void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.image.DynamicSystemClient.start(Uri,long,long)void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.setAshmem(ParcelFileDescriptor,long)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.submitFromAshmem(int)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.getAvbPublicKey(AvbPublicKey)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.commit()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.startInstallation(String)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.createPartition(String,long,boolean)Session :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.closePartition()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.finishInstallation()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.getInstallationProgress()GsiProgress :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.abort()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.isInUse()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.isInstalled()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.isEnabled()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.remove()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.setEnable(boolean,boolean)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.suggestScratchSize()long :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.storage.StorageManager.getManageSpaceActivityIntent(String,int)PendingIntent :: android.permission.MANAGE_EXTERNAL_STORAGE
android.os.storage.StorageManager.getExternalStorageMountMode(int,String)int :: android.permission.WRITE_MEDIA_STORAGE
android.permission.LegacyPermissionManager.grantDefaultPermissionsToLuiApp(String,UserHandle,Executor,Consumer<Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.LegacyPermissionManager.revokeDefaultPermissionsFromLuiApps(String[],UserHandle,Executor,Consumer<Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.LegacyPermissionManager.grantDefaultPermissionsToEnabledImsServices(String[],UserHandle,Executor,Consumer<Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.LegacyPermissionManager.grantDefaultPermissionsToEnabledTelephonyDataServices(String[],UserHandle,Executor,Consumer<Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.LegacyPermissionManager.revokeDefaultPermissionsFromDisabledTelephonyDataServices(String[],UserHandle,Executor,Consumer<Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.LegacyPermissionManager.grantDefaultPermissionsToEnabledCarrierApps(String[],UserHandle,Executor,Consumer<Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.PermissionControllerManager.revokeRuntimePermissions(Map<String,List<String>>,boolean,int,Executor,OnRevokeRuntimePermissionsCallback)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.setRuntimePermissionGrantStateByDeviceAdmin(String,AdminPermissionControlParams,Executor,Consumer<Boolean>)void :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICYandroid.permission.GRANT_RUNTIME_PERMISSIONSandroid.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.getRuntimePermissionBackup(UserHandle,Executor,Consumer<byte[]>)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.stageAndApplyRuntimePermissionsBackup(byte[],UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONSandroid.permission.RESTORE_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.applyStagedRuntimePermissionBackup(String,UserHandle,Executor,Consumer<Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONSandroid.permission.RESTORE_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.getAppPermissions(String,OnGetAppPermissionResultCallback,Handler)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.revokeRuntimePermission(String,String)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.countPermissionApps(List<String>,int,OnCountPermissionAppsResultCallback,Handler)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.getPermissionUsages(boolean,long,Executor,OnPermissionUsageResultCallback)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.grantOrUpgradeDefaultRuntimePermissions(Executor,Consumer<Boolean>)void :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.permission.PermissionControllerManager.getPrivilegesDescriptionStringForProfile(String,Executor,Consumer<CharSequence>)void :: android.permission.MANAGE_COMPANION_DEVICES
android.permission.PermissionControllerManager.notifyOneTimePermissionSessionTimeout(String)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionControllerService.getPrivilegesDescriptionStringForProfile(String)String :: android.permission.MANAGE_COMPANION_DEVICES
android.permission.PermissionManager.if(DEBUG_TRACE_GRANTS,permissionName,user.getIdentifier){ :: android.permission.
            @NonNull String permissionNameandroid.permission.GRANT_RUNTIME_PERMISSIONS)
    //@SystemApi
    public void grantRuntimePermission(@NonNull String packageNameandroid.permission. @NonNull UserHandle user
android.permission.PermissionManager.if(DEBUG_TRACE_PERMISSION_UPDATES,permName,user.getIdentifier){ :: android.permission.REVOKE_RUNTIME_PERMISSIONS)
    //@SystemApi
    public void revokeRuntimePermission(@NonNull String packageNameandroid.permission. @NonNull UserHandle userandroid.permission. @Nullable String reasonandroid.permission.
            @NonNull String permName
android.permission.PermissionManager.mPermissionManager.getPermissionFlags(packageName,permissionName,user.getIdentifier){ :: android.permission.GET_RUNTIME_PERMISSIONSandroid.permission.GRANT_RUNTIME_PERMISSIONSandroid.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionManager.if(DEBUG_TRACE_PERMISSION_UPDATES,permissionName,user.getIdentifier){ :: android.permission.GRANT_RUNTIME_PERMISSIONSandroid.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionManager.getAllowlistedRestrictedPermissions(String,int)Set<String> :: android.permission.
            conditional = trueandroid.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.permission.PermissionManager.addAllowlistedRestrictedPermission(String,String,int)boolean :: android.permission.
            conditional = trueandroid.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.permission.PermissionManager.removeAllowlistedRestrictedPermission(String,String,int)boolean :: android.permission.
            conditional = trueandroid.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.permission.PermissionManager.isAutoRevokeExempted(String)boolean :: android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONSandroid.permission.
            conditional = true
android.permission.PermissionManager.setAutoRevokeExempted(String,boolean)boolean :: android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONSandroid.permission.
            conditional = true
android.permission.PermissionManager.addOnPermissionsChangeListener(PackageManager.OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.permission.PermissionManager.removeOnPermissionsChangeListener(PackageManager.OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.permission.PermissionManager.getRuntimePermissionsVersion()int :: android.permission.UPGRADE_RUNTIME_PERMISSIONSandroid.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.permission.PermissionManager.mPackageManager.setRuntimePermissionsVersion(version,mContext.getUserId)int :: android.permission.UPGRADE_RUNTIME_PERMISSIONSandroid.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.permission.PermissionManager.getIndicatorAppOpUsageData()List<PermGroupUsage> :: android.permission.GET_APP_OPS_STATS
android.permission.PermissionManager.getIndicatorAppOpUsageData(boolean)List<PermGroupUsage> :: android.permission.GET_APP_OPS_STATS
android.permission.PermissionManager.getAutoRevokeExemptionRequestedPackages()Set<String> :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.permission.PermissionManager.getAutoRevokeExemptionGrantedPackages()Set<String> :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.permission.PermissionManager.startOneTimePermissionSession(String,long,int,int)void :: android.permission.MANAGE_ONE_TIME_PERMISSION_SESSIONS
android.permission.PermissionManager.stopOneTimePermissionSession(String)void :: android.permission.MANAGE_ONE_TIME_PERMISSION_SESSIONS
android.print.PrintManager.addPrintServicesChangeListener(PrintServicesChangeListener,Handler)void :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.removePrintServicesChangeListener(PrintServicesChangeListener)void :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.getPrintServices(int)List<PrintServiceInfo> :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.addPrintServiceRecommendationsChangeListener(PrintServiceRecommendationsChangeListener,Handler)void :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.print.PrintManager.removePrintServiceRecommendationsChangeListener(PrintServiceRecommendationsChangeListener)void :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.print.PrintManager.getPrintServiceRecommendations()List<RecommendationInfo> :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.provider.CallLog.storeCallComposerPicture(Context,InputStream,Executor,OutcomeReceiver<Uri,CallComposerLoggingException>)void :: android.permission.WRITE_CALL_LOGandroid.permission.INTERACT_ACROSS_USERS
android.provider.ContactsContract.addSimAccount(ContentResolver,String,String,int,int)void :: android.permission.MANAGE_SIM_ACCOUNTS"
android.provider.ContactsContract.removeSimAccounts(ContentResolver,int)void :: android.permission.MANAGE_SIM_ACCOUNTS"
android.provider.DeviceConfig.getProperty(String,String)String :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getProperties(String,String)Properties :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getString(String,String,String)String :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getBoolean(String,String,boolean)boolean :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getInt(String,String,int)int :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getLong(String,String,long)long :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getFloat(String,String,float)float :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.setProperty(String,String,String,boolean)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.setProperties(Properties)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.resetToDefaults(int,String)void :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.setSyncDisabled(int)void :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.isSyncDisabled()boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.addOnPropertiesChangedListener(String,Executor,OnPropertiesChangedListener)void :: android.permission.READ_DEVICE_CONFIG
android.provider.Settings.putString(ContentResolver,String,String,boolean)boolean :: android.permission.MODIFY_SETTINGS_OVERRIDEABLE_BY_RESTORE
android.provider.Settings.putString(ContentResolver,String,String,String,boolean)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings.resetToDefaults(ContentResolver,String)void :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings.putString(ContentResolver,String,String,String,boolean,boolean)boolean :: android.permission.MODIFY_SETTINGS_OVERRIDEABLE_BY_RESTORE
android.provider.Settings.getString(ContentResolver,String)String :: android.permission.READ_DEVICE_CONFIG
android.provider.Settings.getStrings(ContentResolver,String,List<String>)Map<String, :: android.permission.READ_DEVICE_CONFIG
android.provider.Settings.setStrings(ContentResolver,String,Map<String,String>)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings.resetToDefaults(ContentResolver,int,String)void :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings.setSyncDisabled(ContentResolver,int)void :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings.isSyncDisabled(ContentResolver)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings.registerMonitorCallback(ContentResolver,RemoteCallback)void :: android.permission.MONITOR_DEVICE_CONFIG_ACCESS
android.se.omapi.Reader.reset()boolean :: android.permission.SECURE_ELEMENT_PRIVILEGED_OPERATION
android.security.FileIntegrityManager.isAppSourceCertificateTrusted(X509Certificate)boolean :: android.permission.REQUEST_INSTALL_PACKAGESandroid.permission.INSTALL_PACKAGES
android.security.KeyChain.setCredentialManagementApp(Context,String,AppUriAuthenticationPolicy)boolean :: android.permission.MANAGE_CREDENTIAL_MANAGEMENT_APP
android.security.KeyChain.removeCredentialManagementApp(Context)boolean :: android.permission.
            conditional = trueandroid.permission.MANAGE_CREDENTIAL_MANAGEMENT_APP
android.security.keystore.AttestationUtils.attestDeviceIds(Context,int[],byte[])X509Certificate[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.security.keystore.recovery.RecoveryController.getInstance(Context)RecoveryController :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.isRecoverableKeyStoreEnabled(Context)boolean :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.initRecoveryService(String,byte[],byte[])void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getKeyChainSnapshot()KeyChainSnapshot :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setSnapshotCreatedPendingIntent(PendingIntent)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setServerParams(byte[])void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getAliases()List<String> :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setRecoveryStatus(String,int)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRecoveryStatus(String)int :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setRecoverySecretTypes(int[])void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRecoverySecretTypes()int[] :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.generateKey(String)Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.generateKey(String,byte[])Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.importKey(String,byte[])Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.importKey(String,byte[],byte[])Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getKey(String)Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.removeKey(String)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.createRecoverySession()RecoverySession :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRootCertificates()Map<String, :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.newInstance(RecoveryController)RecoverySession :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.start(String,CertPath,byte[],byte[],List<KeyChainProtectionParams>)byte[] :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.recoverKeyChainSnapshot(byte[],List<WrappedApplicationKey>)Map<String, :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.close()void :: android.permission.RECOVER_KEYSTORE
android.service.dataloader.DataLoaderService.writeData(String,long,long,ParcelFileDescriptor)void :: android.permission.INSTALL_PACKAGES
android.service.oemlock.OemLockManager.getLockName()String :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.setOemUnlockAllowedByCarrier(boolean,byte[])void :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.isOemUnlockAllowedByCarrier()boolean :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.setOemUnlockAllowedByUser(boolean)void :: android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.isOemUnlockAllowedByUser()boolean :: android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.getDataBlockSize()int :: android.permission.ACCESS_PDB_STATE
android.service.persistentdata.PersistentDataBlockManager.wipe()void :: android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.setOemUnlockEnabled(boolean)void :: android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.getOemUnlockEnabled()boolean :: android.permission.READ_OEM_UNLOCK_STATEandroid.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.getFlashLockState()int :: android.permission.READ_OEM_UNLOCK_STATEandroid.permission.OEM_UNLOCK_STATE
android.service.voice.AlwaysOnHotwordDetector.triggerHardwareRecognitionEventForTest(int,int,boolean,int,int,int,boolean,AudioFormat,byte[])void :: android.permission.CAPTURE_AUDIO_HOTWORDandroid.permission.RECORD_AUDIO
android.service.voice.AlwaysOnHotwordDetector.startRecognition(int)boolean :: android.permission.CAPTURE_AUDIO_HOTWORDandroid.permission.RECORD_AUDIO
android.service.voice.AlwaysOnHotwordDetector.startRecognition()boolean :: android.permission.CAPTURE_AUDIO_HOTWORDandroid.permission.RECORD_AUDIO
android.service.voice.AlwaysOnHotwordDetector.stopRecognition()boolean :: android.permission.CAPTURE_AUDIO_HOTWORDandroid.permission.RECORD_AUDIO
android.service.voice.AlwaysOnHotwordDetector.setParameter(int,int)int :: android.permission.CAPTURE_AUDIO_HOTWORDandroid.permission.RECORD_AUDIO
android.service.voice.AlwaysOnHotwordDetector.getParameter(int)int :: android.permission.CAPTURE_AUDIO_HOTWORDandroid.permission.RECORD_AUDIO
android.service.voice.AlwaysOnHotwordDetector.queryParameter(int)ModelParamRange :: android.permission.CAPTURE_AUDIO_HOTWORDandroid.permission.RECORD_AUDIO
android.service.voice.HotwordDetector.startRecognition()boolean :: android.permission.CAPTURE_AUDIO_HOTWORDandroid.permission.RECORD_AUDIO
android.service.voice.SoftwareHotwordDetector.startRecognition()boolean :: android.permission.RECORD_AUDIO
android.service.voice.SoftwareHotwordDetector.stopRecognition()boolean :: android.permission.RECORD_AUDIO
android.service.voice.VoiceInteractionService.createAlwaysOnHotwordDetector(SuppressLint)AlwaysOnHotwordDetector :: android.permission.MANAGE_HOTWORD_DETECTION
android.service.voice.VoiceInteractionService.createHotwordDetector(PersistableBundle,SharedMemory,HotwordDetector.Callback)HotwordDetector :: android.permission.MANAGE_HOTWORD_DETECTION
android.service.voice.VoiceInteractionService.createKeyphraseModelManager()KeyphraseModelManager :: android.permission.MANAGE_VOICE_KEYPHRASES
android.speech.SpeechRecognizer.setTemporaryOnDeviceRecognizer(ComponentName)void :: android.permission.MANAGE_SPEECH_RECOGNITION
android.telecom.CallScreeningService.setShouldScreenCallViaAudioProcessing(boolean)Builder :: android.permission.CAPTURE_AUDIO_OUTPUT
android.telecom.Conference.setConferenceState(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Conference.setCallDirection(int)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Conference.setAddress(Uri,int)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Connection.setConnectionStartElapsedRealtimeMillis(long)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Connection.onCallFilteringCompleted(CallFilteringCompletionInfo)void :: android.permission.READ_CONTACTS
android.telecom.PhoneAccount.setGroupId(String)Builder :: android.permission.MODIFY_PHONE_STATE
android.telecom.RemoteConnection.onCallFilteringCompleted(Connection.CallFilteringCompletionInfo)void :: android.permission.READ_CONTACTS
android.telecom.TelecomManager.getDefaultOutgoingPhoneAccount(String)PhoneAccountHandle :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getUserSelectedOutgoingPhoneAccount()PhoneAccountHandle :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.setUserSelectedOutgoingPhoneAccount(PhoneAccountHandle)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.getPhoneAccountsSupportingScheme(String)List<PhoneAccountHandle> :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getCallCapablePhoneAccounts()List<PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getSelfManagedPhoneAccounts()List<PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getCallCapablePhoneAccounts(boolean)List<PhoneAccountHandle> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.getDefaultDialerPackage(UserHandle)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.setDefaultDialer(String)boolean :: android.permission.WRITE_SECURE_SETTINGSandroid.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.isVoiceMailNumber(PhoneAccountHandle,String)boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getVoiceMailNumber(PhoneAccountHandle)String :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getLine1Number(PhoneAccountHandle)String :: android.permission.READ_PHONE_STATEandroid.permission.READ_SMSandroid.permission.READ_PHONE_NUMBERS
android.telecom.TelecomManager.isInCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isInManagedCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getCallState()int :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isRinging()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PHONE_STATE
android.telecom.TelecomManager.endCall()boolean :: android.permission.ANSWER_PHONE_CALLS
android.telecom.TelecomManager.acceptRingingCall()void :: android.permission.ANSWER_PHONE_CALLSandroid.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.acceptRingingCall(int)void :: android.permission.ANSWER_PHONE_CALLSandroid.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.silenceRinger()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.isTtySupported()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getCurrentTtyMode()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.handleMmi(String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.handleMmi(String,PhoneAccountHandle)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.getAdnUriForPhoneAccount(PhoneAccountHandle)Uri :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.cancelMissedCallsNotification()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.showInCallScreen(boolean)void :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.placeCall(Uri,Bundle)void :: android.permission.CALL_PHONEandroid.permission.MANAGE_OWN_CALLS
android.telecom.TelecomManager.startConference(List<Uri>,Bundle)void :: android.permission.CALL_PHONE
android.telecom.TelecomManager.enablePhoneAccount(PhoneAccountHandle,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.dumpAnalytics()TelecomAnalytics :: android.permission.DUMP
android.telecom.TelecomManager.isInEmergencyCall()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.AnomalyReporter.initialize(Context)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.CarrierConfigManager.overrideConfig(int,PersistableBundle)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.CarrierConfigManager.overrideConfig(int,PersistableBundle,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.CarrierConfigManager.updateConfigForPhoneId(int,String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.CarrierConfigManager.getDefaultCarrierServicePackageName()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.PhoneStateListener.onMessageWaitingIndicatorChanged(boolean)void :: android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onCallForwardingIndicatorChanged(boolean)void :: android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onCellLocationChanged(CellLocation)void :: android.permission.ACCESS_FINE_LOCATION
android.telephony.PhoneStateListener.onCallStateChanged(int,String)void :: android.permission.READ_PHONE_STATEandroid.permission. conditional = true
android.telephony.PhoneStateListener.onCellInfoChanged(List<CellInfo>)void :: android.permission.READ_PHONE_STATEandroid.permission.ACCESS_FINE_LOCATION
android.telephony.PhoneStateListener.onPreciseCallStateChanged(PreciseCallState)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onCallDisconnectCauseChanged(int,int)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onImsCallDisconnectCauseChanged(ImsReasonInfo)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onPreciseDataConnectionStateChanged(PreciseDataConnectionState)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onSrvccStateChanged(int)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.PhoneStateListener.onVoiceActivationStateChanged(int)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.PhoneStateListener.onDisplayInfoChanged(TelephonyDisplayInfo)void :: android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onEmergencyNumberListChanged(Map<Integer,List<EmergencyNumber>>)void :: android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onOutgoingEmergencyCall(EmergencyNumber)void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.PhoneStateListener.onOutgoingEmergencyCall(EmergencyNumber,int)void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.PhoneStateListener.onOutgoingEmergencySms(EmergencyNumber)void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.PhoneStateListener.onActiveDataSubscriptionIdChanged(int)void :: android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onCallAttributesChanged(CallAttributes)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onRadioPowerStateChanged(int)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.PhoneStateListener.onRegistrationFailed(CellIdentity,String,int,int,int)void :: android.permission.READ_PRECISE_PHONE_STATEandroid.permission.ACCESS_FINE_LOCATION
android.telephony.PhoneStateListener.onBarringInfoChanged(BarringInfo)void :: android.permission.READ_PRECISE_PHONE_STATEandroid.permission.ACCESS_FINE_LOCATION
android.telephony.SmsManager.sendTextMessageWithoutPersisting(String,String,String,PendingIntent,PendingIntent)void :: android.permission.MODIFY_PHONE_STATEandroid.permission.SEND_SMS
android.telephony.SmsManager.sendMultipartTextMessageWithoutPersisting(String,String,List<String>,List<PendingIntent>,List<PendingIntent>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.copyMessageToIcc(byte[],byte[],int)boolean :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.deleteMessageFromIcc(int)boolean :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.updateMessageOnIcc(int,int,byte[])boolean :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.getMessagesFromIcc()List<SmsMessage> :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.getSmsCapacityOnIcc()int :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PHONE_STATE
android.telephony.SmsManager.getSmsMessagesForFinancialApp(Bundle,Executor,FinancialSmsCallback)void :: android.permission.SMS_FINANCIAL_TRANSACTIONS
android.telephony.SmsManager.checkSmsShortCodeDestination(String,String)int :: android.permission.READ_PHONE_STATE
android.telephony.SmsManager.getSmscAddress()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SmsManager.setSmscAddress(String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.getPremiumSmsConsent(String)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SmsManager.setPremiumSmsConsent(String,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.resetAllCellBroadcastRanges()void :: android.permission.MODIFY_CELL_BROADCASTS
android.telephony.SubscriptionManager.getActiveSubscriptionInfo(int)SubscriptionInfo :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoForIcc(String)SubscriptionInfo :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoForSimSlotIndex(int)SubscriptionInfo :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoList()List<SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoCount()int :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.setIconTint(int,int)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDisplayName(String,int,int)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDefaultVoiceSubscriptionId(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDefaultSmsSubId(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDefaultDataSubId(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionIdList()int[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getCompleteActiveSubscriptionIdList()int[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.isActiveSubscriptionId(int)boolean :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.setPreferredDataSubscriptionId(int,boolean,Executor,Consumer<Integer>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getPreferredDataSubscriptionId()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getOpportunisticSubscriptions()List<SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.switchToSubscription(int,PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.SubscriptionManager.setOpportunistic(boolean,int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.createSubscriptionGroup(List<Integer>)ParcelUuid :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.addSubscriptionsIntoGroup(List<Integer>,ParcelUuid)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.removeSubscriptionsFromGroup(List<Integer>,ParcelUuid)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getSubscriptionsInGroup(ParcelUuid)List<SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.setSubscriptionEnabled(int,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setUiccApplicationsEnabled(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.canDisablePhysicalSubscription()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.isSubscriptionEnabled(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.setDeviceToDeviceStatusSharingPreference(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDeviceToDeviceStatusSharingContacts(int,List<Uri>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getEnabledSubscriptionId(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getAllSimSpecificSettingsForBackup()byte[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.restoreSimSpecificSettingsForIccIdFromBackup(String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.restoreAllSimSpecificSettingsFromBackup(byte[])void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyCallback.onMessageWaitingIndicatorChanged(boolean)void :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyCallback.onCallForwardingIndicatorChanged(boolean)void :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyCallback.onCellLocationChanged(CellLocation)void :: android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyCallback.onCallStateChanged(int)void :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyCallback.onCellInfoChanged(List<CellInfo>)void :: android.permission.READ_PHONE_STATEandroid.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyCallback.onPreciseCallStateChanged(PreciseCallState)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback.onCallDisconnectCauseChanged(int,int)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback.onImsCallDisconnectCauseChanged(ImsReasonInfo)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback.onPreciseDataConnectionStateChanged(PreciseDataConnectionState)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback.onSrvccStateChanged(int)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyCallback.onVoiceActivationStateChanged(int)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyCallback.onEmergencyNumberListChanged(Map<Integer,List<EmergencyNumber>>)void :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyCallback.onOutgoingEmergencyCall(EmergencyNumber,int)void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.TelephonyCallback.onOutgoingEmergencySms(EmergencyNumber,int)void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.TelephonyCallback.onActiveDataSubscriptionIdChanged(int)void :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyCallback.onRadioPowerStateChanged(int)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyCallback.onRegistrationFailed(CellIdentity,String,int,int,int)void :: android.permission.READ_PRECISE_PHONE_STATEandroid.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyCallback.onAllowedNetworkTypesChanged(int,long)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyCallback.onCallAttributesChanged(CallAttributes)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback.onBarringInfoChanged(BarringInfo)void :: android.permission.READ_PRECISE_PHONE_STATEandroid.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyCallback.onPhysicalChannelConfigChanged(List<PhysicalChannelConfig>)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback.onDataEnabledChanged(boolean,int)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback.onLinkCapacityEstimateChanged(List<LinkCapacityEstimate>)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyManager.getDeviceSoftwareVersion()String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDeviceSoftwareVersion(int)String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDeviceId()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDeviceId(int)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getImei()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getImei(int)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getMeid()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getMeid(int)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getNai()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCellLocation()CellLocation :: android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.getNeighboringCellInfo()List<NeighboringCellInfo> :: android.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManager.getCarrierConfig()PersistableBundle :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getNetworkType(int)int :: android.permission.P
android.telephony.TelephonyManager.getDataNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDataNetworkType(int)int :: android.permission.P
android.telephony.TelephonyManager.getVoiceNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceNetworkType(int)int :: android.permission.P
android.telephony.TelephonyManager.getSimCardState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSimApplicationState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isApplicationOnUicc(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSimSerialNumber()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSimSerialNumber(int)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isLteCdmaEvdoGsmWcdmaEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getLteOnCdmaMode(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getUiccCardsInfo()List<UiccCardInfo> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getUiccSlotsInfo()UiccSlotInfo[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.refreshUiccProfile()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.switchSlots(int[])boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getLogicalToPhysicalSlotMapping()Map<Integer, :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSubscriberId()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSubscriberId(int)String :: android.permission.P
android.telephony.TelephonyManager.getCarrierInfoForImsiEncryption(int)ImsiEncryptionInfo :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.resetCarrierKeysForImsiEncryption()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getGroupIdLevel1()String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getGroupIdLevel1(int)String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLine1Number()String :: android.permission.READ_PHONE_STATEandroid.permission.READ_SMSandroid.permission.READ_PHONE_NUMBERS
android.telephony.TelephonyManager.getLine1Number(int)String :: android.permission.READ_PHONE_STATEandroid.permission.READ_SMSandroid.permission.READ_PHONE_NUMBERS
android.telephony.TelephonyManager.getLine1AlphaTag()String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLine1AlphaTag(int)String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMergedImsisFromGroup()String[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getMsisdn()String :: android.permission.READ_PHONE_STATEandroid.permission.READ_SMSandroid.permission.READ_PHONE_NUMBERS
android.telephony.TelephonyManager.getMsisdn(int)String :: android.permission.READ_PHONE_STATEandroid.permission.READ_SMSandroid.permission.READ_PHONE_NUMBERS
android.telephony.TelephonyManager.getVoiceMailNumber()String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailNumber(int)String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVisualVoicemailPackageName()String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.sendVisualVoicemailSmsForSubscriber(int,String,int,String,PendingIntent)void :: android.permission.SEND_SMS
android.telephony.TelephonyManager.setVoiceActivationState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setVoiceActivationState(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataActivationState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataActivationState(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getVoiceActivationState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getVoiceActivationState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDataActivationState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDataActivationState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMessageCount()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMessageCount(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailAlphaTag()String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailAlphaTag(int)String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getIsimDomain()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getIsimImpu()String[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCallState()int :: android.permission.READ_PHONE_STATEandroid.permission. conditional = true
android.telephony.TelephonyManager.getCallStateForSubscription()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCallState(int)int :: android.permission.READ_PHONE_STATEandroid.permission. conditional = true
android.telephony.TelephonyManager.getCallStateForSlot(int)int :: android.permission.READ_PHONE_STATEandroid.permission. conditional = true
android.telephony.TelephonyManager.getCdmaEnhancedRoamingIndicatorDisplayNumber()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconIndex(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconMode(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriText()String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriText(int)String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getAllCellInfo()List<CellInfo> :: android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.requestCellInfoUpdate(Executor,CellInfoCallback)void :: android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.requestCellInfoUpdate(WorkSource,Executor,CellInfoCallback)void :: android.permission.MODIFY_PHONE_STATEandroid.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.iccOpenLogicalChannelBySlot(int,String,int)IccOpenLogicalChannelResponse :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccCloseLogicalChannelBySlot(int,int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduLogicalChannelBySlot(int,int,int,int,int,int,int,String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduBasicChannelBySlot(int,int,int,int,int,int,String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.resetRadioConfig()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.rebootRadio()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.requestNumberVerification(PhoneNumberRange,long,Executor,NumberVerificationCallback)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getIsimIst()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getForbiddenPlmns()String[] :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getForbiddenPlmns(int,int)String[] :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setForbiddenPlmns(List<String>)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.resetIms(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getPreferredNetworkType(int)) :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getPreferredNetworkTypeBitmask()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getAllowedNetworkTypesBitmask()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getAllowedNetworkTypes()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeAutomatic()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAvailableNetworks()CellNetworkScanResult :: android.permission.MODIFY_PHONE_STATEandroid.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManager.requestNetworkScan(NetworkScanRequest,Executor,TelephonyScanManager.NetworkScanCallback)NetworkScan :: android.permission.MODIFY_PHONE_STATEandroid.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.requestNetworkScan(NetworkScanRequest,TelephonyScanManager.NetworkScanCallback)NetworkScan :: android.permission.MODIFY_PHONE_STATEandroid.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.setNetworkSelectionModeManual(String,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeManual(String,boolean,int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeManual(OperatorInfo,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getNetworkSelectionMode()int :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyManager.getManualNetworkSelectionPlmn()String :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyManager.isInEmergencySmsMode()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setPreferredNetworkTypeBitmask(long)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAllowedNetworkTypes(long)boolean :: android.permission.TelephonyManager#isRadioInterfaceCapabilitySupported"android.permission.CAPABILITY_USES_ALLOWED_NETWORK_TYPES_BITMASK
android.telephony.TelephonyManager.setAllowedNetworkTypesForReason(int,long)void :: android.permission.TelephonyManager#isRadioInterfaceCapabilitySupported"android.permission.CAPABILITY_USES_ALLOWED_NETWORK_TYPES_BITMASK
android.telephony.TelephonyManager.getAllowedNetworkTypesForReason(int)long :: android.permission.TelephonyManager#isRadioInterfaceCapabilitySupported"android.permission.CAPABILITY_USES_ALLOWED_NETWORK_TYPES_BITMASK
android.telephony.TelephonyManager.isTetheringApnRequired()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMdn()String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMdn(int)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMin()String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMin(int)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.checkCarrierPrivilegesForPackage(String)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.checkCarrierPrivilegesForPackageAnyPhone(String)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCarrierPackageNamesForIntentAndPhone(Intent,int)List<String> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getPackagesWithCarrierPrivileges()List<String> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCarrierPrivilegedPackagesForAllActiveSubscriptions()List<String> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCallComposerStatus(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCallComposerStatus()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.call(String,String)void :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.endCall()boolean :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.answerRingingCall()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isOffhook()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isRinging()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isIdle()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isRadioOn()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.supplyPin(String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPuk(String,String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPinReportResult(String)int[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPukReportResult(String,String)int[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyIccLockPin(String)PinResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyIccLockPuk(String,String)PinResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.sendUssdRequest(String,UssdResponseCallback,Handler)void :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.handlePinMmi(String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.handlePinMmiForSubscriber(int,String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.toggleRadioOnOff()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadio(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadioPower(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.shutdownAllRadios()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isAnyRadioPoweredOn()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getRadioPowerState()int :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.enableDataConnectivity()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.disableDataConnectivity()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getMobileProvisioningUrl()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isDataEnabled()boolean :: android.permission.READ_PHONE_STATEandroid.permission.MODIFY_PHONE_STATEandroid.permission.ACCESS_NETWORK_STATE
android.telephony.TelephonyManager.isDataRoamingEnabled()boolean :: android.permission.READ_PHONE_STATEandroid.permission.ACCESS_NETWORK_STATE
android.telephony.TelephonyManager.getCdmaRoamingMode()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCdmaRoamingMode(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaSubscriptionMode()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCdmaSubscriptionMode(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataRoamingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.enableVideoCalling(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isVideoCallingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerStateForSlot(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerState(int,Executor,Consumer<Integer>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerStateForSlot(int,int,Executor,Consumer<Integer>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAndUpdateDefaultRespondViaMessageApplication()ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.telephony.TelephonyManager.getDefaultRespondViaMessageApplication()ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.telephony.TelephonyManager.getPhoneAccountHandle()PhoneAccountHandle :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSubscriptionId(PhoneAccountHandle)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.resetSettings()void :: android.permission.CONNECTIVITY_INTERNAL
android.telephony.TelephonyManager.getSimLocale()Locale :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.requestModemActivityInfo(Executor,OutcomeReceiver<ModemActivityInfo,ModemActivityInfoException>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getServiceState()ServiceState :: android.permission.READ_PHONE_STATEandroid.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManager.getCarrierIdFromMccMnc(String)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCertsFromCarrierPrivilegeAccessRules()List<String> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getAidForAppType(int)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getTelephonyHistograms()List<TelephonyHistogram> :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAllowedCarriers(int,List<CarrierIdentifier>)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setCarrierRestrictionRules(CarrierRestrictionRules)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAllowedCarriers(int)List<CarrierIdentifier> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCarrierRestrictionRules()CarrierRestrictionRules :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCarrierDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadioEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setVoNrEnabled(boolean)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isVoNrEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.reportDefaultNetworkStatus(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.resetAllCarrierActions()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setPolicyDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabledForReason(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isDataEnabledForReason(int)boolean :: android.permission.READ_PHONE_STATEandroid.permission.ACCESS_NETWORK_STATE
android.telephony.TelephonyManager.getEmergencyCallbackMode()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isManualNetworkSelectionAllowed()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyManager.setAlwaysReportSignalStrength(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isDataConnectionAllowed()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PHONE_STATEandroid.permission.ACCESS_NETWORK_STATE
android.telephony.TelephonyManager.getNumberOfModemsWithSimultaneousDataConnections()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setOpportunisticNetworkState(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isOpportunisticNetworkEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSupportedRadioAccessFamily()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.notifyOtaEmergencyNumberDbInstalled()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.updateOtaEmergencyNumberDbFilePath(ParcelFileDescriptor)void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.TelephonyManager.resetOtaEmergencyNumberDbFilePath()void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.TelephonyManager.getEmergencyNumberList()Map<Integer, :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyNumberList(int)Map<Integer, :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isPotentialEmergencyNumber(String)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyNumberDbVersion()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getPreferredOpportunisticDataSubscription()int :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.enableModemForSlot(int,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isModemEnabledForSlot(int)boolean :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setMultiSimCarrierRestriction(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isMultiSimSupported()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.switchMultiSimConfig(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.doesSwitchMultiSimConfigTriggerReboot()boolean :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCarrierPrivilegeStatus(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isDataEnabledForApn(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isApnMetered(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setSystemSelectionChannels(List<RadioAccessSpecifier>,Executor,Consumer<Boolean>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSystemSelectionChannels(List<RadioAccessSpecifier>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getSystemSelectionChannels()List<RadioAccessSpecifier> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.matchesCurrentSimOperator(String,int,String)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCallForwarding(int,Executor,CallForwardingInfoCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCallForwarding(CallForwardingInfo,Executor,Consumer<Integer>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCallWaitingStatus(Executor,Consumer<Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCallWaitingEnabled(boolean,Executor,Consumer<Integer>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setMobileDataPolicyEnabled(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isMobileDataPolicyEnabled(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isIccLockEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setIccLockEnabled(boolean,String)PinResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.changeIccLockPin(String,String)PinResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.notifyUserActivity()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setNrDualConnectivityState(int)int :: android.permission.TelephonyManager#isRadioInterfaceCapabilitySupported"android.permission.CAPABILITY_NR_DUAL_CONNECTIVITY_CONFIGURATION_AVAILABLE
android.telephony.TelephonyManager.isNrDualConnectivityEnabled()boolean :: android.permission.TelephonyManager#isRadioInterfaceCapabilitySupported"android.permission.CAPABILITY_NR_DUAL_CONNECTIVITY_CONFIGURATION_AVAILABLE
android.telephony.TelephonyManager.getEquivalentHomePlmns()List<String> :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.sendThermalMitigationRequest(ThermalMitigationRequest)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.bootstrapAuthenticationRequest(int,Uri,UaSecurityProtocolIdentifier,boolean,Executor,BootstrapAuthenticationCallback)void :: android.permission.MODIFY_PHONE_STATEandroid.permission.PERFORM_IMS_SINGLE_REGISTRATION
android.telephony.TelephonyManager.setSignalStrengthUpdateRequest(SignalStrengthUpdateRequest)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.clearSignalStrengthUpdateRequest(SignalStrengthUpdateRequest)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getPhoneCapability()PhoneCapability :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.prepareForUnattendedReboot()int :: android.permission.REBOOT
android.telephony.TelephonyManager.getNetworkSlicingConfiguration(Executor,OutcomeReceiver<NetworkSlicingConfig,NetworkSlicingException>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyRegistryManager.notifyCallStateChangedForAllSubscriptions(int,String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.euicc.EuiccManager.getOtaStatus()int :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.downloadSubscription(DownloadableSubscription,boolean,PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.continueOperation(Intent,Bundle)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getDownloadableSubscriptionMetadata(DownloadableSubscription,PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getDefaultDownloadableSubscriptionList(PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.deleteSubscription(int,PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.switchToSubscription(int,PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.updateSubscriptionNickname(int,String,PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.eraseSubscriptions(PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.eraseSubscriptions(int,PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.setSupportedCountries(List<String>)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.setUnsupportedCountries(List<String>)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getSupportedCountries()List<String> :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getUnsupportedCountries()List<String> :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.isSupportedCountry(String)boolean :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.ims.ImsMmTelManager.registerImsRegistrationCallback(Executor,RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.registerImsRegistrationCallback(Executor,RegistrationManager.RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.unregisterImsRegistrationCallback(RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.unregisterImsRegistrationCallback(RegistrationManager.RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getRegistrationState(Executor,Consumer<Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getRegistrationTransportType(Executor,Consumer<Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.registerMmTelCapabilityCallback(Executor,CapabilityCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.unregisterMmTelCapabilityCallback(CapabilityCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isAdvancedCallingSettingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setAdvancedCallingSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isCapable(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isAvailable(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isSupported(int,int,Executor,Consumer<Boolean>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isVtSettingEnabled(). :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVtSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isVoWiFiSettingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isCrossSimCallingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setCrossSimCallingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isVoWiFiRoamingSettingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiRoamingSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiNonPersistent(boolean,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getVoWiFiModeSetting()int :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiModeSetting(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getVoWiFiRoamingModeSetting()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiRoamingModeSetting(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setRttCapabilitySetting(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isTtyOverVolteEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getFeatureState(Executor,Consumer<Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.registerImsRegistrationCallback(Executor,RegistrationManager.RegistrationCallback)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsRcsManager.unregisterImsRegistrationCallback(RegistrationManager.RegistrationCallback)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsRcsManager.getRegistrationState(Executor,Consumer<Integer>)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsRcsManager.getRegistrationTransportType(Executor,Consumer<Integer>)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsRcsManager.addOnAvailabilityChangedListener(Executor,OnAvailabilityChangedListener)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.removeOnAvailabilityChangedListener(OnAvailabilityChangedListener)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.isCapable(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.isAvailable(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.registerProvisioningChangedCallback(Executor,Callback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.unregisterProvisioningChangedCallback(Callback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.getProvisioningIntValue(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.getProvisioningStringValue(int)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.setProvisioningIntValue(int,int)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.setProvisioningStringValue(int,String)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.setProvisioningStatusForCapability(int,int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.getProvisioningStatusForCapability(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.getRcsProvisioningStatusForCapability(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.setRcsProvisioningStatusForCapability(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.notifyRcsAutoConfigurationReceived(byte[],boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.setRcsClientConfiguration(RcsClientConfiguration)void :: android.permission.PERFORM_IMS_SINGLE_REGISTRATION
android.telephony.ims.ProvisioningManager.isRcsVolteSingleRegistrationCapable()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.PERFORM_IMS_SINGLE_REGISTRATION
android.telephony.ims.ProvisioningManager.registerRcsProvisioningCallback(Executor,RcsProvisioningCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.PERFORM_IMS_SINGLE_REGISTRATION
android.telephony.ims.ProvisioningManager.unregisterRcsProvisioningCallback(RcsProvisioningCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.PERFORM_IMS_SINGLE_REGISTRATION
android.telephony.ims.ProvisioningManager.triggerRcsReconfiguration()void :: android.permission.PERFORM_IMS_SINGLE_REGISTRATION
android.telephony.ims.RcsUceAdapter.requestCapabilities(Collection<Uri>,Executor,CapabilitiesCallback)void :: android.permission.READ_CONTACTSandroid.permission.ACCESS_RCS_USER_CAPABILITY_EXCHANGE
android.telephony.ims.RcsUceAdapter.requestAvailability(Uri,Executor,CapabilitiesCallback)void :: android.permission.READ_CONTACTSandroid.permission.ACCESS_RCS_USER_CAPABILITY_EXCHANGE
android.telephony.ims.RcsUceAdapter.getUcePublishState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RcsUceAdapter.addOnPublishStateChangedListener(Executor,OnPublishStateChangedListener)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RcsUceAdapter.removeOnPublishStateChangedListener(OnPublishStateChangedListener)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RcsUceAdapter.isUceSettingEnabled()boolean :: android.permission.READ_PHONE_STATE
android.telephony.ims.RcsUceAdapter.setUceSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.RegistrationManager.registerImsRegistrationCallback(Executor,RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RegistrationManager.unregisterImsRegistrationCallback(RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RegistrationManager.getRegistrationState(Executor,Consumer<Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RegistrationManager.getRegistrationTransportType(Executor,Consumer<Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.SipDelegateManager.isSupported()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATEandroid.permission.PERFORM_IMS_SINGLE_REGISTRATION
android.telephony.ims.SipDelegateManager.createSipDelegate(DelegateRequest,Executor,DelegateConnectionStateCallback,DelegateConnectionMessageCallback)void :: android.permission.PERFORM_IMS_SINGLE_REGISTRATION
android.telephony.ims.SipDelegateManager.destroySipDelegate(SipDelegateConnection,int)void :: android.permission.PERFORM_IMS_SINGLE_REGISTRATION
android.telephony.ims.SipDelegateManager.Objects.requireNonNull(connection,SipDelegateConnection)int :: android.permission.PERFORM_IMS_SINGLE_REGISTRATION)
    public void triggerFullNetworkRegistration(@NonNull SipDelegateConnection connectionandroid.permission.
            @IntRange(from = 100android.permission. to = 699
android.uwb.RangingSession.start(PersistableBundle)void :: android.permission.UWB_PRIVILEGED
android.uwb.RangingSession.reconfigure(PersistableBundle)void :: android.permission.UWB_PRIVILEGED
android.uwb.RangingSession.stop()void :: android.permission.UWB_PRIVILEGED
android.uwb.RangingSession.close()void :: android.permission.UWB_PRIVILEGED
android.uwb.UwbManager.registerAdapterStateCallback(Executor,AdapterStateCallback)void :: android.permission.UWB_PRIVILEGED
android.uwb.UwbManager.unregisterAdapterStateCallback(AdapterStateCallback)void :: android.permission.UWB_PRIVILEGED
android.uwb.UwbManager.getSpecificationInfo()PersistableBundle :: android.permission.UWB_PRIVILEGED
android.uwb.UwbManager.elapsedRealtimeResolutionNanos()long :: android.permission.UWB_PRIVILEGED
android.uwb.UwbManager.openRangingSession(PersistableBundle,Executor,RangingSession.Callback)CancellationSignal :: android.permission.UWB_PRIVILEGEDandroid.permission.UWB_RANGING
android.view.Display.getBrightnessInfo()BrightnessInfo :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.view.Display.requestColorMode(int)void :: android.permission.CONFIGURE_DISPLAY_COLOR_MODE
android.view.InputDevice.enable()void :: android.permission.DISABLE_INPUT_DEVICE
android.view.InputDevice.disable()void :: android.permission.DISABLE_INPUT_DEVICE
android.view.SurfaceControlHdrLayerInfoListener.register(IBinder)void :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.view.SurfaceControlHdrLayerInfoListener.unregister(IBinder)void :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.view.SurfaceControlHdrLayerInfoListener.unregisterAll()void :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.view.Window.setHideOverlayWindows(boolean)void :: android.permission.HIDE_OVERLAY_WINDOWS
android.view.WindowManager.getCurrentImeTouchRegion()Region :: android.permission.RESTRICTED_VR_ACCESS
android.view.WindowManager.setSystemApplicationOverlay(boolean)void :: android.permission.SYSTEM_APPLICATION_OVERLAY
android.view.contentcapture.ContentCaptureManager.resetTemporaryService(int)void :: android.permission.MANAGE_CONTENT_CAPTURE
android.view.contentcapture.ContentCaptureManager.setTemporaryService(int,String,int)void :: android.permission.MANAGE_CONTENT_CAPTURE
android.view.contentcapture.ContentCaptureManager.setDefaultServiceEnabled(int,boolean)void :: android.permission.MANAGE_CONTENT_CAPTURE
android.view.displayhash.DisplayHashManager.setDisplayHashThrottlingEnabled(boolean)void :: android.permission.READ_FRAME_BUFFER
android.view.inputmethod.InputMethodManager.getInputMethodListAsUser(int)List<InputMethodInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.view.inputmethod.InputMethodManager.getEnabledInputMethodListAsUser(int)List<InputMethodInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.view.inputmethod.InputMethodManager.showInputMethodPickerFromSystem(boolean,int)void :: android.permission.WRITE_SECURE_SETTINGS
android.view.inputmethod.InputMethodManager.setCurrentInputMethodSubtype(InputMethodSubtype)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.view.translation.UiTranslationManager.startTranslation(TranslationSpec,TranslationSpec,List<AutofillId>,ActivityId)void :: android.permission.MANAGE_UI_TRANSLATION
android.view.translation.UiTranslationManager.startTranslation(TranslationSpec,TranslationSpec,List<AutofillId>,ActivityId,UiTranslationSpec)void :: android.permission.MANAGE_UI_TRANSLATION
android.view.translation.UiTranslationManager.finishTranslation(ActivityId)void :: android.permission.MANAGE_UI_TRANSLATION
android.view.translation.UiTranslationManager.pauseTranslation(ActivityId)void :: android.permission.MANAGE_UI_TRANSLATION
android.view.translation.UiTranslationManager.resumeTranslation(ActivityId)void :: android.permission.MANAGE_UI_TRANSLATION
android.widget.TextView.setTextOperationUser(UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.window.DisplayAreaOrganizer.registerOrganizer(int)List<DisplayAreaAppearedInfo> :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.DisplayAreaOrganizer.unregisterOrganizer()void :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.DisplayAreaOrganizer.createTaskDisplayArea(int,int,String)DisplayAreaAppearedInfo :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.DisplayAreaOrganizer.deleteTaskDisplayArea(WindowContainerToken)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.DisplayAreaOrganizer.getController()IDisplayAreaOrganizerController :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.registerOrganizer()List<TaskAppearedInfo> :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.unregisterOrganizer()void :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.createRootTask(int,int,IBinder)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.deleteRootTask(WindowContainerToken)boolean :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.getImeTarget(int)WindowContainerToken :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.setInterceptBackPressedOnTaskRoot(WindowContainerToken,boolean)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.restartTaskTopActivityProcessIfVisible(WindowContainerToken)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.getController()ITaskOrganizerController :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.WindowOrganizer.applyTransaction(WindowContainerTransaction)void :: android.permission.
            conditional = trueandroid.permission.MANAGE_ACTIVITY_TASKS
android.window.WindowOrganizer.applySyncTransaction(WindowContainerTransaction,WindowContainerTransactionCallback)int :: android.permission.
            conditional = trueandroid.permission.MANAGE_ACTIVITY_TASKS
android.window.WindowOrganizer.startTransition(int,IBinder,WindowContainerTransaction)IBinder :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.WindowOrganizer.finishTransition(IBinder,WindowContainerTransaction,WindowContainerTransactionCallback)int :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.WindowOrganizer.startLegacyTransition(int,RemoteAnimationAdapter,WindowContainerTransactionCallback,WindowContainerTransaction)int :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.WindowOrganizer.registerTransitionPlayer(ITransitionPlayer)void :: android.permission.MANAGE_ACTIVITY_TASKS
com.android.internal.telephony.IccSmsInterfaceManager.resetAllCellBroadcastRanges()void :: android.permission.MODIFY_CELL_BROADCASTS
com.android.libraries.tv.tvsystem.media.TvAudioManager.setDeviceVolumeBehavior(AudioDeviceAttributes,int)void :: android.permission.MODIFY_AUDIO_ROUTING
com.android.libraries.tv.tvsystem.media.TvAudioManager.getDeviceVolumeBehavior(AudioDeviceAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
com.android.libraries.tv.tvsystem.pm.TvPackageInstaller.uninstallExistingPackage(String,IntentSender)void :: android.permission.DELETE_PACKAGES
com.android.libraries.tv.tvsystem.wifi.TvWifiManager.startLocalOnlyHotspot(SoftApConfiguration,Executor,WifiManager.LocalOnlyHotspotCallback)void :: android.permission.NETWORK_SETUP_WIZARDandroid.permission.NETWORK_SETTINGS
com.android.server.BluetoothAirplaneModeListener.handleAirplaneModeChange()void :: android.permission.BLUETOOTH_PRIVILEGED
com.android.server.BluetoothManagerService.onAirplaneModeChanged()void :: android.permission.BLUETOOTH_PRIVILEGED
com.android.server.BluetoothManagerService.checkBluetoothPermissions(AttributionSource,String,boolean)boolean :: android.permission.BLUETOOTH_CONNECT
com.android.server.BluetoothManagerService.disableBle(AttributionSource,IBinder)boolean :: android.permission.BLUETOOTH_PRIVILEGED
com.android.server.BluetoothManagerService.continueFromBleOnState()void :: android.permission.BLUETOOTH_PRIVILEGED
com.android.server.BluetoothManagerService.sendBrEdrDownCallback(AttributionSource)void :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
com.android.server.BluetoothManagerService.unbindAndFinish()void :: android.permission.BLUETOOTH_PRIVILEGED
com.android.server.BluetoothManagerService.restartForReason(int)void :: android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
com.android.server.BluetoothManagerService.handleEnable(boolean)void :: android.permission.BLUETOOTH_CONNECT
com.android.server.BluetoothManagerService.handleDisable()void :: android.permission.BLUETOOTH_CONNECT
com.android.server.BluetoothManagerService.bluetoothStateChangeHandler(int,int)void :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
com.android.server.BluetoothManagerService.recoverBluetoothServiceFromError(boolean)void :: android.permission.android.permission.BLUETOOTH_PRIVILEGEDandroid.permission.BLUETOOTH_CONNECT
com.android.server.BluetoothManagerService.checkConnectPermissionForDataDelivery(Context,AttributionSource,String)boolean :: android.permission.BLUETOOTH_CONNECT
com.android.server.BluetoothModeChangeHelper.onAirplaneModeChanged(BluetoothManagerService)void :: android.permission.BLUETOOTH_PRIVILEGED
com.android.server.app.GameManagerService.getAvailableGameModes(String)int[] :: android.permission.MANAGE_GAME_MODE
com.android.server.app.GameManagerService.setGameMode(String,int,int)void :: android.permission.MANAGE_GAME_MODE
com.android.server.app.GameManagerService.getAngleEnabled(String,int)boolean :: android.permission.MANAGE_GAME_MODE
com.android.server.app.GameManagerService.updateUseAngle(String,int)void :: android.permission.WRITE_SECURE_SETTINGS
com.android.server.audio.AudioService.Objects.requireNonNull(device,device)long :: android.permission. @IntRange(from = 0android.permission.MODIFY_AUDIO_ROUTING)
    public boolean setAdditionalOutputDeviceDelay(
            @NonNull AudioDeviceAttributes device
com.android.server.content.ContentService.putCache(String,Uri,Bundle,int)void :: android.permission.CACHE_CONTENT
com.android.server.content.ContentService.getCache(String,Uri,int)Bundle :: android.permission.CACHE_CONTENT
com.android.server.graphics.fonts.FontManagerService.getFontConfig()FontConfig :: android.permission.UPDATE_FONTS
com.android.server.graphics.fonts.FontManagerService.updateFontFamily(List<FontUpdateRequest>,int)int :: android.permission.UPDATE_FONTS
com.android.server.inputmethod.InputMethodManagerService.onCommand(String)int :: android.permission.android.permission.DUMPandroid.permission.WRITE_SECURE_SETTINGSandroid.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.notification.NotificationManagerService.getHistoricalNotifications(String,int,boolean)StatusBarNotification[] :: android.permission.ACCESS_NOTIFICATIONS
com.android.server.notification.NotificationManagerService.getHistoricalNotificationsWithAttribution(String,String,int,boolean)StatusBarNotification[] :: android.permission.ACCESS_NOTIFICATIONS
com.android.server.notification.NotificationManagerService.getNotificationHistory(String,String)NotificationHistory :: android.permission.ACCESS_NOTIFICATIONS
com.android.server.os.BugreportManagerServiceImpl.startBugreport(int,String,FileDescriptor,FileDescriptor,int,IDumpstateListener,boolean)void :: android.permission.DUMP
com.android.server.pm.verify.domain.DomainVerificationManagerInternal.getDomainVerificationInfo(String)DomainVerificationInfo :: android.permission.DOMAIN_VERIFICATION_AGENTandroid.permission.UPDATE_DOMAIN_VERIFICATION_USER_SELECTION
com.android.server.pm.verify.domain.DomainVerificationManagerInternal.setDomainVerificationStatusInternal(int,UUID,Set<String>,int)int :: android.permission.DOMAIN_VERIFICATION_AGENT
com.android.server.wm.WindowManagerService.showGlobalActions()void :: android.permission.INTERNAL_SYSTEM_WINDOW
com.android.settingslib.bluetooth.LocalBluetoothManager.create(Context,Handler,UserHandle)LocalBluetoothManager :: android.permission.INTERACT_ACROSS_USERS_FULL
com.android.setupwizardlib.util.SystemBarHelper.setBackButtonVisible(Window,boolean)void :: android.permission.STATUS_BAR"
com.android.shell.BugreportRequestedReceiver.onReceive(Context,Intent)void :: android.permission.TRIGGER_SHELL_BUGREPORT
