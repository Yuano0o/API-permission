android.accessibilityservice.AccessibilityService.getFingerprintGestureController()FingerprintGestureController :: android.permission.USE_FINGERPRINT
android.accounts.AccountManager.finishSessionAsUser(android.os.Bundle,android.app.Activity,android.os.UserHandle,AccountManagerCallback<Bundle>,android.os.Handler)AccountManagerFuture<Bundle> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.Activity.registerRemoteAnimations(android.view.RemoteAnimationDefinition)void :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.Activity.unregisterRemoteAnimations()void :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.ActivityManager.moveTaskToFront(int,int)void :: android.permission.REORDER_TASKS
android.app.ActivityManager.moveTaskToFront(int,int,android.os.Bundle)void :: android.permission.REORDER_TASKS
android.app.ActivityManager.clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)boolean :: android.permission.ACCESS_INSTANT_APPS,android.permission.CLEAR_APP_USER_DATA
android.app.ActivityManager.getUidProcessState(int)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.getUidProcessCapabilities(int)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.getPackageImportance(java.lang.String)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.getUidImportance(int)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.addOnUidImportanceListener(OnUidImportanceListener,int)void :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.removeOnUidImportanceListener(OnUidImportanceListener)void :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.killBackgroundProcesses(java.lang.String)void :: android.permission.KILL_BACKGROUND_PROCESSES
android.app.ActivityManager.killUid(int,java.lang.String)void :: android.permission.KILL_UID
android.app.ActivityManager.forceStopPackage(java.lang.String)void :: android.permission.FORCE_STOP_PACKAGES
android.app.ActivityManager.getCurrentUser()int :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.INTERACT_ACROSS_USERS
android.app.ActivityManager.switchUser(android.os.UserHandle)boolean :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.app.ActivityManager.startProfile(android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.MANAGE_USERS
android.app.ActivityManager.stopProfile(android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.MANAGE_USERS
android.app.ActivityManager.updateMccMncConfiguration(java.lang.String,java.lang.String)boolean :: android.permission.CHANGE_CONFIGURATION
android.app.ActivityManager.stopUser(int,boolean)boolean :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.ActivityManager.dumpPackageState(java.io.FileDescriptor,java.lang.String)void :: android.permission.DUMP
android.app.ActivityManager.setPersistentVrThread(int)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.ActivityManager.scheduleApplicationInfoChanged(List<java.lang.String>,int)void :: android.permission.CHANGE_CONFIGURATION
android.app.ActivityManager.isProfileForeground(android.os.UserHandle)boolean :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.app.ActivityManager.killProcessesWhenImperceptible([int,java.lang.String)void :: android.permission.FORCE_STOP_PACKAGES
android.app.ActivityManager.addHomeVisibilityListener(java.util.concurrent.Executor,HomeVisibilityListener)void :: android.permission.SET_ACTIVITY_WATCHER
android.app.ActivityManager.removeHomeVisibilityListener(HomeVisibilityListener)void :: android.permission.SET_ACTIVITY_WATCHER
android.app.ActivityManager.resetAppErrors()void :: android.permission.RESET_APP_ERRORS
android.app.ActivityManager.waitForBroadcastIdle()void :: android.permission.DUMP
android.app.ActivityOptions.makeCustomTaskAnimation(android.content.Context,int,int,android.os.Handler,OnAnimationStartedListener,OnAnimationFinishedListener)ActivityOptions :: android.permission.START_TASKS_FROM_RECENTS
android.app.ActivityOptions.makeRemoteAnimation(android.view.RemoteAnimationAdapter)ActivityOptions :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.ActivityOptions.makeRemoteAnimation(android.view.RemoteAnimationAdapter,android.window.IRemoteTransition)ActivityOptions :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.ActivityOptions.makeRemoteTransition(android.window.IRemoteTransition)ActivityOptions :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.ActivityTaskManager.removeRootTasksInWindowingModes([int)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityTaskManager.removeRootTasksWithActivityTypes([int)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityTaskManager.removeAllVisibleRecentTasks()void :: android.permission.REMOVE_TASKS
android.app.ActivityTaskManager.startSystemLockTaskMode(int)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityTaskManager.stopSystemLockTaskMode()void :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityTaskManager.moveTaskToRootTask(int,int,boolean)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityTaskManager.resizeTask(int,android.graphics.Rect)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityTaskManager.clearLaunchParamsForPackages(List<java.lang.String>)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityTaskManager.removeTask(int)boolean :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.AlarmManager.setPrioritized(int,long,long,java.lang.String,java.util.concurrent.Executor,OnAlarmListener)void :: android.permission.SCHEDULE_PRIORITIZED_ALARM
android.app.AlarmManager.setExact(int,long,PendingIntent)void :: android.permission.SCHEDULE_EXACT_ALARM
android.app.AlarmManager.setExact(int,long,java.lang.String,OnAlarmListener,android.os.Handler)void :: android.permission.SCHEDULE_EXACT_ALARM
android.app.AlarmManager.setAlarmClock(AlarmClockInfo,PendingIntent)void :: android.permission.SCHEDULE_EXACT_ALARM
android.app.AlarmManager.set(int,long,long,long,PendingIntent,android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.app.AlarmManager.set(int,long,long,long,OnAlarmListener,android.os.Handler,android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.app.AlarmManager.setExact(int,long,java.lang.String,java.util.concurrent.Executor,android.os.WorkSource,OnAlarmListener)void :: android.permission.UPDATE_DEVICE_STATS,android.permission.SCHEDULE_EXACT_ALARM
android.app.AlarmManager.setExactAndAllowWhileIdle(int,long,PendingIntent)void :: android.permission.SCHEDULE_EXACT_ALARM
android.app.AlarmManager.setTime(long)void :: android.permission.SET_TIME
android.app.AlarmManager.setTimeZone(java.lang.String)void :: android.permission.SET_TIME_ZONE
android.app.AppOpsManager.getPackagesForOps([java.lang.String)List<AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getPackagesForOps([int)List<AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getOpsForPackage(int,java.lang.String,[int)List<PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getOpsForPackage(int,java.lang.String,java.lang.String...)List<AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getHistoricalOps(HistoricalOpsRequest,java.util.concurrent.Executor,Consumer<HistoricalOps>)void :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getHistoricalOpsFromDiskRaw(HistoricalOpsRequest,java.util.concurrent.Executor,Consumer<HistoricalOps>)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.reloadNonHistoricalState()void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.setUidMode(int,int,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setUidMode(java.lang.String,int,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setMode(int,int,java.lang.String,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setMode(java.lang.String,int,java.lang.String,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setRestriction(int,int,int,[java.lang.String)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.resetAllModes()void :: android.permission.R,android.permission. trackingBug = 170729553
android.app.AppOpsManager.startWatchingMode(int,java.lang.String,OnOpChangedListener)void :: android.permission.WATCH_APPOPS
android.app.AppOpsManager.startWatchingMode(int,java.lang.String,int,OnOpChangedListener)void :: android.permission.WATCH_APPOPS
android.app.AppOpsManager.startWatchingActive([java.lang.String,java.util.concurrent.Executor,OnOpActiveChangedListener)void :: android.permission.WATCH_APPOPS
android.app.AppOpsManager.startWatchingStarted([int,OnOpStartedListener)void :: android.permission.WATCH_APPOPS
android.app.AppOpsManager.startWatchingNoted([int,OnOpNotedListener)void :: android.permission.WATCH_APPOPS
android.app.AppOpsManager.resetPackageOpsNoHistory(java.lang.String)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.isOperationActive(int,int,java.lang.String)boolean :: android.permission.WATCH_APPOPS
android.app.AppOpsManager.setHistoryParameters(int,long,int)void :: android.permission.MANAGE_APPOPS,android.permission.WATCH_APPOPS
android.app.AppOpsManager.offsetHistory(long)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.addHistoricalOps(HistoricalOps)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.resetHistoryParameters()void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.clearHistory()void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.rebootHistory(long)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.collectRuntimeAppOpAccessMessage()RuntimeAppOpAccessMessage :: android.permission.GET_APP_OPS_STATS
android.app.BroadcastOptions.setTemporaryAppWhitelistDuration(long)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST,android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND,android.permission.START_ACTIVITIES_FROM_BACKGROUND
android.app.BroadcastOptions.setTemporaryAppAllowlist(long,int,int,java.lang.String)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST,android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND,android.permission.START_ACTIVITIES_FROM_BACKGROUND
android.app.BroadcastOptions.setBackgroundActivityStartsAllowed(boolean)void :: android.permission.START_ACTIVITIES_FROM_BACKGROUND
android.app.DownloadManager.onMediaStoreDownloadsDeleted(LongSparseArray<java.lang.String>)void :: android.permission.WRITE_MEDIA_STORAGE
android.app.DreamManager.startDream(android.content.ComponentName)void :: android.permission.WRITE_DREAM_STATE
android.app.DreamManager.stopDream()void :: android.permission.WRITE_DREAM_STATE
android.app.DreamManager.setActiveDream(android.content.ComponentName)void :: android.permission.WRITE_DREAM_STATE
android.app.DreamManager.isDreaming()boolean :: android.permission.READ_DREAM_STATE
android.app.GameManager.getGameMode(java.lang.String)int :: android.permission.MANAGE_GAME_MODE
android.app.GameManager.setGameMode(java.lang.String,int)void :: android.permission.MANAGE_GAME_MODE
android.app.GameManager.getAvailableGameModes(java.lang.String)int[] :: android.permission.MANAGE_GAME_MODE
android.app.KeyguardManager.setPrivateNotificationsAllowed(boolean)void :: android.permission.CONTROL_KEYGUARD_SECURE_NOTIFICATIONS
android.app.KeyguardManager.getPrivateNotificationsAllowed()boolean :: android.permission.CONTROL_KEYGUARD_SECURE_NOTIFICATIONS
android.app.KeyguardManager.disableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.reenableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.requestDismissKeyguard(Activity,CharSequence,KeyguardDismissCallback)void :: android.permission.SHOW_KEYGUARD_MESSAGE
android.app.KeyguardManager.exitKeyguardSecurely(OnKeyguardExitResult)void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.isValidLockPasswordComplexity(int,[byte,int)boolean :: android.permission.SET_INITIAL_LOCK
android.app.KeyguardManager.getMinLockLength(boolean,int)int :: android.permission.SET_INITIAL_LOCK
android.app.KeyguardManager.setLock(int,[byte,int)boolean :: android.permission.SET_INITIAL_LOCK
android.app.KeyguardManager.setLock(int,[byte,int,[byte)boolean :: android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS,android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.KeyguardManager.checkLock(int,[byte)boolean :: android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS,android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.NotificationManager.setNotificationListenerAccessGranted(android.content.ComponentName,boolean,boolean)void :: android.permission.MANAGE_NOTIFICATION_LISTENERS
android.app.NotificationManager.getEnabledNotificationListeners()List<ComponentName> :: android.permission.MANAGE_NOTIFICATION_LISTENERS
android.app.NotificationManager.setToastRateLimitingEnabled(boolean)void :: android.permission.MANAGE_TOAST_RATE_LIMITING
android.app.PendingIntent.queryIntentComponents(int)List<ResolveInfo> :: android.permission.MODULE_LIBRARIES
android.app.PendingIntent.intentFilterEquals(PendingIntent)boolean :: android.permission.GET_INTENT_SENDER_INTENT
android.app.StatusBarManager.collapsePanels()void :: android.permission.Intent#ACTION_CLOSE_SYSTEM_DIALOGS
android.app.StatusBarManager.togglePanel()void :: android.permission.STATUS_BAR
android.app.StatusBarManager.handleSystemKey(int)void :: android.permission.STATUS_BAR
android.app.StatusBarManager.setDisabledForSetup(boolean)void :: android.permission.STATUS_BAR
android.app.StatusBarManager.setExpansionDisabledForSimNetworkLock(boolean)void :: android.permission.STATUS_BAR
android.app.StatusBarManager.getDisableInfo()DisableInfo :: android.permission.STATUS_BAR
android.app.UiModeManager.e.rethrowFromSystemServer(){ :: android.permission.enableCarMode(flags,android.permission.getOpPackageName());,android.permission.priority
android.app.UiModeManager.requestProjection(int)boolean :: android.permission.TOGGLE_AUTOMOTIVE_PROJECTION
android.app.UiModeManager.releaseProjection(int)boolean :: android.permission.TOGGLE_AUTOMOTIVE_PROJECTION
android.app.UiModeManager.getProjectingPackages(int)Set<String> :: android.permission.READ_PROJECTION_STATE
android.app.UiModeManager.getActiveProjectionTypes()int :: android.permission.READ_PROJECTION_STATE
android.app.UiModeManager.addOnProjectionStateChangedListener(int,java.util.concurrent.Executor,OnProjectionStateChangedListener)void :: android.permission.READ_PROJECTION_STATE
android.app.UiModeManager.removeOnProjectionStateChangedListener(OnProjectionStateChangedListener)void :: android.permission.READ_PROJECTION_STATE
android.app.VrManager.registerVrStateCallback(java.util.concurrent.Executor,VrStateCallback)void :: android.permission.ACCESS_VR_STATE,android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.unregisterVrStateCallback(VrStateCallback)void :: android.permission.ACCESS_VR_STATE,android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.isVrModeEnabled()boolean :: android.permission.ACCESS_VR_STATE,android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.isPersistentVrModeEnabled()boolean :: android.permission.ACCESS_VR_STATE,android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setPersistentVrModeEnabled(boolean)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setVr2dDisplayProperties(Vr2dDisplayProperties)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setAndBindVrCompositor(android.content.ComponentName)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setStandbyEnabled(boolean)void :: android.permission.ACCESS_VR_MANAGER
android.app.VrManager.setVrInputMethod(android.content.ComponentName)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.getVr2dDisplayId()int :: android.permission.RESTRICTED_VR_ACCESS
android.app.WallpaperManager.getDrawable()Drawable :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.getFastDrawable()Drawable :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.peekFastDrawable()Drawable :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.wallpaperSupportsWcg(int)boolean :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.getWallpaperFile(int)ParcelFileDescriptor :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.setResource(int)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setResource(int,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(java.io.InputStream)void :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(java.io.InputStream,android.graphics.Rect,boolean)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(java.io.InputStream,android.graphics.Rect,boolean,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setDisplayPadding(android.graphics.Rect)void :: android.permission.SET_WALLPAPER_HINTS
android.app.WallpaperManager.clearWallpaper()void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.clearWallpaper(int,int)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.WallpaperManager.setWallpaperComponent(android.content.ComponentName)boolean :: android.permission.SET_WALLPAPER_COMPONENT
android.app.WallpaperManager.setWallpaperComponent(android.content.ComponentName,int)boolean :: android.permission.SET_WALLPAPER_COMPONENT
android.app.WallpaperManager.clear()void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.clear(int)void :: android.permission.SET_WALLPAPER
android.app.admin.DevicePolicyManager.packageHasActiveAdmins(java.lang.String)boolean :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.admin.DevicePolicyManager.getPasswordComplexity()int :: android.permission.REQUEST_PASSWORD_COMPLEXITY
android.app.admin.DevicePolicyManager.setActiveAdmin(android.content.ComponentName,boolean,int)void :: android.permission.MANAGE_DEVICE_ADMINS,android.permission.INTERACT_ACROSS_USERS_FULL
android.app.admin.DevicePolicyManager.setDeviceOwner(android.content.ComponentName,java.lang.String,int)boolean :: android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
android.app.admin.DevicePolicyManager.getDeviceOwnerComponentOnAnyUser()ComponentName :: android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS,android.permission.MANAGE_USERS,android.permission.
android.app.admin.DevicePolicyManager.getDeviceOwnerUser()UserHandle :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwner()String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwnerNameOnAnyUser()String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setActiveProfileOwner(android.content.ComponentName,java.lang.String)boolean :: android.permission.MANAGE_DEVICE_ADMINS
android.app.admin.DevicePolicyManager.getProfileOwnerAsUser(android.os.UserHandle)ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.app.admin.DevicePolicyManager.getProfileOwnerNameAsUser(int)String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getBluetoothContactSharingDisabled(android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.app.admin.DevicePolicyManager.getPermittedAccessibilityServices(int)List<String> :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getPermittedInputMethodsForCurrentUser()List<String> :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.clearSystemUpdatePolicyFreezePeriodRecord()void :: android.permission.CLEAR_FREEZE_PERIOD
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long)void :: android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long,boolean)void :: android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManager.forceNetworkLogs()long :: android.permission.FORCE_DEVICE_POLICY_MANAGER_LOGS
android.app.admin.DevicePolicyManager.forceSecurityLogs()long :: android.permission.FORCE_DEVICE_POLICY_MANAGER_LOGS
android.app.admin.DevicePolicyManager.getUserProvisioningState()int :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.forceRemoveActiveAdmin(android.content.ComponentName,int)void :: android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
android.app.admin.DevicePolicyManager.isDeviceProvisioned()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setDeviceProvisioningConfigApplied()void :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isDeviceProvisioningConfigApplied()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setProfileOwnerCanAccessDeviceIds(android.content.ComponentName)void :: android.permission.GRANT_PROFILE_OWNER_DEVICE_IDS_ACCESS
android.app.admin.DevicePolicyManager.markProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName)void :: android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS,android.permission.MARK_DEVICE_ORGANIZATION_OWNED
android.app.admin.DevicePolicyManager.isPackageAllowedToAccessCalendar(java.lang.String)boolean :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.INTERACT_ACROSS_USERS
android.app.admin.DevicePolicyManager.getCrossProfileCalendarPackages()Set<String> :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.INTERACT_ACROSS_USERS
android.app.admin.DevicePolicyManager.getAllCrossProfilePackages()Set<String> :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.INTERACT_ACROSS_PROFILES,android.permission.INTERACT_ACROSS_USERS
android.app.admin.DevicePolicyManager.isManagedKiosk()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isUnattendedManagedKiosk()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setNextOperationSafety(int,int)void :: android.permission.MANAGE_DEVICE_ADMINS
android.app.admin.DevicePolicyManager.provisionFullyManagedDevice(FullyManagedDeviceProvisioningParams)void :: android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
android.app.admin.DevicePolicyManager.resetDefaultCrossProfileIntentFilters(int)void :: android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
android.app.admin.DevicePolicyManager.getPolicyExemptApps()Set<String> :: android.permission.MANAGE_DEVICE_ADMINS
android.app.backup.BackupManager.beginRestoreSession()RestoreSession :: android.permission.BACKUP
android.app.backup.BackupManager.setBackupEnabled(boolean)void :: android.permission.BACKUP
android.app.backup.BackupManager.isBackupEnabled()boolean :: android.permission.BACKUP
android.app.backup.BackupManager.isBackupServiceActive(android.os.UserHandle)boolean :: android.permission.BACKUP
android.app.backup.BackupManager.setAutoRestore(boolean)void :: android.permission.BACKUP
android.app.backup.BackupManager.getCurrentTransport()String :: android.permission.BACKUP
android.app.backup.BackupManager.getCurrentTransportComponent()ComponentName :: android.permission.BACKUP
android.app.backup.BackupManager.listAllTransports()String[] :: android.permission.BACKUP
android.app.backup.BackupManager.updateTransportAttributes(android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.String)void :: android.permission.BACKUP
android.app.backup.BackupManager.updateTransportAttributes(android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,CharSequence)void :: android.permission.BACKUP
android.app.backup.BackupManager.selectBackupTransport(java.lang.String)String :: android.permission.BACKUP
android.app.backup.BackupManager.selectBackupTransport(android.content.ComponentName,SelectBackupTransportCallback)void :: android.permission.BACKUP
android.app.backup.BackupManager.backupNow()void :: android.permission.BACKUP
android.app.backup.BackupManager.getAvailableRestoreToken(java.lang.String)long :: android.permission.BACKUP
android.app.backup.BackupManager.isAppEligibleForBackup(java.lang.String)boolean :: android.permission.BACKUP
android.app.backup.BackupManager.requestBackup([java.lang.String,BackupObserver)int :: android.permission.BACKUP
android.app.backup.BackupManager.requestBackup([java.lang.String,BackupObserver,BackupManagerMonitor,int)int :: android.permission.BACKUP
android.app.backup.BackupManager.cancelBackups()void :: android.permission.BACKUP
android.app.backup.BackupManager.setAncestralSerialNumber(long)void :: android.permission.BACKUP
android.app.backup.BackupManager.getConfigurationIntent(java.lang.String)Intent :: android.permission.BACKUP
android.app.backup.BackupManager.getDestinationString(java.lang.String)String :: android.permission.BACKUP
android.app.backup.BackupManager.getDataManagementIntent(java.lang.String)Intent :: android.permission.BACKUP
android.app.backup.BackupManager.getDataManagementLabel(java.lang.String)String :: android.permission.BACKUP
android.app.backup.BackupManager.getDataManagementIntentLabel(java.lang.String)CharSequence :: android.permission.BACKUP
android.app.backup.BackupManager.excludeKeysFromRestore(java.lang.String,List<java.lang.String>)void :: android.permission.BACKUP
android.app.compat.CompatChanges.isChangeEnabled(long,java.lang.String,android.os.UserHandle)boolean :: android.permission.LOG_COMPAT_CHANGE,android.permission.READ_COMPAT_CHANGE_CONFIG
android.app.compat.CompatChanges.isChangeEnabled(long,int)boolean :: android.permission.LOG_COMPAT_CHANGE,android.permission.READ_COMPAT_CHANGE_CONFIG
android.app.compat.CompatChanges.putPackageOverrides(java.lang.String,Map<Long,PackageOverride>)void :: android.permission.OVERRIDE_COMPAT_CHANGE_CONFIG_ON_RELEASE_BUILD
android.app.compat.CompatChanges.removePackageOverrides(java.lang.String,Set<Long>)void :: android.permission.OVERRIDE_COMPAT_CHANGE_CONFIG_ON_RELEASE_BUILD
android.app.contentsuggestions.ContentSuggestionsManager.resetTemporaryService(int)void :: android.permission.MANAGE_CONTENT_SUGGESTIONS
android.app.contentsuggestions.ContentSuggestionsManager.setTemporaryService(int,java.lang.String,int)void :: android.permission.MANAGE_CONTENT_SUGGESTIONS
android.app.contentsuggestions.ContentSuggestionsManager.setDefaultServiceEnabled(int,boolean)void :: android.permission.MANAGE_CONTENT_SUGGESTIONS
android.app.job.JobInfo.setPersisted(boolean)Builder :: android.permission.RECEIVE_BOOT_COMPLETED
android.app.job.JobScheduler.scheduleAsPackage(JobInfo,java.lang.String,int,java.lang.String)int :: android.permission.UPDATE_DEVICE_STATS
android.app.people.PeopleManager.isConversation(java.lang.String,java.lang.String)boolean :: android.permission.READ_PEOPLE_DATA
android.app.time.TimeManager.getTimeZoneCapabilitiesAndConfig()TimeZoneCapabilitiesAndConfig :: android.permission.MANAGE_TIME_AND_ZONE_DETECTION
android.app.time.TimeManager.getTimeCapabilitiesAndConfig()TimeCapabilitiesAndConfig :: android.permission.MANAGE_TIME_AND_ZONE_DETECTION
android.app.time.TimeManager.updateTimeConfiguration(TimeConfiguration)boolean :: android.permission.MANAGE_TIME_AND_ZONE_DETECTION
android.app.time.TimeManager.updateTimeZoneConfiguration(TimeZoneConfiguration)boolean :: android.permission.MANAGE_TIME_AND_ZONE_DETECTION
android.app.time.TimeManager.addTimeZoneDetectorListener(java.util.concurrent.Executor,TimeZoneDetectorListener)void :: android.permission.MANAGE_TIME_AND_ZONE_DETECTION
android.app.time.TimeManager.removeTimeZoneDetectorListener(TimeZoneDetectorListener)void :: android.permission.MANAGE_TIME_AND_ZONE_DETECTION
android.app.time.TimeManager.suggestExternalTime(ExternalTimeSuggestion)void :: android.permission.SUGGEST_EXTERNAL_TIME
android.app.timedetector.TimeDetector.suggestTelephonyTime(TelephonyTimeSuggestion)void :: android.permission.SUGGEST_TELEPHONY_TIME_AND_ZONE
android.app.timedetector.TimeDetector.suggestManualTime(ManualTimeSuggestion)boolean :: android.permission.SUGGEST_MANUAL_TIME_AND_ZONE
android.app.timedetector.TimeDetector.suggestNetworkTime(NetworkTimeSuggestion)void :: android.permission.SET_TIME
android.app.timedetector.TimeDetector.suggestGnssTime(GnssTimeSuggestion)void :: android.permission.SET_TIME
android.app.timezonedetector.TimeZoneDetector.suggestManualTimeZone(ManualTimeZoneSuggestion)boolean :: android.permission.SUGGEST_MANUAL_TIME_AND_ZONE
android.app.timezonedetector.TimeZoneDetector.suggestTelephonyTimeZone(TelephonyTimeZoneSuggestion)void :: android.permission.SUGGEST_TELEPHONY_TIME_AND_ZONE
android.app.trust.TrustManager.setDeviceLockedForUser(int,boolean)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.isTrustUsuallyManaged(int)boolean :: android.permission.TRUST_LISTENER
android.app.trust.TrustManager.unlockedByBiometricForUser(int,android.hardware.biometrics.BiometricSourceType)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.clearAllBiometricRecognized(android.hardware.biometrics.BiometricSourceType)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.usage.NetworkStatsManager.registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.NetworkStatsProvider)void :: android.permission.NETWORK_STATS_PROVIDER,android.permission.PERMISSION_MAINLINE_NETWORK_STACK
android.app.usage.NetworkStatsManager.unregisterNetworkStatsProvider(android.net.netstats.provider.NetworkStatsProvider)void :: android.permission.NETWORK_STATS_PROVIDER,android.permission.PERMISSION_MAINLINE_NETWORK_STACK
android.app.usage.NetworkStatsManager.notifyNetworkStatus(List<Network>,List<NetworkStateSnapshot>,java.lang.String,List<UnderlyingNetworkInfo>)void :: android.permission.NETWORK_STACK,android.permission.PERMISSION_MAINLINE_NETWORK_STACK
android.app.usage.StorageStatsManager.queryCratesForUser(java.util.UUID,android.os.UserHandle)Collection<CrateInfo> :: android.permission.MANAGE_CRATES
android.app.usage.UsageStatsManager.getAppStandbyBucket(java.lang.String)int :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.setAppStandbyBucket(java.lang.String,int)void :: android.permission.CHANGE_APP_IDLE_STATE
android.app.usage.UsageStatsManager.getAppStandbyBuckets()Map<String, :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.setAppStandbyBuckets(Map<java.lang.String,Integer>)void :: android.permission.CHANGE_APP_IDLE_STATE
android.app.usage.UsageStatsManager.registerAppUsageObserver(int,[java.lang.String,long,java.util.concurrent.TimeUnit,android.app.PendingIntent)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.unregisterAppUsageObserver(int)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.registerUsageSessionObserver(int,[java.lang.String,java.time.Duration,java.time.Duration,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.unregisterUsageSessionObserver(int)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.registerAppUsageLimitObserver(int,[java.lang.String,java.time.Duration,java.time.Duration,android.app.PendingIntent)void :: android.permission.OBSERVE_APP_USAGE,android.permission.SUSPEND_APPS
android.app.usage.UsageStatsManager.unregisterAppUsageLimitObserver(int)void :: android.permission.OBSERVE_APP_USAGE,android.permission.SUSPEND_APPS
android.app.usage.UsageStatsManager.whitelistAppTemporarily(java.lang.String,long,android.os.UserHandle)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.app.usage.UsageStatsManager.onCarrierPrivilegedAppsChanged()void :: android.permission.BIND_CARRIER_SERVICES
android.app.usage.UsageStatsManager.getLastTimeAnyComponentUsed(java.lang.String)long :: android.permission.PACKAGE_USAGE_STATS,android.permission.INTERACT_ACROSS_USERS
android.apphibernation.AppHibernationManager.isHibernatingForUser(java.lang.String)boolean :: android.permission.MANAGE_APP_HIBERNATION
android.apphibernation.AppHibernationManager.setHibernatingForUser(java.lang.String,boolean)void :: android.permission.MANAGE_APP_HIBERNATION
android.apphibernation.AppHibernationManager.isHibernatingGlobally(java.lang.String)boolean :: android.permission.MANAGE_APP_HIBERNATION
android.apphibernation.AppHibernationManager.setHibernatingGlobally(java.lang.String,boolean)void :: android.permission.MANAGE_APP_HIBERNATION
android.apphibernation.AppHibernationManager.getHibernatingPackagesForUser()List<String> :: android.permission.MANAGE_APP_HIBERNATION
android.bluetooth.BluetoothA2dp.connect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getDevicesMatchingConnectionStates([int)List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.setActiveDevice(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT)
    @UnsupportedAppUsage(trackingBug = 171933273
android.bluetooth.BluetoothA2dp.getActiveDevice()BluetoothDevice :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.setPriority(BluetoothDevice,int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getPriority(BluetoothDevice)int :: android.permission. trackingBug = 115609023,android.permission.P
android.bluetooth.BluetoothA2dp.getConnectionPolicy(BluetoothDevice)int :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.setAvrcpAbsoluteVolume(int)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.isA2dpPlaying(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.shouldSendVolumeKeys(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getCodecStatus(BluetoothDevice)BluetoothCodecStatus :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.setCodecConfigPreference(BluetoothDevice,BluetoothCodecConfig)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.enableOptionalCodecs(BluetoothDevice)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.disableOptionalCodecs(BluetoothDevice)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.enableDisableOptionalCodecs(BluetoothDevice,boolean)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.isOptionalCodecsSupported(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.isOptionalCodecsEnabled(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.setOptionalCodecsEnabled(BluetoothDevice,int)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getDynamicBufferSupport()int :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getBufferConstraints()BufferConstraints :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.setBufferLengthMillis(int,int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.connect(BluetoothDevice)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.getDevicesMatchingConnectionStates([int)List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.getAudioConfig(BluetoothDevice)BluetoothAudioConfig :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.setPriority(BluetoothDevice,int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.getPriority(BluetoothDevice)int :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.getConnectionPolicy(BluetoothDevice)int :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.isAudioPlaying(BluetoothDevice)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.disableBLE()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.enableBLE()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.enable()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.disable()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.disable(boolean)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getAddress()String :: android.permission.,android.permission.BLUETOOTH_CONNECT,android.permission.LOCAL_MAC_ADDRESS
android.bluetooth.BluetoothAdapter.getName()String :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getNameLengthForAdvertise()int :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.BluetoothAdapter.factoryReset()boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getUuids()ParcelUuid[] :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.setName(java.lang.String)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getBluetoothClass()BluetoothClass :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.setBluetoothClass(BluetoothClass)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getIoCapability()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.setIoCapability(int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getLeIoCapability()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.setLeIoCapability(int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getScanMode()int :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.setScanMode(int,long)boolean :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.setScanMode(int)boolean :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.getDiscoverableTimeout()int :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.setDiscoverableTimeout(int)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.getDiscoveryEndMillis()long :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.startDiscovery()boolean :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.cancelDiscovery()boolean :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.isDiscovering()boolean :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.removeActiveDevice(int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT,android.permission.MODIFY_PHONE_STATE
android.bluetooth.BluetoothAdapter.setActiveDevice(BluetoothDevice,int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT,android.permission.MODIFY_PHONE_STATE
android.bluetooth.BluetoothAdapter.connectAllEnabledProfiles(BluetoothDevice)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT,android.permission.MODIFY_PHONE_STATE
android.bluetooth.BluetoothAdapter.disconnectAllEnabledProfiles(BluetoothDevice)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getMaxConnectedAudioDevices()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.isHardwareTrackingFiltersAvailable()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getControllerActivityEnergyInfo(int)BluetoothActivityEnergyInfo :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.requestControllerActivityEnergyInfo(android.os.ResultReceiver)void :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getMostRecentlyConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getBondedDevices()Set<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingRfcommOn(int)BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingRfcommOn(int,boolean,boolean)BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingEncryptedRfcommWithServiceRecord(java.lang.String,java.util.UUID)BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.createNewRfcommSocketAndRecord(java.lang.String,java.util.UUID,boolean,boolean)BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommOn(int)BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingL2capOn(int,boolean,boolean)BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingL2capOn(int)BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingInsecureL2capOn(int)BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.enableNoAutoConnect()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.generateLocalOobData(int,java.util.concurrent.Executor,OobDataCallback)void :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.startLeScan(LeScanCallback)boolean :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.startLeScan([UUID,LeScanCallback)boolean :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.stopLeScan(LeScanCallback)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.listenUsingL2capChannel()BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingInsecureL2capChannel()BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.addOnMetadataChangedListener(BluetoothDevice,java.util.concurrent.Executor,OnMetadataChangedListener)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.removeOnMetadataChangedListener(BluetoothDevice,OnMetadataChangedListener)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.registerBluetoothConnectionCallback(java.util.concurrent.Executor,BluetoothConnectionCallback)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.unregisterBluetoothConnectionCallback(BluetoothConnectionCallback)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAvrcpController.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAvrcpController.getDevicesMatchingConnectionStates([int)List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAvrcpController.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAvrcpController.getPlayerSettings(BluetoothDevice)BluetoothAvrcpPlayerSettings :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAvrcpController.setPlayerApplicationSetting(BluetoothAvrcpPlayerSettings)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAvrcpController.sendGroupNavigationCmd(BluetoothDevice,int,int)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getName()String :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getType()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getAlias()String :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setAlias(java.lang.String)int :: android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getBatteryLevel()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.createBond()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.createBond(int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.createBondOutOfBand(int,OobData,OobData)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.createBondInternal(int,OobData,OobData)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.isBondingInitiatedLocally()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.cancelBondProcess()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.removeBond()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.canBondWithoutDialog()boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.isConnected()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.isEncrypted()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getBluetoothClass()BluetoothClass :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getUuids()ParcelUuid[] :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.fetchUuidsWithSdp()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.sdpSearch(android.os.ParcelUuid)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setPin([byte)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setPin(java.lang.String)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setPairingConfirmation(boolean)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.cancelPairing()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getPhonebookAccessPermission()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setSilenceMode(boolean)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.isInSilenceMode()boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setPhonebookAccessPermission(int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getMessageAccessPermission()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setMessageAccessPermission(int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getSimAccessPermission()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setSimAccessPermission(int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.connectGatt(android.content.Context,boolean,BluetoothGattCallback)BluetoothGatt :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.connectGatt(android.content.Context,boolean,BluetoothGattCallback,int)BluetoothGatt :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.connectGatt(android.content.Context,boolean,BluetoothGattCallback,int,int)BluetoothGatt :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.connectGatt(android.content.Context,boolean,BluetoothGattCallback,int,int,android.os.Handler)BluetoothGatt :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.connectGatt(android.content.Context,boolean,BluetoothGattCallback,int,boolean,int,android.os.Handler)BluetoothGatt :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setMetadata(int,[byte)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getMetadata(int)byte[] :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.close()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.registerApp(BluetoothGattCallback,android.os.Handler)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.registerApp(BluetoothGattCallback,android.os.Handler,boolean)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.unregisterApp()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.disconnect()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.connect()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.setPreferredPhy(int,int,int)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.readPhy()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.discoverServices()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.discoverServiceByUuid(java.util.UUID)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.readCharacteristic(BluetoothGattCharacteristic)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.readUsingCharacteristicUuid(java.util.UUID,int,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.writeCharacteristic(BluetoothGattCharacteristic)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.readDescriptor(BluetoothGattDescriptor)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.writeDescriptor(BluetoothGattDescriptor)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.beginReliableWrite()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.executeReliableWrite()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.abortReliableWrite()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.abortReliableWrite(BluetoothDevice)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.setCharacteristicNotification(BluetoothGattCharacteristic,boolean)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.refresh()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.readRemoteRssi()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.requestMtu(int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.requestConnectionPriority(int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.requestLeConnectionUpdate(int,int,int,int,int,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.close()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.unregisterCallback()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.connect(BluetoothDevice,boolean)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.cancelConnection(BluetoothDevice)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.setPreferredPhy(BluetoothDevice,int,int,int)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.readPhy(BluetoothDevice)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.sendResponse(BluetoothDevice,int,int,int,[byte)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.notifyCharacteristicChanged(BluetoothDevice,BluetoothGattCharacteristic,boolean)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.addService(BluetoothGattService)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.removeService(BluetoothGattService)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.clearServices()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.connect(BluetoothDevice)boolean :: android.permission.,android.permission.MODIFY_PHONE_STATE,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getDevicesMatchingConnectionStates([int)List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.setPriority(BluetoothDevice,int)boolean :: android.permission.,android.permission.MODIFY_PHONE_STATE,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT,android.permission.MODIFY_PHONE_STATE
android.bluetooth.BluetoothHeadset.getPriority(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getConnectionPolicy(BluetoothDevice)int :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.isNoiseReductionSupported(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.isVoiceRecognitionSupported(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.startVoiceRecognition(BluetoothDevice)boolean :: android.permission.,android.permission.MODIFY_PHONE_STATE,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.stopVoiceRecognition(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.isAudioConnected(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getAudioState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.setAudioRouteAllowed(boolean)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getAudioRouteAllowed()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.setForceScoAudio(boolean)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.isAudioOn()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.connectAudio()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.disconnectAudio()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.startScoUsingVirtualVoiceCall()boolean :: android.permission.,android.permission.MODIFY_PHONE_STATE,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.stopScoUsingVirtualVoiceCall()boolean :: android.permission.,android.permission.MODIFY_PHONE_STATE,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.phoneStateChanged(int,int,int,java.lang.String,int,java.lang.String)void :: android.permission.,android.permission.MODIFY_PHONE_STATE,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.clccResponse(int,int,int,int,boolean,java.lang.String,int)void :: android.permission.,android.permission.MODIFY_PHONE_STATE,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.sendVendorSpecificResultCode(BluetoothDevice,java.lang.String,java.lang.String)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.setActiveDevice(BluetoothDevice)boolean :: android.permission.,android.permission.MODIFY_PHONE_STATE,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getActiveDevice()BluetoothDevice :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.isInbandRingingEnabled()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.connect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getDevicesMatchingConnectionStates([int)List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.setPriority(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getPriority(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getConnectionPolicy(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.startVoiceRecognition(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.sendVendorAtCommand(BluetoothDevice,int,java.lang.String)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.stopVoiceRecognition(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getCurrentCalls(BluetoothDevice)List<BluetoothHeadsetClientCall> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getCurrentAgEvents(BluetoothDevice)Bundle :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.acceptCall(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.holdCall(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.rejectCall(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.terminateCall(BluetoothDevice,BluetoothHeadsetClientCall)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.enterPrivateMode(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.explicitCallTransfer(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.dial(BluetoothDevice,java.lang.String)BluetoothHeadsetClientCall :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.sendDTMF(BluetoothDevice,byte)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getLastVoiceTagNumber(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getAudioState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.setAudioRouteAllowed(BluetoothDevice,boolean)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getAudioRouteAllowed(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.connectAudio(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.disconnectAudio(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getCurrentAgFeatures(BluetoothDevice)Bundle :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.connect(BluetoothDevice)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.disconnect(BluetoothDevice)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.getDevicesMatchingConnectionStates([int)List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.setActiveDevice(BluetoothDevice)boolean :: android.permission.R,android.permission. trackingBug = 170729553
android.bluetooth.BluetoothHearingAid.getActiveDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.setPriority(BluetoothDevice,int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.getPriority(BluetoothDevice)int :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.getConnectionPolicy(BluetoothDevice)int :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.setVolume(int)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.getHiSyncId(BluetoothDevice)long :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.getDeviceSide(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.getDeviceMode(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.getDevicesMatchingConnectionStates([int)List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.registerApp(BluetoothHidDeviceAppSdpSettings,BluetoothHidDeviceAppQosSettings,BluetoothHidDeviceAppQosSettings,java.util.concurrent.Executor,Callback)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.unregisterApp()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.sendReport(BluetoothDevice,int,[byte)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.replyReport(BluetoothDevice,byte,byte,[byte)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.reportError(BluetoothDevice,byte)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.getUserAppName()String :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.connect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.connect(BluetoothDevice)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.disconnect(BluetoothDevice)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.getDevicesMatchingConnectionStates([int)List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.setPriority(BluetoothDevice,int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.getPriority(BluetoothDevice)int :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.getConnectionPolicy(BluetoothDevice)int :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.virtualUnplug(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.getProtocolMode(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.setProtocolMode(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.getReport(BluetoothDevice,byte,byte,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.setReport(BluetoothDevice,byte,java.lang.String)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.sendData(BluetoothDevice,java.lang.String)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.getIdleTime(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.setIdleTime(BluetoothDevice,byte)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.connect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.getDevicesMatchingConnectionStates([int)List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.setActiveDevice(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.getActiveDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.getGroupId(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.getConnectionPolicy(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothManager.getConnectionState(BluetoothDevice,int)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothManager.getConnectedDevices(int)List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothManager.getDevicesMatchingConnectionStates(int,[int)List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothManager.openGattServer(android.content.Context,BluetoothGattServerCallback)BluetoothGattServer :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothManager.openGattServer(android.content.Context,BluetoothGattServerCallback,boolean)BluetoothGattServer :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothManager.openGattServer(android.content.Context,BluetoothGattServerCallback,int)BluetoothGattServer :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothManager.openGattServer(android.content.Context,BluetoothGattServerCallback,int,boolean)BluetoothGattServer :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.getState()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.getClient()BluetoothDevice :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.isConnected(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.getConnectedDevices()List<BluetoothDevice> :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.getDevicesMatchingConnectionStates([int)List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.setPriority(BluetoothDevice,int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.getPriority(BluetoothDevice)int :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.getConnectionPolicy(BluetoothDevice)int :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.isConnected(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.connect(BluetoothDevice)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.disconnect(BluetoothDevice)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.getDevicesMatchingConnectionStates([int)List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.setPriority(BluetoothDevice,int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.getPriority(BluetoothDevice)int :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.getConnectionPolicy(BluetoothDevice)int :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.sendMessage(BluetoothDevice,Collection<Uri>,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)boolean :: android.permission.SEND_SMS,android.permission.,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.sendMessage(BluetoothDevice,[Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)boolean :: android.permission.SEND_SMS,android.permission.,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.getUnreadMessages(BluetoothDevice)boolean :: android.permission.,android.permission.BLUETOOTH_CONNECT,android.permission.READ_SMS
android.bluetooth.BluetoothMapClient.isUploadingSupported(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.setMessageStatus(BluetoothDevice,java.lang.String,int)boolean :: android.permission.,android.permission.BLUETOOTH_CONNECT,android.permission.READ_SMS
android.bluetooth.BluetoothPan.connect(BluetoothDevice)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPan.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPan.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPan.getConnectedDevices()List<BluetoothDevice> :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPan.getDevicesMatchingConnectionStates([int)List<BluetoothDevice> :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPan.getConnectionState(BluetoothDevice)int :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPan.setBluetoothTethering(boolean)void :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT,android.permission.TETHER_PRIVILEGED
android.bluetooth.BluetoothPan.isTetheringOn()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbap.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbap.getConnectionState(BluetoothDevice)int :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbap.getDevicesMatchingConnectionStates([int)List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbap.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbap.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.connect(BluetoothDevice)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.disconnect(BluetoothDevice)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.getDevicesMatchingConnectionStates([int)List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.setPriority(BluetoothDevice,int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.getPriority(BluetoothDevice)int :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.getConnectionPolicy(BluetoothDevice)int :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getState()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getClient()BluetoothDevice :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.isConnected(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getDevicesMatchingConnectionStates([int)List<BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.setPriority(BluetoothDevice,int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getPriority(BluetoothDevice)int :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getConnectionPolicy(BluetoothDevice)int :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSocket.connect()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSocket.requestMaximumTxDataLength()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.le.AdvertisingSet.enableAdvertising(boolean,int,int)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setAdvertisingData(AdvertiseData)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setScanResponseData(AdvertiseData)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setAdvertisingParameters(AdvertisingSetParameters)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setPeriodicAdvertisingParameters(PeriodicAdvertisingParameters)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setPeriodicAdvertisingData(AdvertiseData)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setPeriodicAdvertisingEnabled(boolean)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.getOwnAddress()void :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(AdvertiseSettings,AdvertiseData,AdvertiseCallback)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(AdvertiseSettings,AdvertiseData,AdvertiseData,AdvertiseCallback)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.stopAdvertising(AdvertiseCallback)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertisingSet(AdvertisingSetParameters,AdvertiseData,AdvertiseData,PeriodicAdvertisingParameters,AdvertiseData,AdvertisingSetCallback)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertisingSet(AdvertisingSetParameters,AdvertiseData,AdvertiseData,PeriodicAdvertisingParameters,AdvertiseData,AdvertisingSetCallback,android.os.Handler)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertisingSet(AdvertisingSetParameters,AdvertiseData,AdvertiseData,PeriodicAdvertisingParameters,AdvertiseData,int,int,AdvertisingSetCallback)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertisingSet(AdvertisingSetParameters,AdvertiseData,AdvertiseData,PeriodicAdvertisingParameters,AdvertiseData,int,int,AdvertisingSetCallback,android.os.Handler)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.stopAdvertisingSet(AdvertisingSetCallback)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.totalBytes(AdvertiseData,boolean)int :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeScanner.startScan(ScanCallback)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.BLUETOOTH_SCAN,android.permission.ACCESS_COARSE_LOCATION
android.bluetooth.le.BluetoothLeScanner.startScan(List<ScanFilter>,ScanSettings,ScanCallback)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.BLUETOOTH_SCAN,android.permission.ACCESS_COARSE_LOCATION
android.bluetooth.le.BluetoothLeScanner.startScan(List<ScanFilter>,ScanSettings,android.app.PendingIntent)int :: android.permission.ACCESS_FINE_LOCATION,android.permission.BLUETOOTH_SCAN,android.permission.ACCESS_COARSE_LOCATION
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(android.os.WorkSource,ScanCallback)void :: android.permission.UPDATE_DEVICE_STATS,android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.startScan(List<ScanFilter>,ScanSettings,android.os.WorkSource,ScanCallback,android.app.PendingIntent,List<List<ResultStorageDescriptor>>)int :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.stopScan(ScanCallback)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.stopScan(android.app.PendingIntent)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.flushPendingScanResults(ScanCallback)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.startTruncatedScan(List<TruncatedFilter>,ScanSettings,ScanCallback)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.stopLeScan()void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.flushPendingBatchResults()void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.isHardwareResourcesAvailableForScan(ScanSettings)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.le.PeriodicAdvertisingManager.registerSync(ScanResult,int,int,PeriodicAdvertisingCallback)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.PeriodicAdvertisingManager.registerSync(ScanResult,int,int,PeriodicAdvertisingCallback,android.os.Handler)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.PeriodicAdvertisingManager.unregisterSync(PeriodicAdvertisingCallback)void :: android.permission.BLUETOOTH_SCAN
android.companion.CompanionDeviceManager.associate(AssociationRequest,Callback,android.os.Handler)void :: android.permission.REQUEST_COMPANION_PROFILE_WATCH
android.companion.CompanionDeviceManager.isDeviceAssociatedForWifiConnection(java.lang.String,android.net.MacAddress,android.os.UserHandle)boolean :: android.permission.COMPANION_APPROVE_WIFI_CONNECTIONS,android.permission.MANAGE_COMPANION_DEVICES
android.companion.CompanionDeviceManager.getAllAssociations()List<Association> :: android.permission.MANAGE_COMPANION_DEVICES
android.companion.CompanionDeviceManager.canPairWithoutPrompt(java.lang.String,java.lang.String,android.os.UserHandle)boolean :: android.permission.MANAGE_COMPANION_DEVICES
android.companion.CompanionDeviceManager.startObservingDevicePresence(java.lang.String)void :: android.permission.REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE
android.companion.CompanionDeviceManager.stopObservingDevicePresence(java.lang.String)void :: android.permission.REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE
android.companion.CompanionDeviceManager.associate(java.lang.String,android.net.MacAddress,[byte)void :: android.permission.ASSOCIATE_COMPANION_DEVICES
android.content.AttributionSource.getRenouncedPermissions()Set<String> :: android.permission.RENOUNCE_PERMISSIONS
android.content.AttributionSource.setRenouncedPermissions(Set<java.lang.String>)Builder :: android.permission.RENOUNCE_PERMISSIONS
android.content.ContentProviderClient.setDetectNotResponding(long)void :: android.permission.REMOVE_TASKS
android.content.ContentResolver.putCache(android.net.Uri,android.os.Bundle)void :: android.permission.CACHE_CONTENT
android.content.ContentResolver.getCache(android.net.Uri)Bundle :: android.permission.CACHE_CONTENT
android.content.Context.startActivityAsUser(Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.startActivityAsUser(Intent,android.os.Bundle,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.startActivitiesAsUser([Intent,android.os.Bundle,android.os.UserHandle)int :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(Intent,android.os.UserHandle,java.lang.String)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(Intent,android.os.UserHandle,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(Intent,android.os.UserHandle,java.lang.String,int)void :: android.permission.R,android.permission. trackingBug = 170729553
android.content.Context.sendOrderedBroadcastAsUser(Intent,android.os.UserHandle,java.lang.String,BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(Intent,android.os.UserHandle,java.lang.String,int,BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.R,android.permission. trackingBug = 170729553
android.content.Context.sendOrderedBroadcastAsUser(Intent,android.os.UserHandle,java.lang.String,int,android.os.Bundle,BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendStickyBroadcast(Intent)void :: android.permission.BROADCAST_STICKY
android.content.Context.sendStickyBroadcast(Intent,android.os.Bundle)void :: android.permission.BROADCAST_STICKY
android.content.Context.sendStickyOrderedBroadcast(Intent,BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.BROADCAST_STICKY
android.content.Context.removeStickyBroadcast(Intent)void :: android.permission.BROADCAST_STICKY
android.content.Context.sendStickyBroadcastAsUser(Intent,android.os.UserHandle)void :: android.permission.BROADCAST_STICKY,android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendStickyBroadcastAsUser(Intent,android.os.UserHandle,android.os.Bundle)void :: android.permission.BROADCAST_STICKY,android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendStickyOrderedBroadcastAsUser(Intent,android.os.UserHandle,BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.BROADCAST_STICKY,android.permission.INTERACT_ACROSS_USERS
android.content.Context.removeStickyBroadcastAsUser(Intent,android.os.UserHandle)void :: android.permission.BROADCAST_STICKY,android.permission.INTERACT_ACROSS_USERS
android.content.Context.registerReceiverForAllUsers(BroadcastReceiver,IntentFilter,java.lang.String,android.os.Handler)Intent :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.registerReceiverAsUser(BroadcastReceiver,android.os.UserHandle,IntentFilter,java.lang.String,android.os.Handler)Intent :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startForegroundServiceAsUser(Intent,android.os.UserHandle)ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.startServiceAsUser(Intent,android.os.UserHandle)ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.stopServiceAsUser(Intent,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.bindServiceAsUser(Intent,ServiceConnection,int,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_PROFILES,android.permission.INTERACT_ACROSS_USERS
android.content.Context.bindServiceAsUser(Intent,ServiceConnection,int,android.os.Handler,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS)
    @UnsupportedAppUsage(trackingBug = 136728678
android.content.ContextParams.getRenouncedPermissions()Set<String> :: android.permission.RENOUNCE_PERMISSIONS
android.content.ContextParams.setRenouncedPermissions(Set<java.lang.String>)Builder :: android.permission.RENOUNCE_PERMISSIONS
android.content.om.OverlayManager.setEnabledExclusiveInCategory(java.lang.String,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.INTERACT_ACROSS_USERS
android.content.om.OverlayManager.setEnabled(java.lang.String,boolean,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.INTERACT_ACROSS_USERS
android.content.om.OverlayManager.getOverlayInfosForTarget(java.lang.String,android.os.UserHandle)List<OverlayInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.INTERACT_ACROSS_USERS
android.content.om.OverlayManager.invalidateCachesForOverlay(java.lang.String,android.os.UserHandle)void :: android.permission.,android.permission.INTERACT_ACROSS_USERS
android.content.pm.CrossProfileApps.startActivity(android.content.Intent,android.os.UserHandle,android.app.Activity)void :: android.permission.INTERACT_ACROSS_PROFILES,android.permission.INTERACT_ACROSS_USERS
android.content.pm.CrossProfileApps.startActivity(android.content.Intent,android.os.UserHandle,android.app.Activity,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_PROFILES,android.permission.INTERACT_ACROSS_USERS
android.content.pm.CrossProfileApps.startActivity(android.content.ComponentName,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_PROFILES
android.content.pm.CrossProfileApps.setInteractAcrossProfilesAppOp(java.lang.String,int)void :: android.permission.INTERACT_ACROSS_USERS,android.permission.CONFIGURE_INTERACT_ACROSS_PROFILES
android.content.pm.CrossProfileApps.resetInteractAcrossProfilesAppOps(Collection<java.lang.String>,Set<java.lang.String>)void :: android.permission.INTERACT_ACROSS_USERS,android.permission.CONFIGURE_INTERACT_ACROSS_PROFILES
android.content.pm.CrossProfileApps.clearInteractAcrossProfilesAppOps()void :: android.permission.INTERACT_ACROSS_USERS,android.permission.CONFIGURE_INTERACT_ACROSS_PROFILES
android.content.pm.LauncherApps.cacheShortcuts(java.lang.String,List<java.lang.String>,android.os.UserHandle,int)void :: android.permission.ACCESS_SHORTCUTS
android.content.pm.LauncherApps.uncacheShortcuts(java.lang.String,List<java.lang.String>,android.os.UserHandle,int)void :: android.permission.ACCESS_SHORTCUTS
android.content.pm.PackageInstaller.uninstall(java.lang.String,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES,android.permission.REQUEST_DELETE_PACKAGES
android.content.pm.PackageInstaller.uninstall(VersionedPackage,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES,android.permission.REQUEST_DELETE_PACKAGES
android.content.pm.PackageInstaller.uninstall(VersionedPackage,int,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES,android.permission.REQUEST_DELETE_PACKAGES
android.content.pm.PackageInstaller.installExistingPackage(java.lang.String,int,android.content.IntentSender)void :: android.permission.INSTALL_EXISTING_PACKAGES,android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller.uninstallExistingPackage(java.lang.String,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES
android.content.pm.PackageInstaller.setPermissionsResult(int,boolean)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller.getDataLoaderParams()DataLoaderParams :: android.permission.USE_INSTALLER_V2
android.content.pm.PackageInstaller.addFile(int,java.lang.String,long,[byte,[byte)void :: android.permission.USE_INSTALLER_V2
android.content.pm.PackageInstaller.removeFile(int,java.lang.String)void :: android.permission.USE_INSTALLER_V2
android.content.pm.PackageInstaller.commitTransferred(android.content.IntentSender)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller.setGrantedRuntimePermissions([java.lang.String)void :: android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageInstaller.setAllocateAggressive(boolean)void :: android.permission.ALLOCATE_AGGRESSIVE
android.content.pm.PackageInstaller.setStaged()void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller.setInstallAsApex()void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller.setDataLoaderParams(DataLoaderParams)void :: android.permission.USE_INSTALLER_V2,android.permission.INSTALL_PACKAGES
android.content.pm.PackageManager.getPackageInfoAsUser(java.lang.String,int,int)PackageInfo :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.getApplicationInfoAsUser(java.lang.String,int,android.os.UserHandle)ApplicationInfo :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.getInstalledPackagesAsUser(int,int)List<PackageInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.grantRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.revokeRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.revokeRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle,java.lang.String)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.getPermissionFlags(java.lang.String,java.lang.String,android.os.UserHandle)int :: android.permission.REVOKE_RUNTIME_PERMISSIONS,android.permission.GET_RUNTIME_PERMISSIONS,android.permission.GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.updatePermissionFlags(java.lang.String,java.lang.String,int,int,android.os.UserHandle)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS,android.permission.GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.getWhitelistedRestrictedPermissions(java.lang.String,int)Set<String> :: android.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.content.pm.PackageManager.addWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)boolean :: android.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.content.pm.PackageManager.removeWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)boolean :: android.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.content.pm.PackageManager.setAutoRevokeWhitelisted(java.lang.String,boolean)boolean :: android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONS
android.content.pm.PackageManager.isAutoRevokeWhitelisted(java.lang.String)boolean :: android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONS
android.content.pm.PackageManager.getInstantApps()List<InstantAppInfo> :: android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManager.getInstantAppIcon(java.lang.String)Drawable :: android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManager.getDeclaredSharedLibraries(java.lang.String,int)List<SharedLibraryInfo> :: android.permission.ACCESS_SHARED_LIBRARIES
android.content.pm.PackageManager.queryIntentActivitiesAsUser(android.content.Intent,int,android.os.UserHandle)List<ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.queryBroadcastReceiversAsUser(android.content.Intent,int,android.os.UserHandle)List<ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.queryIntentServicesAsUser(android.content.Intent,int,android.os.UserHandle)List<ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.queryIntentContentProvidersAsUser(android.content.Intent,int,android.os.UserHandle)List<ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.installExistingPackageAsUser(java.lang.String,int)int :: android.permission.INSTALL_EXISTING_PACKAGES,android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.INSTALL_PACKAGES
android.content.pm.PackageManager.verifyIntentFilter(int,int,List<java.lang.String>)void :: android.permission.INTENT_FILTER_VERIFICATION_AGENT
android.content.pm.PackageManager.getIntentVerificationStatusAsUser(java.lang.String,int)int :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.updateIntentVerificationStatusAsUser(java.lang.String,int,int)boolean :: android.permission.SET_PREFERRED_APPLICATIONS
android.content.pm.PackageManager.getDefaultBrowserPackageNameAsUser(int)String :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.setDefaultBrowserPackageNameAsUser(java.lang.String,int)boolean :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.SET_PREFERRED_APPLICATIONS
android.content.pm.PackageManager.setUpdateAvailable(java.lang.String,boolean)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageManager.deletePackage(java.lang.String,IPackageDeleteObserver,int)void :: android.permission.DELETE_PACKAGES
android.content.pm.PackageManager.deletePackageAsUser(java.lang.String,IPackageDeleteObserver,int,int)void :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.DELETE_PACKAGES
android.content.pm.PackageManager.setComponentEnabledSetting(android.content.ComponentName,int,int)void :: android.permission.CHANGE_COMPONENT_ENABLED_STATE
android.content.pm.PackageManager.setSyntheticAppDetailsActivityEnabled(java.lang.String,boolean)void :: android.permission.CHANGE_COMPONENT_ENABLED_STATE
android.content.pm.PackageManager.setApplicationEnabledSetting(java.lang.String,int,int)void :: android.permission.CHANGE_COMPONENT_ENABLED_STATE
android.content.pm.PackageManager.addOnPermissionsChangeListener(OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageManager.removeOnPermissionsChangeListener(OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageManager.setDistractingPackageRestrictions([java.lang.String,int)String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.setPackagesSuspended([java.lang.String,boolean,android.os.PersistableBundle,android.os.PersistableBundle,java.lang.String)String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.setPackagesSuspended([java.lang.String,boolean,android.os.PersistableBundle,android.os.PersistableBundle,SuspendDialogInfo)String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.getUnsuspendablePackages([java.lang.String)String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.setHarmfulAppWarning(java.lang.String,CharSequence)void :: android.permission.SET_HARMFUL_APP_WARNINGS
android.content.pm.PackageManager.getHarmfulAppWarning(java.lang.String)CharSequence :: android.permission.SET_HARMFUL_APP_WARNINGS
android.content.pm.PackageManager.getHoldLockToken()IBinder :: android.permission.INJECT_EVENTS
android.content.pm.PackageManager.setKeepUninstalledPackages(List<java.lang.String>)void :: android.permission.KEEP_UNINSTALLED_PACKAGES
android.content.pm.ShortcutManager.getShareTargets(android.content.IntentFilter)List<ShareShortcutInfo> :: android.permission.MANAGE_APP_PREDICTIONS
android.content.pm.dex.ArtManager.snapshotRuntimeProfile(int,java.lang.String,java.lang.String,java.util.concurrent.Executor,SnapshotRuntimeProfileCallback)void :: android.permission.PACKAGE_USAGE_STATS,android.permission.READ_RUNTIME_PROFILES
android.content.pm.dex.ArtManager.isRuntimeProfilingEnabled(int)boolean :: android.permission.PACKAGE_USAGE_STATS,android.permission.READ_RUNTIME_PROFILES
android.content.pm.verify.domain.DomainVerificationManager.queryValidVerificationPackageNames()List<String> :: android.permission.DOMAIN_VERIFICATION_AGENT
android.content.pm.verify.domain.DomainVerificationManager.getDomainVerificationInfo(java.lang.String)DomainVerificationInfo :: android.permission.DOMAIN_VERIFICATION_AGENT
android.content.pm.verify.domain.DomainVerificationManager.setDomainVerificationStatus(java.util.UUID,Set<java.lang.String>,int)int :: android.permission.DOMAIN_VERIFICATION_AGENT
android.content.pm.verify.domain.DomainVerificationManager.setDomainVerificationLinkHandlingAllowed(java.lang.String,boolean)void :: android.permission.UPDATE_DOMAIN_VERIFICATION_USER_SELECTION
android.content.pm.verify.domain.DomainVerificationManager.setDomainVerificationUserSelection(java.util.UUID,Set<java.lang.String>,boolean)int :: android.permission.UPDATE_DOMAIN_VERIFICATION_USER_SELECTION
android.content.pm.verify.domain.DomainVerificationManager.getOwnersForDomain(java.lang.String)SortedSet<DomainOwner> :: android.permission.UPDATE_DOMAIN_VERIFICATION_USER_SELECTION
android.content.rollback.RollbackManager.getAvailableRollbacks()List<RollbackInfo> :: android.permission.TEST_MANAGE_ROLLBACKS,android.permission.MANAGE_ROLLBACKS
android.content.rollback.RollbackManager.getRecentlyCommittedRollbacks()List<RollbackInfo> :: android.permission.TEST_MANAGE_ROLLBACKS,android.permission.MANAGE_ROLLBACKS
android.content.rollback.RollbackManager.commitRollback(int,List<VersionedPackage>,android.content.IntentSender)void :: android.permission.TEST_MANAGE_ROLLBACKS,android.permission.MANAGE_ROLLBACKS
android.content.rollback.RollbackManager.reloadPersistedData()void :: android.permission.TEST_MANAGE_ROLLBACKS
android.content.rollback.RollbackManager.expireRollbackForPackage(java.lang.String)void :: android.permission.TEST_MANAGE_ROLLBACKS
android.content.rollback.RollbackManager.blockRollbackManager(long)void :: android.permission.TEST_MANAGE_ROLLBACKS
android.debug.AdbManager.isAdbWifiSupported()boolean :: android.permission.MANAGE_DEBUGGING
android.debug.AdbManager.isAdbWifiQrSupported()boolean :: android.permission.MANAGE_DEBUGGING
android.graphics.fonts.FontManager.getFontConfig()FontConfig :: android.permission.UPDATE_FONTS
android.graphics.fonts.FontManager.fontFile.getSignature(), :: android.permission.getParcelFileDescriptor(,android.permission.UPDATE_FONTS) public @ResultCode int updateFontFamily(
            @NonNull FontFamilyUpdateRequest request
android.hardware.SensorPrivacyManager.addSensorPrivacyListener(int,OnSensorPrivacyChangedListener)void :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.addSensorPrivacyListener(int,int,OnSensorPrivacyChangedListener)void :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.addSensorPrivacyListener(int,java.util.concurrent.Executor,OnSensorPrivacyChangedListener)void :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.addSensorPrivacyListener(int,int,java.util.concurrent.Executor,OnSensorPrivacyChangedListener)void :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.removeSensorPrivacyListener(int,OnSensorPrivacyChangedListener)void :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.isSensorPrivacyEnabled(int)boolean :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.isSensorPrivacyEnabled(int,int)boolean :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.setSensorPrivacy(int,int,boolean)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.setSensorPrivacy(int,int,boolean,int)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.setSensorPrivacyForProfileGroup(int,int,boolean)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.setSensorPrivacyForProfileGroup(int,int,boolean,int)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.suppressSensorPrivacyReminders(int,boolean)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.suppressSensorPrivacyReminders(int,boolean,int)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.setAllSensorPrivacy(boolean)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.addAllSensorPrivacyListener(OnAllSensorPrivacyChangedListener)void :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.removeAllSensorPrivacyListener(OnAllSensorPrivacyChangedListener)void :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.isAllSensorPrivacyEnabled()boolean :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.biometrics.BiometricManager.getButtonLabel()CharSequence :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager.getPromptMessage()CharSequence :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager.getSettingName()CharSequence :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager.getSensorProperties()List<SensorProperties> :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricManager.createTestSession(int)BiometricTestSession :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricManager.getUiPackage()String :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricManager.canAuthenticate()int :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager.canAuthenticate(int)int :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager.canAuthenticate(int,int)int :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.getStrings(int)Strings :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager.hasEnrolledBiometrics(int)boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.registerEnabledOnKeyguardCallback(IBiometricEnabledOnKeyguardCallback)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.invalidateAuthenticatorIds(int,int,IInvalidationCallback)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.resetLockoutTimeBound(android.os.IBinder,java.lang.String,int,int,[byte)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.setUseDefaultTitle()Builder :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.setTextForDeviceCredential(CharSequence,CharSequence,CharSequence)Builder :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.setAllowedSensorIds(List<Integer>)Builder :: android.permission.USE_BIOMETRIC_INTERNAL,android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricPrompt.setAllowBackgroundAuthentication(boolean)Builder :: android.permission.USE_BIOMETRIC_INTERNAL,android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricPrompt.shouldUseDefaultTitle()boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.authenticateUser(android.os.CancellationSignal,java.util.concurrent.Executor,AuthenticationCallback,int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.authenticateUserForOperation(android.os.CancellationSignal,java.util.concurrent.Executor,AuthenticationCallback,int,long)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.authenticate(CryptoObject,android.os.CancellationSignal,java.util.concurrent.Executor,AuthenticationCallback)void :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricPrompt.authenticate(android.os.CancellationSignal,java.util.concurrent.Executor,AuthenticationCallback)void :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.setTestHalEnabled(boolean)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.startEnroll(int)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.finishEnroll(int)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.acceptAuthentication(int)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.rejectAuthentication(int)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.notifyAcquired(int,int)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.notifyError(int,int)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.cleanupInternalState(int)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.close()void :: android.permission.TEST_BIOMETRIC
android.hardware.camera2.CameraManager.isConcurrentSessionConfigurationSupported(Map<java.lang.String,SessionConfiguration>)boolean :: android.permission.CAMERA
android.hardware.camera2.CameraManager.openCamera(java.lang.String,CameraDevice.StateCallback,android.os.Handler)void :: android.permission.CAMERA
android.hardware.camera2.CameraManager.openCamera(java.lang.String,java.util.concurrent.Executor,CameraDevice.StateCallback)void :: android.permission.CAMERA
android.hardware.camera2.CameraManager.openCamera(java.lang.String,int,java.util.concurrent.Executor,CameraDevice.StateCallback)void :: android.permission.CAMERA,android.permission.SYSTEM_CAMERA,android.permission.
android.hardware.camera2.CameraManager.onCameraOpened(java.lang.String,java.lang.String)void :: android.permission.CAMERA_OPEN_CLOSE_LISTENER
android.hardware.camera2.CameraManager.onCameraClosed(java.lang.String)void :: android.permission.CAMERA_OPEN_CLOSE_LISTENER
android.hardware.camera2.CameraManager.injectCamera(java.lang.String,java.lang.String,java.lang.String,java.util.concurrent.Executor,CameraInjectionSession.InjectionStatusCallback)void :: android.permission.CAMERA_INJECT_EXTERNAL_CAMERA
android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl.createCameraAdvancedExtensionSession(android.hardware.camera2.CameraDevice,android.content.Context,android.hardware.camera2.params.ExtensionSessionConfiguration)CameraAdvancedExtensionSessionImpl :: android.permission.CAMERA
android.hardware.camera2.impl.CameraExtensionSessionImpl.createCameraExtensionSession(android.hardware.camera2.CameraDevice,android.content.Context,android.hardware.camera2.params.ExtensionSessionConfiguration)CameraExtensionSessionImpl :: android.permission.CAMERA
android.hardware.devicestate.DeviceStateManager.requestState(DeviceStateRequest,java.util.concurrent.Executor,DeviceStateRequest.Callback)void :: android.permission.CONTROL_DEVICE_STATE
android.hardware.devicestate.DeviceStateManager.cancelRequest(DeviceStateRequest)void :: android.permission.CONTROL_DEVICE_STATE
android.hardware.display.ColorDisplayManager.setNightDisplayActivated(boolean)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayColorTemperature(int)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.getNightDisplayAutoMode()int :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayAutoMode(int)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayCustomStartTime(java.time.LocalTime)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayCustomEndTime(java.time.LocalTime)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.isDeviceColorManaged()boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.mManager.setSaturationLevel(saturationLevel)int :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)
    public boolean setSaturationLevel(@IntRange(from = 0,android.permission. to = 100
android.hardware.display.ColorDisplayManager.isSaturationActivated()boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.mManager.setAppSaturationLevel(packageName,saturationLevel)int :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)
    public boolean setAppSaturationLevel(@NonNull String packageName,android.permission.
            @IntRange(from = 0,android.permission. to = 100
android.hardware.display.ColorDisplayManager.setDisplayWhiteBalanceEnabled(boolean)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setReduceBrightColorsActivated(boolean)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.mManager.setReduceBrightColorsStrength(strength)int :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)
    public boolean setReduceBrightColorsStrength(@IntRange(from = 0,android.permission. to = 100
android.hardware.display.ColorDisplayManager.getTransformCapabilities()int :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.DisplayManager.setSaturationLevel(float)void :: android.permission.CONTROL_DISPLAY_SATURATION
android.hardware.display.DisplayManager.setUserDisabledHdrTypes([int)void :: android.permission.WRITE_SECURE_SETTINGS
android.hardware.display.DisplayManager.setAreUserDisabledHdrTypesAllowed(boolean)void :: android.permission.WRITE_SECURE_SETTINGS
android.hardware.display.DisplayManager.getBrightnessEvents()List<BrightnessChangeEvent> :: android.permission.BRIGHTNESS_SLIDER_USAGE
android.hardware.display.DisplayManager.getAmbientBrightnessStats()List<AmbientBrightnessDayStats> :: android.permission.ACCESS_AMBIENT_LIGHT_STATS
android.hardware.display.DisplayManager.setBrightnessConfiguration(BrightnessConfiguration)void :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.getBrightnessConfiguration()BrightnessConfiguration :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.getDefaultBrightnessConfiguration()BrightnessConfiguration :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.mGlobal.setBrightness(displayId,brightness)float :: android.permission.CONTROL_DISPLAY_BRIGHTNESS)
    public void setBrightness(int displayId,android.permission. @FloatRange(from = 0f,android.permission. to = 1f
android.hardware.display.DisplayManager.getBrightness(int)float :: android.permission.CONTROL_DISPLAY_BRIGHTNESS)
    @FloatRange(from = 0f,android.permission. to = 1f
android.hardware.display.DisplayManager.setShouldAlwaysRespectAppRequestedMode(boolean)void :: android.permission.OVERRIDE_DISPLAY_MODE_REQUESTS
android.hardware.display.DisplayManager.shouldAlwaysRespectAppRequestedMode()boolean :: android.permission.OVERRIDE_DISPLAY_MODE_REQUESTS
android.hardware.display.DisplayManager.setRefreshRateSwitchingType(int)void :: android.permission.MODIFY_REFRESH_RATE_SWITCHING_TYPE
android.hardware.face.FaceManager.authenticate(android.hardware.biometrics.CryptoObject,android.os.CancellationSignal,AuthenticationCallback,android.os.Handler,int,boolean)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.detectFace(android.os.CancellationSignal,FaceDetectionCallback,int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.enroll(int,[byte,android.os.CancellationSignal,EnrollmentCallback,[int)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.enroll(int,[byte,android.os.CancellationSignal,EnrollmentCallback,[int,android.view.Surface,boolean)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.enrollRemotely(int,[byte,android.os.CancellationSignal,EnrollmentCallback,[int)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.generateChallenge(int,int,GenerateChallengeCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.generateChallenge(int,GenerateChallengeCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.revokeChallenge(int,int,long)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.resetLockout(int,int,[byte)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.setFeature(int,int,boolean,[byte,SetFeatureCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.getFeature(int,int,GetFeatureCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.remove(Face,int,RemovalCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.removeAll(int,RemovalCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.getEnrolledFaces(int)List<Face> :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.getEnrolledFaces()List<Face> :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.hasEnrolledTemplates()boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.hasEnrolledTemplates(int)boolean :: android.permission.USE_BIOMETRIC_INTERNAL,android.permission.INTERACT_ACROSS_USERS
android.hardware.face.FaceManager.isHardwareDetected()boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.getSensorPropertiesInternal()List<FaceSensorPropertiesInternal> :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.addLockoutResetCallback(LockoutResetCallback)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.getSensorProperties()List<SensorProperties> :: android.permission.TEST_BIOMETRIC
android.hardware.fingerprint.FingerprintManager.createTestSession(int)BiometricTestSession :: android.permission.TEST_BIOMETRIC
android.hardware.fingerprint.FingerprintManager.authenticate(CryptoObject,android.os.CancellationSignal,int,AuthenticationCallback,android.os.Handler)void :: android.permission.USE_BIOMETRIC,android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.authenticate(CryptoObject,android.os.CancellationSignal,AuthenticationCallback,android.os.Handler,int)void :: android.permission.USE_BIOMETRIC,android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.authenticate(CryptoObject,android.os.CancellationSignal,AuthenticationCallback,android.os.Handler,int,int)void :: android.permission.USE_BIOMETRIC,android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.detectFingerprint(android.os.CancellationSignal,FingerprintDetectionCallback,int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.enroll(byte,android.os.CancellationSignal,int,EnrollmentCallback,int)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.generateChallenge(int,int,GenerateChallengeCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.generateChallenge(int,GenerateChallengeCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.revokeChallenge(int,long)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.resetLockout(int,int,[byte)void :: android.permission.RESET_FINGERPRINT_LOCKOUT
android.hardware.fingerprint.FingerprintManager.remove(Fingerprint,int,RemovalCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.removeAll(int,RemovalCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.rename(int,int,java.lang.String)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints(int)List<Fingerprint> :: android.permission.R,android.permission. trackingBug = 170729553
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints()List<Fingerprint> :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledTemplatesForAnySensor(int,List<FingerprintSensorPropertiesInternal>)boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.setUdfpsOverlayController(IUdfpsOverlayController)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.setSidefpsController(ISidefpsController)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.onPointerDown(int,int,int,float,float)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.onPointerUp(int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.onUiReady(int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints()boolean :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints(int)boolean :: android.permission.INTERACT_ACROSS_USERS,android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.isHardwareDetected()boolean :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getSensorPropertiesInternal()List<FingerprintSensorPropertiesInternal> :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.addAuthenticatorsRegisteredCallback(IFingerprintAuthenticatorsRegisteredCallback)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.hdmi.HdmiControlManager.setStandbyMode(boolean)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.toggleAndFollowTvPower()void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.shouldHandleTvPowerKey()boolean :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setHdmiCecVolumeControlEnabled(int)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getHdmiCecVolumeControlEnabled()int :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHotplugEventListener(HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHotplugEventListener(java.util.concurrent.Executor,HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHotplugEventListener(HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHdmiControlStatusChangeListener(HdmiControlStatusChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHdmiControlStatusChangeListener(java.util.concurrent.Executor,HdmiControlStatusChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHdmiControlStatusChangeListener(HdmiControlStatusChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHdmiCecVolumeControlFeatureListener(java.util.concurrent.Executor,HdmiCecVolumeControlFeatureListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHdmiCecVolumeControlFeatureListener(HdmiCecVolumeControlFeatureListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getUserCecSettings()List<String> :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getAllowedCecSettingStringValues(java.lang.String)List<String> :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getAllowedCecSettingIntValues(java.lang.String)List<Integer> :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setHdmiCecEnabled(int)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getHdmiCecEnabled()int :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHdmiCecEnabledChangeListener(CecSettingChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHdmiCecEnabledChangeListener(java.util.concurrent.Executor,CecSettingChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHdmiCecEnabledChangeListener(CecSettingChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setHdmiCecVersion(int)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getHdmiCecVersion()int :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setPowerControlMode(java.lang.String)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getPowerControlMode()String :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setPowerStateChangeOnActiveSourceLost(java.lang.String)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getPowerStateChangeOnActiveSourceLost()String :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setSystemAudioModeMuting(int)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getSystemAudioModeMuting()int :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setTvWakeOnOneTouchPlay(int)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getTvWakeOnOneTouchPlay()int :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setTvSendStandbyOnSleep(int)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getTvSendStandbyOnSleep()int :: android.permission.HDMI_CEC
android.hardware.input.InputManager.if(opacity)float :: android.permission. to = 1,android.permission.WRITE_SECURE_SETTINGS)
    public void setMaximumObscuringOpacityForTouch(@FloatRange(from = 0
android.hardware.input.InputManager.setBlockUntrustedTouchesMode(android.content.Context,int)void :: android.permission.WRITE_SECURE_SETTINGS
android.hardware.lights.SystemLightsManager.getLights()List<Light> :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.SystemLightsManager.getLightState(Light)LightState :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.SystemLightsManager.openSession()LightsSession :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.SystemLightsManager.openSession(int)LightsSession :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.SystemLightsManager.SystemLightsSession()SystemLightsSession() :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.SystemLightsManager.requestLights(LightsRequest)void :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.SystemLightsManager.close()void :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.location.ContextHubClient.sendMessageToNanoApp(NanoAppMessage)int :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.getContextHubHandles()int[] :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.getContextHubInfo(int)ContextHubInfo :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.loadNanoApp(int,NanoApp)int :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.unloadNanoApp(int)int :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.getNanoAppInstanceInfo(int)NanoAppInstanceInfo :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.findNanoAppOnHub(int,NanoAppFilter)int[] :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.sendMessage(int,int,ContextHubMessage)int :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.getContextHubs()List<ContextHubInfo> :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.loadNanoApp(ContextHubInfo,NanoAppBinary)ContextHubTransaction<Void> :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.unloadNanoApp(ContextHubInfo,long)ContextHubTransaction<Void> :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.enableNanoApp(ContextHubInfo,long)ContextHubTransaction<Void> :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.disableNanoApp(ContextHubInfo,long)ContextHubTransaction<Void> :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.queryNanoApps(ContextHubInfo)ContextHubTransaction<List<NanoAppState>> :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.createClient(android.content.Context,ContextHubInfo,java.util.concurrent.Executor,ContextHubClientCallback)ContextHubClient :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.createClient(ContextHubInfo,ContextHubClientCallback,java.util.concurrent.Executor)ContextHubClient :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.createClient(ContextHubInfo,ContextHubClientCallback)ContextHubClient :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.createClient(android.content.Context,ContextHubInfo,android.app.PendingIntent,long)ContextHubClient :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.createClient(ContextHubInfo,android.app.PendingIntent,long)ContextHubClient :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.radio.RadioManager.listModules(List<ModuleProperties>)int :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.openTuner(int,BandConfig,boolean,RadioTuner.Callback,android.os.Handler)RadioTuner :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.addAnnouncementListener(Set<Integer>,Announcement.OnListUpdatedListener)void :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.addAnnouncementListener(java.util.concurrent.Executor,Set<Integer>,Announcement.OnListUpdatedListener)void :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.removeAnnouncementListener(Announcement.OnListUpdatedListener)void :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.soundtrigger.SoundTrigger.listModulesAsOriginator(ArrayList<ModuleProperties>,android.media.permission.Identity)int :: android.permission.RECORD_AUDIO,android.permission.CAPTURE_AUDIO_HOTWORD
android.hardware.soundtrigger.SoundTrigger.listModulesAsMiddleman(ArrayList<ModuleProperties>,android.media.permission.Identity,android.media.permission.Identity)int :: android.permission.SOUNDTRIGGER_DELEGATE_IDENTITY
android.hardware.soundtrigger.SoundTrigger.attachModuleAsMiddleman(int,SoundTrigger.StatusListener,android.os.Handler,android.media.permission.Identity,android.media.permission.Identity)SoundTriggerModule :: android.permission.SOUNDTRIGGER_DELEGATE_IDENTITY
android.hardware.soundtrigger.SoundTrigger.attachModuleAsOriginator(int,SoundTrigger.StatusListener,android.os.Handler,android.media.permission.Identity)SoundTriggerModule :: android.permission.RECORD_AUDIO,android.permission.CAPTURE_AUDIO_HOTWORD
android.hardware.usb.UsbManager.grantPermission(UsbDevice,java.lang.String)void :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.setCurrentFunctions(long)void :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.getCurrentFunctions()long :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.getUsbBandwidthMbps()int :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.getGadgetHalVersion()int :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.getUsbHalVersion()int :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.resetUsbGadget()void :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.enableUsbDataSignal(boolean)boolean :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.getPorts()List<UsbPort> :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.enableContaminantDetection(UsbPort,boolean)void :: android.permission.MANAGE_USB
android.hardware.usb.UsbPort.getStatus()UsbPortStatus :: android.permission.MANAGE_USB
android.hardware.usb.UsbPort.setRoles(int,int)void :: android.permission.MANAGE_USB
android.location.LastLocationRequest.setHiddenFromAppOps(boolean)Builder :: android.permission.UPDATE_APP_OPS_STATS
android.location.LastLocationRequest.setAdasGnssBypass(boolean)LastLocationRequest.Builder :: android.permission.WRITE_SECURE_SETTINGS
android.location.LastLocationRequest.setLocationSettingsIgnored(boolean)Builder :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationManager.setExtraLocationControllerPackage(java.lang.String)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setExtraLocationControllerPackageEnabled(boolean)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setLocationControllerExtraPackage(java.lang.String)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setLocationControllerExtraPackageEnabled(boolean)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setLocationEnabledForUser(boolean,android.os.UserHandle)void :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationManager.setAdasGnssLocationEnabled(boolean)void :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationManager.setProviderEnabledForUser(java.lang.String,boolean,android.os.UserHandle)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationManager.getLastLocation()Location :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.getLastKnownLocation(java.lang.String)Location :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.getLastKnownLocation(java.lang.String,LastLocationRequest)Location :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.getCurrentLocation(java.lang.String,android.os.CancellationSignal,java.util.concurrent.Executor,Consumer<Location>)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.getCurrentLocation(LocationRequest,android.os.CancellationSignal,java.util.concurrent.Executor,Consumer<Location>)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.getCurrentLocation(java.lang.String,LocationRequest,android.os.CancellationSignal,java.util.concurrent.Executor,Consumer<Location>)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestSingleUpdate(java.lang.String,LocationListener,android.os.Looper)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestSingleUpdate(Criteria,LocationListener,android.os.Looper)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestSingleUpdate(java.lang.String,android.app.PendingIntent)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestSingleUpdate(Criteria,android.app.PendingIntent)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,LocationListener)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,LocationListener,android.os.Looper)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,java.util.concurrent.Executor,LocationListener)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(long,float,Criteria,LocationListener,android.os.Looper)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(long,float,Criteria,java.util.concurrent.Executor,LocationListener)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(long,float,Criteria,android.app.PendingIntent)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(LocationRequest,LocationListener,android.os.Looper)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(LocationRequest,java.util.concurrent.Executor,LocationListener)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(LocationRequest,android.app.PendingIntent)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(java.lang.String,LocationRequest,java.util.concurrent.Executor,LocationListener)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(java.lang.String,LocationRequest,android.app.PendingIntent)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.injectLocation(Location)boolean :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.isProviderPackage(java.lang.String)boolean :: android.permission.READ_DEVICE_CONFIG
android.location.LocationManager.isProviderPackage(java.lang.String,java.lang.String)boolean :: android.permission.READ_DEVICE_CONFIG
android.location.LocationManager.isProviderPackage(java.lang.String,java.lang.String,java.lang.String)boolean :: android.permission.READ_DEVICE_CONFIG
android.location.LocationManager.addProximityAlert(double,double,float,long,android.app.PendingIntent)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.getGpsStatus(GpsStatus)GpsStatus :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addGpsStatusListener(GpsStatus.Listener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(GnssStatus.Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(GnssStatus.Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(java.util.concurrent.Executor,GnssStatus.Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(GpsStatus.NmeaListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(OnNmeaMessageListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(OnNmeaMessageListener,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(java.util.concurrent.Executor,OnNmeaMessageListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(java.util.concurrent.Executor,GnssMeasurementsEvent.Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(GnssRequest,java.util.concurrent.Executor,GnssMeasurementsEvent.Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(GnssMeasurementRequest,java.util.concurrent.Executor,GnssMeasurementsEvent.Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.injectGnssMeasurementCorrections(GnssMeasurementCorrections)void :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssNavigationMessageCallback(GnssNavigationMessage.Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssNavigationMessageCallback(java.util.concurrent.Executor,GnssNavigationMessage.Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addProviderRequestChangedListener(java.util.concurrent.Executor,android.location.provider.ProviderRequest.ChangedListener)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.removeProviderRequestChangedListener(ProviderRequest.ChangedListener)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.registerGnssBatchedLocationCallback(long,boolean,BatchedLocationCallback,android.os.Handler)boolean :: android.permission.LOCATION_HARDWARE,android.permission.UPDATE_APP_OPS_STATS
android.location.LocationManager.flushGnssBatch()void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.unregisterGnssBatchedLocationCallback(BatchedLocationCallback)boolean :: android.permission.LOCATION_HARDWARE
android.location.LocationRequest.setLocationSettingsIgnored(boolean)LocationRequest :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationRequest.setHiddenFromAppOps(boolean)Builder :: android.permission.UPDATE_APP_OPS_STATS
android.location.LocationRequest.setAdasGnssBypass(boolean)Builder :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationRequest.setLocationSettingsIgnored(boolean)Builder :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationRequest.setLowPower(boolean)Builder :: android.permission.LOCATION_HARDWARE
android.location.LocationRequest.setWorkSource(android.os.WorkSource)Builder :: android.permission.UPDATE_DEVICE_STATS
android.media.AudioAttributes.setSystemUsage(int)Builder :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioAttributes.setHotwordModeEnabled(boolean)Builder :: android.permission.CAPTURE_AUDIO_HOTWORD
android.media.AudioManager.setMasterMute(boolean,int)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setVolumeIndexForAttributes(AudioAttributes,int,int)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getVolumeIndexForAttributes(AudioAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getMaxVolumeIndexForAttributes(AudioAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getMinVolumeIndexForAttributes(AudioAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setSupportedSystemUsages([int)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getSupportedSystemUsages()int[] :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.forceVolumeControlStream(int)void :: android.permission.MODIFY_PHONE_STATE
android.media.AudioManager.setPreferredDeviceForStrategy(android.media.audiopolicy.AudioProductStrategy,AudioDeviceAttributes)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.removePreferredDeviceForStrategy(android.media.audiopolicy.AudioProductStrategy)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getPreferredDeviceForStrategy(android.media.audiopolicy.AudioProductStrategy)AudioDeviceAttributes :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setPreferredDevicesForStrategy(android.media.audiopolicy.AudioProductStrategy,List<AudioDeviceAttributes>)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getPreferredDevicesForStrategy(android.media.audiopolicy.AudioProductStrategy)List<AudioDeviceAttributes> :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.addOnPreferredDeviceForStrategyChangedListener(java.util.concurrent.Executor,OnPreferredDeviceForStrategyChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.removeOnPreferredDeviceForStrategyChangedListener(OnPreferredDeviceForStrategyChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.addOnPreferredDevicesForStrategyChangedListener(java.util.concurrent.Executor,OnPreferredDevicesForStrategyChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.removeOnPreferredDevicesForStrategyChangedListener(OnPreferredDevicesForStrategyChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setPreferredDeviceForCapturePreset(int,AudioDeviceAttributes)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.clearPreferredDevicesForCapturePreset(int)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getPreferredDevicesForCapturePreset(int)List<AudioDeviceAttributes> :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.addOnPreferredDevicesForCapturePresetChangedListener(java.util.concurrent.Executor,OnPreferredDevicesForCapturePresetChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.removeOnPreferredDevicesForCapturePresetChangedListener(OnPreferredDevicesForCapturePresetChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.requestAudioFocus(OnAudioFocusChangeListener,AudioAttributes,int,int)int :: android.permission.MODIFY_PHONE_STATE
android.media.AudioManager.requestAudioFocus(OnAudioFocusChangeListener,AudioAttributes,int,int,android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_PHONE_STATE,android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.requestAudioFocusForTest(AudioFocusRequest,java.lang.String,int,int)int :: android.permission.QUERY_AUDIO_STATE"
android.media.AudioManager.abandonAudioFocusForTest(AudioFocusRequest,java.lang.String)int :: android.permission.QUERY_AUDIO_STATE"
android.media.AudioManager.getFadeOutDurationOnFocusLossMillis(AudioAttributes)long :: android.permission.QUERY_AUDIO_STATE")
    public @IntRange(from = 0
android.media.AudioManager.requestAudioFocus(AudioFocusRequest,android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setFocusRequestResult(AudioFocusInfo,int,android.media.audiopolicy.AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.dispatchAudioFocusChange(AudioFocusInfo,int,android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.registerAudioPolicy(android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.unregisterAudioPolicyAsync(android.media.audiopolicy.AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.unregisterAudioPolicy(android.media.audiopolicy.AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getDevicesForAttributes(AudioAttributes)List<AudioDeviceAttributes> :: android.permission.MODIFY_AUDIO_ROUTING,android.permission.QUERY_AUDIO_STATE
android.media.AudioManager.setDeviceVolumeBehavior(AudioDeviceAttributes,int)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getDeviceVolumeBehavior(AudioDeviceAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING,android.permission.QUERY_AUDIO_STATE
android.media.AudioManager.isFullVolumeDevice()boolean :: android.permission.MODIFY_AUDIO_ROUTING,android.permission.QUERY_AUDIO_STATE
android.media.AudioManager.setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.Objects.requireNonNull(device)long :: android.permission.MODIFY_AUDIO_ROUTING)
    public boolean setAdditionalOutputDeviceDelay(
            @NonNull AudioDeviceInfo device,android.permission. @IntRange(from = 0
android.media.AudioManager.setEncodedSurroundMode(int)boolean :: android.permission.WRITE_SETTINGS
android.media.AudioManager.setSurroundFormatEnabled(int,boolean)boolean :: android.permission.WRITE_SETTINGS
android.media.AudioManager.getAudioProductStrategies()List<AudioProductStrategy> :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getAudioVolumeGroups()List<AudioVolumeGroup> :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setMultiAudioFocusEnabled(boolean)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioRecord.AudioRecord(int,int,int,int,int)AudioRecord(int :: android.permission.RECORD_AUDIO
android.media.AudioRecord.AudioRecord(AudioAttributes,AudioFormat,int,int)AudioRecord(AudioAttributes :: android.permission.RECORD_AUDIO
android.media.AudioRecord.setMaxSharedAudioHistoryMillis(long)Builder :: android.permission.CAPTURE_AUDIO_HOTWORD
android.media.AudioRecord.build()AudioRecord :: android.permission.RECORD_AUDIO
android.media.AudioRecord.Objects.requireNonNull(sharedPackage)long :: android.permission.CAPTURE_AUDIO_HOTWORD)
    @NonNull public MediaSyncEvent shareAudioHistory(@NonNull String sharedPackage,android.permission.
                                  @IntRange(from = 0
android.media.AudioRecordingConfiguration.getClientUid()int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioSystem.getMasterBalance()float :: android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioSystem.setMasterBalance(float)int :: android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioTrack.if(contentId)int :: android.permission.MODIFY_AUDIO_ROUTING)
        public TunerConfiguration(
                @IntRange(from = 0) int contentId,android.permission. @IntRange(from = 1
android.media.AudioTrack.getContentId()int :: android.permission.MODIFY_AUDIO_ROUTING)
        public @IntRange(from = 1
android.media.AudioTrack.getSyncId()int :: android.permission.MODIFY_AUDIO_ROUTING)
        public @IntRange(from = 1
android.media.AudioTrack.setTunerConfiguration(TunerConfiguration)Builder :: android.permission.MODIFY_AUDIO_ROUTING
android.media.MediaCommunicationManager.registerSessionCallback(java.util.concurrent.Executor,SessionCallback)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.MediaPlayer.setOnRtpRxNoticeListener(android.content.Context,java.util.concurrent.Executor,OnRtpRxNoticeListener)void :: android.permission.BIND_IMS_SERVICE
android.media.MediaRouter2.getInstance(android.content.Context,java.lang.String)MediaRouter2 :: android.permission.MEDIA_CONTENT_CONTROL
android.media.MediaRouter2.startScan()void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.MediaRouter2.stopScan()void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.MediaRouter2.transfer(RoutingController,MediaRoute2Info)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.MediaRouter2.setRouteVolume(MediaRoute2Info,int)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.RingtoneManager.enableSyncFromParent(android.content.Context)void :: android.permission.WRITE_SECURE_SETTINGS
android.media.RingtoneManager.ensureDefaultRingtones(android.content.Context)void :: android.permission.WRITE_SETTINGS
android.media.audiofx.AudioEffect.AudioEffect(java.util.UUID,android.media.AudioDeviceAttributes)AudioEffect(@NonNull :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.audiofx.AudioEffect.isEffectSupportedForDevice(java.util.UUID,android.media.AudioDeviceAttributes)boolean :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.audiofx.SourceDefaultEffect.SourceDefaultEffect(java.util.UUID,java.util.UUID,int,int)Android :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.audiofx.StreamDefaultEffect.StreamDefaultEffect(java.util.UUID,java.util.UUID,int,int)Android :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.musicrecognition.MusicRecognitionManager.beginStreamingSearch(RecognitionRequest,java.util.concurrent.Executor,RecognitionCallback)void :: android.permission.MANAGE_MUSIC_RECOGNITION
android.media.session.MediaSessionManager.getMediaKeyEventSession()MediaSession.Token :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.getMediaKeyEventSessionPackageName()String :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.setOnVolumeKeyLongPressListener(OnVolumeKeyLongPressListener,android.os.Handler)void :: android.permission.SET_VOLUME_KEY_LONG_PRESS_LISTENER
android.media.session.MediaSessionManager.setOnMediaKeyListener(OnMediaKeyListener,android.os.Handler)void :: android.permission.SET_MEDIA_KEY_LISTENER
android.media.session.MediaSessionManager.addOnMediaKeyEventDispatchedListener(java.util.concurrent.Executor,OnMediaKeyEventDispatchedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.removeOnMediaKeyEventDispatchedListener(OnMediaKeyEventDispatchedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.addOnMediaKeyEventSessionChangedListener(java.util.concurrent.Executor,OnMediaKeyEventSessionChangedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.removeOnMediaKeyEventSessionChangedListener(OnMediaKeyEventSessionChangedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.soundtrigger.SoundTriggerDetector.startRecognition(int)boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerDetector.stopRecognition()boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.updateModel(Model)void :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getModel(java.util.UUID)Model :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.deleteModel(java.util.UUID)void :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.createSoundTriggerDetector(java.util.UUID,SoundTriggerDetector.Callback,android.os.Handler)SoundTriggerDetector :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.loadSoundModel(android.hardware.soundtrigger.SoundTrigger.SoundModel)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.startRecognition(java.util.UUID,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger.RecognitionConfig)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.stopRecognition(java.util.UUID)int :: android.permission.R,android.permission. trackingBug = 170729553
android.media.soundtrigger.SoundTriggerManager.unloadSoundModel(java.util.UUID)int :: android.permission.R,android.permission. trackingBug = 170729553
android.media.soundtrigger.SoundTriggerManager.isRecognitionActive(java.util.UUID)boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getModelState(java.util.UUID)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getModuleProperties()SoundTrigger.ModuleProperties :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.setParameter(java.util.UUID,int,int)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getParameter(java.util.UUID,int)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.queryParameter(java.util.UUID,int)ModelParamRange :: android.permission.MANAGE_SOUND_TRIGGER
android.media.tv.TvInputManager.onCurrentTunedInfosUpdated(List<TunedInfo>)void :: android.permission.ACCESS_TUNED_INFO
android.media.tv.TvInputManager.setParentalControlsEnabled(boolean)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.addBlockedRating(TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.removeBlockedRating(TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.getTvContentRatingSystemList()List<TvContentRatingSystemInfo> :: android.permission.READ_CONTENT_RATING_SYSTEMS
android.media.tv.TvInputManager.notifyPreviewProgramBrowsableDisabled(java.lang.String,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.notifyWatchNextProgramBrowsableDisabled(java.lang.String,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.notifyPreviewProgramAddedToWatchNext(java.lang.String,long,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.getClientPid(java.lang.String)int :: android.permission.TUNER_RESOURCE_ACCESS
android.media.tv.TvInputManager.getAvailableTvStreamConfigList(java.lang.String)List<TvStreamConfig> :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.captureFrame(java.lang.String,android.view.Surface,TvStreamConfig)boolean :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.isSingleSessionActive()boolean :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.getHardwareList()List<TvInputHardwareInfo> :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,HardwareCallback,TvInputInfo)Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,TvInputInfo,HardwareCallback)Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,TvInputInfo,java.lang.String,int,java.util.concurrent.Executor,HardwareCallback)Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.releaseTvInputHardware(int,Hardware)void :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.getDvbDeviceList()List<DvbDeviceInfo> :: android.permission.DVB_DEVICE
android.media.tv.TvInputManager.openDvbDevice(DvbDeviceInfo,int)ParcelFileDescriptor :: android.permission.DVB_DEVICE
android.media.tv.TvInputManager.getCurrentTunedInfos()List<TunedInfo> :: android.permission.ACCESS_TUNED_INFO
android.media.tv.TvView.setMain()void :: android.permission.CHANGE_HDMI_CEC_ACTIVE_SOURCE
android.media.tv.TvView.unblockContent(TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.tuner.Tuner.Tuner(android.content.Context,java.lang.String,int)Tuner(@NonNull :: android.permission.ACCESS_TV_TUNER
android.media.tv.tuner.Tuner.openDescrambler()Descrambler :: android.permission.ACCESS_TV_DESCRAMBLER
android.media.voice.KeyphraseModelManager.getKeyphraseSoundModel(int,java.util.Locale)SoundTrigger.KeyphraseSoundModel :: android.permission.MANAGE_VOICE_KEYPHRASES
android.media.voice.KeyphraseModelManager.updateKeyphraseSoundModel(SoundTrigger.KeyphraseSoundModel)void :: android.permission.MANAGE_VOICE_KEYPHRASES
android.media.voice.KeyphraseModelManager.deleteKeyphraseSoundModel(int,java.util.Locale)void :: android.permission.MANAGE_VOICE_KEYPHRASES
android.net.EthernetManager.requestTetheredInterface(java.util.concurrent.Executor,TetheredInterfaceCallback)TetheredInterfaceRequest :: android.permission.NETWORK_STACK,android.permission.PERMISSION_MAINLINE_NETWORK_STACK
android.net.IpSecManager.addAddress(java.net.InetAddress,int)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager.removeAddress(java.net.InetAddress,int)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager.setUnderlyingNetwork(Network)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager.createIpSecTunnelInterface(java.net.InetAddress,java.net.InetAddress,Network)IpSecTunnelInterface :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager.applyTunnelModeTransform(IpSecTunnelInterface,int,IpSecTransform)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecTransform.buildTunnelModeTransform(java.net.InetAddress,IpSecManager.SecurityParameterIndex)IpSecTransform :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.NetworkPolicyManager.registerSubscriptionCallback(SubscriptionCallback)void :: android.permission.OBSERVE_NETWORK_POLICY
android.net.NetworkPolicyManager.unregisterSubscriptionCallback(SubscriptionCallback)void :: android.permission.OBSERVE_NETWORK_POLICY
android.net.NetworkPolicyManager.getRestrictBackgroundStatus(int)int :: android.permission.PERMISSION_MAINLINE_NETWORK_STACK
android.net.NetworkPolicyManager.isUidNetworkingBlocked(int,boolean)boolean :: android.permission.OBSERVE_NETWORK_POLICY
android.net.NetworkPolicyManager.isUidRestrictedOnMeteredNetworks(int)boolean :: android.permission.OBSERVE_NETWORK_POLICY
android.net.NetworkPolicyManager.getMultipathPreference(Network)int :: android.permission.PERMISSION_MAINLINE_NETWORK_STACK
android.net.NetworkPolicyManager.registerNetworkPolicyCallback(java.util.concurrent.Executor,NetworkPolicyCallback)void :: android.permission.OBSERVE_NETWORK_POLICY
android.net.NetworkPolicyManager.unregisterNetworkPolicyCallback(NetworkPolicyCallback)void :: android.permission.OBSERVE_NETWORK_POLICY
android.net.NetworkScoreManager.getActiveScorerPackage()String :: android.permission.SCORE_NETWORKS,android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.getActiveScorer()NetworkScorerAppData :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.getAllValidScorers()List<NetworkScorerAppData> :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.updateScores([ScoredNetwork)boolean :: android.permission.SCORE_NETWORKS
android.net.NetworkScoreManager.clearScores()boolean :: android.permission.SCORE_NETWORKS,android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.setActiveScorer(java.lang.String)boolean :: android.permission.SCORE_NETWORKS,android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.disableScoring()void :: android.permission.SCORE_NETWORKS,android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.requestScores([NetworkKey)boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.requestScores(Collection<NetworkKey>)boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.registerNetworkScoreCache(int,INetworkScoreCache,int)migrate :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.registerNetworkScoreCache(int,INetworkScoreCache,int)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.unregisterNetworkScoreCache(int,INetworkScoreCache)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.registerNetworkScoreCallback(int,int,java.util.concurrent.Executor,NetworkScoreCallback)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.isCallerActiveScorer(int)boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.PacProxyManager.addPacProxyInstalledListener(java.util.concurrent.Executor,PacProxyInstalledListener)void :: android.permission.NETWORK_SETTINGS,android.permission.NETWORK_STACK,android.permission.PERMISSION_MAINLINE_NETWORK_STACK
android.net.PacProxyManager.removePacProxyInstalledListener(PacProxyInstalledListener)void :: android.permission.NETWORK_SETTINGS,android.permission.NETWORK_STACK,android.permission.PERMISSION_MAINLINE_NETWORK_STACK
android.net.PacProxyManager.setCurrentProxyScriptUrl(ProxyInfo)void :: android.permission.NETWORK_SETTINGS,android.permission.NETWORK_STACK,android.permission.PERMISSION_MAINLINE_NETWORK_STACK
android.net.VpnManager.factoryReset()void :: android.permission.NETWORK_SETTINGS
android.net.VpnManager.setAlwaysOnVpnPackageForUser(int,java.lang.String,boolean,List<java.lang.String>)boolean :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.VpnManager.getAlwaysOnVpnPackageForUser(int)String :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.VpnManager.isVpnLockdownEnabled(int)boolean :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.VpnManager.getVpnLockdownAllowlist(int)List<String> :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.VpnService.prepareAndAuthorize(android.content.Context)void :: android.permission.CONTROL_VPN
android.net.vcn.VcnManager.TODO(b)TODO :: android.permission."carrier privileges"
android.net.vcn.VcnManager.addVcnUnderlyingNetworkPolicyListener(java.util.concurrent.Executor,VcnUnderlyingNetworkPolicyListener)void :: android.permission.NETWORK_FACTORY
android.net.vcn.VcnManager.getUnderlyingNetworkPolicy(android.net.NetworkCapabilities,android.net.LinkProperties)VcnUnderlyingNetworkPolicy :: android.permission.NETWORK_FACTORY
android.net.vcn.VcnManager.addVcnNetworkPolicyChangeListener(java.util.concurrent.Executor,VcnNetworkPolicyChangeListener)void :: android.permission.NETWORK_FACTORY
android.net.vcn.VcnManager.removeVcnNetworkPolicyChangeListener(VcnNetworkPolicyChangeListener)void :: android.permission.NETWORK_FACTORY
android.net.vcn.VcnManager.applyVcnNetworkPolicy(android.net.NetworkCapabilities,android.net.LinkProperties)VcnNetworkPolicyResult :: android.permission.NETWORK_FACTORY
android.nfc.NfcAdapter.enable()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disable()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disable(boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.enableSecureNfc(boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.enableNdefPush()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disableNdefPush()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.addNfcUnlockHandler(NfcUnlockHandler,[java.lang.String)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.removeNfcUnlockHandler(NfcUnlockHandler)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.setControllerAlwaysOn(boolean)boolean :: android.permission.NFC_SET_CONTROLLER_ALWAYS_ON
android.nfc.NfcAdapter.isControllerAlwaysOn()boolean :: android.permission.NFC_SET_CONTROLLER_ALWAYS_ON
android.nfc.NfcAdapter.isControllerAlwaysOnSupported()boolean :: android.permission.NFC_SET_CONTROLLER_ALWAYS_ON
android.nfc.NfcAdapter.registerControllerAlwaysOnListener(java.util.concurrent.Executor,ControllerAlwaysOnListener)void :: android.permission.NFC_SET_CONTROLLER_ALWAYS_ON
android.nfc.NfcAdapter.unregisterControllerAlwaysOnListener(ControllerAlwaysOnListener)void :: android.permission.NFC_SET_CONTROLLER_ALWAYS_ON
android.nfc.cardemulation.CardEmulation.unsetOffHostForService(android.content.ComponentName)boolean :: android.permission.NFC
android.nfc.cardemulation.CardEmulation.setOffHostForService(android.content.ComponentName,java.lang.String)boolean :: android.permission.NFC
android.nfc.cardemulation.CardEmulation.getAidsForPreferredPaymentService()List<String> :: android.permission.NFC_PREFERRED_PAYMENT_INFO
android.nfc.cardemulation.CardEmulation.getRouteDestinationForPreferredPaymentService()String :: android.permission.NFC_PREFERRED_PAYMENT_INFO
android.nfc.cardemulation.CardEmulation.getDescriptionForPreferredPaymentService()CharSequence :: android.permission.NFC_PREFERRED_PAYMENT_INFO
android.os.BatteryManager.setChargingStateUpdateDelayMillis(int)boolean :: android.permission.POWER_SAVER
android.os.BatteryStatsManager.getBatteryUsageStats()BatteryUsageStats :: android.permission.BATTERY_STATS
android.os.BatteryStatsManager.getBatteryUsageStats(BatteryUsageStatsQuery)BatteryUsageStats :: android.permission.BATTERY_STATS
android.os.BatteryStatsManager.getBatteryUsageStats(List<BatteryUsageStatsQuery>)List<BatteryUsageStats> :: android.permission.BATTERY_STATS
android.os.BatteryStatsManager.mBatteryStats.noteWifiRssiChanged(newRssi)int :: android.permission.UPDATE_DEVICE_STATS)
    public void reportWifiRssiChanged(@IntRange(from = -127,android.permission. to = 0
android.os.BatteryStatsManager.reportWifiOn()void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiOff()void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiState(int,java.lang.String)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiScanStartedFromSource(WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiScanStoppedFromSource(WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.mBatteryStats.noteWifiBatchedScanStartedFromSource(ws,csph)int :: android.permission.
            @IntRange(from = 0,android.permission.UPDATE_DEVICE_STATS)
    public void reportWifiBatchedScanStartedFromSource(@NonNull WorkSource ws
android.os.BatteryStatsManager.reportWifiBatchedScanStoppedFromSource(WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.getCellularBatteryStats()CellularBatteryStats :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.getWifiBatteryStats()WifiBatteryStats :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportFullWifiLockAcquiredFromSource(WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportFullWifiLockReleasedFromSource(WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiSupplicantStateChanged(int,boolean)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiMulticastEnabled(WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiMulticastDisabled(WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportMobileRadioPowerState(boolean,int)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiRadioPowerState(boolean,int)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportNetworkInterfaceForTransports(java.lang.String,[int)void :: android.permission.NETWORK_STACK,android.permission.PERMISSION_MAINLINE_NETWORK_STACK
android.os.BatteryStatsManager.setChargerAcOnline(boolean,boolean)void :: android.permission.DEVICE_POWER
android.os.BatteryStatsManager.setBatteryLevel(int,boolean)void :: android.permission.DEVICE_POWER
android.os.BatteryStatsManager.unplugBattery(boolean)void :: android.permission.DEVICE_POWER
android.os.BatteryStatsManager.resetBattery(boolean)void :: android.permission.DEVICE_POWER
android.os.BatteryStatsManager.suspendBatteryInput()void :: android.permission.DEVICE_POWER
android.os.BugreportManager.startBugreport(ParcelFileDescriptor,ParcelFileDescriptor,BugreportParams,java.util.concurrent.Executor,BugreportCallback)void :: android.permission.DUMP
android.os.BugreportManager.requestBugreport(BugreportParams,CharSequence,CharSequence)void :: android.permission.DUMP
android.os.Build.getSerial()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.os.DeviceIdleManager.endIdle(java.lang.String)void :: android.permission.DEVICE_POWER
android.os.DropBoxManager.getNextEntry(java.lang.String,long)Entry :: android.permission.READ_LOGS,android.permission.PACKAGE_USAGE_STATS
android.os.IncidentManager.reportIncident(IncidentReportArgs)void :: android.permission.DUMP,android.permission.PACKAGE_USAGE_STATS
android.os.IncidentManager.requestAuthorization(int,java.lang.String,int,AuthListener)void :: android.permission.REQUEST_INCIDENT_REPORT_APPROVAL
android.os.IncidentManager.requestAuthorization(int,java.lang.String,int,java.util.concurrent.Executor,AuthListener)void :: android.permission.REQUEST_INCIDENT_REPORT_APPROVAL
android.os.IncidentManager.cancelAuthorization(AuthListener)void :: android.permission.REQUEST_INCIDENT_REPORT_APPROVAL
android.os.IncidentManager.getPendingReports()List<PendingReport> :: android.permission.APPROVE_INCIDENT_REPORTS
android.os.IncidentManager.approveReport(android.net.Uri)void :: android.permission.APPROVE_INCIDENT_REPORTS
android.os.IncidentManager.denyReport(android.net.Uri)void :: android.permission.APPROVE_INCIDENT_REPORTS
android.os.IncidentManager.getIncidentReportList(java.lang.String)List<Uri> :: android.permission.DUMP,android.permission.PACKAGE_USAGE_STATS
android.os.IncidentManager.getIncidentReport(android.net.Uri)IncidentReport :: android.permission.DUMP,android.permission.PACKAGE_USAGE_STATS
android.os.IncidentManager.deleteIncidentReports(android.net.Uri)void :: android.permission.DUMP,android.permission.PACKAGE_USAGE_STATS
android.os.PowerExemptionManager.addToPermanentAllowList(java.lang.String)void :: android.permission.DEVICE_POWER
android.os.PowerExemptionManager.addToPermanentAllowList(List<java.lang.String>)void :: android.permission.DEVICE_POWER
android.os.PowerExemptionManager.getAllowListedAppIds(boolean)int[] :: android.permission.DEVICE_POWER
android.os.PowerExemptionManager.removeFromPermanentAllowList(java.lang.String)void :: android.permission.DEVICE_POWER
android.os.PowerExemptionManager.addToTemporaryAllowList(java.lang.String,int,java.lang.String,long)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.os.PowerExemptionManager.addToTemporaryAllowListForEvent(java.lang.String,int,java.lang.String,int)long :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.os.PowerManager.userActivity(long,int,int)void :: android.permission.DEVICE_POWER,android.permission.USER_ACTIVITY
android.os.PowerManager.dream(long)void :: android.permission.WRITE_DREAM_STATE,android.permission.READ_DREAM_STATE
android.os.PowerManager.reboot(java.lang.String)void :: android.permission.REBOOT
android.os.PowerManager.rebootSafeMode()void :: android.permission.REBOOT
android.os.PowerManager.setPowerSaveModeEnabled(boolean)boolean :: android.permission.POWER_SAVER,android.permission.DEVICE_POWER
android.os.PowerManager.setFullPowerSavePolicy(BatterySaverPolicyConfig)boolean :: android.permission.POWER_SAVER,android.permission.DEVICE_POWER
android.os.PowerManager.setDynamicPowerSaveHint(boolean,int)boolean :: android.permission.POWER_SAVER
android.os.PowerManager.setAdaptivePowerSavePolicy(BatterySaverPolicyConfig)boolean :: android.permission.POWER_SAVER,android.permission.DEVICE_POWER
android.os.PowerManager.setAdaptivePowerSaveEnabled(boolean)boolean :: android.permission.POWER_SAVER,android.permission.DEVICE_POWER
android.os.PowerManager.setBatteryDischargePrediction(java.time.Duration,boolean)void :: android.permission.BATTERY_PREDICTION,android.permission.DEVICE_POWER
android.os.PowerManager.isAmbientDisplayAvailable()boolean :: android.permission.READ_DREAM_STATE
android.os.PowerManager.suppressAmbientDisplay(java.lang.String,boolean)void :: android.permission.WRITE_DREAM_STATE
android.os.PowerManager.isAmbientDisplaySuppressedForToken(java.lang.String)boolean :: android.permission.READ_DREAM_STATE
android.os.PowerManager.isAmbientDisplaySuppressed()boolean :: android.permission.READ_DREAM_STATE
android.os.PowerManager.isAmbientDisplaySuppressedForTokenByApp(java.lang.String,int)boolean :: android.permission.READ_DREAM_SUPPRESSION,android.permission.READ_DREAM_STATE
android.os.PowerManager.forceSuspend()boolean :: android.permission.DEVICE_POWER
android.os.PowerWhitelistManager.addToWhitelist(java.lang.String)void :: android.permission.DEVICE_POWER
android.os.PowerWhitelistManager.addToWhitelist(List<java.lang.String>)void :: android.permission.DEVICE_POWER
android.os.PowerWhitelistManager.removeFromWhitelist(java.lang.String)void :: android.permission.DEVICE_POWER
android.os.PowerWhitelistManager.whitelistAppTemporarily(java.lang.String,long,int,java.lang.String)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.os.PowerWhitelistManager.whitelistAppTemporarily(java.lang.String,long)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.os.PowerWhitelistManager.whitelistAppTemporarilyForEvent(java.lang.String,int,java.lang.String)long :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.os.PowerWhitelistManager.whitelistAppTemporarilyForEvent(java.lang.String,int,int,java.lang.String)long :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.os.RecoverySystem.processPackage(android.content.Context,java.io.File,ProgressListener,Handler)void :: android.permission.RECOVERY
android.os.RecoverySystem.processPackage(android.content.Context,java.io.File,ProgressListener)void :: android.permission.RECOVERY
android.os.RecoverySystem.installPackage(android.content.Context,java.io.File)void :: android.permission.REBOOT,android.permission.RECOVERY
android.os.RecoverySystem.installPackage(android.content.Context,java.io.File,boolean)void :: android.permission.RECOVERY
android.os.RecoverySystem.prepareForUnattendedUpdate(android.content.Context,java.lang.String,android.content.IntentSender)void :: android.permission.REBOOT,android.permission.RECOVERY
android.os.RecoverySystem.clearPrepareForUnattendedUpdate(android.content.Context)void :: android.permission.REBOOT,android.permission.RECOVERY
android.os.RecoverySystem.rebootAndApply(android.content.Context,java.lang.String,java.lang.String)void :: android.permission.RECOVERY
android.os.RecoverySystem.isPreparedForUnattendedUpdate(android.content.Context)boolean :: android.permission.REBOOT,android.permission.RECOVERY
android.os.RecoverySystem.rebootAndApply(android.content.Context,java.lang.String,boolean)int :: android.permission.REBOOT,android.permission.RECOVERY
android.os.RecoverySystem.scheduleUpdateOnBoot(android.content.Context,java.io.File)void :: android.permission.RECOVERY
android.os.RecoverySystem.cancelScheduledUpdate(android.content.Context)void :: android.permission.RECOVERY
android.os.RecoverySystem.rebootWipeAb(android.content.Context,java.io.File,java.lang.String)void :: android.permission.REBOOT,android.permission.RECOVERY
android.os.SystemConfigManager.getDisabledUntilUsedPreinstalledCarrierApps()Set<String> :: android.permission.READ_CARRIER_APP_INFO
android.os.SystemConfigManager.getDisabledUntilUsedPreinstalledCarrierAssociatedApps()Map<String, :: android.permission.READ_CARRIER_APP_INFO
android.os.SystemConfigManager.getDisabledUntilUsedPreinstalledCarrierAssociatedAppEntries()Map<String, :: android.permission.READ_CARRIER_APP_INFO
android.os.SystemConfigManager.getSystemPermissionUids(java.lang.String)int[] :: android.permission.GET_RUNTIME_PERMISSIONS
android.os.SystemUpdateManager.retrieveSystemUpdateInfo()Bundle :: android.permission.,android.permission.RECOVERY,android.permission.READ_SYSTEM_UPDATE_INFO
android.os.SystemUpdateManager.updateSystemUpdateInfo(PersistableBundle)void :: android.permission.RECOVERY,android.permission.READ_SYSTEM_UPDATE_INFO
android.os.UserManager.getUserSwitchability()int :: android.permission.READ_PHONE_STATE,android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.getUserSwitchability(UserHandle)int :: android.permission.READ_PHONE_STATE,android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.getUserType()String :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.getUserName()String :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS,android.permission.GET_ACCOUNTS_PRIVILEGED
android.os.UserManager.isUserNameSet()boolean :: android.permission.MANAGE_USERS,android.permission.GET_ACCOUNTS_PRIVILEGED
android.os.UserManager.isPrimaryUser()boolean :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.isAdminUser()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isUserAdmin(int)boolean :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.isUserOfType(java.lang.String)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isRestrictedProfile()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isRestrictedProfile(UserHandle)boolean :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.canHaveRestrictedProfile()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.hasRestrictedProfiles()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.getRestrictedProfileParent()UserHandle :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.isGuestUser(int)boolean :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.isGuestUser()boolean :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.isProfile()boolean :: android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isManagedProfile(int)boolean :: android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isCloneProfile()boolean :: android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isEphemeralUser()boolean :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.isUserEphemeral(int)boolean :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.isUserRunning(UserHandle)boolean :: android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isUserRunning(int)boolean :: android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isUserRunningOrStopping(UserHandle)boolean :: android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isUserUnlocked(UserHandle)boolean :: android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isUserUnlocked(int)boolean :: android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isUserUnlockingOrUnlocked(UserHandle)boolean :: android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isUserUnlockingOrUnlocked(int)boolean :: android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.getUserInfo(int)UserInfo :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.getUserRestrictionSource(java.lang.String,UserHandle)int :: android.permission.MANAGE_USERS
android.os.UserManager.getUserRestrictionSources(java.lang.String,UserHandle)List<EnforcingUser> :: android.permission.MANAGE_USERS
android.os.UserManager.getUserRestrictions(UserHandle)Bundle :: android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.hasBaseUserRestriction(java.lang.String,UserHandle)boolean :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.setUserRestriction(java.lang.String,boolean)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserRestriction(java.lang.String,boolean,UserHandle)void :: android.permission.MANAGE_USERS
android.os.UserManager.hasUserRestrictionForUser(java.lang.String,UserHandle)boolean :: android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.createUser(java.lang.String,java.lang.String,int)UserInfo :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.preCreateUser(java.lang.String)UserInfo :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.createGuest(android.content.Context,java.lang.String)UserInfo :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.findCurrentGuestUser()UserInfo :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.createProfile(java.lang.String,java.lang.String,Set<java.lang.String>)UserHandle :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.createProfileForUser(java.lang.String,int,int)UserInfo :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.createProfileForUser(java.lang.String,java.lang.String,int,int)UserInfo :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.createProfileForUser(java.lang.String,java.lang.String,int,int,[java.lang.String)UserInfo :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.createProfileForUserEvenWhenDisallowed(java.lang.String,java.lang.String,int,int,[java.lang.String)UserInfo :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.createRestrictedProfile(java.lang.String)UserInfo :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.getPreInstallableSystemPackages(java.lang.String)Set<String> :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountName()String :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountType()String :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountOptions()PersistableBundle :: android.permission.MANAGE_USERS
android.os.UserManager.setSeedAccountData(int,java.lang.String,java.lang.String,PersistableBundle)void :: android.permission.MANAGE_USERS
android.os.UserManager.clearSeedAccountData()void :: android.permission.MANAGE_USERS
android.os.UserManager.markGuestForDeletion(int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.setUserEnabled(int)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserAdmin(int)void :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.MANAGE_USERS
android.os.UserManager.evictCredentialEncryptionKey(int)void :: android.permission.MANAGE_USERS
android.os.UserManager.getUserCount()int :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.getUsers()List<UserInfo> :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.getAliveUsers()List<UserInfo> :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.getUsers(boolean)List<UserInfo> :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.getUsers(boolean,boolean,boolean)List<UserInfo> :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.getUserHandles(boolean)List<UserHandle> :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.getSerialNumbersOfUsers(boolean)long[] :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.getUserAccount(int)String :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.MANAGE_USERS
android.os.UserManager.setUserAccount(int,java.lang.String)void :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.MANAGE_USERS
android.os.UserManager.getPrimaryUser()UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.canAddMoreUsers()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.canAddMoreManagedProfiles(int,boolean)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.canAddMoreProfilesToUser(java.lang.String,int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.getProfiles(int)List<UserInfo> :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.isSameProfileGroup(UserHandle,UserHandle)boolean :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.isSameProfileGroup(int,int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.getEnabledProfiles(int)List<UserInfo> :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.getEnabledProfiles()List<UserHandle> :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.getAllProfiles()List<UserHandle> :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.getProfiles(boolean)List<UserHandle> :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.getProfileIds(int,boolean)int[] :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.getProfileIdsWithDisabled(int)int[] :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.getEnabledProfileIds(int)int[] :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.getCredentialOwnerProfile(int)int :: android.permission.MANAGE_USERS
android.os.UserManager.getProfileParent(int)UserInfo :: android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.getProfileParent(UserHandle)UserHandle :: android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.requestQuietModeEnabled(boolean,UserHandle)boolean :: android.permission.MODIFY_QUIET_MODE,android.permission.MANAGE_USERS
android.os.UserManager.requestQuietModeEnabled(boolean,UserHandle,android.content.IntentSender)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isMediaSharedWithParent()boolean :: android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.removeUser(int)boolean :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.removeUser(UserHandle)boolean :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.removeUserEvenWhenDisallowed(int)boolean :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.removeUserOrSetEphemeral(int,boolean)int :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.setUserName(int,java.lang.String)void :: android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.setUserName(java.lang.String)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserIcon(int,android.graphics.Bitmap)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserIcon(android.graphics.Bitmap)void :: android.permission.MANAGE_USERS
android.os.UserManager.getUserIcon(int)Bitmap :: android.permission.MANAGE_USERS,android.permission.GET_ACCOUNTS_PRIVILEGED
android.os.UserManager.getUserIcon()Bitmap :: android.permission.MANAGE_USERS,android.permission.GET_ACCOUNTS_PRIVILEGED
android.os.UserManager.setDefaultGuestRestrictions(Bundle)void :: android.permission.MANAGE_USERS
android.os.UserManager.getDefaultGuestRestrictions()Bundle :: android.permission.MANAGE_USERS
android.os.UserManager.someUserHasSeedAccount(java.lang.String,java.lang.String)boolean :: android.permission.MANAGE_USERS
android.os.Vibrator.setAlwaysOnEffect(int,VibrationEffect,android.media.AudioAttributes)boolean :: android.permission.VIBRATE_ALWAYS_ON
android.os.Vibrator.setAlwaysOnEffect(int,java.lang.String,int,VibrationEffect,android.media.AudioAttributes)boolean :: android.permission.VIBRATE_ALWAYS_ON
android.os.Vibrator.vibrate(long)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate([long,int)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate([long,int,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(VibrationEffect)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(VibrationEffect,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(int,java.lang.String,VibrationEffect,java.lang.String,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(int,java.lang.String,VibrationEffect,java.lang.String,VibrationAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.cancel()void :: android.permission.VIBRATE
android.os.Vibrator.cancel(int)void :: android.permission.VIBRATE
android.os.Vibrator.isVibrating()boolean :: android.permission.ACCESS_VIBRATOR_STATE
android.os.Vibrator.addVibratorStateListener(OnVibratorStateChangedListener)void :: android.permission.ACCESS_VIBRATOR_STATE
android.os.Vibrator.addVibratorStateListener(java.util.concurrent.Executor,OnVibratorStateChangedListener)void :: android.permission.ACCESS_VIBRATOR_STATE
android.os.Vibrator.removeVibratorStateListener(OnVibratorStateChangedListener)void :: android.permission.ACCESS_VIBRATOR_STATE
android.os.VibratorManager.setAlwaysOnEffect(int,java.lang.String,int,CombinedVibration,VibrationAttributes)boolean :: android.permission.VIBRATE_ALWAYS_ON
android.os.VibratorManager.vibrate(CombinedVibration)void :: android.permission.VIBRATE
android.os.VibratorManager.vibrate(CombinedVibration,VibrationAttributes)void :: android.permission.VIBRATE
android.os.VibratorManager.vibrate(int,java.lang.String,CombinedVibration,java.lang.String,VibrationAttributes)void :: android.permission.VIBRATE
android.os.VibratorManager.cancel()void :: android.permission.VIBRATE
android.os.VibratorManager.cancel(int)void :: android.permission.VIBRATE
android.os.image.DynamicSystemClient.bind()void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.image.DynamicSystemClient.unbind()void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.image.DynamicSystemClient.start(android.net.Uri,long)void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.image.DynamicSystemClient.start(android.net.Uri,long,long)void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.setAshmem(android.os.ParcelFileDescriptor,long)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.submitFromAshmem(int)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.getAvbPublicKey(android.gsi.AvbPublicKey)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.commit()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.startInstallation(java.lang.String)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.createPartition(java.lang.String,long,boolean)Session :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.closePartition()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.finishInstallation()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.getInstallationProgress()GsiProgress :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.abort()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.isInUse()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.isInstalled()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.isEnabled()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.remove()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.setEnable(boolean,boolean)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.suggestScratchSize()long :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.storage.StorageManager.getManageSpaceActivityIntent(java.lang.String,int)PendingIntent :: android.permission.MANAGE_EXTERNAL_STORAGE
android.os.storage.StorageManager.getExternalStorageMountMode(int,java.lang.String)int :: android.permission.WRITE_MEDIA_STORAGE
android.permission.LegacyPermissionManager.grantDefaultPermissionsToLuiApp(java.lang.String,android.os.UserHandle,java.util.concurrent.Executor,Consumer<Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.LegacyPermissionManager.revokeDefaultPermissionsFromLuiApps([java.lang.String,android.os.UserHandle,java.util.concurrent.Executor,Consumer<Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.LegacyPermissionManager.grantDefaultPermissionsToEnabledImsServices([java.lang.String,android.os.UserHandle,java.util.concurrent.Executor,Consumer<Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.LegacyPermissionManager.grantDefaultPermissionsToEnabledTelephonyDataServices([java.lang.String,android.os.UserHandle,java.util.concurrent.Executor,Consumer<Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.LegacyPermissionManager.revokeDefaultPermissionsFromDisabledTelephonyDataServices([java.lang.String,android.os.UserHandle,java.util.concurrent.Executor,Consumer<Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.LegacyPermissionManager.grantDefaultPermissionsToEnabledCarrierApps([java.lang.String,android.os.UserHandle,java.util.concurrent.Executor,Consumer<Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.PermissionControllerManager.revokeRuntimePermissions(Map<java.lang.String,List<java.lang.String>>,boolean,int,java.util.concurrent.Executor,OnRevokeRuntimePermissionsCallback)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.setRuntimePermissionGrantStateByDeviceAdmin(java.lang.String,AdminPermissionControlParams,java.util.concurrent.Executor,Consumer<Boolean>)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS,android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY,android.permission.GRANT_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.getRuntimePermissionBackup(android.os.UserHandle,java.util.concurrent.Executor,[Consumer<byte)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.stageAndApplyRuntimePermissionsBackup([byte,android.os.UserHandle)void :: android.permission.RESTORE_RUNTIME_PERMISSIONS,android.permission.GRANT_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.applyStagedRuntimePermissionBackup(java.lang.String,android.os.UserHandle,java.util.concurrent.Executor,Consumer<Boolean>)void :: android.permission.RESTORE_RUNTIME_PERMISSIONS,android.permission.GRANT_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.getAppPermissions(java.lang.String,OnGetAppPermissionResultCallback,android.os.Handler)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.revokeRuntimePermission(java.lang.String,java.lang.String)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.countPermissionApps(List<java.lang.String>,int,OnCountPermissionAppsResultCallback,android.os.Handler)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.getPermissionUsages(boolean,long,java.util.concurrent.Executor,OnPermissionUsageResultCallback)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.grantOrUpgradeDefaultRuntimePermissions(java.util.concurrent.Executor,Consumer<Boolean>)void :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.permission.PermissionControllerManager.getPrivilegesDescriptionStringForProfile(java.lang.String,java.util.concurrent.Executor,Consumer<CharSequence>)void :: android.permission.MANAGE_COMPANION_DEVICES
android.permission.PermissionControllerManager.notifyOneTimePermissionSessionTimeout(java.lang.String)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionControllerService.getPrivilegesDescriptionStringForProfile(java.lang.String)String :: android.permission.MANAGE_COMPANION_DEVICES
android.permission.PermissionManager.grantRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)public :: android.permission.GRANT_RUNTIME_PERMISSIONS
android.permission.PermissionManager.revokeRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle,java.lang.String)public :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionManager.getPermissionFlags(java.lang.String,java.lang.String,android.os.UserHandle)public :: android.permission.REVOKE_RUNTIME_PERMISSIONS,android.permission.GET_RUNTIME_PERMISSIONS,android.permission.GRANT_RUNTIME_PERMISSIONS
android.permission.PermissionManager.updatePermissionFlags(java.lang.String,java.lang.String,int,int,android.os.UserHandle)public :: android.permission.REVOKE_RUNTIME_PERMISSIONS,android.permission.GRANT_RUNTIME_PERMISSIONS
android.permission.PermissionManager.getAllowlistedRestrictedPermissions(java.lang.String,int)Set<String> :: android.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.permission.PermissionManager.addAllowlistedRestrictedPermission(java.lang.String,java.lang.String,int)boolean :: android.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.permission.PermissionManager.removeAllowlistedRestrictedPermission(java.lang.String,java.lang.String,int)boolean :: android.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.permission.PermissionManager.isAutoRevokeExempted(java.lang.String)boolean :: android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONS
android.permission.PermissionManager.setAutoRevokeExempted(java.lang.String,boolean)boolean :: android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONS
android.permission.PermissionManager.addOnPermissionsChangeListener(PackageManager.OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.permission.PermissionManager.removeOnPermissionsChangeListener(PackageManager.OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.permission.PermissionManager.getRuntimePermissionsVersion()int :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY,android.permission.UPGRADE_RUNTIME_PERMISSIONS
android.permission.PermissionManager.mPackageManager.setRuntimePermissionsVersion(version,mContext.getUserId)int :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY,android.permission.UPGRADE_RUNTIME_PERMISSIONS
android.permission.PermissionManager.getIndicatorAppOpUsageData()List<PermGroupUsage> :: android.permission.GET_APP_OPS_STATS
android.permission.PermissionManager.getIndicatorAppOpUsageData(boolean)List<PermGroupUsage> :: android.permission.GET_APP_OPS_STATS
android.permission.PermissionManager.getAutoRevokeExemptionRequestedPackages()Set<String> :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.permission.PermissionManager.getAutoRevokeExemptionGrantedPackages()Set<String> :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.permission.PermissionManager.startOneTimePermissionSession(java.lang.String,long,int,int)void :: android.permission.MANAGE_ONE_TIME_PERMISSION_SESSIONS
android.permission.PermissionManager.stopOneTimePermissionSession(java.lang.String)void :: android.permission.MANAGE_ONE_TIME_PERMISSION_SESSIONS
android.print.PrintManager.addPrintServicesChangeListener(PrintServicesChangeListener,android.os.Handler)void :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.removePrintServicesChangeListener(PrintServicesChangeListener)void :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.getPrintServices(int)List<PrintServiceInfo> :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.addPrintServiceRecommendationsChangeListener(PrintServiceRecommendationsChangeListener,android.os.Handler)void :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.print.PrintManager.removePrintServiceRecommendationsChangeListener(PrintServiceRecommendationsChangeListener)void :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.print.PrintManager.getPrintServiceRecommendations()List<RecommendationInfo> :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.provider.CallLog.storeCallComposerPicture(android.content.Context,java.io.InputStream,java.util.concurrent.Executor,OutcomeReceiver<Uri,CallComposerLoggingException>)void :: android.permission.WRITE_CALL_LOG,android.permission.INTERACT_ACROSS_USERS
android.provider.ContactsContract.addSimAccount(android.content.ContentResolver,java.lang.String,java.lang.String,int,int)void :: android.permission.MANAGE_SIM_ACCOUNTS"
android.provider.ContactsContract.removeSimAccounts(android.content.ContentResolver,int)void :: android.permission.MANAGE_SIM_ACCOUNTS"
android.provider.DeviceConfig.getProperty(java.lang.String,java.lang.String)String :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getProperties(java.lang.String,java.lang.String)Properties :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getString(java.lang.String,java.lang.String,java.lang.String)String :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getBoolean(java.lang.String,java.lang.String,boolean)boolean :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getInt(java.lang.String,java.lang.String,int)int :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getLong(java.lang.String,java.lang.String,long)long :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getFloat(java.lang.String,java.lang.String,float)float :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.setProperty(java.lang.String,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.setProperties(Properties)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.resetToDefaults(int,java.lang.String)void :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.setSyncDisabled(int)void :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.isSyncDisabled()boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.addOnPropertiesChangedListener(java.lang.String,java.util.concurrent.Executor,OnPropertiesChangedListener)void :: android.permission.READ_DEVICE_CONFIG
android.provider.Settings.putString(android.content.ContentResolver,java.lang.String,java.lang.String,boolean)boolean :: android.permission.MODIFY_SETTINGS_OVERRIDEABLE_BY_RESTORE
android.provider.Settings.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings.resetToDefaults(android.content.ContentResolver,java.lang.String)void :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)boolean :: android.permission.MODIFY_SETTINGS_OVERRIDEABLE_BY_RESTORE
android.provider.Settings.getString(android.content.ContentResolver,java.lang.String)String :: android.permission.READ_DEVICE_CONFIG
android.provider.Settings.getStrings(android.content.ContentResolver,java.lang.String,List<java.lang.String>)Map<String, :: android.permission.READ_DEVICE_CONFIG
android.provider.Settings.setStrings(android.content.ContentResolver,java.lang.String,Map<java.lang.String,java.lang.String>)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings.resetToDefaults(android.content.ContentResolver,int,java.lang.String)void :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings.setSyncDisabled(android.content.ContentResolver,int)void :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings.isSyncDisabled(android.content.ContentResolver)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings.registerMonitorCallback(android.content.ContentResolver,android.os.RemoteCallback)void :: android.permission.MONITOR_DEVICE_CONFIG_ACCESS
android.se.omapi.Reader.reset()boolean :: android.permission.SECURE_ELEMENT_PRIVILEGED_OPERATION
android.security.FileIntegrityManager.isAppSourceCertificateTrusted(java.security.cert.X509Certificate)boolean :: android.permission.REQUEST_INSTALL_PACKAGES,android.permission.INSTALL_PACKAGES
android.security.KeyChain.setCredentialManagementApp(android.content.Context,java.lang.String,AppUriAuthenticationPolicy)boolean :: android.permission.MANAGE_CREDENTIAL_MANAGEMENT_APP
android.security.KeyChain.removeCredentialManagementApp(android.content.Context)boolean :: android.permission.MANAGE_CREDENTIAL_MANAGEMENT_APP
android.security.keystore.AttestationUtils.attestDeviceIds(android.content.Context,[int,[byte)X509Certificate[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.security.keystore.recovery.RecoveryController.getInstance(android.content.Context)RecoveryController :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.isRecoverableKeyStoreEnabled(android.content.Context)boolean :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.initRecoveryService(java.lang.String,[byte,[byte)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getKeyChainSnapshot()KeyChainSnapshot :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setSnapshotCreatedPendingIntent(android.app.PendingIntent)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setServerParams([byte)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getAliases()List<String> :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setRecoveryStatus(java.lang.String,int)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRecoveryStatus(java.lang.String)int :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setRecoverySecretTypes([int)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRecoverySecretTypes()int[] :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.generateKey(java.lang.String)Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.generateKey(java.lang.String,[byte)Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.importKey(java.lang.String,[byte)Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.importKey(java.lang.String,[byte,[byte)Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getKey(java.lang.String)Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.removeKey(java.lang.String)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.createRecoverySession()RecoverySession :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRootCertificates()Map<String, :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.newInstance(RecoveryController)RecoverySession :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.start(java.lang.String,java.security.cert.CertPath,[byte,[byte,List<KeyChainProtectionParams>)byte[] :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.recoverKeyChainSnapshot([byte,List<WrappedApplicationKey>)Map<String, :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.close()void :: android.permission.RECOVER_KEYSTORE
android.service.dataloader.DataLoaderService.writeData(java.lang.String,long,long,android.os.ParcelFileDescriptor)void :: android.permission.INSTALL_PACKAGES
android.service.oemlock.OemLockManager.getLockName()String :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.setOemUnlockAllowedByCarrier(boolean,[byte)void :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.isOemUnlockAllowedByCarrier()boolean :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.setOemUnlockAllowedByUser(boolean)void :: android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.isOemUnlockAllowedByUser()boolean :: android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.getDataBlockSize()int :: android.permission.ACCESS_PDB_STATE
android.service.persistentdata.PersistentDataBlockManager.wipe()void :: android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.setOemUnlockEnabled(boolean)void :: android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.getOemUnlockEnabled()boolean :: android.permission.OEM_UNLOCK_STATE,android.permission.READ_OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.getFlashLockState()int :: android.permission.OEM_UNLOCK_STATE,android.permission.READ_OEM_UNLOCK_STATE
android.service.voice.AlwaysOnHotwordDetector.triggerHardwareRecognitionEventForTest(int,int,boolean,int,int,int,boolean,android.media.AudioFormat,[byte)void :: android.permission.RECORD_AUDIO,android.permission.CAPTURE_AUDIO_HOTWORD
android.service.voice.AlwaysOnHotwordDetector.startRecognition(int)boolean :: android.permission.RECORD_AUDIO,android.permission.CAPTURE_AUDIO_HOTWORD
android.service.voice.AlwaysOnHotwordDetector.startRecognition()boolean :: android.permission.RECORD_AUDIO,android.permission.CAPTURE_AUDIO_HOTWORD
android.service.voice.AlwaysOnHotwordDetector.stopRecognition()boolean :: android.permission.RECORD_AUDIO,android.permission.CAPTURE_AUDIO_HOTWORD
android.service.voice.AlwaysOnHotwordDetector.setParameter(int,int)int :: android.permission.RECORD_AUDIO,android.permission.CAPTURE_AUDIO_HOTWORD
android.service.voice.AlwaysOnHotwordDetector.getParameter(int)int :: android.permission.RECORD_AUDIO,android.permission.CAPTURE_AUDIO_HOTWORD
android.service.voice.AlwaysOnHotwordDetector.queryParameter(int)ModelParamRange :: android.permission.RECORD_AUDIO,android.permission.CAPTURE_AUDIO_HOTWORD
android.service.voice.HotwordDetector.startRecognition()boolean :: android.permission.RECORD_AUDIO,android.permission.CAPTURE_AUDIO_HOTWORD
android.service.voice.SoftwareHotwordDetector.startRecognition()boolean :: android.permission.RECORD_AUDIO
android.service.voice.SoftwareHotwordDetector.stopRecognition()boolean :: android.permission.RECORD_AUDIO
android.service.voice.VoiceInteractionService.createAlwaysOnHotwordDetector(android.annotation.SuppressLint)AlwaysOnHotwordDetector :: android.permission.MANAGE_HOTWORD_DETECTION
android.service.voice.VoiceInteractionService.createHotwordDetector(android.os.PersistableBundle,android.os.SharedMemory,HotwordDetector.Callback)HotwordDetector :: android.permission.MANAGE_HOTWORD_DETECTION
android.service.voice.VoiceInteractionService.createKeyphraseModelManager()KeyphraseModelManager :: android.permission.MANAGE_VOICE_KEYPHRASES
android.speech.SpeechRecognizer.setTemporaryOnDeviceRecognizer(android.content.ComponentName)void :: android.permission.MANAGE_SPEECH_RECOGNITION
android.telecom.CallScreeningService.setShouldScreenCallViaAudioProcessing(boolean)Builder :: android.permission.CAPTURE_AUDIO_OUTPUT
android.telecom.Conference.setConferenceState(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Conference.setCallDirection(int)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Conference.setAddress(android.net.Uri,int)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Connection.setConnectionStartElapsedRealtimeMillis(long)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Connection.onCallFilteringCompleted(CallFilteringCompletionInfo)void :: android.permission.READ_CONTACTS
android.telecom.PhoneAccount.setGroupId(java.lang.String)Builder :: android.permission.MODIFY_PHONE_STATE
android.telecom.RemoteConnection.onCallFilteringCompleted(Connection.CallFilteringCompletionInfo)void :: android.permission.READ_CONTACTS
android.telecom.TelecomManager.getDefaultOutgoingPhoneAccount(java.lang.String)PhoneAccountHandle :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getUserSelectedOutgoingPhoneAccount()PhoneAccountHandle :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.setUserSelectedOutgoingPhoneAccount(PhoneAccountHandle)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.getPhoneAccountsSupportingScheme(java.lang.String)List<PhoneAccountHandle> :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getCallCapablePhoneAccounts()List<PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getSelfManagedPhoneAccounts()List<PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getCallCapablePhoneAccounts(boolean)List<PhoneAccountHandle> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.getDefaultDialerPackage(android.os.UserHandle)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.setDefaultDialer(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE,android.permission.WRITE_SECURE_SETTINGS
android.telecom.TelecomManager.isVoiceMailNumber(PhoneAccountHandle,java.lang.String)boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getVoiceMailNumber(PhoneAccountHandle)String :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getLine1Number(PhoneAccountHandle)String :: android.permission.READ_PHONE_STATE,android.permission.READ_SMS,android.permission.READ_PHONE_NUMBERS
android.telecom.TelecomManager.isInCall()boolean :: android.permission.READ_PHONE_STATE,android.permission.READ_SMS,android.permission.READ_PHONE_NUMBERS
android.telecom.TelecomManager.isInManagedCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getCallState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isRinging()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.endCall()boolean :: android.permission.READ_PHONE_STATE,android.permission.ANSWER_PHONE_CALLS
android.telecom.TelecomManager.acceptRingingCall()void :: android.permission.MODIFY_PHONE_STATE,android.permission.ANSWER_PHONE_CALLS
android.telecom.TelecomManager.acceptRingingCall(int)void :: android.permission.MODIFY_PHONE_STATE,android.permission.ANSWER_PHONE_CALLS
android.telecom.TelecomManager.silenceRinger()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.isTtySupported()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getCurrentTtyMode()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.handleMmi(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.handleMmi(java.lang.String,PhoneAccountHandle)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.getAdnUriForPhoneAccount(PhoneAccountHandle)Uri :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.cancelMissedCallsNotification()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.showInCallScreen(boolean)void :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.placeCall(android.net.Uri,android.os.Bundle)void :: android.permission.CALL_PHONE,android.permission.MANAGE_OWN_CALLS
android.telecom.TelecomManager.startConference(List<Uri>,android.os.Bundle)void :: android.permission.CALL_PHONE,android.permission.MANAGE_OWN_CALLS
android.telecom.TelecomManager.enablePhoneAccount(PhoneAccountHandle,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.dumpAnalytics()TelecomAnalytics :: android.permission.DUMP
android.telecom.TelecomManager.isInEmergencyCall()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.AnomalyReporter.initialize(android.content.Context)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.CarrierConfigManager.overrideConfig(int,android.os.PersistableBundle)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.CarrierConfigManager.overrideConfig(int,android.os.PersistableBundle,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.CarrierConfigManager.updateConfigForPhoneId(int,java.lang.String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.CarrierConfigManager.getDefaultCarrierServicePackageName()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.PhoneStateListener.onMessageWaitingIndicatorChanged(boolean)void :: android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onCallForwardingIndicatorChanged(boolean)void :: android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onCellLocationChanged(CellLocation)void :: android.permission.ACCESS_FINE_LOCATION
android.telephony.PhoneStateListener.onCallStateChanged(int,java.lang.String)void :: android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onCellInfoChanged(List<CellInfo>)void :: android.permission.READ_PHONE_STATE,android.permission.ACCESS_FINE_LOCATION
android.telephony.PhoneStateListener.onPreciseCallStateChanged(PreciseCallState)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onCallDisconnectCauseChanged(int,int)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onImsCallDisconnectCauseChanged(android.telephony.ims.ImsReasonInfo)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onPreciseDataConnectionStateChanged(PreciseDataConnectionState)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onSrvccStateChanged(int)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.PhoneStateListener.onVoiceActivationStateChanged(int)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.PhoneStateListener.onDisplayInfoChanged(TelephonyDisplayInfo)void :: android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onEmergencyNumberListChanged(Map<Integer,List<EmergencyNumber>>)void :: android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onOutgoingEmergencyCall(android.telephony.emergency.EmergencyNumber)void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.PhoneStateListener.onOutgoingEmergencyCall(android.telephony.emergency.EmergencyNumber,int)void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.PhoneStateListener.onOutgoingEmergencySms(android.telephony.emergency.EmergencyNumber)void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.PhoneStateListener.onActiveDataSubscriptionIdChanged(int)void :: android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onCallAttributesChanged(CallAttributes)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onRadioPowerStateChanged(int)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.PhoneStateListener.onRegistrationFailed(CellIdentity,java.lang.String,int,int,int)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onBarringInfoChanged(BarringInfo)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.SmsManager.sendTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.SEND_SMS,android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.sendMultipartTextMessageWithoutPersisting(java.lang.String,java.lang.String,List<java.lang.String>,List<PendingIntent>,List<PendingIntent>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.copyMessageToIcc([byte,[byte,int)boolean :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.deleteMessageFromIcc(int)boolean :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.updateMessageOnIcc(int,int,[byte)boolean :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.getMessagesFromIcc()List<SmsMessage> :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.getSmsCapacityOnIcc()int :: android.permission.READ_PHONE_STATE,android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SmsManager.getSmsMessagesForFinancialApp(android.os.Bundle,java.util.concurrent.Executor,FinancialSmsCallback)void :: android.permission.SMS_FINANCIAL_TRANSACTIONS
android.telephony.SmsManager.checkSmsShortCodeDestination(java.lang.String,java.lang.String)int :: android.permission.READ_PHONE_STATE
android.telephony.SmsManager.getSmscAddress()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SmsManager.setSmscAddress(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.getPremiumSmsConsent(java.lang.String)int :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.setPremiumSmsConsent(java.lang.String,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.resetAllCellBroadcastRanges()void :: android.permission.MODIFY_CELL_BROADCASTS
android.telephony.SubscriptionManager.getActiveSubscriptionInfo(int)SubscriptionInfo :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoForIcc(java.lang.String)SubscriptionInfo :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoForSimSlotIndex(int)SubscriptionInfo :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoList()List<SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoCount()int :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.setIconTint(int,int)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDisplayName(java.lang.String,int,int)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDefaultVoiceSubscriptionId(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDefaultSmsSubId(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDefaultDataSubId(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionIdList()int[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getCompleteActiveSubscriptionIdList()int[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.isActiveSubscriptionId(int)boolean :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.setPreferredDataSubscriptionId(int,boolean,java.util.concurrent.Executor,Consumer<Integer>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getPreferredDataSubscriptionId()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getOpportunisticSubscriptions()List<SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.switchToSubscription(int,android.app.PendingIntent)void :: android.permission.READ_PHONE_STATE,android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.SubscriptionManager.setOpportunistic(boolean,int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.createSubscriptionGroup(List<Integer>)ParcelUuid :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.addSubscriptionsIntoGroup(List<Integer>,android.os.ParcelUuid)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.removeSubscriptionsFromGroup(List<Integer>,android.os.ParcelUuid)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getSubscriptionsInGroup(android.os.ParcelUuid)List<SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.setSubscriptionEnabled(int,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setUiccApplicationsEnabled(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.canDisablePhysicalSubscription()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.isSubscriptionEnabled(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.setDeviceToDeviceStatusSharingPreference(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDeviceToDeviceStatusSharingContacts(int,List<Uri>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getEnabledSubscriptionId(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getAllSimSpecificSettingsForBackup()byte[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.restoreSimSpecificSettingsForIccIdFromBackup(java.lang.String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.restoreAllSimSpecificSettingsFromBackup([byte)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyCallback.onMessageWaitingIndicatorChanged(boolean)void :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyCallback.onCallForwardingIndicatorChanged(boolean)void :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyCallback.onCellLocationChanged(CellLocation)void :: android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyCallback.onCallStateChanged(int)void :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyCallback.onCellInfoChanged(List<CellInfo>)void :: android.permission.READ_PHONE_STATE,android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyCallback.onPreciseCallStateChanged(PreciseCallState)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback.onCallDisconnectCauseChanged(int,int)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback.onImsCallDisconnectCauseChanged(android.telephony.ims.ImsReasonInfo)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback.onPreciseDataConnectionStateChanged(PreciseDataConnectionState)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback.onSrvccStateChanged(int)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyCallback.onVoiceActivationStateChanged(int)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyCallback.onEmergencyNumberListChanged(Map<Integer,List<EmergencyNumber>>)void :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyCallback.onOutgoingEmergencyCall(android.telephony.emergency.EmergencyNumber,int)void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.TelephonyCallback.onOutgoingEmergencySms(android.telephony.emergency.EmergencyNumber,int)void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.TelephonyCallback.onActiveDataSubscriptionIdChanged(int)void :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyCallback.onRadioPowerStateChanged(int)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyCallback.onRegistrationFailed(CellIdentity,java.lang.String,int,int,int)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback.onAllowedNetworkTypesChanged(int,long)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyCallback.onCallAttributesChanged(CallAttributes)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback.onBarringInfoChanged(BarringInfo)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback.onPhysicalChannelConfigChanged(List<PhysicalChannelConfig>)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback.onDataEnabledChanged(boolean,int)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback.onLinkCapacityEstimateChanged(List<LinkCapacityEstimate>)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyManager.getDeviceSoftwareVersion()String :: android.permission.READ_PHONE_STATE,android.permission.READ_CALL_LOG,android.permission.SEND_RESPOND_VIA_MESSAGE
android.telephony.TelephonyManager.getDeviceSoftwareVersion(int)String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDeviceId()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDeviceId(int)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getImei()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getImei(int)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getMeid()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getMeid(int)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getNai()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCellLocation()CellLocation :: android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.getNeighboringCellInfo()List<NeighboringCellInfo> :: android.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManager.getCarrierConfig()PersistableBundle :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getNetworkType(int)int :: android.permission.P
android.telephony.TelephonyManager.getDataNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDataNetworkType(int)int :: android.permission.P
android.telephony.TelephonyManager.getVoiceNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceNetworkType(int)int :: android.permission.P
android.telephony.TelephonyManager.getSimCardState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSimApplicationState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isApplicationOnUicc(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSimSerialNumber()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSimSerialNumber(int)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isLteCdmaEvdoGsmWcdmaEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getLteOnCdmaMode(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getUiccCardsInfo()List<UiccCardInfo> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getUiccSlotsInfo()UiccSlotInfo[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.refreshUiccProfile()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.switchSlots([int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getLogicalToPhysicalSlotMapping()Map<Integer, :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSubscriberId()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSubscriberId(int)String :: android.permission.P
android.telephony.TelephonyManager.getCarrierInfoForImsiEncryption(int)ImsiEncryptionInfo :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.resetCarrierKeysForImsiEncryption()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getGroupIdLevel1()String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getGroupIdLevel1(int)String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLine1Number()String :: android.permission.READ_PHONE_STATE,android.permission.READ_SMS,android.permission.READ_PHONE_NUMBERS
android.telephony.TelephonyManager.getLine1Number(int)String :: android.permission.READ_PHONE_STATE,android.permission.READ_SMS,android.permission.READ_PHONE_NUMBERS
android.telephony.TelephonyManager.getLine1AlphaTag()String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLine1AlphaTag(int)String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMergedImsisFromGroup()String[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getMsisdn()String :: android.permission.READ_PHONE_STATE,android.permission.READ_SMS,android.permission.READ_PHONE_NUMBERS
android.telephony.TelephonyManager.getMsisdn(int)String :: android.permission.READ_PHONE_STATE,android.permission.READ_SMS,android.permission.READ_PHONE_NUMBERS
android.telephony.TelephonyManager.getVoiceMailNumber()String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailNumber(int)String :: android.permission.READ_PHONE_STATE,android.permission.READ_SMS,android.permission.READ_PHONE_NUMBERS
android.telephony.TelephonyManager.getVisualVoicemailPackageName()String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.sendVisualVoicemailSmsForSubscriber(int,java.lang.String,int,java.lang.String,android.app.PendingIntent)void :: android.permission.SEND_SMS
android.telephony.TelephonyManager.setVoiceActivationState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setVoiceActivationState(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataActivationState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataActivationState(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getVoiceActivationState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getVoiceActivationState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDataActivationState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDataActivationState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMessageCount()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMessageCount(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailAlphaTag()String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailAlphaTag(int)String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getIsimDomain()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getIsimImpu()String[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCallState()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCallStateForSubscription()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCallState(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCallStateForSlot(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEnhancedRoamingIndicatorDisplayNumber()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconIndex(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconMode(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriText()String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriText(int)String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getAllCellInfo()List<CellInfo> :: android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.requestCellInfoUpdate(java.util.concurrent.Executor,CellInfoCallback)void :: android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.requestCellInfoUpdate(android.os.WorkSource,java.util.concurrent.Executor,CellInfoCallback)void :: android.permission.MODIFY_PHONE_STATE,android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.iccOpenLogicalChannelBySlot(int,java.lang.String,int)IccOpenLogicalChannelResponse :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccCloseLogicalChannelBySlot(int,int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduLogicalChannelBySlot(int,int,int,int,int,int,int,java.lang.String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduBasicChannelBySlot(int,int,int,int,int,int,java.lang.String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.resetRadioConfig()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.rebootRadio()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.requestNumberVerification(PhoneNumberRange,long,java.util.concurrent.Executor,NumberVerificationCallback)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getIsimIst()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getForbiddenPlmns()String[] :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getForbiddenPlmns(int,int)String[] :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setForbiddenPlmns(List<java.lang.String>)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.resetIms(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getPreferredNetworkType(int)) :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getPreferredNetworkTypeBitmask()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getAllowedNetworkTypesBitmask()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getAllowedNetworkTypes()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeAutomatic()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAvailableNetworks()CellNetworkScanResult :: android.permission.MODIFY_PHONE_STATE,android.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManager.requestNetworkScan(NetworkScanRequest,java.util.concurrent.Executor,TelephonyScanManager.NetworkScanCallback)NetworkScan :: android.permission.MODIFY_PHONE_STATE,android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.requestNetworkScan(NetworkScanRequest,TelephonyScanManager.NetworkScanCallback)NetworkScan :: android.permission.MODIFY_PHONE_STATE,android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.setNetworkSelectionModeManual(java.lang.String,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeManual(java.lang.String,boolean,int)boolean :: android.permission.MODIFY_PHONE_STATE,android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManager.setNetworkSelectionModeManual(com.android.internal.telephony.OperatorInfo,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getNetworkSelectionMode()int :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyManager.getManualNetworkSelectionPlmn()String :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyManager.isInEmergencySmsMode()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyManager.setPreferredNetworkTypeBitmask(long)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAllowedNetworkTypes(long)boolean :: android.permission.CAPABILITY_USES_ALLOWED_NETWORK_TYPES_BITMASK,android.permission.TelephonyManager#isRadioInterfaceCapabilitySupported"
android.telephony.TelephonyManager.setAllowedNetworkTypesForReason(int,long)void :: android.permission.CAPABILITY_USES_ALLOWED_NETWORK_TYPES_BITMASK,android.permission.TelephonyManager#isRadioInterfaceCapabilitySupported"
android.telephony.TelephonyManager.getAllowedNetworkTypesForReason(int)long :: android.permission.CAPABILITY_USES_ALLOWED_NETWORK_TYPES_BITMASK,android.permission.TelephonyManager#isRadioInterfaceCapabilitySupported"
android.telephony.TelephonyManager.isTetheringApnRequired()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMdn()String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMdn(int)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMin()String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMin(int)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.checkCarrierPrivilegesForPackage(java.lang.String)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.checkCarrierPrivilegesForPackageAnyPhone(java.lang.String)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCarrierPackageNamesForIntentAndPhone(android.content.Intent,int)List<String> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getPackagesWithCarrierPrivileges()List<String> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCarrierPrivilegedPackagesForAllActiveSubscriptions()List<String> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCallComposerStatus(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCallComposerStatus()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.call(java.lang.String,java.lang.String)void :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.endCall()boolean :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.answerRingingCall()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isOffhook()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isRinging()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isIdle()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isRadioOn()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.supplyPin(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPuk(java.lang.String,java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPinReportResult(java.lang.String)int[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPukReportResult(java.lang.String,java.lang.String)int[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyIccLockPin(java.lang.String)PinResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyIccLockPuk(java.lang.String,java.lang.String)PinResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.sendUssdRequest(java.lang.String,UssdResponseCallback,android.os.Handler)void :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.handlePinMmi(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.handlePinMmiForSubscriber(int,java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.toggleRadioOnOff()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadio(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadioPower(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.shutdownAllRadios()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isAnyRadioPoweredOn()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getRadioPowerState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.enableDataConnectivity()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.disableDataConnectivity()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getMobileProvisioningUrl()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isDataEnabled()boolean :: android.permission.READ_PHONE_STATE,android.permission.MODIFY_PHONE_STATE,android.permission.ACCESS_NETWORK_STATE
android.telephony.TelephonyManager.isDataRoamingEnabled()boolean :: android.permission.READ_PHONE_STATE,android.permission.ACCESS_NETWORK_STATE
android.telephony.TelephonyManager.getCdmaRoamingMode()int :: android.permission.MODIFY_PHONE_STATE,android.permission.READ_PHONE_STATE,android.permission.ACCESS_NETWORK_STATE,android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCdmaRoamingMode(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaSubscriptionMode()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCdmaSubscriptionMode(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataRoamingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.enableVideoCalling(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isVideoCallingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerStateForSlot(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerState(int,java.util.concurrent.Executor,Consumer<Integer>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerStateForSlot(int,int,java.util.concurrent.Executor,Consumer<Integer>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAndUpdateDefaultRespondViaMessageApplication()ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.telephony.TelephonyManager.getDefaultRespondViaMessageApplication()ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.telephony.TelephonyManager.getPhoneAccountHandle()PhoneAccountHandle :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSubscriptionId(android.telecom.PhoneAccountHandle)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.resetSettings()void :: android.permission.CONNECTIVITY_INTERNAL
android.telephony.TelephonyManager.getSimLocale()Locale :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.requestModemActivityInfo(java.util.concurrent.Executor,OutcomeReceiver<ModemActivityInfo,ModemActivityInfoException>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getServiceState()ServiceState :: android.permission.READ_PHONE_STATE,android.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManager.getCarrierIdFromMccMnc(java.lang.String)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCertsFromCarrierPrivilegeAccessRules()List<String> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getAidForAppType(int)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getTelephonyHistograms()List<TelephonyHistogram> :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAllowedCarriers(int,List<CarrierIdentifier>)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setCarrierRestrictionRules(CarrierRestrictionRules)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAllowedCarriers(int)List<CarrierIdentifier> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCarrierRestrictionRules()CarrierRestrictionRules :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCarrierDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadioEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.reportDefaultNetworkStatus(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.resetAllCarrierActions()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setPolicyDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabledForReason(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isDataEnabledForReason(int)boolean :: android.permission.READ_PHONE_STATE,android.permission.ACCESS_NETWORK_STATE
android.telephony.TelephonyManager.getEmergencyCallbackMode()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isManualNetworkSelectionAllowed()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyManager.setAlwaysReportSignalStrength(boolean)void :: android.permission.MODIFY_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyManager.isDataConnectionAllowed()boolean :: android.permission.READ_PHONE_STATE,android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.ACCESS_NETWORK_STATE
android.telephony.TelephonyManager.getNumberOfModemsWithSimultaneousDataConnections()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setOpportunisticNetworkState(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isOpportunisticNetworkEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSupportedRadioAccessFamily()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.notifyOtaEmergencyNumberDbInstalled()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.updateOtaEmergencyNumberDbFilePath(android.os.ParcelFileDescriptor)void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.TelephonyManager.resetOtaEmergencyNumberDbFilePath()void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.TelephonyManager.getEmergencyNumberList()Map<Integer, :: android.permission.READ_PHONE_STATE,android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyNumberList(int)Map<Integer, :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isPotentialEmergencyNumber(java.lang.String)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyNumberDbVersion()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getPreferredOpportunisticDataSubscription()int :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.enableModemForSlot(int,boolean)boolean :: android.permission.READ_PHONE_STATE,android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isModemEnabledForSlot(int)boolean :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setMultiSimCarrierRestriction(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isMultiSimSupported()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.switchMultiSimConfig(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.doesSwitchMultiSimConfigTriggerReboot()boolean :: android.permission.READ_PHONE_STATE,android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCarrierPrivilegeStatus(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isDataEnabledForApn(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isApnMetered(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setSystemSelectionChannels(List<RadioAccessSpecifier>,java.util.concurrent.Executor,Consumer<Boolean>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSystemSelectionChannels(List<RadioAccessSpecifier>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getSystemSelectionChannels()List<RadioAccessSpecifier> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.matchesCurrentSimOperator(java.lang.String,int,java.lang.String)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCallForwarding(int,java.util.concurrent.Executor,CallForwardingInfoCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCallForwarding(CallForwardingInfo,java.util.concurrent.Executor,Consumer<Integer>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCallWaitingStatus(java.util.concurrent.Executor,Consumer<Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCallWaitingEnabled(boolean,java.util.concurrent.Executor,Consumer<Integer>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setMobileDataPolicyEnabled(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isMobileDataPolicyEnabled(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isIccLockEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setIccLockEnabled(boolean,java.lang.String)PinResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.changeIccLockPin(java.lang.String,java.lang.String)PinResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.notifyUserActivity()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setNrDualConnectivityState(int)int :: android.permission.CAPABILITY_NR_DUAL_CONNECTIVITY_CONFIGURATION_AVAILABLE,android.permission.TelephonyManager#isRadioInterfaceCapabilitySupported"
android.telephony.TelephonyManager.isNrDualConnectivityEnabled()boolean :: android.permission.CAPABILITY_NR_DUAL_CONNECTIVITY_CONFIGURATION_AVAILABLE,android.permission.TelephonyManager#isRadioInterfaceCapabilitySupported"
android.telephony.TelephonyManager.getEquivalentHomePlmns()List<String> :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.sendThermalMitigationRequest(ThermalMitigationRequest)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.bootstrapAuthenticationRequest(int,android.net.Uri,android.telephony.gba.UaSecurityProtocolIdentifier,boolean,java.util.concurrent.Executor,BootstrapAuthenticationCallback)void :: android.permission.PERFORM_IMS_SINGLE_REGISTRATION,android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSignalStrengthUpdateRequest(SignalStrengthUpdateRequest)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.clearSignalStrengthUpdateRequest(SignalStrengthUpdateRequest)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getPhoneCapability()PhoneCapability :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.prepareForUnattendedReboot()int :: android.permission.REBOOT
android.telephony.TelephonyManager.getNetworkSlicingConfiguration(java.util.concurrent.Executor,OutcomeReceiver<NetworkSlicingConfig,NetworkSlicingException>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyRegistryManager.notifyCallStateChangedForAllSubscriptions(int,java.lang.String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.euicc.EuiccManager.getOtaStatus()int :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.downloadSubscription(DownloadableSubscription,boolean,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.continueOperation(android.content.Intent,android.os.Bundle)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getDownloadableSubscriptionMetadata(DownloadableSubscription,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getDefaultDownloadableSubscriptionList(android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.deleteSubscription(int,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.switchToSubscription(int,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.updateSubscriptionNickname(int,java.lang.String,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.eraseSubscriptions(android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.eraseSubscriptions(int,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.setSupportedCountries(List<java.lang.String>)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.setUnsupportedCountries(List<java.lang.String>)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getSupportedCountries()List<String> :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getUnsupportedCountries()List<String> :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.isSupportedCountry(java.lang.String)boolean :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.ims.ImsMmTelManager.registerImsRegistrationCallback(java.util.concurrent.Executor,RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.registerImsRegistrationCallback(java.util.concurrent.Executor,RegistrationManager.RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.unregisterImsRegistrationCallback(RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.unregisterImsRegistrationCallback(RegistrationManager.RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getRegistrationState(java.util.concurrent.Executor,Consumer<Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getRegistrationTransportType(java.util.concurrent.Executor,Consumer<Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.registerMmTelCapabilityCallback(java.util.concurrent.Executor,CapabilityCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.unregisterMmTelCapabilityCallback(CapabilityCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isAdvancedCallingSettingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setAdvancedCallingSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isCapable(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isAvailable(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isSupported(int,int,java.util.concurrent.Executor,Consumer<Boolean>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.privileges(b)profile :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVtSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isVoWiFiSettingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isCrossSimCallingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setCrossSimCallingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isVoWiFiRoamingSettingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiRoamingSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiNonPersistent(boolean,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getVoWiFiModeSetting()int :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiModeSetting(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getVoWiFiRoamingModeSetting()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiRoamingModeSetting(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setRttCapabilitySetting(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isTtyOverVolteEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getFeatureState(java.util.concurrent.Executor,Consumer<Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.registerImsRegistrationCallback(java.util.concurrent.Executor,RegistrationManager.RegistrationCallback)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsRcsManager.unregisterImsRegistrationCallback(RegistrationManager.RegistrationCallback)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsRcsManager.getRegistrationState(java.util.concurrent.Executor,Consumer<Integer>)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsRcsManager.getRegistrationTransportType(java.util.concurrent.Executor,Consumer<Integer>)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsRcsManager.addOnAvailabilityChangedListener(java.util.concurrent.Executor,OnAvailabilityChangedListener)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.removeOnAvailabilityChangedListener(OnAvailabilityChangedListener)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.isCapable(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.isAvailable(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.registerProvisioningChangedCallback(java.util.concurrent.Executor,Callback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.unregisterProvisioningChangedCallback(Callback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.getProvisioningIntValue(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.getProvisioningStringValue(int)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.setProvisioningIntValue(int,int)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.setProvisioningStringValue(int,java.lang.String)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.setProvisioningStatusForCapability(int,int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.getProvisioningStatusForCapability(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.getRcsProvisioningStatusForCapability(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.setRcsProvisioningStatusForCapability(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.notifyRcsAutoConfigurationReceived([byte,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.setRcsClientConfiguration(RcsClientConfiguration)void :: android.permission.PERFORM_IMS_SINGLE_REGISTRATION
android.telephony.ims.ProvisioningManager.isRcsVolteSingleRegistrationCapable()boolean :: android.permission.PERFORM_IMS_SINGLE_REGISTRATION,android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.registerRcsProvisioningCallback(java.util.concurrent.Executor,RcsProvisioningCallback)void :: android.permission.PERFORM_IMS_SINGLE_REGISTRATION,android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.unregisterRcsProvisioningCallback(RcsProvisioningCallback)void :: android.permission.PERFORM_IMS_SINGLE_REGISTRATION,android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.triggerRcsReconfiguration()void :: android.permission.PERFORM_IMS_SINGLE_REGISTRATION,android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RcsUceAdapter.requestCapabilities(Collection<Uri>,java.util.concurrent.Executor,CapabilitiesCallback)void :: android.permission.READ_CONTACTS,android.permission.ACCESS_RCS_USER_CAPABILITY_EXCHANGE
android.telephony.ims.RcsUceAdapter.requestAvailability(android.net.Uri,java.util.concurrent.Executor,CapabilitiesCallback)void :: android.permission.READ_CONTACTS,android.permission.ACCESS_RCS_USER_CAPABILITY_EXCHANGE
android.telephony.ims.RcsUceAdapter.getUcePublishState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RcsUceAdapter.addOnPublishStateChangedListener(java.util.concurrent.Executor,OnPublishStateChangedListener)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RcsUceAdapter.removeOnPublishStateChangedListener(OnPublishStateChangedListener)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RcsUceAdapter.isUceSettingEnabled()boolean :: android.permission.READ_PHONE_STATE
android.telephony.ims.RcsUceAdapter.setUceSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.RegistrationManager.registerImsRegistrationCallback(java.util.concurrent.Executor,RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RegistrationManager.unregisterImsRegistrationCallback(RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RegistrationManager.getRegistrationState(java.util.concurrent.Executor,Consumer<Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RegistrationManager.getRegistrationTransportType(java.util.concurrent.Executor,Consumer<Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.SipDelegateManager.isSupported()boolean :: android.permission.PERFORM_IMS_SINGLE_REGISTRATION,android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.SipDelegateManager.createSipDelegate(DelegateRequest,java.util.concurrent.Executor,android.telephony.ims.stub.DelegateConnectionStateCallback,android.telephony.ims.stub.DelegateConnectionMessageCallback)void :: android.permission.PERFORM_IMS_SINGLE_REGISTRATION
android.telephony.ims.SipDelegateManager.destroySipDelegate(SipDelegateConnection,int)void :: android.permission.PERFORM_IMS_SINGLE_REGISTRATION
android.telephony.ims.SipDelegateManager.Objects.requireNonNull(connection,SipDelegateConnection)int :: android.permission. to = 699,android.permission.PERFORM_IMS_SINGLE_REGISTRATION)
    public void triggerFullNetworkRegistration(@NonNull SipDelegateConnection connection,android.permission.
            @IntRange(from = 100
android.uwb.RangingSession.start(android.os.PersistableBundle)void :: android.permission.UWB_PRIVILEGED
android.uwb.RangingSession.reconfigure(android.os.PersistableBundle)void :: android.permission.UWB_PRIVILEGED
android.uwb.RangingSession.stop()void :: android.permission.UWB_PRIVILEGED
android.uwb.RangingSession.close()void :: android.permission.UWB_PRIVILEGED
android.uwb.UwbManager.registerAdapterStateCallback(java.util.concurrent.Executor,AdapterStateCallback)void :: android.permission.UWB_PRIVILEGED
android.uwb.UwbManager.unregisterAdapterStateCallback(AdapterStateCallback)void :: android.permission.UWB_PRIVILEGED
android.uwb.UwbManager.getSpecificationInfo()PersistableBundle :: android.permission.UWB_PRIVILEGED
android.uwb.UwbManager.elapsedRealtimeResolutionNanos()long :: android.permission.UWB_PRIVILEGED
android.uwb.UwbManager.openRangingSession(android.os.PersistableBundle,java.util.concurrent.Executor,RangingSession.Callback)CancellationSignal :: android.permission.UWB_RANGING,android.permission.UWB_PRIVILEGED
android.view.Display.getBrightnessInfo()BrightnessInfo :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.view.Display.requestColorMode(int)void :: android.permission.CONFIGURE_DISPLAY_COLOR_MODE
android.view.InputDevice.enable()void :: android.permission.DISABLE_INPUT_DEVICE
android.view.InputDevice.disable()void :: android.permission.DISABLE_INPUT_DEVICE
android.view.SurfaceControlHdrLayerInfoListener.register(android.os.IBinder)void :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.view.SurfaceControlHdrLayerInfoListener.unregister(android.os.IBinder)void :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.view.SurfaceControlHdrLayerInfoListener.unregisterAll()void :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.view.Window.setHideOverlayWindows(boolean)void :: android.permission.HIDE_OVERLAY_WINDOWS
android.view.WindowManager.getCurrentImeTouchRegion()Region :: android.permission.RESTRICTED_VR_ACCESS
android.view.WindowManager.setSystemApplicationOverlay(boolean)void :: android.permission.SYSTEM_APPLICATION_OVERLAY
android.view.contentcapture.ContentCaptureManager.resetTemporaryService(int)void :: android.permission.MANAGE_CONTENT_CAPTURE
android.view.contentcapture.ContentCaptureManager.setTemporaryService(int,java.lang.String,int)void :: android.permission.MANAGE_CONTENT_CAPTURE
android.view.contentcapture.ContentCaptureManager.setDefaultServiceEnabled(int,boolean)void :: android.permission.MANAGE_CONTENT_CAPTURE
android.view.displayhash.DisplayHashManager.setDisplayHashThrottlingEnabled(boolean)void :: android.permission.READ_FRAME_BUFFER
android.view.inputmethod.InputMethodManager.getInputMethodListAsUser(int)List<InputMethodInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.view.inputmethod.InputMethodManager.getEnabledInputMethodListAsUser(int)List<InputMethodInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.view.inputmethod.InputMethodManager.showInputMethodPickerFromSystem(boolean,int)void :: android.permission.WRITE_SECURE_SETTINGS
android.view.inputmethod.InputMethodManager.setCurrentInputMethodSubtype(InputMethodSubtype)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.view.translation.UiTranslationManager.startTranslation(TranslationSpec,TranslationSpec,List<AutofillId>,android.app.assist.ActivityId)void :: android.permission.MANAGE_UI_TRANSLATION
android.view.translation.UiTranslationManager.startTranslation(TranslationSpec,TranslationSpec,List<AutofillId>,android.app.assist.ActivityId,UiTranslationSpec)void :: android.permission.MANAGE_UI_TRANSLATION
android.view.translation.UiTranslationManager.finishTranslation(android.app.assist.ActivityId)void :: android.permission.MANAGE_UI_TRANSLATION
android.view.translation.UiTranslationManager.pauseTranslation(android.app.assist.ActivityId)void :: android.permission.MANAGE_UI_TRANSLATION
android.view.translation.UiTranslationManager.resumeTranslation(android.app.assist.ActivityId)void :: android.permission.MANAGE_UI_TRANSLATION
android.widget.TextView.setTextOperationUser(android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.window.DisplayAreaOrganizer.registerOrganizer(int)List<DisplayAreaAppearedInfo> :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.DisplayAreaOrganizer.unregisterOrganizer()void :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.DisplayAreaOrganizer.createTaskDisplayArea(int,int,java.lang.String)DisplayAreaAppearedInfo :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.DisplayAreaOrganizer.deleteTaskDisplayArea(WindowContainerToken)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.registerOrganizer()List<TaskAppearedInfo> :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.unregisterOrganizer()void :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.createRootTask(int,int,android.os.IBinder)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.deleteRootTask(WindowContainerToken)boolean :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.getImeTarget(int)WindowContainerToken :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.setInterceptBackPressedOnTaskRoot(WindowContainerToken,boolean)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.restartTaskTopActivityProcessIfVisible(WindowContainerToken)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.WindowOrganizer.applyTransaction(WindowContainerTransaction)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.WindowOrganizer.applySyncTransaction(WindowContainerTransaction,WindowContainerTransactionCallback)int :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.WindowOrganizer.startTransition(int,android.os.IBinder,WindowContainerTransaction)IBinder :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.WindowOrganizer.finishTransition(android.os.IBinder,WindowContainerTransaction,WindowContainerTransactionCallback)int :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.WindowOrganizer.registerTransitionPlayer(ITransitionPlayer)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.WindowOrganizer.getWindowOrganizerController()IWindowOrganizerController :: android.permission.MANAGE_ACTIVITY_TASKS
com.android.internal.telephony.IccSmsInterfaceManager.resetAllCellBroadcastRanges()void :: android.permission.MODIFY_CELL_BROADCASTS
com.android.libraries.tv.tvsystem.media.TvAudioManager.setDeviceVolumeBehavior(AudioDeviceAttributes,int)void :: android.permission.MODIFY_AUDIO_ROUTING
com.android.libraries.tv.tvsystem.media.TvAudioManager.getDeviceVolumeBehavior(AudioDeviceAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
com.android.libraries.tv.tvsystem.pm.TvPackageInstaller.uninstallExistingPackage(java.lang.String,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES
com.android.libraries.tv.tvsystem.wifi.TvWifiManager.startLocalOnlyHotspot(SoftApConfiguration,java.util.concurrent.Executor,WifiManager.LocalOnlyHotspotCallback)void :: android.permission.NETWORK_SETTINGS,android.permission.NETWORK_SETUP_WIZARD
com.android.server.BluetoothAirplaneModeListener.handleAirplaneModeChange()void :: android.permission.BLUETOOTH_PRIVILEGED
com.android.server.BluetoothManagerService.onAirplaneModeChanged()void :: android.permission.BLUETOOTH_PRIVILEGED
com.android.server.BluetoothManagerService.checkBluetoothPermissions(android.content.AttributionSource,java.lang.String,boolean)boolean :: android.permission.BLUETOOTH_CONNECT
com.android.server.BluetoothManagerService.disableBle(android.content.AttributionSource,android.os.IBinder)boolean :: android.permission.BLUETOOTH_PRIVILEGED
com.android.server.BluetoothManagerService.continueFromBleOnState()void :: android.permission.BLUETOOTH_PRIVILEGED
com.android.server.BluetoothManagerService.sendBrEdrDownCallback(android.content.AttributionSource)void :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
com.android.server.BluetoothManagerService.unbindAndFinish()void :: android.permission.BLUETOOTH_PRIVILEGED
com.android.server.BluetoothManagerService.restartForReason(int)void :: android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
com.android.server.BluetoothManagerService.handleEnable(boolean)void :: android.permission.BLUETOOTH_CONNECT
com.android.server.BluetoothManagerService.handleDisable()void :: android.permission.BLUETOOTH_CONNECT
com.android.server.BluetoothManagerService.bluetoothStateChangeHandler(int,int)void :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
com.android.server.BluetoothManagerService.recoverBluetoothServiceFromError(boolean)void :: android.permission.,android.permission.BLUETOOTH_PRIVILEGED,android.permission.BLUETOOTH_CONNECT
com.android.server.BluetoothManagerService.checkConnectPermissionForDataDelivery(android.content.Context,android.content.AttributionSource,java.lang.String)boolean :: android.permission.BLUETOOTH_CONNECT
com.android.server.BluetoothModeChangeHelper.onAirplaneModeChanged(BluetoothManagerService)void :: android.permission.BLUETOOTH_PRIVILEGED
com.android.server.app.GameManagerService.getAvailableGameModes(java.lang.String)int[] :: android.permission.MANAGE_GAME_MODE
com.android.server.app.GameManagerService.setGameMode(java.lang.String,int,int)void :: android.permission.MANAGE_GAME_MODE
com.android.server.audio.AudioService.Objects.requireNonNull(device,device)long :: android.permission.MODIFY_AUDIO_ROUTING)
    public boolean setAdditionalOutputDeviceDelay(
            @NonNull AudioDeviceAttributes device,android.permission. @IntRange(from = 0
com.android.server.content.ContentService.putCache(java.lang.String,android.net.Uri,android.os.Bundle,int)void :: android.permission.CACHE_CONTENT
com.android.server.content.ContentService.getCache(java.lang.String,android.net.Uri,int)Bundle :: android.permission.CACHE_CONTENT
com.android.server.graphics.fonts.FontManagerService.getFontConfig()FontConfig :: android.permission.UPDATE_FONTS
com.android.server.graphics.fonts.FontManagerService.updateFontFamily(List<FontUpdateRequest>,int)int :: android.permission.UPDATE_FONTS
com.android.server.inputmethod.InputMethodManagerService.onCommand(java.lang.String)int :: android.permission.DUMP,android.permission.WRITE_SECURE_SETTINGS,android.permission.,android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.notification.NotificationManagerService.getHistoricalNotifications(java.lang.String,int,boolean)StatusBarNotification[] :: android.permission.ACCESS_NOTIFICATIONS
com.android.server.notification.NotificationManagerService.getHistoricalNotificationsWithAttribution(java.lang.String,java.lang.String,int,boolean)StatusBarNotification[] :: android.permission.ACCESS_NOTIFICATIONS
com.android.server.notification.NotificationManagerService.getNotificationHistory(java.lang.String,java.lang.String)NotificationHistory :: android.permission.ACCESS_NOTIFICATIONS
com.android.server.os.BugreportManagerServiceImpl.startBugreport(int,java.lang.String,java.io.FileDescriptor,java.io.FileDescriptor,int,android.os.IDumpstateListener,boolean)void :: android.permission.DUMP
com.android.server.os.BugreportManagerServiceImpl.cancelBugreport(int,java.lang.String)or :: android.permission.DUMP
com.android.server.pm.verify.domain.DomainVerificationManagerInternal.getDomainVerificationInfo(java.lang.String)DomainVerificationInfo :: android.permission.DOMAIN_VERIFICATION_AGENT,android.permission.UPDATE_DOMAIN_VERIFICATION_USER_SELECTION
com.android.server.pm.verify.domain.DomainVerificationManagerInternal.setDomainVerificationStatusInternal(int,java.util.UUID,Set<java.lang.String>,int)int :: android.permission.DOMAIN_VERIFICATION_AGENT
com.android.server.wm.WindowManagerService.showGlobalActions()void :: android.permission.INTERNAL_SYSTEM_WINDOW
com.android.settingslib.bluetooth.LocalBluetoothManager.create(android.content.Context,android.os.Handler,android.os.UserHandle)LocalBluetoothManager :: android.permission.INTERACT_ACROSS_USERS_FULL
com.android.setupwizardlib.util.SystemBarHelper.setBackButtonVisible(android.view.Window,boolean)void :: android.permission.STATUS_BAR"
com.android.shell.BugreportRequestedReceiver.onReceive(android.content.Context,android.content.Intent)void :: android.permission.TRIGGER_SHELL_BUGREPORT
android.accessibilityservice.AccessibilityService.onAccessibilityEvent(android.view.accessibility.AccessibilityEvent)interface :: android.permission.BIND_ACCESSIBILITY_SERVICE
android.accessibilityservice.FingerprintGestureController.FingerprintGestureController(IAccessibilityServiceConnection)FingerprintGestureController(IAccessibilityServiceConnection :: android.permission.USE_FINGERPRINT
android.accounts.AccountManager.AccountManager(android.content.Context,IAccountManager)AccountManager(Context :: android.permission.GET_ACCOUNTS,android.permission.WRITE_CONTACTS,android.permission.READ_CONTACTS,android.permission.GET_ACCOUNTS_PRIVILEGED
android.accounts.AccountManager.getAuthenticatorTypesAsUser(int)AuthenticatorDescription[] :: android.permission.INTERACT_ACROSS_USERS_FULL
android.accounts.AccountManager.getAccountsByType(java.lang.String)Account[] :: android.permission.GET_ACCOUNTS
android.accounts.AccountManager.hasFeatures(Account,[java.lang.String,AccountManagerCallback<Boolean>,android.os.Handler)AccountManagerFuture<Boolean> :: android.permission.GET_ACCOUNTS
android.accounts.AccountManager.getAccountsByTypeAndFeatures(java.lang.String,[java.lang.String,[AccountManagerCallback<Account,android.os.Handler)AccountManagerFuture<Account[]> :: android.permission.GET_ACCOUNTS
android.app.ActivityManager.setProcessStateSummary([byte)void :: android.permission.DUMP
android.app.ActivityManager.forceStopPackageAsUser(java.lang.String,int)void :: android.permission.FORCE_STOP_PACKAGES
android.app.ActivityManager.handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)int :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.INTERACT_ACROSS_USERS
android.app.ActivityManagerInternal.checkContentProviderAccess(java.lang.String,int)String :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.INTERACT_ACROSS_PROFILES,android.permission.INTERACT_ACROSS_USERS
android.app.AlarmManager.onAlarm()void :: android.permission.SCHEDULE_EXACT_ALARM
android.app.AppOpsManager.stopWatchingMode(OnOpChangedListener)void :: android.permission.WATCH_APPOPS
android.app.AppOpsManager.stopWatchingNoted(OnOpNotedListener)void :: android.permission.WATCH_APPOPS
android.app.DownloadManager.Request(android.net.Uri)Request(Uri :: android.permission.INTERNET
android.app.DownloadManager.setDestinationUri(android.net.Uri)Request :: android.permission.WRITE_EXTERNAL_STORAGE
android.app.DownloadManager.setDestinationInExternalPublicDir(java.lang.String,java.lang.String)Request :: android.permission.WRITE_EXTERNAL_STORAGE
android.app.Notification.getGroup()String :: android.permission.VIBRATE
android.app.Notification.setFullScreenIntent(PendingIntent,boolean)Builder :: android.permission.USE_FULL_SCREEN_INTENT
android.app.NotificationManager.from(android.content.Context)NotificationManager :: android.permission.STATUS_BAR_SERVICE
android.app.Service.startForeground(int,Notification)void :: android.permission.FOREGROUND_SERVICE
android.app.WallpaperManager.suggestDesiredDimensions(int,int)void :: android.permission.SET_WALLPAPER_HINTS
android.app.admin.DelegatedAdminReceiver.onChoosePrivateKeyAlias(android.content.Context,android.content.Intent,int,android.net.Uri,java.lang.String)String :: android.permission.BIND_DEVICE_ADMIN
android.app.admin.DeviceAdminReceiver.getManager(android.content.Context)DevicePolicyManager :: android.permission.BIND_DEVICE_ADMIN
android.app.admin.DevicePolicyManager.onInstallUpdateError(int,java.lang.String)void :: android.permission.BIND_DEVICE_ADMIN,android.permission.DISPATCH_PROVISIONING_MESSAGE
android.app.admin.DevicePolicyManager.wipeData(int)void :: android.permission.MASTER_CLEAR
android.app.admin.DevicePolicyManager.wipeData(int,CharSequence)void :: android.permission.MASTER_CLEAR
android.app.admin.DevicePolicyManager.getFactoryResetProtectionPolicy(android.content.ComponentName)FactoryResetProtectionPolicy :: android.permission.MASTER_CLEAR
android.app.admin.DevicePolicyManager.setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean)void :: android.permission.BIND_VPN_SERVICE
android.app.admin.DevicePolicyManager.bindDeviceAdminServiceAsUser(android.content.ComponentName,android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)boolean :: android.permission.BIND_DEVICE_ADMIN
android.app.admin.DevicePolicyManager.getOwnerInstalledCaCerts(android.os.UserHandle)List<String> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.admin.DevicePolicyManager.createAndProvisionManagedProfile(ManagedProfileProvisioningParams)UserHandle :: android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
android.app.job.JobInfo.getId()int :: android.permission.CONNECTIVITY_INTERNAL
android.app.timezone.RulesManager.getRulesState()RulesState :: android.permission.QUERY_TIME_ZONE_RULES,android.permission.UPDATE_TIME_ZONE_RULES
android.app.trust.TrustManager.reportUnlockAttempt(boolean,int)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.reportUnlockLockout(int,int)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.reportEnabledTrustAgentsChanged(int)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.reportKeyguardShowingChanged()void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.registerTrustListener(TrustListener)void :: android.permission.TRUST_LISTENER
android.app.trust.TrustManager.unregisterTrustListener(TrustListener)void :: android.permission.TRUST_LISTENER
android.app.usage.NetworkStatsManager.NetworkStatsManager(android.content.Context,android.net.INetworkStatsService)NetworkStatsManager(Context :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.queryUsageStats(int,long,long)List<UsageStats> :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.queryConfigurations(int,long,long)List<ConfigurationStats> :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.queryEventStats(int,long,long)List<EventStats> :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.queryEvents(long,long)UsageEvents :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.queryAndAggregateUsageStats(long,long)Map<String, :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.isAppInactive(java.lang.String)boolean :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.reportUsageStart(android.app.Activity,java.lang.String,long)void :: android.permission.OBSERVE_APP_USAGE
android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int,android.os.UserHandle,android.content.ComponentName,android.os.Bundle)boolean :: android.permission.BIND_APPWIDGET
android.companion.AssociationRequest.setCallingPackage(java.lang.String)void :: android.permission.REQUEST_COMPANION_PROFILE_WATCH
android.companion.CompanionDeviceManager.getAssociations()List<String> :: android.permission.REQUEST_COMPANION_RUN_IN_BACKGROUND
android.companion.CompanionDeviceService.onDeviceAppeared(java.lang.String)void :: android.permission.BIND_COMPANION_DEVICE_SERVICE
android.content.ContentResolver.getSyncAutomatically(android.accounts.Account,java.lang.String)boolean :: android.permission.READ_SYNC_SETTINGS
android.content.ContentResolver.setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)void :: android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)void :: android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)void :: android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.cancelSync(SyncRequest)void :: android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.getPeriodicSyncs(android.accounts.Account,java.lang.String)List<PeriodicSync> :: android.permission.READ_SYNC_SETTINGS
android.content.ContentResolver.getIsSyncable(android.accounts.Account,java.lang.String)int :: android.permission.READ_SYNC_SETTINGS
android.content.ContentResolver.setIsSyncable(android.accounts.Account,java.lang.String,int)void :: android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.getMasterSyncAutomatically()boolean :: android.permission.READ_SYNC_SETTINGS
android.content.ContentResolver.setMasterSyncAutomatically(boolean)void :: android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.isSyncActive(android.accounts.Account,java.lang.String)boolean :: android.permission.READ_SYNC_STATS
android.content.ContentResolver.getCurrentSync()SyncInfo :: android.permission.READ_SYNC_STATS
android.content.ContentResolver.getCurrentSyncs()List<SyncInfo> :: android.permission.READ_SYNC_STATS
android.content.ContentResolver.isSyncPending(android.accounts.Account,java.lang.String)boolean :: android.permission.READ_SYNC_STATS
android.content.Context.getAssets()AssetManager :: android.permission.START_ACTIVITIES_FROM_BACKGROUND
android.content.Context.getExternalFilesDir(java.lang.String)File :: android.permission.READ_EXTERNAL_STORAGE,android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.getExternalFilesDirs(java.lang.String)File[] :: android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.getObbDir()File :: android.permission.READ_EXTERNAL_STORAGE,android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.getObbDirs()File[] :: android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.getExternalCacheDir()File :: android.permission.READ_EXTERNAL_STORAGE,android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.getExternalCacheDirs()File[] :: android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.getExternalMediaDirs()File[] :: android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.setWallpaper(android.graphics.Bitmap)void :: android.permission.SET_WALLPAPER
android.content.Context.setWallpaper(java.io.InputStream)void :: android.permission.SET_WALLPAPER
android.content.Context.clearWallpaper()void :: android.permission.SET_WALLPAPER
android.content.Context.registerReceiver(BroadcastReceiver,IntentFilter)Intent :: android.permission.BROADCAST_STICKY
android.content.Intent.isAccessUriMode(int)boolean :: android.permission.MASTER_CLEAR,android.permission.CALL_PHONE,android.permission.MANAGE_USERS,android.permission.START_VIEW_PERMISSION_USAGE,android.permission.BATTERY_STATS,android.permission.PROCESS_OUTGOING_CALLS,android.permission.INTERACT_ACROSS_USERS,android.permission.SEND_SHOW_SUSPENDED_APP_DETAILS,android.permission.RECEIVE_MEDIA_RESOURCE_USAGE,android.permission.REQUEST_INSTALL_PACKAGES,android.permission.INSTALL_PACKAGES,android.permission.SUSPEND_APPS,android.permission.REQUEST_DELETE_PACKAGES,android.permission.RECEIVE_BOOT_COMPLETED,android.permission.GRANT_RUNTIME_PERMISSIONS
android.content.RestrictionsManager.RestrictionsManager(Context,IRestrictionsManager)RestrictionsManager(Context :: android.permission.BIND_DEVICE_ADMIN
android.content.pm.ApplicationInfo.getCategoryTitle(android.content.Context,int)CharSequence :: android.permission.FACTORY_TEST
android.content.pm.CrossProfileApps.canConfigureInteractAcrossProfiles(java.lang.String)boolean :: android.permission.INTERACT_ACROSS_PROFILES,android.permission.MANAGE_APP_OPS_MODES,android.permission.INTERACT_ACROSS_USERS
android.content.pm.CrossProfileApps.canUserAttemptToConfigureInteractAcrossProfiles(java.lang.String)boolean :: android.permission.INTERACT_ACROSS_PROFILES
android.content.pm.CrossProfileAppsInternal.setInteractAcrossProfilesAppOp(java.lang.String,int,int)void :: android.permission.INTERACT_ACROSS_PROFILES
android.content.pm.PackageInfo.isOverlayPackage()boolean :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.content.pm.PackageInstaller.setRequireUserAction(int)void :: android.permission.UPDATE_PACKAGES_WITHOUT_USER_ACTION,android.permission.REQUEST_INSTALL_PACKAGES
android.content.pm.PackageManager.getInstallSourceInfo(java.lang.String)InstallSourceInfo :: android.permission.DELETE_PACKAGES
android.content.pm.PackageManager.freeStorageAndNotify(long,IPackageDataObserver)void :: android.permission.DELETE_CACHE_FILES,android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.getPackageSizeInfo(java.lang.String,IPackageStatsObserver)void :: android.permission.GET_PACKAGE_SIZE
android.content.pm.PackageManager.canRequestPackageInstalls()boolean :: android.permission.REQUEST_INSTALL_PACKAGES
android.content.pm.PackageManagerInternal.getSuspendingPackage(java.lang.String,int)String :: android.permission.MANAGE_USERS,android.permission.SUSPEND_APPS
android.content.pm.verify.domain.DomainVerificationManager.DomainVerificationManager(android.content.Context,IDomainVerificationManager)DomainVerificationManager(Context :: android.permission.UPDATE_DOMAIN_VERIFICATION_USER_SELECTION
android.hardware.Camera.getNumberOfCameras()int :: android.permission.CAMERA
android.hardware.Sensor.getHighestDirectReportRateLevel()int :: android.permission.HIGH_SAMPLING_RATE_SENSORS
android.hardware.Sensor.getMinDelay()int :: android.permission.HIGH_SAMPLING_RATE_SENSORS
android.hardware.SensorManager.SensorManager()SensorManager() :: android.permission.HIGH_SAMPLING_RATE_SENSORS
android.hardware.camera2.CameraCharacteristics.getKeysNeedingPermission()List<Key<?>> :: android.permission.CAMERA
android.hardware.camera2.CameraDevice.getId()String :: android.permission.CAMERA
android.hardware.camera2.CameraInjectionSession.close()void :: android.permission.CAMERA_INJECT_EXTERNAL_CAMERA
android.hardware.display.DisplayManager.startWifiDisplayScan()void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.hardware.display.DisplayManager.stopWifiDisplayScan()void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.hardware.display.DisplayManager.connectWifiDisplay(java.lang.String)void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.hardware.display.DisplayManager.renameWifiDisplay(java.lang.String,java.lang.String)void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.hardware.display.DisplayManager.forgetWifiDisplay(java.lang.String)void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.hardware.display.DisplayManager.setTemporaryBrightness(int,float)void :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.setTemporaryAutoBrightnessAdjustment(float)void :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManagerGlobal.setTemporaryBrightness(int,float)void :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManagerGlobal.setTemporaryAutoBrightnessAdjustment(float)void :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.hardware.hdmi.HdmiControlManager.HdmiControlManager(IHdmiControlService)HdmiControlManager(IHdmiControlService :: android.permission.HDMI_CEC
android.hardware.location.GeofenceHardware.getMonitoringTypes()int[] :: android.permission.LOCATION_HARDWARE
android.hardware.location.GeofenceHardware.addGeofence(int,int,GeofenceHardwareRequest,GeofenceHardwareCallback)boolean :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_FINE_LOCATION
android.hardware.location.GeofenceHardware.removeGeofence(int,int)boolean :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_FINE_LOCATION
android.hardware.location.GeofenceHardware.pauseGeofence(int,int)boolean :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_FINE_LOCATION
android.hardware.location.GeofenceHardware.resumeGeofence(int,int,int)boolean :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_FINE_LOCATION
android.hardware.location.GeofenceHardware.registerForMonitorStateChangeCallback(int,GeofenceHardwareMonitorCallback)boolean :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_FINE_LOCATION
android.hardware.location.GeofenceHardware.unregisterForMonitorStateChangeCallback(int,GeofenceHardwareMonitorCallback)boolean :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_FINE_LOCATION
android.hardware.usb.UsbManager.hasPermission(UsbDevice)boolean :: android.permission.CAMERA
android.hardware.usb.UsbManager.requestPermission(UsbDevice,android.app.PendingIntent)void :: android.permission.CAMERA
android.location.LocationManager.LocationManager(android.content.Context,ILocationManager)LocationManager(@NonNull :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.removeProximityAlert(android.app.PendingIntent)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.media.AudioDeviceInfo.enforceValidAudioDeviceTypeOut(int)void :: android.permission.CAPTURE_AUDIO_OUTPUT
android.media.AudioManager.startBluetoothSco()void :: android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioManager.setBluetoothScoOn(boolean)void :: android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioManager.setCommunicationDevice(AudioDeviceInfo)boolean :: android.permission.MODIFY_PHONE_STATE
android.media.MediaCommunicationManager.isTrustedForMediaControl(MediaSessionManager.RemoteUserInfo)boolean :: android.permission.MEDIA_CONTENT_CONTROL
android.media.MediaCommunicationManager.onSession2TokenCreated(Session2Token)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.MediaExtractor.MediaExtractor()class :: android.permission.INTERNET
android.media.MediaExtractor.setDataSource(android.content.Context,android.net.Uri,Map<java.lang.String,java.lang.String>)void :: android.permission.INTERNET
android.media.MediaExtractor.setDataSource(java.lang.String,Map<java.lang.String,java.lang.String>)void :: android.permission.INTERNET
android.media.MediaExtractor.setDataSource(java.lang.String)void :: android.permission.INTERNET
android.media.MediaPlayer.MediaPlayer()MediaPlayer() :: android.permission.INTERNET
android.media.MediaPlayer.setWakeMode(android.content.Context,int)void :: android.permission.WAKE_LOCK
android.media.MediaRecorder.isSystemOnlyAudioSource(int)boolean :: android.permission.CAPTURE_AUDIO_OUTPUT
android.media.MediaRouter.setRouterGroupId(java.lang.String)void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.media.MediaRouter2Manager.getInstance(android.content.Context)MediaRouter2Manager :: android.permission.MEDIA_CONTENT_CONTROL
android.media.MediaSession2Service.onUpdateNotification(MediaSession2)MediaNotification :: android.permission.FOREGROUND_SERVICE
android.media.RingtoneManager.getCursor()Cursor :: android.permission.READ_EXTERNAL_STORAGE
android.media.RingtoneManager.getValidRingtoneUri(android.content.Context)Uri :: android.permission.READ_EXTERNAL_STORAGE
android.media.RingtoneManager.openRingtone(android.content.Context,android.net.Uri)InputStream :: android.permission.READ_EXTERNAL_STORAGE
android.media.audiofx.EnvironmentalReverb.EnvironmentalReverb(int,int)EnvironmentalReverb(int :: android.permission.MODIFY_AUDIO_SETTINGS
android.media.audiofx.PresetReverb.PresetReverb(int,int)PresetReverb(int :: android.permission.MODIFY_AUDIO_SETTINGS
android.media.audiofx.Visualizer.System.loadLibrary(audioeffect_jni)class :: android.permission.MODIFY_AUDIO_SETTINGS
android.media.projection.MediaProjectionManager.getMediaProjection(int,android.content.Intent)MediaProjection :: android.permission.SYSTEM_ALERT_WINDOW
android.media.session.MediaSessionManager.getActiveSessions(android.content.ComponentName)List<MediaController> :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.getSession2Tokens()List<Session2Token> :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.addOnActiveSessionsChangedListener(OnActiveSessionsChangedListener,android.content.ComponentName)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.addOnActiveSessionsChangedListener(OnActiveSessionsChangedListener,android.content.ComponentName,android.os.Handler)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.removeOnActiveSessionsChangedListener(OnActiveSessionsChangedListener)void :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.removeOnSession2TokensChangedListener(OnSession2TokensChangedListener)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.media.session.MediaSessionManager.isTrustedForMediaControl(RemoteUserInfo)boolean :: android.permission.MEDIA_CONTENT_CONTROL
android.media.soundtrigger.SoundTriggerDetector.getCaptureAudioFormat()AudioFormat :: android.permission.SOUND_TRIGGER_RUN_IN_BATTERY_SAVER
android.media.tv.TvInputService.createExtension()IBinder :: android.permission.BIND_TV_INPUT
android.net.VpnService.getService()IVpnManager :: android.permission.BIND_VPN_SERVICE
android.net.rtp.AudioGroup.AudioGroup()AudioGroup() :: android.permission.RECORD_AUDIO
android.net.rtp.AudioStream.AudioStream(java.net.InetAddress)AudioStream(InetAddress :: android.permission.INTERNET
android.net.rtp.RtpStream.getLocalAddress()InetAddress :: android.permission.INTERNET
android.net.sip.SipAudioCall.onReadyToCall(SipAudioCall)void :: android.permission.USE_SIP,android.permission.INTERNET,android.permission.ACCESS_WIFI_STATE,android.permission.RECORD_AUDIO,android.permission.WAKE_LOCK,android.permission.MODIFY_AUDIO_SETTINGS
android.net.sip.SipAudioCall.setSpeakerMode(boolean)void :: android.permission.MODIFY_AUDIO_SETTINGS
android.net.sip.SipAudioCall.startAudio()void :: android.permission.ACCESS_WIFI_STATE,android.permission.RECORD_AUDIO,android.permission.WAKE_LOCK
android.net.sip.SipManager.newInstance(android.content.Context)SipManager :: android.permission.USE_SIP
android.nfc.NfcAdapter.onTagDiscovered(Tag)interface :: android.permission.NFC_TRANSACTION_EVENT,android.permission.NFC_PREFERRED_PAYMENT_INFO
android.nfc.NfcAdapter.setBeamPushUris([Uri,android.app.Activity)void :: android.permission.NFC
android.nfc.NfcAdapter.setBeamPushUrisCallback(CreateBeamUrisCallback,android.app.Activity)void :: android.permission.NFC
android.nfc.NfcAdapter.setNdefPushMessage(NdefMessage,android.app.Activity,android.app.Activity)void :: android.permission.NFC
android.nfc.NfcAdapter.setNdefPushMessageCallback(CreateNdefMessageCallback,android.app.Activity,android.app.Activity)void :: android.permission.NFC
android.nfc.NfcAdapter.setOnNdefPushCompleteCallback(OnNdefPushCompleteCallback,android.app.Activity,android.app.Activity)void :: android.permission.NFC
android.nfc.NfcAdapter.enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,[IntentFilter,[java.lang.String[])void :: android.permission.NFC
android.nfc.NfcAdapter.disableForegroundDispatch(android.app.Activity)void :: android.permission.NFC
android.nfc.NfcAdapter.enableForegroundNdefPush(android.app.Activity,NdefMessage)void :: android.permission.NFC
android.nfc.NfcAdapter.disableForegroundNdefPush(android.app.Activity)void :: android.permission.NFC
android.nfc.NfcAdapter.dispatch(Tag)void :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.cardemulation.CardEmulation.isDefaultServiceForCategory(android.content.ComponentName,java.lang.String)boolean :: android.permission.NFC
android.nfc.cardemulation.CardEmulation.isDefaultServiceForAid(android.content.ComponentName,java.lang.String)boolean :: android.permission.NFC
android.nfc.cardemulation.HostNfcFService.sendResponsePacket([byte)void :: android.permission.BIND_NFC_SERVICE
android.nfc.tech.IsoDep.get(android.nfc.Tag)IsoDep :: android.permission.NFC
android.nfc.tech.IsoDep.setTimeout(int)void :: android.permission.NFC
android.nfc.tech.IsoDep.getTimeout()int :: android.permission.NFC
android.nfc.tech.IsoDep.transceive([byte)byte[] :: android.permission.NFC
android.nfc.tech.MifareClassic.get(android.nfc.Tag)MifareClassic :: android.permission.NFC
android.nfc.tech.MifareClassic.authenticateSectorWithKeyA(int,[byte)boolean :: android.permission.NFC
android.nfc.tech.MifareClassic.authenticateSectorWithKeyB(int,[byte)boolean :: android.permission.NFC
android.nfc.tech.MifareClassic.readBlock(int)byte[] :: android.permission.NFC
android.nfc.tech.MifareClassic.writeBlock(int,[byte)void :: android.permission.NFC
android.nfc.tech.MifareClassic.increment(int,int)void :: android.permission.NFC
android.nfc.tech.MifareClassic.decrement(int,int)void :: android.permission.NFC
android.nfc.tech.MifareClassic.transfer(int)void :: android.permission.NFC
android.nfc.tech.MifareClassic.restore(int)void :: android.permission.NFC
android.nfc.tech.MifareClassic.transceive([byte)byte[] :: android.permission.NFC
android.nfc.tech.MifareClassic.setTimeout(int)void :: android.permission.NFC
android.nfc.tech.MifareClassic.getTimeout()int :: android.permission.NFC
android.nfc.tech.MifareUltralight.get(android.nfc.Tag)MifareUltralight :: android.permission.NFC
android.nfc.tech.MifareUltralight.readPages(int)byte[] :: android.permission.NFC
android.nfc.tech.MifareUltralight.writePage(int,[byte)void :: android.permission.NFC
android.nfc.tech.MifareUltralight.transceive([byte)byte[] :: android.permission.NFC
android.nfc.tech.MifareUltralight.setTimeout(int)void :: android.permission.NFC
android.nfc.tech.MifareUltralight.getTimeout()int :: android.permission.NFC
android.nfc.tech.Ndef.get(android.nfc.Tag)Ndef :: android.permission.NFC
android.nfc.tech.Ndef.isWritable()boolean :: android.permission.NFC
android.nfc.tech.Ndef.getNdefMessage()NdefMessage :: android.permission.NFC
android.nfc.tech.Ndef.writeNdefMessage(android.nfc.NdefMessage)void :: android.permission.NFC
android.nfc.tech.Ndef.makeReadOnly()boolean :: android.permission.NFC
android.nfc.tech.NdefFormatable.get(android.nfc.Tag)NdefFormatable :: android.permission.NFC
android.nfc.tech.NdefFormatable.format(android.nfc.NdefMessage)void :: android.permission.NFC
android.nfc.tech.NdefFormatable.formatReadOnly(android.nfc.NdefMessage)void :: android.permission.NFC
android.nfc.tech.NfcA.get(android.nfc.Tag)NfcA :: android.permission.NFC
android.nfc.tech.NfcA.transceive([byte)byte[] :: android.permission.NFC
android.nfc.tech.NfcA.setTimeout(int)void :: android.permission.NFC
android.nfc.tech.NfcA.getTimeout()int :: android.permission.NFC
android.nfc.tech.NfcB.get(android.nfc.Tag)NfcB :: android.permission.NFC
android.nfc.tech.NfcB.transceive([byte)byte[] :: android.permission.NFC
android.nfc.tech.NfcF.get(android.nfc.Tag)NfcF :: android.permission.NFC
android.nfc.tech.NfcF.transceive([byte)byte[] :: android.permission.NFC
android.nfc.tech.NfcF.setTimeout(int)void :: android.permission.NFC
android.nfc.tech.NfcF.getTimeout()int :: android.permission.NFC
android.nfc.tech.NfcV.get(android.nfc.Tag)NfcV :: android.permission.NFC
android.nfc.tech.NfcV.transceive([byte)byte[] :: android.permission.NFC
android.nfc.tech.TagTechnology.getTag()Tag :: android.permission.NFC
android.nfc.tech.TagTechnology.connect()void :: android.permission.NFC
android.nfc.tech.TagTechnology.reconnect()void :: android.permission.NFC
android.nfc.tech.TagTechnology.close()void :: android.permission.NFC
android.os.Build.deriveFingerprint()String :: android.permission.READ_CALL_LOG,android.permission.WRITE_EXTERNAL_STORAGE,android.permission.BIND_ACCESSIBILITY_SERVICE,android.permission.READ_CONTACTS,android.permission.WRITE_CALL_LOG,android.permission.BIND_DREAM_SERVICE,android.permission.FOREGROUND_SERVICE,android.permission.READ_EXTERNAL_STORAGE,android.permission.READ_PHONE_STATE,android.permission.WRITE_CONTACTS
android.os.DropBoxManager.Entry(java.lang.String,long)Entry(@NonNull :: android.permission.READ_LOGS
android.os.Environment.getExternalStorageDirectory()File :: android.permission.READ_EXTERNAL_STORAGE,android.permission.WRITE_EXTERNAL_STORAGE
android.os.Environment.isExternalStorageManager()boolean :: android.permission.MANAGE_EXTERNAL_STORAGE
android.os.Environment.isExternalStorageManager(java.io.File)boolean :: android.permission.MANAGE_EXTERNAL_STORAGE
android.os.Environment.maybeTranslateEmulatedPathToInternal(java.io.File)File :: android.permission.WRITE_MEDIA_STORAGE
android.os.FileUriExposedException.FileUriExposedException(java.lang.String)class :: android.permission.READ_EXTERNAL_STORAGE
android.os.PowerManager.sleepReasonToString(int)String :: android.permission.DEVICE_POWER
android.os.PowerManager.locationPowerSaveModeToString(int)String :: android.permission.REBOOT,android.permission.RECOVERY
android.os.PowerManager.newWakeLock(int,java.lang.String)WakeLock :: android.permission.WAKE_LOCK
android.os.PowerManager.userActivity(long,boolean)void :: android.permission.DEVICE_POWER
android.os.PowerManager.goToSleep(long)void :: android.permission.DEVICE_POWER,android.permission.USER_ACTIVITY
android.os.PowerManager.goToSleep(long,int,int)void :: android.permission.DEVICE_POWER
android.os.PowerManager.wakeUp(long)void :: android.permission.DEVICE_POWER
android.os.PowerManager.wakeUp(long,java.lang.String)void :: android.permission.DEVICE_POWER
android.os.PowerManager.wakeUp(long,int,java.lang.String)void :: android.permission.DEVICE_POWER
android.os.PowerManager.nap(long)void :: android.permission.DEVICE_POWER
android.os.PowerManager.boostScreenBrightness(long)void :: android.permission.WRITE_DREAM_STATE,android.permission.DEVICE_POWER,android.permission.READ_DREAM_STATE
android.os.PowerManager.getPowerSaveModeTrigger()int :: android.permission.POWER_SAVER
android.os.PowerManager.getBatteryDischargePrediction()Duration :: android.permission.BATTERY_PREDICTION,android.permission.DEVICE_POWER
android.os.PowerManager.getLastShutdownReason()int :: android.permission.DEVICE_POWER
android.os.RecoverySystem.rebootWipeUserData(android.content.Context)void :: android.permission.REBOOT
android.os.RecoverySystem.rebootWipeUserData(android.content.Context,boolean,java.lang.String,boolean,boolean)void :: android.permission.REBOOT
android.os.UserManager.isManagedProfile()boolean :: android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isUserForeground()boolean :: android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.createUser(java.lang.String,int)UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.getUserProfiles()List<UserHandle> :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.requestQuietModeEnabled(boolean,UserHandle,android.content.IntentSender,int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.getBadgedLabelForUser(CharSequence,UserHandle)CharSequence :: android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS
android.os.health.SystemHealthManager.takeUidSnapshot(int)HealthStats :: android.permission.BATTERY_STATS
android.os.health.SystemHealthManager.takeUidSnapshots([int)HealthStats[] :: android.permission.BATTERY_STATS
android.os.storage.StorageManager.getAllocatableBytes(java.util.UUID)long :: android.permission.ALLOCATE_AGGRESSIVE
android.os.storage.StorageManager.isAppIoBlocked(java.util.UUID,int,int,int)boolean :: android.permission.WRITE_MEDIA_STORAGE
android.os.storage.StorageVolume.StorageVolume(java.lang.String,java.io.File,java.io.File,java.lang.String,boolean,boolean,boolean,boolean,long,android.os.UserHandle,java.util.UUID,java.lang.String,java.lang.String)StorageVolume(String :: android.permission.READ_EXTERNAL_STORAGE,android.permission.WRITE_EXTERNAL_STORAGE
android.os.storage.StorageVolume.createAccessIntent(java.lang.String)Intent :: android.permission.READ_EXTERNAL_STORAGE,android.permission.WRITE_EXTERNAL_STORAGE
android.os.storage.VolumeInfo.getInternalPathForUser(int)File :: android.permission.WRITE_MEDIA_STORAGE
android.printservice.PrintService.onConnected()void :: android.permission.BIND_PRINT_SERVICE
android.provider.BlockedNumberContract.notifyEmergencyContact(android.content.Context)void :: android.permission.READ_BLOCKED_NUMBERS,android.permission.WRITE_BLOCKED_NUMBERS
android.provider.DocumentsProvider.attachInfo(android.content.Context,android.content.pm.ProviderInfo)void :: android.permission.MANAGE_DOCUMENTS
android.provider.SearchIndexablesProvider.attachInfo(android.content.Context,android.content.pm.ProviderInfo)void :: android.permission.READ_SEARCH_INDEXABLES
android.provider.Settings.setInSystemServer()void :: android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS,android.permission.PACKAGE_USAGE_STATS
android.provider.Settings.canDrawOverlays(android.content.Context)boolean :: android.permission.SYSTEM_ALERT_WINDOW
android.provider.Settings.canWrite(android.content.Context)boolean :: android.permission.WRITE_SETTINGS
android.provider.SimPhonebookContract.getEfUriPath(int)String :: android.permission.READ_CONTACTS,android.permission.WRITE_CONTACTS
android.provider.SimPhonebookContract.getContentUri(int,int)Uri :: android.permission.MODIFY_PHONE_STATE
android.provider.Telephony.Telephony()Telephony() :: android.permission.BROADCAST_SMS
android.provider.Telephony.getMessagesFromIntent(android.content.Intent)SmsMessage[] :: android.permission.RECEIVE_SMS,android.permission.RECEIVE_MMS,android.permission.RECEIVE_EMERGENCY_BROADCAST,android.permission.BROADCAST_SMS,android.permission.RECEIVE_WAP_PUSH,android.permission.BROADCAST_WAP_PUSH,android.permission.READ_PRIVILEGED_PHONE_STATE
android.provider.Telephony.CellBroadcasts()CellBroadcasts() :: android.permission.WRITE_APN_SETTINGS
android.provider.VoicemailContract.VoicemailContract()VoicemailContract() :: android.permission.ADD_VOICEMAIL
android.service.attention.AttentionService.checkAttention(IAttentionCallback)void :: android.permission.BIND_ATTENTION_SERVICE
android.service.autofill.AutofillService.onConnected()void :: android.permission.BIND_AUTOFILL_SERVICE
android.service.autofill.InlineSuggestionRenderService.measuredSize(android.view.View,int,int,android.util.Size,android.util.Size)Size :: android.permission.BIND_INLINE_SUGGESTION_RENDER_SERVICE
android.service.autofill.augmented.AugmentedAutofillService.onBind(android.content.Intent)IBinder :: android.permission.BIND_AUGMENTED_AUTOFILL_SERVICE
android.service.carrier.CarrierMessagingService.onFilterSms(MessagePdu,java.lang.String,int,int,ResultCallback<Boolean>)void :: android.permission.BIND_CARRIER_SERVICES
android.service.carrier.CarrierService.onLoadConfig(CarrierIdentifier)PersistableBundle :: android.permission.BIND_CARRIER_SERVICES
android.service.chooser.ChooserTargetService.onGetChooserTargets(android.content.ComponentName,android.content.IntentFilter)List<ChooserTarget> :: android.permission.BIND_CHOOSER_TARGET_SERVICE
android.service.contentcapture.ContentCaptureService.onBind(android.content.Intent)IBinder :: android.permission.BIND_CONTENT_CAPTURE_SERVICE
android.service.contentsuggestions.ContentSuggestionsService.onBind(android.content.Intent)IBinder :: android.permission.BIND_CONTENT_SUGGESTIONS_SERVICE
android.service.dreams.DreamService.setDebug(boolean)void :: android.permission.BIND_DREAM_SERVICE
android.service.euicc.EuiccService.encodeSmdxSubjectAndReasonCode(java.lang.String,java.lang.String)int :: android.permission.BIND_EUICC_SERVICE
android.service.notification.ConditionProviderService.requestRebind(android.content.ComponentName)void :: android.permission.ACCESS_NOTIFICATION_POLICY,android.permission.BIND_CONDITION_PROVIDER_SERVICE
android.service.notification.NotificationListenerService.onNotificationPosted(StatusBarNotification)void :: android.permission.BIND_NOTIFICATION_LISTENER_SERVICE
android.service.quickaccesswallet.QuickAccessWalletService.onWalletCardsRequested(GetWalletCardsRequest,GetWalletCardsCallback)void :: android.permission.BIND_QUICK_ACCESS_WALLET_SERVICE
android.service.resolver.ResolverRankerService.onPredictSharingProbabilities(List<ResolverTarget>)void :: android.permission.BIND_RESOLVER_RANKER_SERVICE
android.service.resumeonreboot.ResumeOnRebootService.onWrap([byte,long)byte[] :: android.permission.BIND_RESUME_ON_REBOOT_SERVICE
android.service.rotationresolver.RotationResolverService.resolveRotation(IRotationResolverCallback,RotationResolutionRequest)void :: android.permission.BIND_ROTATION_RESOLVER_SERVICE
android.service.storage.ExternalStorageService.onStartSession(java.lang.String,int,android.os.ParcelFileDescriptor,java.io.File,java.io.File)void :: android.permission.BIND_EXTERNAL_STORAGE_SERVICE
android.service.textclassifier.TextClassifierService.onConnected()void :: android.permission.BIND_TEXTCLASSIFIER_SERVICE
android.service.timezone.TimeZoneProviderService.reportSuggestion(TimeZoneProviderSuggestion)void :: android.permission.BIND_TIME_ZONE_PROVIDER_SERVICE
android.service.translation.TranslationService.onConnected()void :: android.permission.BIND_TRANSLATION_SERVICE
android.service.trust.TrustAgentService.onUnlockAttempt(boolean)void :: android.permission.BIND_TRUST_AGENT
android.service.voice.AlwaysOnHotwordDetector.getStart()int :: android.permission.SOUND_TRIGGER_RUN_IN_BATTERY_SAVER
android.service.voice.HotwordDetectionService.getMaxCustomInitializationStatus()int :: android.permission.BIND_HOTWORD_DETECTION_SERVICE
android.service.voice.VoiceInteractionService.onLaunchVoiceAssistFromKeyguard()void :: android.permission.BIND_VOICE_INTERACTION
android.service.vr.VrListenerService.onCurrentVrActivityChanged(android.content.ComponentName)void :: android.permission.BIND_VR_LISTENER_SERVICE
android.service.wallpaper.WallpaperService.Engine()Engine() :: android.permission.BIND_WALLPAPER
android.service.watchdog.ExplicitHealthCheckService.onRequestHealthCheck(java.lang.String)void :: android.permission.BIND_EXPLICIT_HEALTH_CHECK_SERVICE
android.speech.SpeechRecognizer.SpeechRecognizer(android.content.Context,android.content.ComponentName)SpeechRecognizer(final :: android.permission.RECORD_AUDIO
android.telecom.Call.getContactDisplayName()String :: android.permission.READ_CONTACTS
android.telecom.Connection.VideoProviderHandler()class :: android.permission.CAMERA
android.telecom.TelecomManager.getPhoneAccount(PhoneAccountHandle)PhoneAccount :: android.permission.READ_PHONE_NUMBERS
android.telecom.TelecomManager.hasManageOngoingCallsPermission()boolean :: android.permission.MANAGE_ONGOING_CALLS
android.telecom.TelecomManager.addNewIncomingCall(PhoneAccountHandle,android.os.Bundle)void :: android.permission.MANAGE_OWN_CALLS
android.telecom.TelecomManager.addNewIncomingConference(PhoneAccountHandle,android.os.Bundle)void :: android.permission.MANAGE_OWN_CALLS
android.telecom.TelecomManager.acceptHandover(android.net.Uri,int,PhoneAccountHandle)void :: android.permission.MANAGE_OWN_CALLS
android.telephony.CarrierConfigManager.getConfigForSubId(int)PersistableBundle :: android.permission.READ_PHONE_STATE
android.telephony.CarrierConfigManager.getConfig()PersistableBundle :: android.permission.READ_PHONE_STATE
android.telephony.CarrierConfigManager.getConfigByComponentForSubId(java.lang.String,int)PersistableBundle :: android.permission.READ_PHONE_STATE
android.telephony.CellBroadcastService.onGsmCellBroadcastSms(int,[byte)void :: android.permission.BIND_CELL_BROADCAST_SERVICE
android.telephony.CellLocation.requestLocationUpdate()void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.telephony.NetworkRegistrationInfo.getCellIdentity()CellIdentity :: android.permission.ACCESS_FINE_LOCATION
android.telephony.PhoneStateListener.PhoneStateListener()PhoneStateListener() :: android.permission.READ_PHONE_STATE,android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.ACCESS_FINE_LOCATION,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onServiceStateChanged(ServiceState)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.telephony.PhoneStateListener.onDataConnectionStateChanged(int)void :: android.permission.READ_PHONE_STATE,android.permission.READ_CALL_LOG
android.telephony.ServiceState.getOperatorAlphaLong()String :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.telephony.ServiceState.getOperatorAlphaShort()String :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.telephony.ServiceState.getOperatorAlpha()String :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.telephony.ServiceState.getOperatorNumeric()String :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.telephony.ServiceState.getIsManualSelection()boolean :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.telephony.SmsManager.sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.SEND_SMS
android.telephony.SmsManager.sendTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,int,boolean,int)void :: android.permission.SEND_SMS,android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.injectSmsPdu([byte,java.lang.String,android.app.PendingIntent)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.sendMultipartTextMessage(java.lang.String,java.lang.String,ArrayList<java.lang.String>,ArrayList<PendingIntent>,ArrayList<PendingIntent>)void :: android.permission.SEND_SMS
android.telephony.SmsManager.sendMultipartTextMessage(java.lang.String,java.lang.String,ArrayList<java.lang.String>,ArrayList<PendingIntent>,ArrayList<PendingIntent>,int,boolean,int)void :: android.permission.SEND_SMS
android.telephony.SmsManager.sendDataMessage(java.lang.String,java.lang.String,short,[byte,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.SEND_SMS
android.telephony.SmsManager.enableCellBroadcastRange(int,int,int)boolean :: android.permission.RECEIVE_EMERGENCY_BROADCAST
android.telephony.SmsManager.disableCellBroadcastRange(int,int,int)boolean :: android.permission.RECEIVE_EMERGENCY_BROADCAST
android.telephony.SubscriptionManager.getAllSubscriptionInfoList()List<SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getCompleteActiveSubscriptionInfoList()List<SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.requestEmbeddedSubscriptionInfoListRefresh()void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.SubscriptionManager.requestEmbeddedSubscriptionInfoListRefresh(int)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.SubscriptionManager.getActiveSubscriptionInfoCountMax()int :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getResourcesForSubId(android.content.Context,int)Resources :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.isSubscriptionVisible(SubscriptionInfo)boolean :: android.permission.READ_PHONE_STATE,android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyCallback.init(java.util.concurrent.Executor)void :: android.permission.READ_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyManager.isNetworkRoaming()boolean :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getNetworkTypeName()String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setCarrierInfoForImsiEncryption(ImsiEncryptionInfo)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setLine1NumberForDisplay(java.lang.String,java.lang.String)boolean :: android.permission.READ_PHONE_STATE,android.permission.READ_SMS,android.permission.READ_PHONE_NUMBERS
android.telephony.TelephonyManager.setVisualVoicemailSmsFilterSettings(VisualVoicemailSmsFilterSettings)void :: android.permission.READ_PHONE_STATE,android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.sendVisualVoicemailSms(java.lang.String,int,java.lang.String,android.app.PendingIntent)void :: android.permission.SEND_SMS
android.telephony.TelephonyManager.getSubscriberInfo()IPhoneSubInfo :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDataActivity()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.iccOpenLogicalChannel(java.lang.String)IccOpenLogicalChannelResponse :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccOpenLogicalChannel(java.lang.String,int)IccOpenLogicalChannelResponse :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccOpenLogicalChannel(int,java.lang.String,int)IccOpenLogicalChannelResponse :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccCloseLogicalChannel(int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccCloseLogicalChannel(int,int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduLogicalChannel(int,int,int,int,int,int,java.lang.String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduLogicalChannel(int,int,int,int,int,int,int,java.lang.String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduBasicChannel(int,int,int,int,int,java.lang.String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduBasicChannel(int,int,int,int,int,int,java.lang.String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccExchangeSimIO(int,int,int,int,int,java.lang.String)byte[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccExchangeSimIO(int,int,int,int,int,int,java.lang.String)byte[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.sendEnvelopeWithStatus(java.lang.String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.sendEnvelopeWithStatus(int,java.lang.String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.nvReadItem(int)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.nvWriteItem(int,java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.nvWriteCdmaPrl([byte)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getPcscfAddress(java.lang.String)String[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.updateServiceLocation()void :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoicemailRingtoneUri(android.telecom.PhoneAccountHandle)Uri :: android.permission.READ_PHONE_STATE,android.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManager.setVoicemailRingtoneUri(android.telecom.PhoneAccountHandle,android.net.Uri)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getClientRequestStats(int)List<ClientRequestStats> :: android.permission.READ_PHONE_STATE,android.permission.ACCESS_NETWORK_STATE
android.telephony.TelephonyManager.isDataCapable()boolean :: android.permission.READ_PHONE_STATE,android.permission.ACCESS_NETWORK_STATE
android.telephony.TelephonyManager.setCarrierTestOverride(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setCarrierTestOverride(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCarrierIdListVersion()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setPreferredOpportunisticDataSubscription(int,boolean,java.util.concurrent.Executor,Consumer<Integer>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isNetworkTypeValid(int)boolean :: android.permission.PERFORM_IMS_SINGLE_REGISTRATION,android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyScanManager.requestNetworkScan(int,NetworkScanRequest,java.util.concurrent.Executor,NetworkScanCallback,java.lang.String,java.lang.String)NetworkScan :: android.permission.MODIFY_PHONE_STATE,android.permission.ACCESS_FINE_LOCATION
android.telephony.VisualVoicemailService.finish()void :: android.permission.BIND_VISUAL_VOICEMAIL_SERVICE
android.telephony.VisualVoicemailService.setSmsFilterSettings(android.content.Context,android.telecom.PhoneAccountHandle,VisualVoicemailSmsFilterSettings)void :: android.permission.READ_PHONE_STATE
android.telephony.VisualVoicemailService.sendVisualVoicemailSms(android.content.Context,android.telecom.PhoneAccountHandle,java.lang.String,short,java.lang.String,android.app.PendingIntent)void :: android.permission.SEND_SMS
android.telephony.euicc.EuiccManager.EuiccManager(android.content.Context)EuiccManager(Context :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.retainSubscriptionsForFactoryReset(android.app.PendingIntent)void :: android.permission.MASTER_CLEAR
android.telephony.gba.GbaService.GbaService()GbaService() :: android.permission.BIND_GBA_SERVICE
android.telephony.ims.ImsMmTelManager.ImsMmTelManager(int,BinderCacheManager<ITelephony>)ImsMmTelManager(int :: android.permission.READ_PRECISE_PHONE_STATE
android.uwb.RangingManager.openSession(android.content.AttributionSource,android.os.PersistableBundle,java.util.concurrent.Executor,RangingSession.Callback)CancellationSignal :: android.permission.ULTRAWIDEBAND_RANGING
android.view.WindowManager.isSystemAlertWindowType(int)boolean :: android.permission.SYSTEM_ALERT_WINDOW
android.view.WindowManager.setTrustedOverlay()void :: android.permission.INTERNAL_SYSTEM_WINDOW
android.view.WindowManager.isSystemApplicationOverlay()boolean :: android.permission.SYSTEM_APPLICATION_OVERLAY
android.view.inputmethod.InputMethod.initializeInternal(android.os.IBinder,int,com.android.internal.inputmethod.IInputMethodPrivilegedOperations,int)void :: android.permission.BIND_INPUT_METHOD
android.view.inputmethod.InputMethodManager.ensureDefaultInstanceForDefaultDisplayIfNecessary()void :: android.permission.BIND_INPUT_METHOD
android.view.inputmethod.InputMethodManager.setInputMethod(android.os.IBinder,java.lang.String)void :: android.permission.WRITE_SECURE_SETTINGS
android.view.inputmethod.InputMethodManager.setInputMethodAndSubtype(android.os.IBinder,java.lang.String,InputMethodSubtype)void :: android.permission.WRITE_SECURE_SETTINGS
android.view.textservice.SpellCheckerSession.SpellCheckerSession(SpellCheckerInfo,TextServicesManager,SpellCheckerSessionListener,java.util.concurrent.Executor)SpellCheckerSession( :: android.permission.BIND_TEXT_SERVICE
android.webkit.WebSettings.setBlockNetworkLoads(boolean)void :: android.permission.INTERNET
android.webkit.WebSettings.setGeolocationEnabled(boolean)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
com.android.internal.telephony.SmsPermissions.checkCallingOrSelfCanGetSmscAddress(java.lang.String,java.lang.String)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.SmsPermissions.checkCallingOrSelfCanSetSmscAddress(java.lang.String,java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
com.android.internal.telephony.SubscriptionController.createSubscriptionGroup([int,java.lang.String)ParcelUuid :: android.permission.MODIFY_PHONE_STATE
com.android.internal.telephony.SubscriptionController.removeSubscriptionsFromGroup([int,android.os.ParcelUuid,java.lang.String)void :: android.permission.MODIFY_PHONE_STATE
com.android.internal.telephony.SubscriptionController.getSubscriptionsInGroup(android.os.ParcelUuid,java.lang.String,java.lang.String)List<SubscriptionInfo> :: android.permission.READ_PHONE_STATE
com.android.internal.telephony.TelephonyPermissions.enforceCallingOrSelfReadPhoneStatePermissionOrCarrierPrivilege(android.content.Context,int,java.lang.String)void :: android.permission.READ_PHONE_STATE
com.android.internal.telephony.TelephonyPermissions.enforceCallingOrSelfReadPrivilegedPhoneStatePermissionOrCarrierPrivilege(android.content.Context,int,java.lang.String)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.TelephonyPermissions.enforceCallingOrSelfReadPrecisePhoneStatePermissionOrCarrierPrivilege(android.content.Context,int,java.lang.String)void :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
com.android.internal.telephony.util.TelephonyUtils.checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)boolean :: android.permission.DUMP
com.android.internal.util.DumpUtils.checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)boolean :: android.permission.DUMP
com.android.internal.util.DumpUtils.checkUsageStatsPermission(android.content.Context,java.lang.String,java.io.PrintWriter)boolean :: android.permission.PACKAGE_USAGE_STATS
com.android.internal.util.DumpUtils.checkDumpAndUsageStatsPermission(android.content.Context,java.lang.String,java.io.PrintWriter)boolean :: android.permission.DUMP,android.permission.PACKAGE_USAGE_STATS
com.android.internal.view.InputBindResult.writeToParcel(android.os.Parcel,int)void :: android.permission.INTERACT_ACROSS_USERS_FULL
com.android.internal.widget.LockPatternUtils.requireCredentialEntry(int)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.internal.widget.LockPatternUtils.requireStrongAuth(int,int)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.media.tv.remoteprovider.TvRemoteProvider.TvRemoteProvider(android.content.Context)TvRemoteProvider(Context :: android.permission.BIND_TV_REMOTE_SERVICE
com.android.nfc_extras.NfcAdapterExtras.initService(android.nfc.NfcAdapter)void :: android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcAdapterExtras.get(android.nfc.NfcAdapter)NfcAdapterExtras :: android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcAdapterExtras.getCardEmulationRoute()CardEmulationRoute :: android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcAdapterExtras.setCardEmulationRoute(CardEmulationRoute)void :: android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcAdapterExtras.getEmbeddedExecutionEnvironment()NfcExecutionEnvironment :: android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcExecutionEnvironment.open()void :: android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcExecutionEnvironment.close()void :: android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcExecutionEnvironment.transceive([byte)byte[] :: android.permission.WRITE_SECURE_SETTINGS
com.android.server.TelephonyRegistry.isActiveDataSubIdReadPhoneStateEnforcedInPlatformCompat(java.lang.String,android.os.UserHandle)boolean :: android.permission.READ_PHONE_STATE
com.android.server.TelephonyRegistry.isCellInfoReadPhoneStateEnforcedInPlatformCompat(java.lang.String,android.os.UserHandle)boolean :: android.permission.READ_PHONE_STATE
com.android.server.TelephonyRegistry.isDisplayInfoReadPhoneStateEnforcedInPlatformCompat(java.lang.String,android.os.UserHandle)boolean :: android.permission.READ_PHONE_STATE
com.android.server.TelephonyRegistry.notifyDisplayInfoChanged(int,int,android.telephony.TelephonyDisplayInfo)void :: android.permission.READ_PHONE_STATE
com.android.server.am.UserController.stopGuestOrEphemeralUserIfBackground(int)void :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.MANAGE_USERS
com.android.server.am.UserController.maybeUnlockUser(int)boolean :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.MANAGE_USERS
com.android.server.app.GameManagerService.getGameMode(java.lang.String,int)int :: android.permission.MANAGE_GAME_MODE
com.android.server.backup.BackupPasswordManager.usePbkdf2Fallback()boolean :: android.permission.BACKUP
com.android.server.camera.CameraServiceProxy.setDeviceStateFlags(int)void :: android.permission.CAMERA_SEND_SYSTEM_EVENTS
com.android.server.camera.CameraServiceProxy.clearDeviceStateFlags(int)void :: android.permission.CAMERA_SEND_SYSTEM_EVENTS
com.android.server.job.controllers.QuotaController.clearAppStatsLocked(int,java.lang.String)void :: android.permission.INSTALL_PACKAGES
com.android.server.media.MediaServerUtils.checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)boolean :: android.permission.DUMP
com.android.server.pm.PackageManagerService.canViewInstantApps(int,int)boolean :: android.permission.ACCESS_INSTANT_APPS
com.android.server.pm.PackageManagerService.doSendBroadcast(android.app.IActivityManager,java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,[int,boolean,[SparseArray<int,android.os.Bundle)void :: android.permission.ACCESS_INSTANT_APPS
com.android.server.pm.UserManagerInternal.removeUserEvenWhenDisallowed(int)boolean :: android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.getUserRestrictionSource(java.lang.String,int)int :: android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.checkManageUserAndAcrossUsersFullPermission(java.lang.String)void :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.checkManageUsersPermission(java.lang.String)void :: android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.checkManageOrCreateUsersPermission(java.lang.String)void :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.checkManageOrCreateUsersPermission(int)void :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.hasManageUsersPermission()boolean :: android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.hasManageUsersOrPermission(java.lang.String)boolean :: android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.hasManageOrCreateUsersPermission()boolean :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
com.android.server.pm.dex.ArtManagerService.checkShellPermissions(int,java.lang.String,int)boolean :: android.permission.READ_RUNTIME_PROFILES
com.android.server.policy.PhoneWindowManager.adjustConfigurationLw(android.content.res.Configuration,int,int)void :: android.permission.INTERNAL_SYSTEM_WINDOW
com.android.server.usage.StorageStatsService.enforceCratesPermission(int,java.lang.String)void :: android.permission.MANAGE_CRATES
com.android.server.vibrator.VibratorManagerService.enforceUpdateAppOpsStatsPermission(int)void :: android.permission.UPDATE_APP_OPS_STATS
com.android.server.vr.Vr2dDisplay.setVirtualDisplayProperties(android.app.Vr2dDisplayProperties)void :: android.permission.ACCESS_VR_MANAGER
com.android.server.vr.VrManagerInternal.setVr2dDisplayProperties(android.app.Vr2dDisplayProperties)void :: android.permission.ACCESS_VR_MANAGER
com.android.server.wm.WindowState.getRequestedVisibility(int)boolean :: android.permission.INTERNAL_SYSTEM_WINDOW
com.android.server.wm.WindowToken.isFirstChildWindowGreaterThanSecond(WindowState,WindowState)boolean :: android.permission.MANAGE_APP_TOKENS
com.android.settingslib.bluetooth.BluetoothEventManager.registerCallback(BluetoothCallback)void :: android.permission.INTERACT_ACROSS_USERS_FULL
com.android.systemui.statusbar.tv.notifications.TvNotificationPanel.startNotificationHandlerActivity(android.content.Intent)void :: android.permission.STATUS_BAR_SERVICE
