android.accessibilityservice.AccessibilityService.getFingerprintGestureController()FingerprintGestureController :: {'android.permission.USE_FINGERPRINT'}
android.accounts.AccountManager.finishSessionAsUser(Bundle,Activity,UserHandle,AccountManagerCallback<Bundle>,Handler)AccountManagerFuture<Bundle> :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.ActivityManager.moveTaskToFront(int,int)void :: {'android.permission.REORDER_TASKS'}
android.app.ActivityManager.moveTaskToFront(int,int,Bundle)void :: {'android.permission.REORDER_TASKS'}
android.app.ActivityManager.clearApplicationUserData(String,IPackageDataObserver)boolean :: {'android.permission.CLEAR_APP_USER_DATA', 'android.permission.ACCESS_INSTANT_APPS'}
android.app.ActivityManager.getPackageImportance(String)int :: {'android.permission.PACKAGE_USAGE_STATS'}
android.app.ActivityManager.getUidImportance(int)int :: {'android.permission.PACKAGE_USAGE_STATS'}
android.app.ActivityManager.addOnUidImportanceListener(OnUidImportanceListener,int)void :: {'android.permission.PACKAGE_USAGE_STATS'}
android.app.ActivityManager.removeOnUidImportanceListener(OnUidImportanceListener)void :: {'android.permission.PACKAGE_USAGE_STATS'}
android.app.ActivityManager.killBackgroundProcesses(String)void :: {'android.permission.KILL_BACKGROUND_PROCESSES'}
android.app.ActivityManager.killUid(int,String)void :: {'android.permission.KILL_UID'}
android.app.ActivityManager.forceStopPackage(String)void :: {'android.permission.FORCE_STOP_PACKAGES'}
android.app.ActivityManager.getCurrentUser()int :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.ActivityManager.dumpPackageState(FileDescriptor,String)void :: {'android.permission.DUMP'}
android.app.ActivityManager.setPersistentVrThread(int)void :: {'android.permission.RESTRICTED_VR_ACCESS'}
android.app.AlarmManager.set(int,long,long,long,PendingIntent,WorkSource)void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.app.AlarmManager.set(int,long,long,long,OnAlarmListener,Handler,WorkSource)void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.app.AppOpsManager.setUidMode(String,int,int)void :: {'android.permission.UPDATE_APP_OPS_STATS'}
android.app.BroadcastOptions.setTemporaryAppWhitelistDuration(long)void :: {'android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST'}
android.app.KeyguardManager.disableKeyguard()void :: {'android.permission.DISABLE_KEYGUARD'}
android.app.KeyguardManager.reenableKeyguard()void :: {'android.permission.DISABLE_KEYGUARD'}
android.app.KeyguardManager.exitKeyguardSecurely(OnKeyguardExitResult)void :: {'android.permission.DISABLE_KEYGUARD'}
android.app.VrManager.registerVrStateCallback(VrStateCallback,Handler)void :: {'android.permission.RESTRICTED_VR_ACCESS', 'android.permission.ACCESS_VR_STATE'}
android.app.VrManager.unregisterVrStateCallback(VrStateCallback)void :: {'android.permission.RESTRICTED_VR_ACCESS', 'android.permission.ACCESS_VR_STATE'}
android.app.VrManager.getVrModeEnabled()boolean :: {'android.permission.RESTRICTED_VR_ACCESS', 'android.permission.ACCESS_VR_STATE'}
android.app.VrManager.getPersistentVrModeEnabled()boolean :: {'android.permission.RESTRICTED_VR_ACCESS', 'android.permission.ACCESS_VR_STATE'}
android.app.VrManager.setPersistentVrModeEnabled(boolean)void :: {'android.permission.RESTRICTED_VR_ACCESS'}
android.app.VrManager.setVr2dDisplayProperties(Vr2dDisplayProperties)void :: {'android.permission.RESTRICTED_VR_ACCESS'}
android.app.VrManager.setAndBindVrCompositor(ComponentName)void :: {'android.permission.RESTRICTED_VR_ACCESS'}
android.app.WallpaperManager.getFastDrawable()Drawable :: {'android.permission.READ_EXTERNAL_STORAGE'}
android.app.WallpaperManager.peekFastDrawable()Drawable :: {'android.permission.READ_EXTERNAL_STORAGE'}
android.app.WallpaperManager.getWallpaperFile(int)ParcelFileDescriptor :: {'android.permission.READ_EXTERNAL_STORAGE'}
android.app.WallpaperManager.setResource(int)void :: {'android.permission.SET_WALLPAPER'}
android.app.WallpaperManager.setResource(int,int)int :: {'android.permission.SET_WALLPAPER'}
android.app.WallpaperManager.setBitmap(Bitmap)void :: {'android.permission.SET_WALLPAPER'}
android.app.WallpaperManager.setBitmap(Bitmap,Rect,boolean)int :: {'android.permission.SET_WALLPAPER'}
android.app.WallpaperManager.setBitmap(Bitmap,Rect,boolean,int)int :: {'android.permission.SET_WALLPAPER'}
android.app.WallpaperManager.setStream(InputStream)void :: {'android.permission.SET_WALLPAPER'}
android.app.WallpaperManager.setStream(InputStream,Rect,boolean)int :: {'android.permission.SET_WALLPAPER'}
android.app.WallpaperManager.setStream(InputStream,Rect,boolean,int)int :: {'android.permission.SET_WALLPAPER'}
android.app.WallpaperManager.setDisplayPadding(Rect)void :: {'android.permission.SET_WALLPAPER_HINTS'}
android.app.WallpaperManager.clearWallpaper()void :: {'android.permission.SET_WALLPAPER'}
android.app.WallpaperManager.clearWallpaper(int,int)void :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.WallpaperManager.setWallpaperComponent(ComponentName)boolean :: {'android.permission.SET_WALLPAPER_COMPONENT'}
android.app.WallpaperManager.setWallpaperComponent(ComponentName,int)boolean :: {'android.permission.SET_WALLPAPER_COMPONENT'}
android.app.WallpaperManager.clear()void :: {'android.permission.SET_WALLPAPER'}
android.app.WallpaperManager.clear(int)void :: {'android.permission.SET_WALLPAPER'}
android.app.admin.DevicePolicyManager.packageHasActiveAdmins(String)boolean :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.admin.DevicePolicyManager.getDeviceOwnerComponentOnAnyUser()ComponentName :: {'android.permission.MANAGE_USERS'}
android.app.admin.DevicePolicyManager.getDeviceOwner()String :: {'android.permission.MANAGE_USERS'}
android.app.admin.DevicePolicyManager.getDeviceOwnerNameOnAnyUser()String :: {'android.permission.MANAGE_USERS'}
android.app.admin.DevicePolicyManager.setActiveProfileOwner(ComponentName,String)boolean :: {'android.permission.MANAGE_DEVICE_ADMINS'}
android.app.admin.DevicePolicyManager.getProfileOwnerNameAsUser(int)String :: {'android.permission.MANAGE_USERS'}
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long)void :: {'android.permission.NOTIFY_PENDING_SYSTEM_UPDATE'}
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long,boolean)void :: {'android.permission.NOTIFY_PENDING_SYSTEM_UPDATE'}
android.app.admin.DevicePolicyManager.setDeviceProvisioningConfigApplied()void :: {'android.permission.MANAGE_USERS'}
android.app.admin.DevicePolicyManager.isDeviceProvisioningConfigApplied()boolean :: {'android.permission.MANAGE_USERS'}
android.app.backup.BackupManager.beginRestoreSession()RestoreSession :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.setBackupEnabled(boolean)void :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.isBackupEnabled()boolean :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.setAutoRestore(boolean)void :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.getCurrentTransport()String :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.listAllTransports()String[] :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.selectBackupTransport(String)String :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.selectBackupTransport(ComponentName,SelectBackupTransportCallback)void :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.backupNow()void :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.getAvailableRestoreToken(String)long :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.isAppEligibleForBackup(String)boolean :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.requestBackup(String[],BackupObserver)int :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.requestBackup(String[],BackupObserver,BackupManagerMonitor,int)int :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.cancelBackups()void :: {'android.permission.BACKUP'}
android.app.job.JobInfo.setPersisted(boolean)Builder :: {'android.permission.RECEIVE_BOOT_COMPLETED'}
android.app.job.JobScheduler.scheduleAsPackage(JobInfo,String,int,String)int :: {'android.permission.UPDATE_DEVICE_STATS'}
android.app.trust.TrustManager.setDeviceLockedForUser(int,boolean)void :: {'android.permission.ACCESS_KEYGUARD_SECURE_STORAGE'}
android.app.trust.TrustManager.isTrustUsuallyManaged(int)boolean :: {'android.permission.TRUST_LISTENER'}
android.app.trust.TrustManager.unlockedByFingerprintForUser(int)void :: {'android.permission.ACCESS_KEYGUARD_SECURE_STORAGE'}
android.app.trust.TrustManager.clearAllFingerprints()void :: {'android.permission.ACCESS_KEYGUARD_SECURE_STORAGE'}
android.app.usage.UsageStatsManager.whitelistAppTemporarily(String,long,UserHandle)void :: {'android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST'}
android.bluetooth.BluetoothA2dp.getPriority(BluetoothDevice)int :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothAdapter.isEnabled()boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothAdapter.getState()int :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothAdapter.getLeState()int :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothAdapter.enable()boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothAdapter.disable()boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothAdapter.getAddress()String :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothAdapter.setName(String)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothAdapter.getScanMode()int :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothAdapter.startDiscovery()boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothAdapter.cancelDiscovery()boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothAdapter.isDiscovering()boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothAdapter.getBondedDevices()Set<BluetoothDevice> :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothAdapter.getProfileConnectionState(int)int :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(String,UUID)BluetoothServerSocket :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(String,UUID)BluetoothServerSocket :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothAdapter.startLeScan(LeScanCallback)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothAdapter.startLeScan(UUID[],LeScanCallback)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothAdapter.stopLeScan(LeScanCallback)void :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothDevice.getName()String :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothDevice.getType()int :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothDevice.getBatteryLevel()int :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothDevice.createBond()boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothDevice.getBondState()int :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothDevice.getBluetoothClass()BluetoothClass :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothDevice.getUuids()ParcelUuid[] :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothDevice.fetchUuidsWithSdp()boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothDevice.setPairingConfirmation(boolean)boolean :: {'android.permission.BLUETOOTH_PRIVILEGED'}
android.bluetooth.BluetoothDevice.createRfcommSocketToServiceRecord(UUID)BluetoothSocket :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothDevice.createInsecureRfcommSocketToServiceRecord(UUID)BluetoothSocket :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothManager.getConnectionState(BluetoothDevice,int)int :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothManager.getConnectedDevices(int)List<BluetoothDevice> :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothManager.getDevicesMatchingConnectionStates(int,int[])List<BluetoothDevice> :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothProfile.getConnectedDevices()List<BluetoothDevice> :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothProfile.getDevicesMatchingConnectionStates(int[])List<BluetoothDevice> :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothProfile.getConnectionState(BluetoothDevice)int :: {'android.permission.BLUETOOTH'}
android.bluetooth.le.BluetoothLeScanner.startScan(ScanCallback)void :: {'android.permission.BLUETOOTH_ADMIN', 'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.bluetooth.le.BluetoothLeScanner.startScan(List<ScanFilter>,ScanSettings,ScanCallback)void :: {'android.permission.BLUETOOTH_ADMIN', 'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.bluetooth.le.BluetoothLeScanner.startScan(List<ScanFilter>,ScanSettings,PendingIntent)int :: {'android.permission.BLUETOOTH_ADMIN', 'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(WorkSource,ScanCallback)void :: {'android.permission.UPDATE_DEVICE_STATS', 'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(List<ScanFilter>,ScanSettings,WorkSource,ScanCallback)void :: {'android.permission.UPDATE_DEVICE_STATS', 'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.le.BluetoothLeScanner.stopScan(ScanCallback)void :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.le.BluetoothLeScanner.stopScan(PendingIntent)void :: {'android.permission.BLUETOOTH_ADMIN'}
android.content.Context.startActivityAsUser(Intent,UserHandle)void :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.Context.startActivityAsUser(Intent,Bundle,UserHandle)void :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.Context.startActivitiesAsUser(Intent[],Bundle,UserHandle)void :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.Context.sendBroadcastAsUser(Intent,UserHandle)void :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.Context.sendBroadcastAsUser(Intent,UserHandle,String)void :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.Context.sendBroadcastAsUser(Intent,UserHandle,String,Bundle)void :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.Context.sendBroadcastAsUser(Intent,UserHandle,String,int)void :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.Context.sendOrderedBroadcastAsUser(Intent,UserHandle,String,BroadcastReceiver,Handler,int,String,Bundle)void :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.Context.sendOrderedBroadcastAsUser(Intent,UserHandle,String,int,BroadcastReceiver,Handler,int,String,Bundle)void :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.Context.sendOrderedBroadcastAsUser(Intent,UserHandle,String,int,Bundle,BroadcastReceiver,Handler,int,String,Bundle)void :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.Context.sendStickyBroadcast(Intent)void :: {'android.permission.BROADCAST_STICKY'}
android.content.Context.sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)void :: {'android.permission.BROADCAST_STICKY'}
android.content.Context.removeStickyBroadcast(Intent)void :: {'android.permission.BROADCAST_STICKY'}
android.content.Context.sendStickyBroadcastAsUser(Intent,UserHandle)void :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.BROADCAST_STICKY'}
android.content.Context.sendStickyBroadcastAsUser(Intent,UserHandle,Bundle)void :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.BROADCAST_STICKY'}
android.content.Context.sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)void :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.BROADCAST_STICKY'}
android.content.Context.removeStickyBroadcastAsUser(Intent,UserHandle)void :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.BROADCAST_STICKY'}
android.content.Context.registerReceiverAsUser(BroadcastReceiver,UserHandle,IntentFilter,String,Handler)Intent :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.Context.startForegroundServiceAsUser(Intent,UserHandle)ComponentName :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.Context.startServiceAsUser(Intent,UserHandle)ComponentName :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.Context.stopServiceAsUser(Intent,UserHandle)boolean :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.Context.bindServiceAsUser(Intent,ServiceConnection,int,UserHandle)boolean :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.Context.bindServiceAsUser(Intent,ServiceConnection,int,Handler,UserHandle)boolean :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.pm.PackageInstaller.uninstall(VersionedPackage,int,IntentSender)void :: {'android.permission.REQUEST_DELETE_PACKAGES', 'android.permission.DELETE_PACKAGES'}
android.content.pm.PackageInstaller.setPermissionsResult(int,boolean)void :: {'android.permission.INSTALL_PACKAGES'}
android.content.pm.PackageInstaller.commitTransferred(IntentSender)void :: {'android.permission.INSTALL_PACKAGES'}
android.content.pm.PackageInstaller.setGrantedRuntimePermissions(String[])void :: {'android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS'}
android.content.pm.PackageInstaller.setAllocateAggressive(boolean)void :: {'android.permission.ALLOCATE_AGGRESSIVE'}
android.content.pm.PackageManager.getPackageInfoAsUser(String,int,int)PackageInfo :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.pm.PackageManager.getInstalledPackagesAsUser(int,int)List<PackageInfo> :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.pm.PackageManager.grantRuntimePermission(String,String,UserHandle)void :: {'android.permission.GRANT_RUNTIME_PERMISSIONS'}
android.content.pm.PackageManager.revokeRuntimePermission(String,String,UserHandle)void :: {'android.permission.REVOKE_RUNTIME_PERMISSIONS'}
android.content.pm.PackageManager.getPermissionFlags(String,String,UserHandle)int :: {'android.permission.REVOKE_RUNTIME_PERMISSIONS', 'android.permission.GRANT_RUNTIME_PERMISSIONS'}
android.content.pm.PackageManager.updatePermissionFlags(String,String,int,int,UserHandle)void :: {'android.permission.REVOKE_RUNTIME_PERMISSIONS', 'android.permission.GRANT_RUNTIME_PERMISSIONS'}
android.content.pm.PackageManager.getInstantApps()List<InstantAppInfo> :: {'android.permission.ACCESS_INSTANT_APPS'}
android.content.pm.PackageManager.getInstantAppIcon(String)Drawable :: {'android.permission.ACCESS_INSTANT_APPS'}
android.content.pm.PackageManager.queryBroadcastReceiversAsUser(Intent,int,UserHandle)List<ResolveInfo> :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.pm.PackageManager.installExistingPackageAsUser(String,int)int :: {'android.permission.INTERACT_ACROSS_USERS_FULL', 'android.permission.INSTALL_PACKAGES'}
android.content.pm.PackageManager.verifyIntentFilter(int,int,List<String>)void :: {'android.permission.INTENT_FILTER_VERIFICATION_AGENT'}
android.content.pm.PackageManager.getIntentVerificationStatusAsUser(String,int)int :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.pm.PackageManager.updateIntentVerificationStatusAsUser(String,int,int)boolean :: {'android.permission.SET_PREFERRED_APPLICATIONS'}
android.content.pm.PackageManager.getDefaultBrowserPackageNameAsUser(int)String :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.pm.PackageManager.setDefaultBrowserPackageNameAsUser(String,int)boolean :: {'android.permission.SET_PREFERRED_APPLICATIONS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.pm.PackageManager.setUpdateAvailable(String,boolean)void :: {'android.permission.INSTALL_PACKAGES'}
android.content.pm.PackageManager.deletePackage(String,IPackageDeleteObserver,int)void :: {'android.permission.DELETE_PACKAGES'}
android.content.pm.PackageManager.deletePackageAsUser(String,IPackageDeleteObserver,int,int)void :: {'android.permission.INTERACT_ACROSS_USERS_FULL', 'android.permission.DELETE_PACKAGES'}
android.content.pm.PackageManager.addOnPermissionsChangeListener(OnPermissionsChangedListener)void :: {'android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS'}
android.content.pm.PackageManager.removeOnPermissionsChangeListener(OnPermissionsChangedListener)void :: {'android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS'}
android.hardware.camera2.CameraManager.openCamera(String,CameraDevice.StateCallback,Handler)void :: {'android.permission.CAMERA'}
android.hardware.fingerprint.FingerprintManager.authenticate(CryptoObject,CancellationSignal,int,AuthenticationCallback,Handler)void :: {'android.permission.USE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.authenticate(CryptoObject,CancellationSignal,int,AuthenticationCallback,Handler,int)void :: {'android.permission.USE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.enroll(byte,CancellationSignal,int,int,EnrollmentCallback)void :: {'android.permission.MANAGE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.preEnroll()long :: {'android.permission.MANAGE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.postEnroll()int :: {'android.permission.MANAGE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.setActiveUser(int)void :: {'android.permission.MANAGE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.remove(Fingerprint,int,RemovalCallback)void :: {'android.permission.MANAGE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.enumerate(int,EnumerateCallback)void :: {'android.permission.MANAGE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.rename(int,int,String)void :: {'android.permission.MANAGE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints(int)List<Fingerprint> :: {'android.permission.USE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints()List<Fingerprint> :: {'android.permission.USE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints()boolean :: {'android.permission.USE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints(int)boolean :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.USE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.isHardwareDetected()boolean :: {'android.permission.USE_FINGERPRINT'}
android.hardware.hdmi.HdmiControlManager.setStandbyMode(boolean)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.addHotplugEventListener(HotplugEventListener)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.removeHotplugEventListener(HotplugEventListener)void :: {'android.permission.HDMI_CEC'}
android.hardware.location.ContextHubManager.getContextHubHandles()int[] :: {'android.permission.LOCATION_HARDWARE'}
android.hardware.location.ContextHubManager.getContextHubInfo(int)ContextHubInfo :: {'android.permission.LOCATION_HARDWARE'}
android.hardware.location.ContextHubManager.loadNanoApp(int,NanoApp)int :: {'android.permission.LOCATION_HARDWARE'}
android.hardware.location.ContextHubManager.unloadNanoApp(int)int :: {'android.permission.LOCATION_HARDWARE'}
android.hardware.location.ContextHubManager.getNanoAppInstanceInfo(int)NanoAppInstanceInfo :: {'android.permission.LOCATION_HARDWARE'}
android.hardware.location.ContextHubManager.findNanoAppOnHub(int,NanoAppFilter)int[] :: {'android.permission.LOCATION_HARDWARE'}
android.hardware.location.ContextHubManager.sendMessage(int,int,ContextHubMessage)int :: {'android.permission.LOCATION_HARDWARE'}
android.hardware.radio.RadioManager.listModules(List<ModuleProperties>)int :: {'android.permission.ACCESS_BROADCAST_RADIO'}
android.hardware.radio.RadioManager.openTuner(int,BandConfig,boolean,RadioTuner.Callback,Handler)RadioTuner :: {'android.permission.ACCESS_BROADCAST_RADIO'}
android.location.LocationManager.requestLocationUpdates(String,long,float,LocationListener)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestLocationUpdates(String,long,float,LocationListener,Looper)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestLocationUpdates(long,float,Criteria,LocationListener,Looper)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestLocationUpdates(String,long,float,PendingIntent)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestLocationUpdates(long,float,Criteria,PendingIntent)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestSingleUpdate(String,LocationListener,Looper)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestSingleUpdate(Criteria,LocationListener,Looper)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestSingleUpdate(String,PendingIntent)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestSingleUpdate(Criteria,PendingIntent)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestLocationUpdates(LocationRequest,LocationListener,Looper)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestLocationUpdates(LocationRequest,PendingIntent)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.addProximityAlert(double,double,float,long,PendingIntent)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.addGeofence(LocationRequest,Geofence,PendingIntent)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.getLastKnownLocation(String)Location :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.addGpsStatusListener(GpsStatus.Listener)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.registerGnssStatusCallback(GnssStatus.Callback)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.registerGnssStatusCallback(GnssStatus.Callback,Handler)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.addNmeaListener(GpsStatus.NmeaListener)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.addNmeaListener(OnNmeaMessageListener)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.addNmeaListener(OnNmeaMessageListener,Handler)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback,Handler)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.registerGnssNavigationMessageCallback(GnssNavigationMessage.Callback,Handler)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.getGpsStatus(GpsStatus)GpsStatus :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.getGnssBatchSize()int :: {'android.permission.LOCATION_HARDWARE'}
android.location.LocationManager.registerGnssBatchedLocationCallback(long,boolean,BatchedLocationCallback,Handler)boolean :: {'android.permission.LOCATION_HARDWARE'}
android.location.LocationManager.flushGnssBatch()void :: {'android.permission.LOCATION_HARDWARE'}
android.location.LocationManager.unregisterGnssBatchedLocationCallback(BatchedLocationCallback)boolean :: {'android.permission.LOCATION_HARDWARE'}
android.media.AudioManager.requestAudioFocus(OnAudioFocusChangeListener,AudioAttributes,int,int)int :: {'android.permission.MODIFY_PHONE_STATE'}
android.media.AudioManager.requestAudioFocus(OnAudioFocusChangeListener,AudioAttributes,int,int,AudioPolicy)int :: {'android.permission.MODIFY_AUDIO_ROUTING', 'android.permission.MODIFY_PHONE_STATE'}
android.media.AudioManager.requestAudioFocus(AudioFocusRequest,AudioPolicy)int :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.dispatchAudioFocusChange(AudioFocusInfo,int,AudioPolicy)int :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.registerAudioPolicy(AudioPolicy)int :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.unregisterAudioPolicyAsync(AudioPolicy)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.RingtoneManager.enableSyncFromParent(Context)void :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.media.session.MediaSessionManager.setOnVolumeKeyLongPressListener(OnVolumeKeyLongPressListener,Handler)void :: {'android.permission.SET_VOLUME_KEY_LONG_PRESS_LISTENER'}
android.media.session.MediaSessionManager.setOnMediaKeyListener(OnMediaKeyListener,Handler)void :: {'android.permission.SET_MEDIA_KEY_LISTENER'}
android.media.soundtrigger.SoundTriggerDetector.startRecognition(int)boolean :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerDetector.stopRecognition()boolean :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerManager.updateModel(Model)void :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerManager.getModel(UUID)Model :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerManager.deleteModel(UUID)void :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerManager.createSoundTriggerDetector(UUID,SoundTriggerDetector.Callback,Handler)SoundTriggerDetector :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerManager.loadSoundModel(SoundModel)int :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerManager.startRecognition(UUID,PendingIntent,RecognitionConfig)int :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerManager.stopRecognition(UUID)int :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerManager.unloadSoundModel(UUID)int :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerManager.isRecognitionActive(UUID)boolean :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.tv.TvInputManager.setParentalControlsEnabled(boolean)void :: {'android.permission.MODIFY_PARENTAL_CONTROLS'}
android.media.tv.TvInputManager.addBlockedRating(TvContentRating)void :: {'android.permission.MODIFY_PARENTAL_CONTROLS'}
android.media.tv.TvInputManager.removeBlockedRating(TvContentRating)void :: {'android.permission.MODIFY_PARENTAL_CONTROLS'}
android.media.tv.TvInputManager.notifyPreviewProgramBrowsableDisabled(String,long)void :: {'android.permission.NOTIFY_TV_INPUTS'}
android.media.tv.TvInputManager.notifyWatchNextProgramBrowsableDisabled(String,long)void :: {'android.permission.NOTIFY_TV_INPUTS'}
android.media.tv.TvInputManager.notifyPreviewProgramAddedToWatchNext(String,long,long)void :: {'android.permission.NOTIFY_TV_INPUTS'}
android.media.tv.TvInputManager.getAvailableTvStreamConfigList(String)List<TvStreamConfig> :: {'android.permission.CAPTURE_TV_INPUT'}
android.media.tv.TvInputManager.captureFrame(String,Surface,TvStreamConfig)boolean :: {'android.permission.CAPTURE_TV_INPUT'}
android.media.tv.TvInputManager.getHardwareList()List<TvInputHardwareInfo> :: {'android.permission.TV_INPUT_HARDWARE'}
android.media.tv.TvInputManager.acquireTvInputHardware(int,HardwareCallback,TvInputInfo)Hardware :: {'android.permission.TV_INPUT_HARDWARE'}
android.media.tv.TvInputManager.acquireTvInputHardware(int,TvInputInfo,HardwareCallback)Hardware :: {'android.permission.TV_INPUT_HARDWARE'}
android.media.tv.TvInputManager.releaseTvInputHardware(int,Hardware)void :: {'android.permission.TV_INPUT_HARDWARE'}
android.media.tv.TvView.setMain()void :: {'android.permission.CHANGE_HDMI_CEC_ACTIVE_SOURCE'}
android.media.tv.TvView.unblockContent(TvContentRating)void :: {'android.permission.MODIFY_PARENTAL_CONTROLS'}
android.net.ConnectivityManager.getNetworkPreference()int :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.getActiveNetworkInfo()NetworkInfo :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.getActiveNetwork()Network :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.getActiveNetworkForUid(int)Network :: {'android.permission.CONNECTIVITY_INTERNAL'}
android.net.ConnectivityManager.getActiveNetworkInfoForUid(int)NetworkInfo :: {'android.permission.CONNECTIVITY_INTERNAL'}
android.net.ConnectivityManager.getNetworkInfo(int)NetworkInfo :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.getNetworkInfo(Network)NetworkInfo :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.getAllNetworkInfo()NetworkInfo[] :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.getNetworkForType(int)Network :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.getAllNetworks()Network[] :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.getActiveLinkProperties()LinkProperties :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.getLinkProperties(int)LinkProperties :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.getLinkProperties(Network)LinkProperties :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.getNetworkCapabilities(Network)NetworkCapabilities :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.getCaptivePortalServerUrl()String :: {'android.permission.LOCAL_MAC_ADDRESS'}
android.net.ConnectivityManager.getTetherableIfaces()String[] :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.getTetheredIfaces()String[] :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.getTetheringErroredIfaces()String[] :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.isTetheringSupported()boolean :: {'android.permission.TETHER_PRIVILEGED', 'android.permission.WRITE_SETTINGS'}
android.net.ConnectivityManager.startTethering(int,boolean,OnStartTetheringCallback)void :: {'android.permission.TETHER_PRIVILEGED'}
android.net.ConnectivityManager.startTethering(int,boolean,OnStartTetheringCallback,Handler)void :: {'android.permission.TETHER_PRIVILEGED'}
android.net.ConnectivityManager.stopTethering(int)void :: {'android.permission.TETHER_PRIVILEGED'}
android.net.ConnectivityManager.getTetherableUsbRegexs()String[] :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.getTetherableWifiRegexs()String[] :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.getTetherableBluetoothRegexs()String[] :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.getLastTetherError(String)int :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.setGlobalProxy(ProxyInfo)void :: {'android.permission.CONNECTIVITY_INTERNAL'}
android.net.ConnectivityManager.isNetworkSupported(int)boolean :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.isActiveNetworkMetered()boolean :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.setAirplaneMode(boolean)void :: {'android.permission.CONNECTIVITY_INTERNAL'}
android.net.ConnectivityManager.registerNetworkCallback(NetworkRequest,NetworkCallback)void :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.registerNetworkCallback(NetworkRequest,NetworkCallback,Handler)void :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.registerNetworkCallback(NetworkRequest,PendingIntent)void :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.registerDefaultNetworkCallback(NetworkCallback)void :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.registerDefaultNetworkCallback(NetworkCallback,Handler)void :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.ConnectivityManager.setAcceptUnvalidated(Network,boolean,boolean)void :: {'android.permission.CONNECTIVITY_INTERNAL'}
android.net.ConnectivityManager.setAvoidUnvalidated(Network)void :: {'android.permission.CONNECTIVITY_INTERNAL'}
android.net.ConnectivityManager.startCaptivePortalApp(Network)void :: {'android.permission.CONNECTIVITY_INTERNAL'}
android.net.ConnectivityManager.getMultipathPreference(Network)int :: {'android.permission.ACCESS_NETWORK_STATE'}
android.net.NetworkScoreManager.getActiveScorerPackage()String :: {'android.permission.REQUEST_NETWORK_SCORES', 'android.permission.SCORE_NETWORKS'}
android.net.NetworkScoreManager.getActiveScorer()NetworkScorerAppData :: {'android.permission.REQUEST_NETWORK_SCORES'}
android.net.NetworkScoreManager.updateScores(ScoredNetwork[])boolean :: {'android.permission.SCORE_NETWORKS'}
android.net.NetworkScoreManager.clearScores()boolean :: {'android.permission.REQUEST_NETWORK_SCORES'}
android.net.NetworkScoreManager.setActiveScorer(String)boolean :: {'android.permission.SCORE_NETWORKS'}
android.net.NetworkScoreManager.disableScoring()void :: {'android.permission.REQUEST_NETWORK_SCORES'}
android.net.TrafficStats.setThreadStatsUid(int)void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.net.TrafficStats.clearThreadStatsUid()void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.net.VpnService.prepareAndAuthorize(Context)void :: {'android.permission.CONTROL_VPN'}
android.net.wifi.RttManager.getRttCapabilities()RttCapabilities :: {'android.permission.LOCATION_HARDWARE'}
android.net.wifi.RttManager.startRanging(RttParams[],RttListener)void :: {'android.permission.LOCATION_HARDWARE'}
android.net.wifi.RttManager.stopRanging(RttListener)void :: {'android.permission.LOCATION_HARDWARE'}
android.net.wifi.RttManager.enableResponder(ResponderCallback)void :: {'android.permission.LOCATION_HARDWARE'}
android.net.wifi.RttManager.disableResponder(ResponderCallback)void :: {'android.permission.LOCATION_HARDWARE'}
android.net.wifi.WifiManager.getPrivilegedConfiguredNetworks()List<WifiConfiguration> :: {'android.permission.READ_WIFI_CREDENTIAL'}
android.net.wifi.WifiManager.getConnectionStatistics()WifiConnectionStatistics :: {'android.permission.READ_WIFI_CREDENTIAL'}
android.net.wifi.WifiManager.startScan(WorkSource)boolean :: {'android.permission.UPDATE_DEVICE_STATS'}
android.net.wifi.WifiManager.setWifiApEnabled(WifiConfiguration,boolean)boolean :: {'android.permission.TETHER_PRIVILEGED'}
android.net.wifi.WifiManager.getWifiApState()int :: {'android.permission.ACCESS_WIFI_STATE'}
android.net.wifi.WifiManager.isWifiApEnabled()boolean :: {'android.permission.ACCESS_WIFI_STATE'}
android.net.wifi.WifiManager.getWifiApConfiguration()WifiConfiguration :: {'android.permission.ACCESS_WIFI_STATE'}
android.net.wifi.WifiManager.setWifiApConfiguration(WifiConfiguration)boolean :: {'android.permission.CHANGE_WIFI_STATE'}
android.net.wifi.WifiScanner.startBackgroundScan(ScanSettings,ScanListener)void :: {'android.permission.LOCATION_HARDWARE'}
android.net.wifi.WifiScanner.startBackgroundScan(ScanSettings,ScanListener,WorkSource)void :: {'android.permission.LOCATION_HARDWARE'}
android.net.wifi.WifiScanner.stopBackgroundScan(ScanListener)void :: {'android.permission.LOCATION_HARDWARE'}
android.net.wifi.WifiScanner.getScanResults()boolean :: {'android.permission.LOCATION_HARDWARE'}
android.net.wifi.WifiScanner.startScan(ScanSettings,ScanListener)void :: {'android.permission.LOCATION_HARDWARE'}
android.net.wifi.WifiScanner.startScan(ScanSettings,ScanListener,WorkSource)void :: {'android.permission.LOCATION_HARDWARE'}
android.net.wifi.WifiScanner.stopScan(ScanListener)void :: {'android.permission.LOCATION_HARDWARE'}
android.nfc.NfcAdapter.enable()boolean :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.nfc.NfcAdapter.disable()boolean :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.nfc.NfcAdapter.disable(boolean)boolean :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.nfc.NfcAdapter.enableNdefPush()boolean :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.nfc.NfcAdapter.disableNdefPush()boolean :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.nfc.NfcAdapter.addNfcUnlockHandler(NfcUnlockHandler,String[])boolean :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.nfc.NfcAdapter.removeNfcUnlockHandler(NfcUnlockHandler)boolean :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.os.Build.getSerial()String :: {'android.permission.READ_PHONE_STATE'}
android.os.IncidentManager.reportIncident(IncidentReportArgs)void :: {'android.permission.DUMP', 'android.permission.PACKAGE_USAGE_STATS'}
android.os.IncidentManager.reportIncident(String,byte[])void :: {'android.permission.DUMP', 'android.permission.PACKAGE_USAGE_STATS'}
android.os.PowerManager.userActivity(long,int,int)void :: {'android.permission.USER_ACTIVITY', 'android.permission.DEVICE_POWER'}
android.os.RecoverySystem.processPackage(Context,File,ProgressListener,Handler)void :: {'android.permission.RECOVERY'}
android.os.RecoverySystem.processPackage(Context,File,ProgressListener)void :: {'android.permission.RECOVERY'}
android.os.RecoverySystem.installPackage(Context,File)void :: {'android.permission.REBOOT', 'android.permission.RECOVERY'}
android.os.RecoverySystem.installPackage(Context,File,boolean)void :: {'android.permission.RECOVERY'}
android.os.RecoverySystem.scheduleUpdateOnBoot(Context,File)void :: {'android.permission.RECOVERY'}
android.os.RecoverySystem.cancelScheduledUpdate(Context)void :: {'android.permission.RECOVERY'}
android.os.RecoverySystem.rebootWipeAb(Context,File,String)void :: {'android.permission.REBOOT', 'android.permission.RECOVERY'}
android.os.UserManager.isManagedProfile()boolean :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.isManagedProfile(int)boolean :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.getUserRestrictionSource(String,UserHandle)int :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.getUserRestrictionSources(String,UserHandle)List<EnforcingUser> :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.getSeedAccountName()String :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.getSeedAccountType()String :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.getSeedAccountOptions()PersistableBundle :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.clearSeedAccountData()void :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.getSerialNumbersOfUsers(boolean)long[] :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.getUserAccount(int)String :: {'android.permission.MANAGE_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.os.UserManager.setUserAccount(int,String)void :: {'android.permission.MANAGE_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.os.Vibrator.vibrate(long)void :: {'android.permission.VIBRATE'}
android.os.Vibrator.vibrate(long,AudioAttributes)void :: {'android.permission.VIBRATE'}
android.os.Vibrator.vibrate(long[],int)void :: {'android.permission.VIBRATE'}
android.os.Vibrator.vibrate(long[],int,AudioAttributes)void :: {'android.permission.VIBRATE'}
android.os.Vibrator.vibrate(VibrationEffect)void :: {'android.permission.VIBRATE'}
android.os.Vibrator.vibrate(VibrationEffect,AudioAttributes)void :: {'android.permission.VIBRATE'}
android.os.Vibrator.vibrate(int,String,VibrationEffect,AudioAttributes)void :: {'android.permission.VIBRATE'}
android.os.Vibrator.cancel()void :: {'android.permission.VIBRATE'}
android.print.PrintManager.addPrintServicesChangeListener(PrintServicesChangeListener,Handler)void :: {'android.permission.READ_PRINT_SERVICES'}
android.print.PrintManager.removePrintServicesChangeListener(PrintServicesChangeListener)void :: {'android.permission.READ_PRINT_SERVICES'}
android.print.PrintManager.getPrintServices(int)List<PrintServiceInfo> :: {'android.permission.READ_PRINT_SERVICES'}
android.print.PrintManager.addPrintServiceRecommendationsChangeListener(PrintServiceRecommendationsChangeListener,Handler)void :: {'android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS'}
android.print.PrintManager.removePrintServiceRecommendationsChangeListener(PrintServiceRecommendationsChangeListener)void :: {'android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS'}
android.print.PrintManager.getPrintServiceRecommendations()List<RecommendationInfo> :: {'android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS'}
android.provider.Settings.putString(ContentResolver,String,String,String,boolean)boolean :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.provider.Settings.resetToDefaults(ContentResolver,String)void :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.security.keystore.AttestationUtils.attestDeviceIds(Context,int[],byte[])X509Certificate[] :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.service.oemlock.OemLockManager.setOemUnlockAllowedByCarrier(boolean,byte[])void :: {'android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE'}
android.service.oemlock.OemLockManager.isOemUnlockAllowedByCarrier()boolean :: {'android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE'}
android.service.oemlock.OemLockManager.setOemUnlockAllowedByUser(boolean)void :: {'android.permission.MANAGE_USER_OEM_UNLOCK_STATE'}
android.service.oemlock.OemLockManager.isOemUnlockAllowedByUser()boolean :: {'android.permission.MANAGE_USER_OEM_UNLOCK_STATE'}
android.service.persistentdata.PersistentDataBlockManager.getDataBlockSize()int :: {'android.permission.ACCESS_PDB_STATE'}
android.service.persistentdata.PersistentDataBlockManager.wipe()void :: {'android.permission.OEM_UNLOCK_STATE'}
android.service.persistentdata.PersistentDataBlockManager.setOemUnlockEnabled(boolean)void :: {'android.permission.OEM_UNLOCK_STATE'}
android.service.persistentdata.PersistentDataBlockManager.getOemUnlockEnabled()boolean :: {'android.permission.OEM_UNLOCK_STATE', 'android.permission.READ_OEM_UNLOCK_STATE'}
android.service.persistentdata.PersistentDataBlockManager.getFlashLockState()int :: {'android.permission.OEM_UNLOCK_STATE', 'android.permission.READ_OEM_UNLOCK_STATE'}
android.support.v4.hardware.fingerprint.FingerprintManagerCompat.hasEnrolledFingerprints()boolean :: {'android.permission.USE_FINGERPRINT'}
android.support.v4.hardware.fingerprint.FingerprintManagerCompat.isHardwareDetected()boolean :: {'android.permission.USE_FINGERPRINT'}
android.support.v4.hardware.fingerprint.FingerprintManagerCompat.authenticate(CryptoObject,int,CancellationSignal,AuthenticationCallback,Handler)void :: {'android.permission.USE_FINGERPRINT'}
android.support.v4.net.ConnectivityManagerCompat.isActiveNetworkMetered(ConnectivityManager)boolean :: {'android.permission.ACCESS_NETWORK_STATE'}
android.support.v4.net.ConnectivityManagerCompat.getNetworkInfoFromBroadcast(ConnectivityManager,Intent)NetworkInfo :: {'android.permission.ACCESS_NETWORK_STATE'}
android.support.v7.app.TwilightManager.getLastKnownLocationForProvider(String)Location :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.telecom.TelecomManager.getDefaultOutgoingPhoneAccount(String)PhoneAccountHandle :: {'android.permission.READ_PHONE_STATE'}
android.telecom.TelecomManager.getPhoneAccountsSupportingScheme(String)List<PhoneAccountHandle> :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telecom.TelecomManager.getCallCapablePhoneAccounts()List<PhoneAccountHandle> :: {'android.permission.READ_PHONE_STATE'}
android.telecom.TelecomManager.getSelfManagedPhoneAccounts()List<PhoneAccountHandle> :: {'android.permission.READ_PHONE_STATE'}
android.telecom.TelecomManager.isVoiceMailNumber(PhoneAccountHandle,String)boolean :: {'android.permission.READ_PHONE_STATE'}
android.telecom.TelecomManager.getVoiceMailNumber(PhoneAccountHandle)String :: {'android.permission.READ_PHONE_STATE'}
android.telecom.TelecomManager.getLine1Number(PhoneAccountHandle)String :: {'android.permission.READ_PHONE_STATE'}
android.telecom.TelecomManager.isInCall()boolean :: {'android.permission.READ_PHONE_STATE'}
android.telecom.TelecomManager.isInManagedCall()boolean :: {'android.permission.READ_PHONE_STATE'}
android.telecom.TelecomManager.isRinging()boolean :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telecom.TelecomManager.endCall()boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telecom.TelecomManager.acceptRingingCall()void :: {'android.permission.MODIFY_PHONE_STATE', 'android.permission.ANSWER_PHONE_CALLS'}
android.telecom.TelecomManager.acceptRingingCall(int)void :: {'android.permission.MODIFY_PHONE_STATE', 'android.permission.ANSWER_PHONE_CALLS'}
android.telecom.TelecomManager.silenceRinger()void :: {'android.permission.ANSWER_PHONE_CALLS', 'android.permission.MODIFY_PHONE_STATE'}
android.telecom.TelecomManager.isTtySupported()boolean :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telecom.TelecomManager.handleMmi(String)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telecom.TelecomManager.handleMmi(String,PhoneAccountHandle)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telecom.TelecomManager.getAdnUriForPhoneAccount(PhoneAccountHandle)Uri :: {'android.permission.MODIFY_PHONE_STATE'}
android.telecom.TelecomManager.cancelMissedCallsNotification()void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telecom.TelecomManager.showInCallScreen(boolean)void :: {'android.permission.READ_PHONE_STATE'}
android.telecom.TelecomManager.placeCall(Uri,Bundle)void :: {'android.permission.MANAGE_OWN_CALLS', 'android.permission.CALL_PHONE'}
android.telecom.TelecomManager.enablePhoneAccount(PhoneAccountHandle,boolean)void :: {'android.permission.MANAGE_OWN_CALLS', 'android.permission.CALL_PHONE', 'android.permission.MODIFY_PHONE_STATE'}
android.telecom.TelecomManager.dumpAnalytics()TelecomAnalytics :: {'android.permission.DUMP'}
android.telephony.CarrierConfigManager.updateConfigForPhoneId(int,String)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SmsManager.sendTextMessageWithoutPersisting(String,String,String,PendingIntent,PendingIntent)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SmsManager.sendMultipartTextMessageWithoutPersisting(String,String,List<String>,List<PendingIntent>,List<PendingIntent>)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getDeviceSoftwareVersion()String :: {'android.permission.READ_PHONE_STATE', 'android.permission.SEND_RESPOND_VIA_MESSAGE'}
android.telephony.TelephonyManager.getDeviceSoftwareVersion(int)String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getDeviceId()String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getDeviceId(int)String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getImei()String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getImei(int)String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getMeid()String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getMeid(int)String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getCellLocation()CellLocation :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.TelephonyManager.enableLocationUpdates()void :: {'android.permission.CONTROL_LOCATION_UPDATES'}
android.telephony.TelephonyManager.enableLocationUpdates(int)void :: {'android.permission.CONTROL_LOCATION_UPDATES'}
android.telephony.TelephonyManager.disableLocationUpdates()void :: {'android.permission.CONTROL_LOCATION_UPDATES'}
android.telephony.TelephonyManager.getNeighboringCellInfo()List<NeighboringCellInfo> :: {'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.TelephonyManager.getCarrierConfig()PersistableBundle :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getNetworkType(int)int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getDataNetworkType()int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getDataNetworkType(int)int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getVoiceNetworkType()int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getVoiceNetworkType(int)int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getSimSerialNumber()String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getSimSerialNumber(int)String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getLteOnCdmaMode()int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getLteOnCdmaMode(int)int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getSubscriberId()String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getSubscriberId(int)String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getGroupIdLevel1()String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getGroupIdLevel1(int)String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getLine1Number()String :: {'android.permission.READ_PHONE_NUMBERS', 'android.permission.READ_PHONE_STATE', 'android.permission.READ_SMS'}
android.telephony.TelephonyManager.getLine1Number(int)String :: {'android.permission.READ_PHONE_NUMBERS', 'android.permission.READ_PHONE_STATE', 'android.permission.READ_SMS'}
android.telephony.TelephonyManager.getLine1AlphaTag()String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getLine1AlphaTag(int)String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getMsisdn()String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getMsisdn(int)String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getVoiceMailNumber()String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getVoiceMailNumber(int)String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getCompleteVoiceMailNumber()String :: {'android.permission.CALL_PRIVILEGED'}
android.telephony.TelephonyManager.getCompleteVoiceMailNumber(int)String :: {'android.permission.CALL_PRIVILEGED'}
android.telephony.TelephonyManager.getVisualVoicemailPackageName()String :: {'android.permission.READ_PHONE_STATE', 'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.sendVisualVoicemailSmsForSubscriber(int,String,int,String,PendingIntent)void :: {'android.permission.SEND_SMS'}
android.telephony.TelephonyManager.getVoiceActivationState(int)int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getDataActivationState(int)int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getVoiceMessageCount()int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getVoiceMessageCount(int)int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getVoiceMailAlphaTag()String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getVoiceMailAlphaTag(int)String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getCdmaEriIconIndex()int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getCdmaEriIconIndex(int)int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getCdmaEriIconMode()int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getCdmaEriIconMode(int)int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getCdmaEriText()String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getCdmaEriText(int)String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getAllCellInfo()List<CellInfo> :: {'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.TelephonyManager.getForbiddenPlmns()String[] :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getForbiddenPlmns(int,int)String[] :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getCdmaMdn()String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getCdmaMdn(int)String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getCdmaMin()String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getCdmaMin(int)String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.call(String,String)void :: {'android.permission.CALL_PHONE'}
android.telephony.TelephonyManager.endCall()boolean :: {'android.permission.CALL_PHONE'}
android.telephony.TelephonyManager.answerRingingCall()void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.isOffhook()boolean :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.isRinging()boolean :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.isIdle()boolean :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.isRadioOn()boolean :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.supplyPin(String)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.supplyPuk(String,String)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.supplyPinReportResult(String)int[] :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.supplyPukReportResult(String,String)int[] :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.sendUssdRequest(String,UssdResponseCallback,Handler)void :: {'android.permission.CALL_PHONE'}
android.telephony.TelephonyManager.handlePinMmi(String)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.handlePinMmiForSubscriber(int,String)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.toggleRadioOnOff()void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setRadio(boolean)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setRadioPower(boolean)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.enableDataConnectivity()boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.disableDataConnectivity()boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setDataEnabled(boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setDataEnabled(int,boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.enableVideoCalling(boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.isVideoCallingEnabled()boolean :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getServiceState()ServiceState :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getTelephonyHistograms()List<TelephonyHistogram> :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setAllowedCarriers(int,List<CarrierIdentifier>)int :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getAllowedCarriers(int)List<CarrierIdentifier> :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.view.Display.requestColorMode(int)void :: {'android.permission.CONFIGURE_DISPLAY_COLOR_MODE'}
android.view.InputDevice.enable()void :: {'android.permission.DISABLE_INPUT_DEVICE'}
android.view.InputDevice.disable()void :: {'android.permission.DISABLE_INPUT_DEVICE'}
android.view.WindowManager.getCurrentImeTouchRegion()Region :: {'android.permission.RESTRICTED_VR_ACCESS'}
android.view.inputmethod.InputMethodManager.setCurrentInputMethodSubtype(InputMethodSubtype)boolean :: {'android.permission.WRITE_SECURE_SETTINGS'}
com.android.settingslib.suggestions.SuggestionParser.satisifesRequiredUserType(Tile)boolean :: {'android.permission.MANAGE_USERS'}
android.accessibilityservice.AccessibilityService.onAccessibilityEvent(AccessibilityEvent)interface :: {'android.permission.BIND_ACCESSIBILITY_SERVICE'}
android.accessibilityservice.FingerprintGestureController.FingerprintGestureController(IAccessibilityServiceConnection)FingerprintGestureController(IAccessibilityServiceConnection :: {'android.permission.USE_FINGERPRINT'}
android.accounts.AccountManager.AccountManager(Context,IAccountManager)AccountManager(Context :: {'android.permission.GET_ACCOUNTS', 'android.permission.GET_ACCOUNTS_PRIVILEGED', 'android.permission.WRITE_CONTACTS', 'android.permission.READ_CONTACTS'}
android.accounts.AccountManager.getAuthenticatorTypesAsUser(int)AuthenticatorDescription[] :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.accounts.AccountManager.getAccountsByType(String)Account[] :: {'android.permission.GET_ACCOUNTS'}
android.accounts.AccountManager.hasFeatures(Account,String[],AccountManagerCallback<Boolean>,Handler)AccountManagerFuture<Boolean> :: {'android.permission.GET_ACCOUNTS'}
android.accounts.AccountManager.getAccountsByTypeAndFeatures(String,String[],AccountManagerCallback<Account[]>,Handler)AccountManagerFuture<Account[]> :: {'android.permission.GET_ACCOUNTS'}
android.app.ActivityManager.getRecentTasksForUser(int,int,int)List<RecentTaskInfo> :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.ActivityManager.forceStopPackageAsUser(String,int)void :: {'android.permission.FORCE_STOP_PACKAGES'}
android.app.ActivityManager.handleIncomingUser(int,int,int,boolean,boolean,String,String)int :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.ActivityView.onActivityViewReady(ActivityView)void :: {'android.permission.INJECT_EVENTS'}
android.app.DownloadManager.Request(Uri)Request(Uri :: {'android.permission.INTERNET'}
android.app.Notification.getGroup()String :: {'android.permission.VIBRATE'}
android.app.WallpaperManager.setBitmap(Bitmap,Rect,boolean,int,int)int :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.WallpaperManager.suggestDesiredDimensions(int,int)void :: {'android.permission.SET_WALLPAPER_HINTS'}
android.app.admin.DeviceAdminReceiver.getManager(Context)DevicePolicyManager :: {'android.permission.BIND_DEVICE_ADMIN'}
android.app.admin.DevicePolicyManager.isAdminActive(ComponentName)boolean :: {'android.permission.DISPATCH_PROVISIONING_MESSAGE', 'android.permission.BIND_DEVICE_ADMIN'}
android.app.admin.DevicePolicyManager.setAlwaysOnVpnPackage(ComponentName,String,boolean)void :: {'android.permission.BIND_VPN_SERVICE'}
android.app.admin.DevicePolicyManager.bindDeviceAdminServiceAsUser(ComponentName,Intent,ServiceConnection,int,UserHandle)boolean :: {'android.permission.BIND_DEVICE_ADMIN'}
android.app.admin.DevicePolicyManager.getOwnerInstalledCaCerts(UserHandle)List<String> :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.job.JobInfo.getId()int :: {'android.permission.CONNECTIVITY_INTERNAL'}
android.app.timezone.RulesManager.getRulesState()RulesState :: {'android.permission.UPDATE_TIME_ZONE_RULES'}
android.app.trust.TrustManager.reportUnlockAttempt(boolean,int)void :: {'android.permission.ACCESS_KEYGUARD_SECURE_STORAGE'}
android.app.trust.TrustManager.reportUnlockLockout(int,int)void :: {'android.permission.ACCESS_KEYGUARD_SECURE_STORAGE'}
android.app.trust.TrustManager.reportEnabledTrustAgentsChanged(int)void :: {'android.permission.ACCESS_KEYGUARD_SECURE_STORAGE'}
android.app.trust.TrustManager.reportKeyguardShowingChanged()void :: {'android.permission.ACCESS_KEYGUARD_SECURE_STORAGE'}
android.app.trust.TrustManager.registerTrustListener(TrustListener)void :: {'android.permission.TRUST_LISTENER'}
android.app.trust.TrustManager.unregisterTrustListener(TrustListener)void :: {'android.permission.TRUST_LISTENER'}
android.app.usage.NetworkStatsManager.NetworkStatsManager(Context)NetworkStatsManager(Context :: {'android.permission.PACKAGE_USAGE_STATS'}
android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int,UserHandle,ComponentName,Bundle)boolean :: {'android.permission.BIND_APPWIDGET'}
android.bluetooth.BluetoothA2dp.connect(BluetoothDevice)boolean :: {'android.permission.BLUETOOTH_ADMIN', 'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothA2dp.disconnect(BluetoothDevice)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothA2dp.setPriority(BluetoothDevice,int)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothA2dp.isA2dpPlaying(BluetoothDevice)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothA2dpSink.connect(BluetoothDevice)boolean :: {'android.permission.BLUETOOTH_ADMIN', 'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothA2dpSink.disconnect(BluetoothDevice)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothA2dpSink.getAudioConfig(BluetoothDevice)BluetoothAudioConfig :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothA2dpSink.setPriority(BluetoothDevice,int)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothA2dpSink.getPriority(BluetoothDevice)int :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothA2dpSink.isA2dpPlaying(BluetoothDevice)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothAdapter.nameForState(int)String :: {'android.permission.BLUETOOTH_ADMIN', 'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothAdapter.getDefaultAdapter()BluetoothAdapter :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothAdapter.disable(boolean)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothAdapter.getName()String :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothAdapter.factoryReset()boolean :: {'android.permission.BLUETOOTH_PRIVILEGED'}
android.bluetooth.BluetoothAdapter.getUuids()ParcelUuid[] :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothAdapter.setScanMode(int,int)boolean :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.bluetooth.BluetoothAdapter.listenUsingRfcommOn(int)BluetoothServerSocket :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothAdapter.listenUsingRfcommOn(int,boolean,boolean)BluetoothServerSocket :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothAdapter.listenUsingEncryptedRfcommWithServiceRecord(String,UUID)BluetoothServerSocket :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothAdapter.readOutOfBandData()Pair<byte[], :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothAdapter.changeApplicationBluetoothState(boolean,BluetoothStateChangeCallback)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothAvrcpController.getConnectedDevices()List<BluetoothDevice> :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothDevice.toString()String :: {'android.permission.BLUETOOTH_ADMIN', 'android.permission.BLUETOOTH', 'android.permission.ACCESS_COARSE_LOCATION'}
android.bluetooth.BluetoothDevice.createBond(int)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothDevice.createBondOutOfBand(int,OobData)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothDevice.setDeviceOutOfBandData(byte[],byte[])boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothDevice.cancelBondProcess()boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothDevice.removeBond()boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothDevice.isConnected()boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothDevice.isEncrypted()boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothDevice.sdpSearch(ParcelUuid)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothDevice.setPin(byte[])boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothDevice.getPhonebookAccessPermission()int :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothDevice.setPhonebookAccessPermission(int)boolean :: {'android.permission.BLUETOOTH_PRIVILEGED'}
android.bluetooth.BluetoothDevice.getMessageAccessPermission()int :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothDevice.setMessageAccessPermission(int)boolean :: {'android.permission.BLUETOOTH_PRIVILEGED'}
android.bluetooth.BluetoothDevice.getSimAccessPermission()int :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothDevice.setSimAccessPermission(int)boolean :: {'android.permission.BLUETOOTH_PRIVILEGED'}
android.bluetooth.BluetoothDevice.createRfcommSocket(int)BluetoothSocket :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothDevice.createL2capSocket(int)BluetoothSocket :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothDevice.createInsecureL2capSocket(int)BluetoothSocket :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothDevice.createInsecureRfcommSocket(int)BluetoothSocket :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothDevice.createScoSocket()BluetoothSocket :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothGatt.registerApp(BluetoothGattCallback,Handler)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGatt.disconnect()void :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGatt.discoverServices()boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGatt.discoverServiceByUuid(UUID)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGatt.getServices()List<BluetoothGattService> :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGatt.getService(UUID)BluetoothGattService :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGatt.readCharacteristic(BluetoothGattCharacteristic)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGatt.readUsingCharacteristicUuid(UUID,int,int)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGatt.writeCharacteristic(BluetoothGattCharacteristic)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGatt.readDescriptor(BluetoothGattDescriptor)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGatt.writeDescriptor(BluetoothGattDescriptor)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGatt.beginReliableWrite()boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGatt.executeReliableWrite()boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGatt.abortReliableWrite()void :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGatt.setCharacteristicNotification(BluetoothGattCharacteristic,boolean)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGatt.readRemoteRssi()boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGatt.requestMtu(int)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGattCharacteristic.BluetoothGattCharacteristic(UUID,int,int)BluetoothGattCharacteristic(UUID :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGattCharacteristic.addDescriptor(BluetoothGattDescriptor)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGattDescriptor.BluetoothGattDescriptor(UUID,int)BluetoothGattDescriptor(UUID :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGattDescriptor.BluetoothGattDescriptor(UUID,int,int)BluetoothGattDescriptor(UUID :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGattDescriptor.getInstanceId()int :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGattServer.unregisterCallback()void :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGattServer.connect(BluetoothDevice,boolean)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGattServer.cancelConnection(BluetoothDevice)void :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGattServer.sendResponse(BluetoothDevice,int,int,int,byte[])boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGattServer.notifyCharacteristicChanged(BluetoothDevice,BluetoothGattCharacteristic,boolean)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGattServer.addService(BluetoothGattService)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGattServer.removeService(BluetoothGattService)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGattServer.clearServices()void :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGattServer.getServices()List<BluetoothGattService> :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGattServer.getService(UUID)BluetoothGattService :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGattService.BluetoothGattService(UUID,int)BluetoothGattService(UUID :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGattService.addService(BluetoothGattService)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothGattService.addCharacteristic(BluetoothGattCharacteristic)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothHeadset.connect(BluetoothDevice)boolean :: {'android.permission.BLUETOOTH_ADMIN', 'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothHeadset.disconnect(BluetoothDevice)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothHeadset.setPriority(BluetoothDevice,int)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothHeadset.getPriority(BluetoothDevice)int :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothHeadset.startVoiceRecognition(BluetoothDevice)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothHeadset.stopVoiceRecognition(BluetoothDevice)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothHeadset.isAudioConnected(BluetoothDevice)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothHeadset.isAudioOn()boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothHeadset.sendVendorSpecificResultCode(BluetoothDevice,String,String)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothHealth.registerSinkAppConfiguration(String,int,BluetoothHealthCallback)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothHealth.registerAppConfiguration(String,int,int,int,BluetoothHealthCallback)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothHealth.unregisterAppConfiguration(BluetoothHealthAppConfiguration)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothHealth.connectChannelToSource(BluetoothDevice,BluetoothHealthAppConfiguration)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothHealth.connectChannelToSink(BluetoothDevice,BluetoothHealthAppConfiguration,int)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothHealth.disconnectChannel(BluetoothDevice,BluetoothHealthAppConfiguration,int)boolean :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothHealth.getMainChannelFd(BluetoothDevice,BluetoothHealthAppConfiguration)ParcelFileDescriptor :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothHealth.getConnectionState(BluetoothDevice)int :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothHealth.getConnectedDevices()List<BluetoothDevice> :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothHealth.getDevicesMatchingConnectionStates(int[])List<BluetoothDevice> :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothInputDevice.connect(BluetoothDevice)boolean :: {'android.permission.BLUETOOTH_ADMIN', 'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothInputDevice.disconnect(BluetoothDevice)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothInputDevice.setPriority(BluetoothDevice,int)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothInputDevice.getPriority(BluetoothDevice)int :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothInputDevice.virtualUnplug(BluetoothDevice)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothInputDevice.getProtocolMode(BluetoothDevice)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothInputDevice.setProtocolMode(BluetoothDevice,int)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothInputDevice.getReport(BluetoothDevice,byte,byte,int)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothInputDevice.setReport(BluetoothDevice,byte,String)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothInputDevice.sendData(BluetoothDevice,String)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothInputDevice.getIdleTime(BluetoothDevice)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothInputDevice.setIdleTime(BluetoothDevice,byte)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothInputHost.getConnectedDevices()List<BluetoothDevice> :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothPan.connect(BluetoothDevice)boolean :: {'android.permission.BLUETOOTH_ADMIN', 'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothPan.disconnect(BluetoothDevice)boolean :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.BluetoothSap.close()void :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothServerSocket.accept()BluetoothSocket :: {'android.permission.BLUETOOTH'}
android.bluetooth.BluetoothSocket.BluetoothSocket(int,int,boolean,boolean,String,int)BluetoothSocket(int :: {'android.permission.BLUETOOTH'}
android.bluetooth.le.AdvertisingSet.enableAdvertising(boolean,int,int)void :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.le.AdvertisingSet.getOwnAddress()void :: {'android.permission.BLUETOOTH_PRIVILEGED'}
android.bluetooth.le.BluetoothLeAdvertiser.BluetoothLeAdvertiser(IBluetoothManager)BluetoothLeAdvertiser(IBluetoothManager :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(AdvertiseSettings,AdvertiseData,AdvertiseCallback)void :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(AdvertiseSettings,AdvertiseData,AdvertiseData,AdvertiseCallback)void :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.le.BluetoothLeAdvertiser.stopAdvertising(AdvertiseCallback)void :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.le.BluetoothLeScanner.BluetoothLeScanner(IBluetoothManager)BluetoothLeScanner(IBluetoothManager :: {'android.permission.BLUETOOTH_ADMIN'}
android.bluetooth.le.PeriodicAdvertisingManager.PeriodicAdvertisingManager(IBluetoothManager)PeriodicAdvertisingManager(IBluetoothManager :: {'android.permission.BLUETOOTH_ADMIN'}
android.companion.CompanionDeviceManager.associate(AssociationRequest,Callback,Handler)void :: {'android.permission.REQUEST_COMPANION_RUN_IN_BACKGROUND'}
android.content.ContentResolver.getSyncAutomatically(Account,String)boolean :: {'android.permission.READ_SYNC_SETTINGS'}
android.content.ContentResolver.setSyncAutomatically(Account,String,boolean)void :: {'android.permission.WRITE_SYNC_SETTINGS'}
android.content.ContentResolver.addPeriodicSync(Account,String,Bundle,long)void :: {'android.permission.WRITE_SYNC_SETTINGS'}
android.content.ContentResolver.removePeriodicSync(Account,String,Bundle)void :: {'android.permission.WRITE_SYNC_SETTINGS'}
android.content.ContentResolver.cancelSync(SyncRequest)void :: {'android.permission.WRITE_SYNC_SETTINGS'}
android.content.ContentResolver.getPeriodicSyncs(Account,String)List<PeriodicSync> :: {'android.permission.READ_SYNC_SETTINGS'}
android.content.ContentResolver.getIsSyncable(Account,String)int :: {'android.permission.READ_SYNC_SETTINGS'}
android.content.ContentResolver.setIsSyncable(Account,String,int)void :: {'android.permission.WRITE_SYNC_SETTINGS'}
android.content.ContentResolver.getMasterSyncAutomatically()boolean :: {'android.permission.READ_SYNC_SETTINGS'}
android.content.ContentResolver.setMasterSyncAutomatically(boolean)void :: {'android.permission.WRITE_SYNC_SETTINGS'}
android.content.ContentResolver.isSyncActive(Account,String)boolean :: {'android.permission.READ_SYNC_STATS'}
android.content.ContentResolver.getCurrentSync()SyncInfo :: {'android.permission.READ_SYNC_STATS'}
android.content.ContentResolver.getCurrentSyncs()List<SyncInfo> :: {'android.permission.READ_SYNC_STATS'}
android.content.ContentResolver.isSyncPending(Account,String)boolean :: {'android.permission.READ_SYNC_STATS'}
android.content.Context.getExternalFilesDir(String)File :: {'android.permission.WRITE_EXTERNAL_STORAGE', 'android.permission.READ_EXTERNAL_STORAGE'}
android.content.Context.getExternalFilesDirs(String)File[] :: {'android.permission.WRITE_EXTERNAL_STORAGE'}
android.content.Context.getObbDir()File :: {'android.permission.WRITE_EXTERNAL_STORAGE', 'android.permission.READ_EXTERNAL_STORAGE'}
android.content.Context.getObbDirs()File[] :: {'android.permission.WRITE_EXTERNAL_STORAGE'}
android.content.Context.getExternalCacheDir()File :: {'android.permission.WRITE_EXTERNAL_STORAGE', 'android.permission.READ_EXTERNAL_STORAGE'}
android.content.Context.getExternalCacheDirs()File[] :: {'android.permission.WRITE_EXTERNAL_STORAGE'}
android.content.Context.getExternalMediaDirs()File[] :: {'android.permission.WRITE_EXTERNAL_STORAGE'}
android.content.Context.setWallpaper(Bitmap)void :: {'android.permission.SET_WALLPAPER'}
android.content.Context.setWallpaper(InputStream)void :: {'android.permission.SET_WALLPAPER'}
android.content.Context.clearWallpaper()void :: {'android.permission.SET_WALLPAPER'}
android.content.Context.registerReceiver(BroadcastReceiver,IntentFilter)Intent :: {'android.permission.BROADCAST_STICKY'}
android.content.Intent.isAccessUriMode(int)boolean :: {'android.permission.MANAGE_USERS', 'android.permission.REQUEST_INSTALL_PACKAGES', 'android.permission.MASTER_CLEAR', 'android.permission.PROCESS_OUTGOING_CALLS', 'android.permission.RECEIVE_MEDIA_RESOURCE_USAGE', 'android.permission.RECEIVE_BOOT_COMPLETED', 'android.permission.CALL_PHONE', 'android.permission.INTERACT_ACROSS_USERS'}
android.content.RestrictionsManager.RestrictionsManager(Context,IRestrictionsManager)RestrictionsManager(Context :: {'android.permission.BIND_DEVICE_ADMIN'}
android.content.pm.ApplicationInfo.getCategoryTitle(Context,int)CharSequence :: {'android.permission.FACTORY_TEST'}
android.content.pm.PackageManager.deleteApplicationCacheFiles(String,IPackageDataObserver)void :: {'android.permission.DELETE_CACHE_FILES'}
android.content.pm.PackageManager.deleteApplicationCacheFilesAsUser(String,int,IPackageDataObserver)void :: {'android.permission.DELETE_CACHE_FILES', 'android.permission.INTERACT_ACROSS_USERS'}
android.content.pm.PackageManager.getPackageSizeInfoAsUser(String,int,IPackageStatsObserver)void :: {'android.permission.GET_PACKAGE_SIZE'}
android.content.pm.PackageManager.canRequestPackageInstalls()boolean :: {'android.permission.REQUEST_INSTALL_PACKAGES'}
android.hardware.Camera.getNumberOfCameras()int :: {'android.permission.CAMERA'}
android.hardware.camera2.CameraDevice.getId()String :: {'android.permission.CAMERA'}
android.hardware.display.DisplayManager.DisplayManager(Context)DisplayManager(Context :: {'android.permission.CAPTURE_VIDEO_OUTPUT', 'android.permission.CAPTURE_SECURE_VIDEO_OUTPUT'}
android.hardware.display.DisplayManager.startWifiDisplayScan()void :: {'android.permission.CONFIGURE_WIFI_DISPLAY'}
android.hardware.display.DisplayManager.stopWifiDisplayScan()void :: {'android.permission.CONFIGURE_WIFI_DISPLAY'}
android.hardware.display.DisplayManager.connectWifiDisplay(String)void :: {'android.permission.CONFIGURE_WIFI_DISPLAY'}
android.hardware.display.DisplayManager.renameWifiDisplay(String,String)void :: {'android.permission.CONFIGURE_WIFI_DISPLAY'}
android.hardware.display.DisplayManager.forgetWifiDisplay(String)void :: {'android.permission.CONFIGURE_WIFI_DISPLAY'}
android.hardware.hdmi.HdmiControlManager.HdmiControlManager(IHdmiControlService)HdmiControlManager(IHdmiControlService :: {'android.permission.HDMI_CEC'}
android.hardware.location.GeofenceHardware.getMonitoringTypes()int[] :: {'android.permission.LOCATION_HARDWARE'}
android.hardware.location.GeofenceHardware.addGeofence(int,int,GeofenceHardwareRequest,GeofenceHardwareCallback)boolean :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.LOCATION_HARDWARE'}
android.hardware.location.GeofenceHardware.removeGeofence(int,int)boolean :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.LOCATION_HARDWARE'}
android.hardware.location.GeofenceHardware.pauseGeofence(int,int)boolean :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.LOCATION_HARDWARE'}
android.hardware.location.GeofenceHardware.resumeGeofence(int,int,int)boolean :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.LOCATION_HARDWARE'}
android.hardware.location.GeofenceHardware.registerForMonitorStateChangeCallback(int,GeofenceHardwareMonitorCallback)boolean :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.LOCATION_HARDWARE'}
android.hardware.location.GeofenceHardware.unregisterForMonitorStateChangeCallback(int,GeofenceHardwareMonitorCallback)boolean :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.LOCATION_HARDWARE'}
android.location.LocationManager.LocationManager(Context,ILocationManager)LocationManager(Context :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.removeProximityAlert(PendingIntent)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.removeGeofence(Geofence,PendingIntent)void :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.removeAllGeofences(PendingIntent)void :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationRequest.create()LocationRequest :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationRequest.setWorkSource(WorkSource)void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.location.LocationRequest.setHideFromAppOps(boolean)void :: {'android.permission.UPDATE_APP_OPS_STATS'}
android.media.AudioManager.startBluetoothSco()void :: {'android.permission.MODIFY_AUDIO_SETTINGS'}
android.media.AudioManager.startBluetoothScoVirtualCall()void :: {'android.permission.MODIFY_AUDIO_SETTINGS'}
android.media.AudioManager.setBluetoothScoOn(boolean)void :: {'android.permission.MODIFY_AUDIO_SETTINGS'}
android.media.MediaExtractor.setDataSource(MediaDataSource)void :: {'android.permission.INTERNET'}
android.media.MediaExtractor.setDataSource(Context,Uri,Map<String,String>)void :: {'android.permission.INTERNET'}
android.media.MediaExtractor.setDataSource(String,Map<String,String>)void :: {'android.permission.INTERNET'}
android.media.MediaExtractor.setDataSource(String)void :: {'android.permission.INTERNET'}
android.media.MediaPlayer.MediaPlayer()MediaPlayer() :: {'android.permission.INTERNET'}
android.media.MediaPlayer.setWakeMode(Context,int)void :: {'android.permission.WAKE_LOCK'}
android.media.MediaRecorder.isSystemOnlyAudioSource(int)boolean :: {'android.permission.CAPTURE_AUDIO_OUTPUT'}
android.media.RingtoneManager.getCursor()Cursor :: {'android.permission.READ_EXTERNAL_STORAGE'}
android.media.RingtoneManager.getValidRingtoneUri(Context)Uri :: {'android.permission.READ_EXTERNAL_STORAGE'}
android.media.RingtoneManager.openRingtone(Context,Uri)InputStream :: {'android.permission.READ_EXTERNAL_STORAGE'}
android.media.audiofx.EnvironmentalReverb.EnvironmentalReverb(int,int)EnvironmentalReverb(int :: {'android.permission.MODIFY_AUDIO_SETTINGS'}
android.media.audiofx.PresetReverb.PresetReverb(int,int)PresetReverb(int :: {'android.permission.MODIFY_AUDIO_SETTINGS'}
android.media.audiofx.Visualizer.System.loadLibrary(audioeffect_jni)class :: {'android.permission.MODIFY_AUDIO_SETTINGS'}
android.media.session.MediaSession.MediaSession(Context,String,int)MediaSession(@NonNull :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.media.session.MediaSessionManager.getActiveSessionsForUser(ComponentName,int)List<MediaController> :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.media.tv.TvInputService.onCreateSession(String)Session :: {'android.permission.BIND_TV_INPUT'}
android.net.ConnectivityManager.startUsingNetworkFeature(int,String)int :: {'android.permission.CHANGE_NETWORK_STATE'}
android.net.ConnectivityManager.stopUsingNetworkFeature(int,String)int :: {'android.permission.CHANGE_NETWORK_STATE'}
android.net.ConnectivityManager.requestRouteToHost(int,int)boolean :: {'android.permission.CHANGE_NETWORK_STATE'}
android.net.ConnectivityManager.requestRouteToHostAddress(int,InetAddress)boolean :: {'android.permission.CHANGE_NETWORK_STATE'}
android.net.ConnectivityManager.tether(String)int :: {'android.permission.CHANGE_NETWORK_STATE'}
android.net.ConnectivityManager.untether(String)int :: {'android.permission.CHANGE_NETWORK_STATE'}
android.net.ConnectivityManager.setUsbTethering(boolean)int :: {'android.permission.CHANGE_NETWORK_STATE'}
android.net.ConnectivityManager.reportInetCondition(int,int)void :: {'android.permission.STATUS_BAR'}
android.net.ConnectivityManager.requestNetwork(NetworkRequest,NetworkCallback)void :: {'android.permission.CHANGE_NETWORK_STATE'}
android.net.ConnectivityManager.requestNetwork(NetworkRequest,NetworkCallback,Handler)void :: {'android.permission.CHANGE_NETWORK_STATE'}
android.net.ConnectivityManager.requestNetwork(NetworkRequest,NetworkCallback,int)void :: {'android.permission.CHANGE_NETWORK_STATE'}
android.net.ConnectivityManager.requestNetwork(NetworkRequest,NetworkCallback,Handler,int)void :: {'android.permission.CHANGE_NETWORK_STATE'}
android.net.ConnectivityManager.requestNetwork(NetworkRequest,PendingIntent)void :: {'android.permission.CHANGE_NETWORK_STATE'}
android.net.VpnService.getService()IConnectivityManager :: {'android.permission.BIND_VPN_SERVICE'}
android.net.rtp.AudioGroup.AudioGroup()AudioGroup() :: {'android.permission.RECORD_AUDIO'}
android.net.rtp.AudioStream.AudioStream(InetAddress)AudioStream(InetAddress :: {'android.permission.INTERNET'}
android.net.rtp.RtpStream.getLocalAddress()InetAddress :: {'android.permission.INTERNET'}
android.net.sip.SipAudioCall.onReadyToCall(SipAudioCall)void :: {'android.permission.ACCESS_WIFI_STATE', 'android.permission.RECORD_AUDIO', 'android.permission.USE_SIP', 'android.permission.INTERNET', 'android.permission.MODIFY_AUDIO_SETTINGS', 'android.permission.WAKE_LOCK'}
android.net.sip.SipAudioCall.setSpeakerMode(boolean)void :: {'android.permission.MODIFY_AUDIO_SETTINGS'}
android.net.sip.SipAudioCall.startAudio()void :: {'android.permission.ACCESS_WIFI_STATE', 'android.permission.WAKE_LOCK', 'android.permission.RECORD_AUDIO'}
android.net.sip.SipManager.newInstance(Context)SipManager :: {'android.permission.USE_SIP'}
android.net.wifi.WifiManager.getScanResults()List<ScanResult> :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.net.wifi.WifiManager.setWifiEnabled(boolean)boolean :: {'android.permission.CHANGE_WIFI_STATE'}
android.net.wifi.WifiManager.watchLocalOnlyHotspot(LocalOnlyHotspotObserver,Handler)void :: {'android.permission.ACCESS_COARSE_LOCATION'}
android.net.wifi.aware.IdentityChangedListener.onIdentityChanged(byte[])void :: {'android.permission.ACCESS_COARSE_LOCATION'}
android.net.wifi.aware.WifiAwareManager.attach(AttachCallback,IdentityChangedListener,Handler)void :: {'android.permission.ACCESS_COARSE_LOCATION'}
android.net.wifi.aware.WifiAwareSession.publish(PublishConfig,DiscoverySessionCallback,Handler)void :: {'android.permission.ACCESS_COARSE_LOCATION'}
android.net.wifi.aware.WifiAwareSession.subscribe(SubscribeConfig,DiscoverySessionCallback,Handler)void :: {'android.permission.ACCESS_COARSE_LOCATION'}
android.net.wifi.p2p.WifiP2pManager.WifiP2pManager(IWifiP2pManager)WifiP2pManager(IWifiP2pManager :: {'android.permission.ACCESS_WIFI_STATE', 'android.permission.CHANGE_WIFI_STATE'}
android.nfc.NfcAdapter.setBeamPushUris(Uri[],Activity)void :: {'android.permission.NFC'}
android.nfc.NfcAdapter.setBeamPushUrisCallback(CreateBeamUrisCallback,Activity)void :: {'android.permission.NFC'}
android.nfc.NfcAdapter.setNdefPushMessage(NdefMessage,Activity,Activity)void :: {'android.permission.NFC'}
android.nfc.NfcAdapter.setNdefPushMessageCallback(CreateNdefMessageCallback,Activity,Activity)void :: {'android.permission.NFC'}
android.nfc.NfcAdapter.setOnNdefPushCompleteCallback(OnNdefPushCompleteCallback,Activity,Activity)void :: {'android.permission.NFC'}
android.nfc.NfcAdapter.enableForegroundDispatch(Activity,PendingIntent,IntentFilter[],String[][])void :: {'android.permission.NFC'}
android.nfc.NfcAdapter.disableForegroundDispatch(Activity)void :: {'android.permission.NFC'}
android.nfc.NfcAdapter.enableForegroundNdefPush(Activity,NdefMessage)void :: {'android.permission.NFC'}
android.nfc.NfcAdapter.disableForegroundNdefPush(Activity)void :: {'android.permission.NFC'}
android.nfc.NfcAdapter.dispatch(Tag)void :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.nfc.cardemulation.CardEmulation.isDefaultServiceForCategory(ComponentName,String)boolean :: {'android.permission.NFC'}
android.nfc.cardemulation.CardEmulation.isDefaultServiceForAid(ComponentName,String)boolean :: {'android.permission.NFC'}
android.nfc.cardemulation.HostNfcFService.sendResponsePacket(byte[])void :: {'android.permission.BIND_NFC_SERVICE'}
android.nfc.tech.IsoDep.get(Tag)IsoDep :: {'android.permission.NFC'}
android.nfc.tech.IsoDep.setTimeout(int)void :: {'android.permission.NFC'}
android.nfc.tech.IsoDep.getTimeout()int :: {'android.permission.NFC'}
android.nfc.tech.IsoDep.transceive(byte[])byte[] :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.get(Tag)MifareClassic :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.authenticateSectorWithKeyA(int,byte[])boolean :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.authenticateSectorWithKeyB(int,byte[])boolean :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.readBlock(int)byte[] :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.writeBlock(int,byte[])void :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.increment(int,int)void :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.decrement(int,int)void :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.transfer(int)void :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.restore(int)void :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.transceive(byte[])byte[] :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.setTimeout(int)void :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.getTimeout()int :: {'android.permission.NFC'}
android.nfc.tech.MifareUltralight.get(Tag)MifareUltralight :: {'android.permission.NFC'}
android.nfc.tech.MifareUltralight.readPages(int)byte[] :: {'android.permission.NFC'}
android.nfc.tech.MifareUltralight.writePage(int,byte[])void :: {'android.permission.NFC'}
android.nfc.tech.MifareUltralight.transceive(byte[])byte[] :: {'android.permission.NFC'}
android.nfc.tech.MifareUltralight.setTimeout(int)void :: {'android.permission.NFC'}
android.nfc.tech.MifareUltralight.getTimeout()int :: {'android.permission.NFC'}
android.nfc.tech.Ndef.get(Tag)Ndef :: {'android.permission.NFC'}
android.nfc.tech.Ndef.isWritable()boolean :: {'android.permission.NFC'}
android.nfc.tech.Ndef.getNdefMessage()NdefMessage :: {'android.permission.NFC'}
android.nfc.tech.Ndef.writeNdefMessage(NdefMessage)void :: {'android.permission.NFC'}
android.nfc.tech.Ndef.makeReadOnly()boolean :: {'android.permission.NFC'}
android.nfc.tech.NdefFormatable.get(Tag)NdefFormatable :: {'android.permission.NFC'}
android.nfc.tech.NdefFormatable.format(NdefMessage)void :: {'android.permission.NFC'}
android.nfc.tech.NdefFormatable.formatReadOnly(NdefMessage)void :: {'android.permission.NFC'}
android.nfc.tech.NfcA.get(Tag)NfcA :: {'android.permission.NFC'}
android.nfc.tech.NfcA.transceive(byte[])byte[] :: {'android.permission.NFC'}
android.nfc.tech.NfcA.setTimeout(int)void :: {'android.permission.NFC'}
android.nfc.tech.NfcA.getTimeout()int :: {'android.permission.NFC'}
android.nfc.tech.NfcB.get(Tag)NfcB :: {'android.permission.NFC'}
android.nfc.tech.NfcB.transceive(byte[])byte[] :: {'android.permission.NFC'}
android.nfc.tech.NfcF.get(Tag)NfcF :: {'android.permission.NFC'}
android.nfc.tech.NfcF.transceive(byte[])byte[] :: {'android.permission.NFC'}
android.nfc.tech.NfcF.setTimeout(int)void :: {'android.permission.NFC'}
android.nfc.tech.NfcF.getTimeout()int :: {'android.permission.NFC'}
android.nfc.tech.NfcV.get(Tag)NfcV :: {'android.permission.NFC'}
android.nfc.tech.NfcV.transceive(byte[])byte[] :: {'android.permission.NFC'}
android.nfc.tech.TagTechnology.getTag()Tag :: {'android.permission.NFC'}
android.nfc.tech.TagTechnology.connect()void :: {'android.permission.NFC'}
android.nfc.tech.TagTechnology.reconnect()void :: {'android.permission.NFC'}
android.nfc.tech.TagTechnology.close()void :: {'android.permission.NFC'}
android.os.Build.deriveFingerprint()String :: {'android.permission.READ_CALL_LOG', 'android.permission.WRITE_EXTERNAL_STORAGE', 'android.permission.BIND_ACCESSIBILITY_SERVICE', 'android.permission.WRITE_CALL_LOG', 'android.permission.READ_PHONE_STATE', 'android.permission.WRITE_CONTACTS', 'android.permission.READ_CONTACTS', 'android.permission.BIND_DREAM_SERVICE', 'android.permission.READ_EXTERNAL_STORAGE'}
android.os.DropBoxManager.Entry(String,long)Entry(String :: {'android.permission.READ_LOGS'}
android.os.Environment.getExternalStorageDirectory()File :: {'android.permission.WRITE_EXTERNAL_STORAGE', 'android.permission.READ_EXTERNAL_STORAGE'}
android.os.Environment.maybeTranslateEmulatedPathToInternal(File)File :: {'android.permission.WRITE_MEDIA_STORAGE'}
android.os.FileUriExposedException.FileUriExposedException(String)class :: {'android.permission.READ_EXTERNAL_STORAGE'}
android.os.PowerManager.PowerManager(Context,IPowerManager,Handler)PowerManager(Context :: {'android.permission.REBOOT', 'android.permission.DEVICE_POWER', 'android.permission.RECOVERY'}
android.os.PowerManager.newWakeLock(int,String)WakeLock :: {'android.permission.WAKE_LOCK'}
android.os.PowerManager.userActivity(long,boolean)void :: {'android.permission.DEVICE_POWER'}
android.os.PowerManager.goToSleep(long)void :: {'android.permission.USER_ACTIVITY', 'android.permission.DEVICE_POWER'}
android.os.PowerManager.goToSleep(long,int,int)void :: {'android.permission.DEVICE_POWER'}
android.os.PowerManager.wakeUp(long)void :: {'android.permission.DEVICE_POWER'}
android.os.PowerManager.nap(long)void :: {'android.permission.DEVICE_POWER'}
android.os.PowerManager.boostScreenBrightness(long)void :: {'android.permission.DEVICE_POWER'}
android.os.PowerManager.setBacklightBrightness(int)void :: {'android.permission.DEVICE_POWER'}
android.os.PowerManager.reboot(String)void :: {'android.permission.REBOOT'}
android.os.PowerManager.rebootSafeMode()void :: {'android.permission.REBOOT'}
android.os.PowerManager.getLastShutdownReason()int :: {'android.permission.DEVICE_POWER'}
android.os.RecoverySystem.rebootWipeUserData(Context)void :: {'android.permission.REBOOT'}
android.os.RecoverySystem.rebootWipeUserData(Context,boolean,String,boolean,boolean)void :: {'android.permission.REBOOT'}
android.os.StrictMode.detectFileUriExposure()Builder :: {'android.permission.READ_EXTERNAL_STORAGE'}
android.os.UserManager.getManagedProfileBadge(int)int :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.getUserInfo(int)UserInfo :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.createUser(String,int)UserInfo :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.createProfileForUser(String,int,int)UserInfo :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.createProfileForUserEvenWhenDisallowed(String,int,int,String[])UserInfo :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.setUserEnabled(int)void :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.getUsers()List<UserInfo> :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.getPrimaryUser()UserInfo :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.getProfiles(int)List<UserInfo> :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.isSameProfileGroup(int,int)boolean :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.getEnabledProfiles(int)List<UserInfo> :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.getUsers(boolean)List<UserInfo> :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.removeUser(int)boolean :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.setUserName(int,String)void :: {'android.permission.MANAGE_USERS'}
android.os.UserManagerInternal.removeUserEvenWhenDisallowed(int)boolean :: {'android.permission.MANAGE_USERS'}
android.os.health.SystemHealthManager.takeUidSnapshot(int)HealthStats :: {'android.permission.BATTERY_STATS'}
android.os.health.SystemHealthManager.takeUidSnapshots(int[])HealthStats[] :: {'android.permission.BATTERY_STATS'}
android.os.storage.StorageManager.getAllocatableBytes(UUID)long :: {'android.permission.ALLOCATE_AGGRESSIVE'}
android.os.storage.StorageVolume.StorageVolume(String,int,File,String,boolean,boolean,boolean,long,boolean,long,UserHandle,String,String)StorageVolume(String :: {'android.permission.WRITE_EXTERNAL_STORAGE', 'android.permission.READ_EXTERNAL_STORAGE'}
android.os.storage.StorageVolume.createAccessIntent(String)Intent :: {'android.permission.WRITE_EXTERNAL_STORAGE', 'android.permission.READ_EXTERNAL_STORAGE'}
android.os.storage.VolumeInfo.getInternalPathForUser(int)File :: {'android.permission.WRITE_MEDIA_STORAGE'}
android.printservice.PrintService.onConnected()void :: {'android.permission.BIND_PRINT_SERVICE'}
android.provider.BlockedNumberContract.notifyEmergencyContact(Context)void :: {'android.permission.WRITE_BLOCKED_NUMBERS', 'android.permission.READ_BLOCKED_NUMBERS'}
android.provider.DocumentsProvider.attachInfo(Context,ProviderInfo)void :: {'android.permission.MANAGE_DOCUMENTS'}
android.provider.MediaStore.getContentUri(String)Uri :: {'android.permission.CAMERA'}
android.provider.SearchIndexablesProvider.attachInfo(Context,ProviderInfo)void :: {'android.permission.READ_SEARCH_INDEXABLES'}
android.provider.Settings.setInSystemServer()void :: {'android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS', 'android.permission.PACKAGE_USAGE_STATS'}
android.provider.Settings.canDrawOverlays(Context)boolean :: {'android.permission.SYSTEM_ALERT_WINDOW'}
android.provider.Settings.canWrite(Context)boolean :: {'android.permission.WRITE_SETTINGS'}
android.provider.Telephony.Telephony()Telephony() :: {'android.permission.BROADCAST_SMS'}
android.provider.Telephony.getMessagesFromIntent(Intent)SmsMessage[] :: {'android.permission.RECEIVE_EMERGENCY_BROADCAST', 'android.permission.RECEIVE_WAP_PUSH', 'android.permission.BROADCAST_WAP_PUSH', 'android.permission.RECEIVE_SMS', 'android.permission.BROADCAST_SMS', 'android.permission.RECEIVE_MMS'}
android.service.autofill.AutofillService.onConnected()void :: {'android.permission.BIND_AUTOFILL_SERVICE'}
android.service.carrier.CarrierMessagingService.onFilterSms(MessagePdu,String,int,int,ResultCallback<Boolean>)void :: {'android.permission.BIND_CARRIER_SERVICES'}
android.service.carrier.CarrierService.onLoadConfig(CarrierIdentifier)PersistableBundle :: {'android.permission.BIND_CARRIER_SERVICES'}
android.service.carrier.CarrierService.notifyCarrierNetworkChange(boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.service.chooser.ChooserTargetService.onGetChooserTargets(ComponentName,IntentFilter)List<ChooserTarget> :: {'android.permission.BIND_CHOOSER_TARGET_SERVICE'}
android.service.dreams.DreamService.setDebug(boolean)void :: {'android.permission.BIND_DREAM_SERVICE'}
android.service.euicc.EuiccService.onBind(Intent)IBinder :: {'android.permission.BIND_EUICC_SERVICE'}
android.service.notification.ConditionProviderService.requestRebind(ComponentName)void :: {'android.permission.ACCESS_NOTIFICATION_POLICY', 'android.permission.BIND_CONDITION_PROVIDER_SERVICE'}
android.service.notification.NotificationListenerService.onNotificationPosted(StatusBarNotification)void :: {'android.permission.BIND_NOTIFICATION_LISTENER_SERVICE'}
android.service.resolver.ResolverRankerService.onPredictSharingProbabilities(List<ResolverTarget>)void :: {'android.permission.BIND_RESOLVER_RANKER_SERVICE'}
android.service.trust.TrustAgentService.onUnlockAttempt(boolean)void :: {'android.permission.BIND_TRUST_AGENT'}
android.service.voice.VoiceInteractionService.onLaunchVoiceAssistFromKeyguard()void :: {'android.permission.BIND_VOICE_INTERACTION'}
android.service.vr.VrListenerService.onCurrentVrActivityChanged(ComponentName)void :: {'android.permission.BIND_VR_LISTENER_SERVICE'}
android.service.wallpaper.WallpaperService.Engine()Engine() :: {'android.permission.BIND_WALLPAPER'}
android.speech.SpeechRecognizer.SpeechRecognizer(Context,ComponentName)SpeechRecognizer(final :: {'android.permission.RECORD_AUDIO'}
android.support.v4.app.JobIntentService.dequeueWork()JobIntentService.GenericWorkItem :: {'android.permission.WAKE_LOCK'}
android.support.v4.app.NotificationCompat.Builder(Context,String)Builder(@NonNull :: {'android.permission.VIBRATE'}
android.support.v4.content.ContextCompat.getObbDirs(Context)File[] :: {'android.permission.WRITE_EXTERNAL_STORAGE'}
android.support.v4.content.ContextCompat.getExternalFilesDirs(Context,String)File[] :: {'android.permission.WRITE_EXTERNAL_STORAGE'}
android.support.v4.content.ContextCompat.getExternalCacheDirs(Context)File[] :: {'android.permission.WRITE_EXTERNAL_STORAGE'}
android.support.v4.content.WakefulBroadcastReceiver.startWakefulService(Context,Intent)ComponentName :: {'android.permission.WAKE_LOCK'}
android.telecom.Connection.VideoProviderHandler()class :: {'android.permission.CAMERA'}
android.telecom.TelecomManager.setDefaultDialer(String)boolean :: {'android.permission.WRITE_SECURE_SETTINGS', 'android.permission.MODIFY_PHONE_STATE'}
android.telecom.TelecomManager.getCallState()int :: {'android.permission.READ_PHONE_STATE'}
android.telecom.TelecomManager.addNewIncomingCall(PhoneAccountHandle,Bundle)void :: {'android.permission.MANAGE_OWN_CALLS'}
android.telephony.CarrierConfigManager.getConfigForSubId(int)PersistableBundle :: {'android.permission.READ_PHONE_STATE'}
android.telephony.CarrierConfigManager.getConfig()PersistableBundle :: {'android.permission.READ_PHONE_STATE'}
android.telephony.PhoneStateListener.PhoneStateListener()PhoneStateListener() :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PHONE_STATE', 'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.PhoneStateListener.onCallStateChanged(int,String)void :: {'android.permission.READ_PHONE_STATE'}
android.telephony.SmsManager.sendTextMessage(String,String,String,PendingIntent,PendingIntent)void :: {'android.permission.SEND_SMS'}
android.telephony.SmsManager.injectSmsPdu(byte[],String,PendingIntent)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SmsManager.sendMultipartTextMessage(String,String,ArrayList<String>,ArrayList<PendingIntent>,ArrayList<PendingIntent>)void :: {'android.permission.SEND_SMS'}
android.telephony.SmsManager.sendDataMessage(String,String,short,byte[],PendingIntent,PendingIntent)void :: {'android.permission.SEND_SMS'}
android.telephony.SubscriptionManager.requestEmbeddedSubscriptionInfoListRefresh()void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.TelephonyManager.getCarrierInfoForImsiEncryption(int)ImsiEncryptionInfo :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.setCarrierInfoForImsiEncryption(ImsiEncryptionInfo)void :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.setVisualVoicemailSmsFilterSettings(VisualVoicemailSmsFilterSettings)void :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.sendVisualVoicemailSms(String,int,String,PendingIntent)void :: {'android.permission.SEND_SMS'}
android.telephony.TelephonyManager.setVoiceActivationState(int,int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setDataActivationState(int,int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccOpenLogicalChannel(String)IccOpenLogicalChannelResponse :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccOpenLogicalChannel(String,int)IccOpenLogicalChannelResponse :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccOpenLogicalChannel(int,String,int)IccOpenLogicalChannelResponse :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccCloseLogicalChannel(int)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccCloseLogicalChannel(int,int)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccTransmitApduLogicalChannel(int,int,int,int,int,int,String)String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccTransmitApduLogicalChannel(int,int,int,int,int,int,int,String)String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccTransmitApduBasicChannel(int,int,int,int,int,String)String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccTransmitApduBasicChannel(int,int,int,int,int,int,String)String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccExchangeSimIO(int,int,int,int,int,String)byte[] :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccExchangeSimIO(int,int,int,int,int,int,String)byte[] :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.sendEnvelopeWithStatus(String)String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.sendEnvelopeWithStatus(int,String)String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.nvReadItem(int)String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.nvWriteItem(int,String)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.nvWriteCdmaPrl(byte[])boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.nvResetConfig(int)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getPreferredNetworkType(int)int :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setNetworkSelectionModeAutomatic(int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getCellNetworkScanResults(int)CellNetworkScanResult :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.requestNetworkScan(NetworkScanRequest,TelephonyScanManager.NetworkScanCallback)NetworkScan :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setNetworkSelectionModeManual(int,OperatorInfo,boolean)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setPreferredNetworkType(int,int)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getDataEnabled(int)boolean :: {'android.permission.MODIFY_PHONE_STATE', 'android.permission.ACCESS_NETWORK_STATE'}
android.telephony.TelephonyManager.setSimPowerState(int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setSimPowerStateForSlot(int,int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setVoicemailRingtoneUri(PhoneAccountHandle,Uri)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setVoicemailVibrationEnabled(PhoneAccountHandle,boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyScanManager.requestNetworkScan(int,NetworkScanRequest,NetworkScanCallback)NetworkScan :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.VisualVoicemailService.finish()void :: {'android.permission.BIND_VISUAL_VOICEMAIL_SERVICE'}
android.telephony.VisualVoicemailService.setSmsFilterSettings(Context,PhoneAccountHandle,VisualVoicemailSmsFilterSettings)void :: {'android.permission.READ_PHONE_STATE'}
android.telephony.VisualVoicemailService.sendVisualVoicemailSms(Context,PhoneAccountHandle,String,short,String,PendingIntent)void :: {'android.permission.SEND_SMS'}
android.telephony.euicc.EuiccManager.downloadSubscription(DownloadableSubscription,boolean,PendingIntent)void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.getDownloadableSubscriptionMetadata(DownloadableSubscription,PendingIntent)void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.getDefaultDownloadableSubscriptionList(PendingIntent)void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.deleteSubscription(int,PendingIntent)void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.switchToSubscription(int,PendingIntent)void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.updateSubscriptionNickname(int,String,PendingIntent)void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.eraseSubscriptions(PendingIntent)void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.retainSubscriptionsForFactoryReset(PendingIntent)void :: {'android.permission.MASTER_CLEAR'}
android.view.WindowManager.isSystemAlertWindowType(int)boolean :: {'android.permission.SYSTEM_ALERT_WINDOW'}
android.view.inputmethod.InputMethod.attachToken(IBinder)void :: {'android.permission.BIND_INPUT_METHOD'}
android.view.inputmethod.InputMethodManager.getInstance()InputMethodManager :: {'android.permission.BIND_INPUT_METHOD'}
android.view.textservice.SpellCheckerSession.SpellCheckerSession(SpellCheckerInfo,ITextServicesManager,SpellCheckerSessionListener)SpellCheckerSession( :: {'android.permission.BIND_TEXT_SERVICE'}
android.webkit.WebSettings.setBlockNetworkLoads(boolean)void :: {'android.permission.INTERNET'}
android.webkit.WebSettings.setGeolocationEnabled(boolean)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
com.android.internal.telephony.IccSmsInterfaceManager.enforcePrivilegedAppPermissions()void :: {'android.permission.MODIFY_PHONE_STATE'}
com.android.internal.util.DumpUtils.checkDumpPermission(Context,String,PrintWriter)boolean :: {'android.permission.DUMP'}
com.android.internal.util.DumpUtils.checkUsageStatsPermission(Context,String,PrintWriter)boolean :: {'android.permission.PACKAGE_USAGE_STATS'}
com.android.internal.util.DumpUtils.checkDumpAndUsageStatsPermission(Context,String,PrintWriter)boolean :: {'android.permission.DUMP', 'android.permission.PACKAGE_USAGE_STATS'}
com.android.internal.widget.LockPatternUtils.requireCredentialEntry(int)void :: {'android.permission.ACCESS_KEYGUARD_SECURE_STORAGE'}
com.android.internal.widget.LockPatternUtils.requireStrongAuth(int,int)void :: {'android.permission.ACCESS_KEYGUARD_SECURE_STORAGE'}
com.android.media.tv.remoteprovider.TvRemoteProvider.TvRemoteProvider(Context)TvRemoteProvider(Context :: {'android.permission.BIND_TV_REMOTE_SERVICE'}
com.android.nfc_extras.NfcAdapterExtras.initService(NfcAdapter)void :: {'android.permission.WRITE_SECURE_SETTINGS'}
com.android.nfc_extras.NfcAdapterExtras.get(NfcAdapter)NfcAdapterExtras :: {'android.permission.WRITE_SECURE_SETTINGS'}
com.android.nfc_extras.NfcAdapterExtras.getCardEmulationRoute()CardEmulationRoute :: {'android.permission.WRITE_SECURE_SETTINGS'}
com.android.nfc_extras.NfcAdapterExtras.setCardEmulationRoute(CardEmulationRoute)void :: {'android.permission.WRITE_SECURE_SETTINGS'}
com.android.nfc_extras.NfcAdapterExtras.getEmbeddedExecutionEnvironment()NfcExecutionEnvironment :: {'android.permission.WRITE_SECURE_SETTINGS'}
com.android.nfc_extras.NfcExecutionEnvironment.open()void :: {'android.permission.WRITE_SECURE_SETTINGS'}
com.android.nfc_extras.NfcExecutionEnvironment.close()void :: {'android.permission.WRITE_SECURE_SETTINGS'}
com.android.nfc_extras.NfcExecutionEnvironment.transceive(byte[])byte[] :: {'android.permission.WRITE_SECURE_SETTINGS'}
com.android.server.backup.BackupPasswordManager.usePbkdf2Fallback()boolean :: {'android.permission.BACKUP'}
com.android.server.pm.PackageManagerService.canViewInstantApps(int,int)boolean :: {'android.permission.ACCESS_INSTANT_APPS'}
com.android.server.pm.UserManagerService.getUserRestrictionSource(String,int)int :: {'android.permission.MANAGE_USERS'}
com.android.server.pm.UserManagerService.checkManageUserAndAcrossUsersFullPermission(String)void :: {'android.permission.MANAGE_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
com.android.server.pm.UserManagerService.checkManageUsersPermission(String)void :: {'android.permission.MANAGE_USERS'}
com.android.server.pm.UserManagerService.checkManageOrCreateUsersPermission(String)void :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
com.android.server.pm.UserManagerService.checkManageOrCreateUsersPermission(int)void :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
com.android.server.pm.UserManagerService.hasManageUsersPermission()boolean :: {'android.permission.MANAGE_USERS'}
com.android.server.pm.UserManagerService.hasManageOrCreateUsersPermission()boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
com.android.server.policy.PhoneWindowManager.adjustConfigurationLw(Configuration,int,int)void :: {'android.permission.INTERNAL_SYSTEM_WINDOW'}
com.android.server.vr.Vr2dDisplay.setVirtualDisplayProperties(Vr2dDisplayProperties)void :: {'android.permission.ACCESS_VR_MANAGER'}
com.android.server.vr.VrManagerInternal.setVr2dDisplayProperties(Vr2dDisplayProperties)void :: {'android.permission.ACCESS_VR_MANAGER'}
com.android.server.wifi.WifiConfigManager.checkAndUpdateLastConnectUid(int,int)boolean :: {'android.permission.NETWORK_SETTINGS'}
com.android.server.wm.WindowState.subtractInsets(Rect,Rect,Rect,Rect)void :: {'android.permission.INTERNAL_SYSTEM_WINDOW'}
com.android.server.wm.WindowToken.isFirstChildWindowGreaterThanSecond(WindowState,WindowState)boolean :: {'android.permission.MANAGE_APP_TOKENS'}
