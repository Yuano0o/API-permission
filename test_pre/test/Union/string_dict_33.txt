android.accessibilityservice.AccessibilityService.getFingerprintGestureController()FingerprintGestureController :: {'android.permission.USE_FINGERPRINT'}
android.accounts.AccountManager.finishSessionAsUser(Bundle,Activity,UserHandle,AccountManagerCallback<Bundle>,Handler)AccountManagerFuture<Bundle> :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.Activity.startActivityForResultAsUser(Intent,int,UserHandle)void :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.Activity.startActivityForResultAsUser(Intent,int,Bundle,UserHandle)void :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.Activity.startActivityForResultAsUser(Intent,String,int,Bundle,UserHandle)void :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.Activity.startActivityAsUser(Intent,Bundle,UserHandle)void :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.Activity.registerRemoteAnimations(RemoteAnimationDefinition)void :: {'android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS'}
android.app.Activity.unregisterRemoteAnimations()void :: {'android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS'}
android.app.ActivityManager.moveTaskToFront(int,int)void :: {'android.permission.REORDER_TASKS'}
android.app.ActivityManager.moveTaskToFront(int,int,Bundle)void :: {'android.permission.REORDER_TASKS'}
android.app.ActivityManager.clearApplicationUserData(String,IPackageDataObserver)boolean :: {'android.permission.CLEAR_APP_USER_DATA', 'android.permission.ACCESS_INSTANT_APPS'}
android.app.ActivityManager.getUidProcessState(int)int :: {'android.permission.PACKAGE_USAGE_STATS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.ActivityManager.getUidProcessCapabilities(int)int :: {'android.permission.PACKAGE_USAGE_STATS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.ActivityManager.getPackageImportance(String)int :: {'android.permission.PACKAGE_USAGE_STATS'}
android.app.ActivityManager.getUidImportance(int)int :: {'android.permission.PACKAGE_USAGE_STATS'}
android.app.ActivityManager.addOnUidImportanceListener(OnUidImportanceListener,int)void :: {'android.permission.PACKAGE_USAGE_STATS'}
android.app.ActivityManager.removeOnUidImportanceListener(OnUidImportanceListener)void :: {'android.permission.PACKAGE_USAGE_STATS'}
android.app.ActivityManager.killBackgroundProcesses(String)void :: {'android.permission.KILL_BACKGROUND_PROCESSES'}
android.app.ActivityManager.killUid(int,String)void :: {'android.permission.KILL_UID'}
android.app.ActivityManager.forceStopPackage(String)void :: {'android.permission.FORCE_STOP_PACKAGES'}
android.app.ActivityManager.getCurrentUser()int :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.ActivityManager.switchUser(UserHandle)boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.app.ActivityManager.getSwitchingFromUserMessage()String :: {'android.permission.MANAGE_USERS'}
android.app.ActivityManager.getSwitchingToUserMessage()String :: {'android.permission.MANAGE_USERS'}
android.app.ActivityManager.setStopUserOnSwitch(int)void :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS'}
android.app.ActivityManager.startProfile(UserHandle)boolean :: {'android.permission.MANAGE_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.ActivityManager.stopProfile(UserHandle)boolean :: {'android.permission.MANAGE_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.ActivityManager.updateMccMncConfiguration(String,String)boolean :: {'android.permission.CHANGE_CONFIGURATION'}
android.app.ActivityManager.stopUser(int,boolean)boolean :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.ActivityManager.dumpPackageState(FileDescriptor,String)void :: {'android.permission.DUMP'}
android.app.ActivityManager.setPersistentVrThread(int)void :: {'android.permission.RESTRICTED_VR_ACCESS'}
android.app.ActivityManager.scheduleApplicationInfoChanged(List<String>,int)void :: {'android.permission.CHANGE_CONFIGURATION'}
android.app.ActivityManager.isProfileForeground(UserHandle)boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.app.ActivityManager.killProcessesWhenImperceptible(int[],String)void :: {'android.permission.FORCE_STOP_PACKAGES'}
android.app.ActivityManager.addHomeVisibilityListener(Executor,HomeVisibilityListener)void :: {'android.permission.SET_ACTIVITY_WATCHER'}
android.app.ActivityManager.removeHomeVisibilityListener(HomeVisibilityListener)void :: {'android.permission.SET_ACTIVITY_WATCHER'}
android.app.ActivityManager.resetAppErrors()void :: {'android.permission.RESET_APP_ERRORS'}
android.app.ActivityManager.waitForBroadcastIdle()void :: {'android.permission.DUMP'}
android.app.ActivityManager.getBackgroundRestrictionExemptionReason(int)int :: {'android.permission.DEVICE_POWER'}
android.app.ActivityOptions.makeCustomTaskAnimation(Context,int,int,Handler,OnAnimationStartedListener,OnAnimationFinishedListener)ActivityOptions :: {'android.permission.START_TASKS_FROM_RECENTS'}
android.app.ActivityOptions.makeRemoteAnimation(RemoteAnimationAdapter)ActivityOptions :: {'android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS'}
android.app.ActivityOptions.makeRemoteAnimation(RemoteAnimationAdapter,RemoteTransition)ActivityOptions :: {'android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS'}
android.app.ActivityOptions.makeRemoteTransition(RemoteTransition)ActivityOptions :: {'android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS'}
android.app.ActivityOptions.setLaunchTaskId(int)void :: {'android.permission.START_TASKS_FROM_RECENTS'}
android.app.ActivityTaskManager.removeRootTasksInWindowingModes(int[])void :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.app.ActivityTaskManager.removeRootTasksWithActivityTypes(int[])void :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.app.ActivityTaskManager.removeAllVisibleRecentTasks()void :: {'android.permission.REMOVE_TASKS'}
android.app.ActivityTaskManager.startSystemLockTaskMode(int)void :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.app.ActivityTaskManager.stopSystemLockTaskMode()void :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.app.ActivityTaskManager.moveTaskToRootTask(int,int,boolean)void :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.app.ActivityTaskManager.resizeTask(int,Rect)void :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.app.ActivityTaskManager.clearLaunchParamsForPackages(List<String>)void :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.app.ActivityTaskManager.removeTask(int)boolean :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.app.ActivityTaskManager.detachNavigationBarFromApp(IBinder)void :: {'android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS'}
android.app.AlarmManager.setPrioritized(int,long,long,String,Executor,OnAlarmListener)void :: {'android.permission.SCHEDULE_PRIORITIZED_ALARM'}
android.app.AlarmManager.setExact(int,long,PendingIntent)void :: {'android.permission. conditional = true', 'android.permission.SCHEDULE_EXACT_ALARM'}
android.app.AlarmManager.setExact(int,long,String,OnAlarmListener,Handler)void :: {'android.permission. conditional = true', 'android.permission.SCHEDULE_EXACT_ALARM'}
android.app.AlarmManager.setAlarmClock(AlarmClockInfo,PendingIntent)void :: {'android.permission.SCHEDULE_EXACT_ALARM'}
android.app.AlarmManager.set(int,long,long,long,PendingIntent,WorkSource)void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.app.AlarmManager.set(int,long,long,long,OnAlarmListener,Handler,WorkSource)void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.app.AlarmManager.setExact(int,long,String,Executor,WorkSource,OnAlarmListener)void :: {'android.permission.UPDATE_DEVICE_STATS', 'android.permission.SCHEDULE_EXACT_ALARM'}
android.app.AlarmManager.setExactAndAllowWhileIdle(int,long,PendingIntent)void :: {'android.permission. conditional = true', 'android.permission.SCHEDULE_EXACT_ALARM'}
android.app.AlarmManager.setTime(long)void :: {'android.permission.SET_TIME'}
android.app.AlarmManager.setTimeZone(String)void :: {'android.permission.SET_TIME_ZONE'}
android.app.AppOpsManager.getPackagesForOps(String[])List<AppOpsManager.PackageOps> :: {'android.permission.GET_APP_OPS_STATS'}
android.app.AppOpsManager.getPackagesForOps(int[])List<AppOpsManager.PackageOps> :: {'android.permission.GET_APP_OPS_STATS'}
android.app.AppOpsManager.getOpsForPackage(int,String,int[])List<PackageOps> :: {'android.permission.GET_APP_OPS_STATS'}
android.app.AppOpsManager.getOpsForPackage(int,String,String...)List<AppOpsManager.PackageOps> :: {'android.permission.GET_APP_OPS_STATS'}
android.app.AppOpsManager.getHistoricalOps(HistoricalOpsRequest,Executor,Consumer<HistoricalOps>)void :: {'android.permission.GET_APP_OPS_STATS'}
android.app.AppOpsManager.getHistoricalOpsFromDiskRaw(HistoricalOpsRequest,Executor,Consumer<HistoricalOps>)void :: {'android.permission.MANAGE_APPOPS'}
android.app.AppOpsManager.reloadNonHistoricalState()void :: {'android.permission.MANAGE_APPOPS'}
android.app.AppOpsManager.setUidMode(int,int,int)void :: {'android.permission.MANAGE_APP_OPS_MODES'}
android.app.AppOpsManager.setUidMode(String,int,int)void :: {'android.permission.MANAGE_APP_OPS_MODES'}
android.app.AppOpsManager.setMode(int,int,String,int)void :: {'android.permission.MANAGE_APP_OPS_MODES'}
android.app.AppOpsManager.setMode(String,int,String,int)void :: {'android.permission.MANAGE_APP_OPS_MODES'}
android.app.AppOpsManager.setRestriction(int,int,int,String[])void :: {'android.permission.MANAGE_APP_OPS_MODES'}
android.app.AppOpsManager.resetAllModes()void :: {'android.permission.R', 'android.permission. trackingBug = 170729553'}
android.app.AppOpsManager.startWatchingMode(int,String,OnOpChangedListener)void :: {'android.permission. conditional=true', 'android.permission.WATCH_APPOPS'}
android.app.AppOpsManager.startWatchingMode(int,String,int,OnOpChangedListener)void :: {'android.permission. conditional=true', 'android.permission.WATCH_APPOPS'}
android.app.AppOpsManager.startWatchingActive(String[],Executor,OnOpActiveChangedListener)void :: {'android.permission. conditional=true', 'android.permission.WATCH_APPOPS'}
android.app.AppOpsManager.startWatchingStarted(int[],OnOpStartedListener)void :: {'android.permission. conditional=true', 'android.permission.WATCH_APPOPS'}
android.app.AppOpsManager.startWatchingNoted(int[],OnOpNotedListener)void :: {'android.permission. conditional=true', 'android.permission.WATCH_APPOPS'}
android.app.AppOpsManager.resetPackageOpsNoHistory(String)void :: {'android.permission.MANAGE_APPOPS'}
android.app.AppOpsManager.isOperationActive(int,int,String)boolean :: {'android.permission. conditional=true', 'android.permission.WATCH_APPOPS'}
android.app.AppOpsManager.setHistoryParameters(int,long,int)void :: {'android.permission.MANAGE_APPOPS', 'android.permission.WATCH_APPOPS'}
android.app.AppOpsManager.offsetHistory(long)void :: {'android.permission.MANAGE_APPOPS'}
android.app.AppOpsManager.addHistoricalOps(HistoricalOps)void :: {'android.permission.MANAGE_APPOPS'}
android.app.AppOpsManager.resetHistoryParameters()void :: {'android.permission.MANAGE_APPOPS'}
android.app.AppOpsManager.clearHistory()void :: {'android.permission.MANAGE_APPOPS'}
android.app.AppOpsManager.rebootHistory(long)void :: {'android.permission.MANAGE_APPOPS'}
android.app.AppOpsManager.collectRuntimeAppOpAccessMessage()RuntimeAppOpAccessMessage :: {'android.permission.GET_APP_OPS_STATS'}
android.app.BroadcastOptions.setTemporaryAppWhitelistDuration(long)void :: {'android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST', 'android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND', 'android.permission.START_ACTIVITIES_FROM_BACKGROUND'}
android.app.BroadcastOptions.setTemporaryAppAllowlist(long,int,int,String)void :: {'android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST', 'android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND', 'android.permission.START_ACTIVITIES_FROM_BACKGROUND'}
android.app.BroadcastOptions.setBackgroundActivityStartsAllowed(boolean)void :: {'android.permission.START_ACTIVITIES_FROM_BACKGROUND'}
android.app.DownloadManager.onMediaStoreDownloadsDeleted(LongSparseArray<String>)void :: {'android.permission.WRITE_MEDIA_STORAGE'}
android.app.DreamManager.setScreensaverEnabled(boolean)void :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.app.DreamManager.startDream(ComponentName)void :: {'android.permission.WRITE_DREAM_STATE'}
android.app.DreamManager.stopDream()void :: {'android.permission.WRITE_DREAM_STATE'}
android.app.DreamManager.setActiveDream(ComponentName)void :: {'android.permission.WRITE_DREAM_STATE'}
android.app.DreamManager.setDreamOverlay(ComponentName)void :: {'android.permission.WRITE_DREAM_STATE'}
android.app.DreamManager.isDreaming()boolean :: {'android.permission.READ_DREAM_STATE'}
android.app.GameManager.getGameMode(String)int :: {'android.permission.MANAGE_GAME_MODE'}
android.app.GameManager.getGameModeInfo(String)GameModeInfo :: {'android.permission.MANAGE_GAME_MODE'}
android.app.GameManager.setGameMode(String,int)void :: {'android.permission.MANAGE_GAME_MODE'}
android.app.GameManager.getAvailableGameModes(String)int[] :: {'android.permission.MANAGE_GAME_MODE'}
android.app.GameManager.isAngleEnabled(String)boolean :: {'android.permission.MANAGE_GAME_MODE'}
android.app.GameManager.notifyGraphicsEnvironmentSetup()void :: {'android.permission.MANAGE_GAME_MODE'}
android.app.KeyguardManager.setPrivateNotificationsAllowed(boolean)void :: {'android.permission.CONTROL_KEYGUARD_SECURE_NOTIFICATIONS'}
android.app.KeyguardManager.getPrivateNotificationsAllowed()boolean :: {'android.permission.CONTROL_KEYGUARD_SECURE_NOTIFICATIONS'}
android.app.KeyguardManager.disableKeyguard()void :: {'android.permission.DISABLE_KEYGUARD'}
android.app.KeyguardManager.reenableKeyguard()void :: {'android.permission.DISABLE_KEYGUARD'}
android.app.KeyguardManager.requestDismissKeyguard(Activity,CharSequence,KeyguardDismissCallback)void :: {'android.permission.SHOW_KEYGUARD_MESSAGE'}
android.app.KeyguardManager.exitKeyguardSecurely(OnKeyguardExitResult)void :: {'android.permission.DISABLE_KEYGUARD'}
android.app.KeyguardManager.isValidLockPasswordComplexity(int,byte[],int)boolean :: {'android.permission.SET_INITIAL_LOCK'}
android.app.KeyguardManager.getMinLockLength(boolean,int)int :: {'android.permission.SET_INITIAL_LOCK'}
android.app.KeyguardManager.setLock(int,byte[],int)boolean :: {'android.permission.SET_INITIAL_LOCK'}
android.app.KeyguardManager.addWeakEscrowToken(byte[],UserHandle,Executor,WeakEscrowTokenActivatedListener)long :: {'android.permission.MANAGE_WEAK_ESCROW_TOKEN'}
android.app.KeyguardManager.removeWeakEscrowToken(long,UserHandle)boolean :: {'android.permission.MANAGE_WEAK_ESCROW_TOKEN'}
android.app.KeyguardManager.isWeakEscrowTokenActive(long,UserHandle)boolean :: {'android.permission.MANAGE_WEAK_ESCROW_TOKEN'}
android.app.KeyguardManager.isWeakEscrowTokenValid(long,byte[],UserHandle)boolean :: {'android.permission.MANAGE_WEAK_ESCROW_TOKEN'}
android.app.KeyguardManager.registerWeakEscrowTokenRemovedListener(Executor,WeakEscrowTokenRemovedListener)boolean :: {'android.permission.MANAGE_WEAK_ESCROW_TOKEN'}
android.app.KeyguardManager.unregisterWeakEscrowTokenRemovedListener(WeakEscrowTokenRemovedListener)boolean :: {'android.permission.MANAGE_WEAK_ESCROW_TOKEN'}
android.app.KeyguardManager.setLock(int,byte[],int,byte[])boolean :: {'android.permission.ACCESS_KEYGUARD_SECURE_STORAGE', 'android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS'}
android.app.KeyguardManager.checkLock(int,byte[])boolean :: {'android.permission.ACCESS_KEYGUARD_SECURE_STORAGE', 'android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS'}
android.app.KeyguardManager.addKeyguardLockedStateListener(Executor,KeyguardLockedStateListener)void :: {'android.permission.SUBSCRIBE_TO_KEYGUARD_LOCKED_STATE'}
android.app.KeyguardManager.removeKeyguardLockedStateListener(KeyguardLockedStateListener)void :: {'android.permission.SUBSCRIBE_TO_KEYGUARD_LOCKED_STATE'}
android.app.LocaleManager.setApplicationLocales(String,LocaleList)void :: {'android.permission.CHANGE_CONFIGURATION'}
android.app.LocaleManager.getApplicationLocales(String)LocaleList :: {'android.permission. conditional = true', 'android.permission.READ_APP_SPECIFIC_LOCALES'}
android.app.Notification.setRemotePlaybackInfo(CharSequence,int,PendingIntent)MediaStyle :: {'android.permission.MEDIA_CONTENT_CONTROL'}
android.app.NotificationManager.setNotificationListenerAccessGranted(ComponentName,boolean,boolean)void :: {'android.permission.MANAGE_NOTIFICATION_LISTENERS'}
android.app.NotificationManager.getEnabledNotificationListeners()List<ComponentName> :: {'android.permission.MANAGE_NOTIFICATION_LISTENERS'}
android.app.NotificationManager.setToastRateLimitingEnabled(boolean)void :: {'android.permission.MANAGE_TOAST_RATE_LIMITING'}
android.app.PendingIntent.queryIntentComponents(int)List<ResolveInfo> :: {'android.permission.MODULE_LIBRARIES'}
android.app.PendingIntent.intentFilterEquals(PendingIntent)boolean :: {'android.permission.GET_INTENT_SENDER_INTENT'}
android.app.StatusBarManager.collapsePanels()void :: {'android.permission.Intent#ACTION_CLOSE_SYSTEM_DIALOGS'}
android.app.StatusBarManager.togglePanel()void :: {'android.permission.STATUS_BAR'}
android.app.StatusBarManager.handleSystemKey(int)void :: {'android.permission.STATUS_BAR'}
android.app.StatusBarManager.setDisabledForSetup(boolean)void :: {'android.permission.STATUS_BAR'}
android.app.StatusBarManager.setExpansionDisabledForSimNetworkLock(boolean)void :: {'android.permission.STATUS_BAR'}
android.app.StatusBarManager.getDisableInfo()DisableInfo :: {'android.permission.STATUS_BAR'}
android.app.StatusBarManager.setNavBarMode(int)void :: {'android.permission.STATUS_BAR'}
android.app.StatusBarManager.getNavBarMode()int :: {'android.permission.STATUS_BAR'}
android.app.StatusBarManager.updateMediaTapToTransferSenderDisplay(int,MediaRoute2Info,Executor,Runnable)void :: {'android.permission.MEDIA_CONTENT_CONTROL'}
android.app.StatusBarManager.updateMediaTapToTransferReceiverDisplay(int,MediaRoute2Info,Icon,CharSequence)void :: {'android.permission.MEDIA_CONTENT_CONTROL'}
android.app.StatusBarManager.registerNearbyMediaDevicesProvider(NearbyMediaDevicesProvider)void :: {'android.permission.MEDIA_CONTENT_CONTROL'}
android.app.StatusBarManager.unregisterNearbyMediaDevicesProvider(NearbyMediaDevicesProvider)void :: {'android.permission.MEDIA_CONTENT_CONTROL'}
android.app.StatusBarManager.useMediaSessionActionsForApp(String,UserHandle)boolean :: {'android.permission.READ_COMPAT_CHANGE_CONFIG', 'android.permission.LOG_COMPAT_CHANGE'}
android.app.UiModeManager.e.rethrowFromSystemServer(){ :: {'android.permission.priority', 'android.permission.enableCarMode(flags', 'android.permission.getOpPackageName());'}
android.app.UiModeManager.setNightModeCustomType(int)void :: {'android.permission.MODIFY_DAY_NIGHT_MODE'}
android.app.UiModeManager.getNightModeCustomType()int :: {'android.permission.MODIFY_DAY_NIGHT_MODE'}
android.app.UiModeManager.setNightModeActivatedForCustomMode(int,boolean)boolean :: {'android.permission.MODIFY_DAY_NIGHT_MODE'}
android.app.UiModeManager.setNightModeActivated(boolean)boolean :: {'android.permission.MODIFY_DAY_NIGHT_MODE'}
android.app.UiModeManager.requestProjection(int)boolean :: {'android.permission.TOGGLE_AUTOMOTIVE_PROJECTION', 'android.permission.\n            conditional = true'}
android.app.UiModeManager.releaseProjection(int)boolean :: {'android.permission.TOGGLE_AUTOMOTIVE_PROJECTION', 'android.permission.\n            conditional = true'}
android.app.UiModeManager.getProjectingPackages(int)Set<String> :: {'android.permission.READ_PROJECTION_STATE'}
android.app.UiModeManager.getActiveProjectionTypes()int :: {'android.permission.READ_PROJECTION_STATE'}
android.app.UiModeManager.addOnProjectionStateChangedListener(int,Executor,OnProjectionStateChangedListener)void :: {'android.permission.READ_PROJECTION_STATE'}
android.app.UiModeManager.removeOnProjectionStateChangedListener(OnProjectionStateChangedListener)void :: {'android.permission.READ_PROJECTION_STATE'}
android.app.VrManager.registerVrStateCallback(Executor,VrStateCallback)void :: {'android.permission.RESTRICTED_VR_ACCESS', 'android.permission.ACCESS_VR_STATE'}
android.app.VrManager.unregisterVrStateCallback(VrStateCallback)void :: {'android.permission.RESTRICTED_VR_ACCESS', 'android.permission.ACCESS_VR_STATE'}
android.app.VrManager.isVrModeEnabled()boolean :: {'android.permission.RESTRICTED_VR_ACCESS', 'android.permission.ACCESS_VR_STATE'}
android.app.VrManager.isPersistentVrModeEnabled()boolean :: {'android.permission.RESTRICTED_VR_ACCESS', 'android.permission.ACCESS_VR_STATE'}
android.app.VrManager.setPersistentVrModeEnabled(boolean)void :: {'android.permission.RESTRICTED_VR_ACCESS'}
android.app.VrManager.setVr2dDisplayProperties(Vr2dDisplayProperties)void :: {'android.permission.RESTRICTED_VR_ACCESS'}
android.app.VrManager.setAndBindVrCompositor(ComponentName)void :: {'android.permission.RESTRICTED_VR_ACCESS'}
android.app.VrManager.setStandbyEnabled(boolean)void :: {'android.permission.ACCESS_VR_MANAGER'}
android.app.VrManager.setVrInputMethod(ComponentName)void :: {'android.permission.RESTRICTED_VR_ACCESS'}
android.app.VrManager.getVr2dDisplayId()int :: {'android.permission.RESTRICTED_VR_ACCESS'}
android.app.WallpaperManager.getDrawable()Drawable :: {'android.permission.READ_EXTERNAL_STORAGE'}
android.app.WallpaperManager.getFastDrawable()Drawable :: {'android.permission.READ_EXTERNAL_STORAGE'}
android.app.WallpaperManager.peekFastDrawable()Drawable :: {'android.permission.READ_EXTERNAL_STORAGE'}
android.app.WallpaperManager.wallpaperSupportsWcg(int)boolean :: {'android.permission.READ_EXTERNAL_STORAGE'}
android.app.WallpaperManager.getWallpaperFile(int)ParcelFileDescriptor :: {'android.permission.READ_EXTERNAL_STORAGE'}
android.app.WallpaperManager.setResource(int)void :: {'android.permission.SET_WALLPAPER'}
android.app.WallpaperManager.setResource(int,int)int :: {'android.permission.SET_WALLPAPER'}
android.app.WallpaperManager.setBitmap(Bitmap)void :: {'android.permission.SET_WALLPAPER'}
android.app.WallpaperManager.setBitmap(Bitmap,Rect,boolean)int :: {'android.permission.SET_WALLPAPER'}
android.app.WallpaperManager.setBitmap(Bitmap,Rect,boolean,int)int :: {'android.permission.SET_WALLPAPER'}
android.app.WallpaperManager.setStream(InputStream)void :: {'android.permission.INTERACT_ACROSS_USERS_FULL', 'android.permission.SET_WALLPAPER'}
android.app.WallpaperManager.setStream(InputStream,Rect,boolean)int :: {'android.permission.SET_WALLPAPER'}
android.app.WallpaperManager.setStream(InputStream,Rect,boolean,int)int :: {'android.permission.SET_WALLPAPER'}
android.app.WallpaperManager.setDisplayPadding(Rect)void :: {'android.permission.SET_WALLPAPER_HINTS'}
android.app.WallpaperManager.clearWallpaper()void :: {'android.permission.SET_WALLPAPER'}
android.app.WallpaperManager.clearWallpaper(int,int)void :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.WallpaperManager.setWallpaperComponent(ComponentName)boolean :: {'android.permission.SET_WALLPAPER_COMPONENT'}
android.app.WallpaperManager.Log.w(TAG,WallpaperService){ :: {'android.permission.mService == null', 'android.permission.SET_WALLPAPER_DIM_AMOUNT)\n    public void setWallpaperDimAmount(@FloatRange (from = 0f'}
android.app.WallpaperManager.getWallpaperDimAmount()float :: {'android.permission.SET_WALLPAPER_DIM_AMOUNT'}
android.app.WallpaperManager.setWallpaperComponent(ComponentName,int)boolean :: {'android.permission.SET_WALLPAPER_COMPONENT'}
android.app.WallpaperManager.clear()void :: {'android.permission.SET_WALLPAPER'}
android.app.WallpaperManager.clear(int)void :: {'android.permission.SET_WALLPAPER'}
android.app.admin.DevicePolicyManager.acknowledgeNewUserDisclaimer()void :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS'}
android.app.admin.DevicePolicyManager.isNewUserDisclaimerAcknowledged()boolean :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS'}
android.app.admin.DevicePolicyManager.packageHasActiveAdmins(String)boolean :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.admin.DevicePolicyManager.getPasswordComplexity()int :: {'android.permission.REQUEST_PASSWORD_COMPLEXITY'}
android.app.admin.DevicePolicyManager.sendLostModeLocationUpdate(Executor,Consumer<Boolean>)void :: {'android.permission.TRIGGER_LOST_MODE'}
android.app.admin.DevicePolicyManager.getNearbyNotificationStreamingPolicy()int :: {'android.permission.READ_NEARBY_STREAMING_POLICY', 'android.permission.\n            conditional = true'}
android.app.admin.DevicePolicyManager.getNearbyAppStreamingPolicy()int :: {'android.permission.READ_NEARBY_STREAMING_POLICY', 'android.permission.\n            conditional = true'}
android.app.admin.DevicePolicyManager.setActiveAdmin(ComponentName,boolean,int)void :: {'android.permission.MANAGE_DEVICE_ADMINS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.admin.DevicePolicyManager.setDeviceOwner(ComponentName,String,int)boolean :: {'android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS'}
android.app.admin.DevicePolicyManager.setDeviceOwnerOnly(ComponentName,String,int)boolean :: {'android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS'}
android.app.admin.DevicePolicyManager.getDeviceOwnerComponentOnAnyUser()ComponentName :: {'android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS', 'android.permission.MANAGE_USERS'}
android.app.admin.DevicePolicyManager.getDeviceOwnerUser()UserHandle :: {'android.permission.MANAGE_USERS'}
android.app.admin.DevicePolicyManager.getDeviceOwner()String :: {'android.permission.MANAGE_USERS'}
android.app.admin.DevicePolicyManager.getDeviceOwnerNameOnAnyUser()String :: {'android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS', 'android.permission.MANAGE_USERS'}
android.app.admin.DevicePolicyManager.setActiveProfileOwner(ComponentName,String)boolean :: {'android.permission.MANAGE_DEVICE_ADMINS'}
android.app.admin.DevicePolicyManager.getProfileOwnerAsUser(UserHandle)ComponentName :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.\n            conditional = true'}
android.app.admin.DevicePolicyManager.getProfileOwnerNameAsUser(int)String :: {'android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS', 'android.permission.MANAGE_USERS'}
android.app.admin.DevicePolicyManager.getBluetoothContactSharingDisabled(UserHandle)boolean :: {'android.permission.INTERACT_ACROSS_USERS'}
android.app.admin.DevicePolicyManager.getPermittedAccessibilityServices(int)List<String> :: {'android.permission.MANAGE_USERS', 'android.permission.QUERY_ADMIN_POLICY'}
android.app.admin.DevicePolicyManager.getPermittedInputMethodsForCurrentUser()List<String> :: {'android.permission.MANAGE_USERS', 'android.permission.QUERY_ADMIN_POLICY'}
android.app.admin.DevicePolicyManager.getPermittedInputMethods()List<String> :: {'android.permission.MANAGE_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.admin.DevicePolicyManager.logoutUser()int :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS'}
android.app.admin.DevicePolicyManager.getLogoutUser()UserHandle :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS'}
android.app.admin.DevicePolicyManager.clearSystemUpdatePolicyFreezePeriodRecord()void :: {'android.permission.CLEAR_FREEZE_PERIOD'}
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long)void :: {'android.permission.NOTIFY_PENDING_SYSTEM_UPDATE'}
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long,boolean)void :: {'android.permission.NOTIFY_PENDING_SYSTEM_UPDATE'}
android.app.admin.DevicePolicyManager.checkProvisioningPrecondition(String,String)int :: {'android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS'}
android.app.admin.DevicePolicyManager.forceNetworkLogs()long :: {'android.permission.FORCE_DEVICE_POLICY_MANAGER_LOGS'}
android.app.admin.DevicePolicyManager.forceSecurityLogs()long :: {'android.permission.FORCE_DEVICE_POLICY_MANAGER_LOGS'}
android.app.admin.DevicePolicyManager.getUserProvisioningState()int :: {'android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS', 'android.permission.MANAGE_USERS'}
android.app.admin.DevicePolicyManager.setUserProvisioningState(int,int)void :: {'android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS'}
android.app.admin.DevicePolicyManager.setUserProvisioningState(int,UserHandle)void :: {'android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS'}
android.app.admin.DevicePolicyManager.forceRemoveActiveAdmin(ComponentName,int)void :: {'android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS'}
android.app.admin.DevicePolicyManager.isDeviceProvisioned()boolean :: {'android.permission.MANAGE_USERS'}
android.app.admin.DevicePolicyManager.setDeviceProvisioningConfigApplied()void :: {'android.permission.MANAGE_USERS'}
android.app.admin.DevicePolicyManager.isDeviceProvisioningConfigApplied()boolean :: {'android.permission.MANAGE_USERS'}
android.app.admin.DevicePolicyManager.setProfileOwnerCanAccessDeviceIds(ComponentName)void :: {'android.permission.\n            conditional = true', 'android.permission.GRANT_PROFILE_OWNER_DEVICE_IDS_ACCESS'}
android.app.admin.DevicePolicyManager.setProfileOwnerOnOrganizationOwnedDevice(ComponentName,boolean)void :: {'android.permission.MARK_DEVICE_ORGANIZATION_OWNED', 'android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS'}
android.app.admin.DevicePolicyManager.isPackageAllowedToAccessCalendar(String)boolean :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.admin.DevicePolicyManager.getCrossProfileCalendarPackages()Set<String> :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.admin.DevicePolicyManager.getAllCrossProfilePackages()Set<String> :: {'android.permission.INTERACT_ACROSS_PROFILES', 'android.permission.INTERACT_ACROSS_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.admin.DevicePolicyManager.isManagedKiosk()boolean :: {'android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS', 'android.permission.MANAGE_USERS'}
android.app.admin.DevicePolicyManager.isUnattendedManagedKiosk()boolean :: {'android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS', 'android.permission.MANAGE_USERS'}
android.app.admin.DevicePolicyManager.setNextOperationSafety(int,int)void :: {'android.permission.MANAGE_DEVICE_ADMINS'}
android.app.admin.DevicePolicyManager.clearOrganizationId()void :: {'android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS'}
android.app.admin.DevicePolicyManager.createAndProvisionManagedProfile(ManagedProfileProvisioningParams)UserHandle :: {'android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS'}
android.app.admin.DevicePolicyManager.finalizeWorkProfileProvisioning(UserHandle,Account)void :: {'android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS'}
android.app.admin.DevicePolicyManager.provisionFullyManagedDevice(FullyManagedDeviceProvisioningParams)void :: {'android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS', 'android.permission.PROVISION_DEMO_DEVICE'}
android.app.admin.DevicePolicyManager.resetDefaultCrossProfileIntentFilters(int)void :: {'android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS', 'android.permission.PROVISION_DEMO_DEVICE'}
android.app.admin.DevicePolicyManager.getPolicyExemptApps()Set<String> :: {'android.permission.MANAGE_DEVICE_ADMINS'}
android.app.admin.DevicePolicyManager.isDpcDownloaded()boolean :: {'android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS'}
android.app.admin.DevicePolicyManager.setDpcDownloaded(boolean)void :: {'android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS'}
android.app.admin.DevicePolicyManager.getPolicyManagedProfiles(UserHandle)List<UserHandle> :: {'android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS'}
android.app.admin.DevicePolicyManager.shouldAllowBypassingDevicePolicyManagementRoleQualification()boolean :: {'android.permission.MANAGE_ROLE_HOLDERS'}
android.app.admin.DevicePolicyResourcesManager.setDrawables(Set<DevicePolicyDrawableResource>)void :: {'android.permission.UPDATE_DEVICE_MANAGEMENT_RESOURCES'}
android.app.admin.DevicePolicyResourcesManager.resetDrawables(Set<String>)void :: {'android.permission.UPDATE_DEVICE_MANAGEMENT_RESOURCES'}
android.app.admin.DevicePolicyResourcesManager.setStrings(Set<DevicePolicyStringResource>)void :: {'android.permission.UPDATE_DEVICE_MANAGEMENT_RESOURCES'}
android.app.admin.DevicePolicyResourcesManager.resetStrings(Set<String>)void :: {'android.permission.UPDATE_DEVICE_MANAGEMENT_RESOURCES'}
android.app.admin.SecurityLog.writeEvent(int,Object...)int :: {'android.permission.WRITE_SECURITY_LOG'}
android.app.ambientcontext.AmbientContextManager.queryAmbientContextServiceStatus(Set<Integer>,Executor,Consumer<Integer>)void :: {'android.permission.ACCESS_AMBIENT_CONTEXT_EVENT'}
android.app.ambientcontext.AmbientContextManager.startConsentActivity(Set<Integer>)void :: {'android.permission.ACCESS_AMBIENT_CONTEXT_EVENT'}
android.app.ambientcontext.AmbientContextManager.registerObserver(AmbientContextEventRequest,PendingIntent,Executor,Consumer<Integer>)void :: {'android.permission.ACCESS_AMBIENT_CONTEXT_EVENT'}
android.app.ambientcontext.AmbientContextManager.unregisterObserver()void :: {'android.permission.ACCESS_AMBIENT_CONTEXT_EVENT'}
android.app.backup.BackupManager.beginRestoreSession()RestoreSession :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.setBackupEnabled(boolean)void :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.isBackupEnabled()boolean :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.isBackupServiceActive(UserHandle)boolean :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.setAutoRestore(boolean)void :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.getCurrentTransport()String :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.getCurrentTransportComponent()ComponentName :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.listAllTransports()String[] :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.updateTransportAttributes(ComponentName,String,Intent,String,Intent,String)void :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.updateTransportAttributes(ComponentName,String,Intent,String,Intent,CharSequence)void :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.selectBackupTransport(String)String :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.selectBackupTransport(ComponentName,SelectBackupTransportCallback)void :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.backupNow()void :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.getAvailableRestoreToken(String)long :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.isAppEligibleForBackup(String)boolean :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.requestBackup(String[],BackupObserver)int :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.requestBackup(String[],BackupObserver,BackupManagerMonitor,int)int :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.cancelBackups()void :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.setAncestralSerialNumber(long)void :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.getConfigurationIntent(String)Intent :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.getDestinationString(String)String :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.getDataManagementIntent(String)Intent :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.getDataManagementLabel(String)String :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.getDataManagementIntentLabel(String)CharSequence :: {'android.permission.BACKUP'}
android.app.backup.BackupManager.excludeKeysFromRestore(String,List<String>)void :: {'android.permission.BACKUP'}
android.app.cloudsearch.CloudSearchManager.search(SearchRequest,Executor,CallBack)void :: {'android.permission.MANAGE_CLOUDSEARCH'}
android.app.compat.CompatChanges.isChangeEnabled(long,String,UserHandle)boolean :: {'android.permission.READ_COMPAT_CHANGE_CONFIG', 'android.permission.LOG_COMPAT_CHANGE'}
android.app.compat.CompatChanges.isChangeEnabled(long,int)boolean :: {'android.permission.READ_COMPAT_CHANGE_CONFIG', 'android.permission.LOG_COMPAT_CHANGE'}
android.app.compat.CompatChanges.putAllPackageOverrides(Map<String,Map<Long,PackageOverride>>)void :: {'android.permission.OVERRIDE_COMPAT_CHANGE_CONFIG_ON_RELEASE_BUILD'}
android.app.compat.CompatChanges.putPackageOverrides(String,Map<Long,PackageOverride>)void :: {'android.permission.OVERRIDE_COMPAT_CHANGE_CONFIG_ON_RELEASE_BUILD'}
android.app.compat.CompatChanges.removeAllPackageOverrides(Map<String,Set<Long>>)void :: {'android.permission.OVERRIDE_COMPAT_CHANGE_CONFIG_ON_RELEASE_BUILD'}
android.app.compat.CompatChanges.removePackageOverrides(String,Set<Long>)void :: {'android.permission.OVERRIDE_COMPAT_CHANGE_CONFIG_ON_RELEASE_BUILD'}
android.app.contentsuggestions.ContentSuggestionsManager.resetTemporaryService(int)void :: {'android.permission.MANAGE_CONTENT_SUGGESTIONS'}
android.app.contentsuggestions.ContentSuggestionsManager.setTemporaryService(int,String,int)void :: {'android.permission.MANAGE_CONTENT_SUGGESTIONS'}
android.app.contentsuggestions.ContentSuggestionsManager.setDefaultServiceEnabled(int,boolean)void :: {'android.permission.MANAGE_CONTENT_SUGGESTIONS'}
android.app.job.JobInfo.setPersisted(boolean)Builder :: {'android.permission.RECEIVE_BOOT_COMPLETED'}
android.app.job.JobScheduler.scheduleAsPackage(JobInfo,String,int,String)int :: {'android.permission.UPDATE_DEVICE_STATS'}
android.app.people.PeopleManager.isConversation(String,String)boolean :: {'android.permission.READ_PEOPLE_DATA'}
android.app.time.TimeManager.getTimeZoneCapabilitiesAndConfig()TimeZoneCapabilitiesAndConfig :: {'android.permission.MANAGE_TIME_AND_ZONE_DETECTION'}
android.app.time.TimeManager.getTimeCapabilitiesAndConfig()TimeCapabilitiesAndConfig :: {'android.permission.MANAGE_TIME_AND_ZONE_DETECTION'}
android.app.time.TimeManager.updateTimeConfiguration(TimeConfiguration)boolean :: {'android.permission.MANAGE_TIME_AND_ZONE_DETECTION'}
android.app.time.TimeManager.updateTimeZoneConfiguration(TimeZoneConfiguration)boolean :: {'android.permission.MANAGE_TIME_AND_ZONE_DETECTION'}
android.app.time.TimeManager.addTimeZoneDetectorListener(Executor,TimeZoneDetectorListener)void :: {'android.permission.MANAGE_TIME_AND_ZONE_DETECTION'}
android.app.time.TimeManager.removeTimeZoneDetectorListener(TimeZoneDetectorListener)void :: {'android.permission.MANAGE_TIME_AND_ZONE_DETECTION'}
android.app.time.TimeManager.suggestExternalTime(ExternalTimeSuggestion)void :: {'android.permission.SUGGEST_EXTERNAL_TIME'}
android.app.timedetector.TimeDetector.suggestTelephonyTime(TelephonyTimeSuggestion)void :: {'android.permission.SUGGEST_TELEPHONY_TIME_AND_ZONE'}
android.app.timedetector.TimeDetector.suggestManualTime(ManualTimeSuggestion)boolean :: {'android.permission.SUGGEST_MANUAL_TIME_AND_ZONE'}
android.app.timedetector.TimeDetector.suggestNetworkTime(NetworkTimeSuggestion)void :: {'android.permission.SET_TIME'}
android.app.timedetector.TimeDetector.suggestGnssTime(GnssTimeSuggestion)void :: {'android.permission.SET_TIME'}
android.app.timezonedetector.TimeZoneDetector.suggestManualTimeZone(ManualTimeZoneSuggestion)boolean :: {'android.permission.SUGGEST_MANUAL_TIME_AND_ZONE'}
android.app.timezonedetector.TimeZoneDetector.suggestTelephonyTimeZone(TelephonyTimeZoneSuggestion)void :: {'android.permission.SUGGEST_TELEPHONY_TIME_AND_ZONE'}
android.app.trust.TrustManager.setDeviceLockedForUser(int,boolean)void :: {'android.permission.ACCESS_KEYGUARD_SECURE_STORAGE'}
android.app.trust.TrustManager.isTrustUsuallyManaged(int)boolean :: {'android.permission.TRUST_LISTENER'}
android.app.trust.TrustManager.unlockedByBiometricForUser(int,BiometricSourceType)void :: {'android.permission.ACCESS_KEYGUARD_SECURE_STORAGE'}
android.app.trust.TrustManager.clearAllBiometricRecognized(BiometricSourceType,int)void :: {'android.permission.ACCESS_KEYGUARD_SECURE_STORAGE'}
android.app.usage.StorageStatsManager.queryCratesForUser(UUID,UserHandle)Collection<CrateInfo> :: {'android.permission.MANAGE_CRATES'}
android.app.usage.UsageStatsManager.getAppStandbyBucket(String)int :: {'android.permission.PACKAGE_USAGE_STATS'}
android.app.usage.UsageStatsManager.setAppStandbyBucket(String,int)void :: {'android.permission.CHANGE_APP_IDLE_STATE'}
android.app.usage.UsageStatsManager.getAppStandbyBuckets()Map<String, :: {'android.permission.PACKAGE_USAGE_STATS'}
android.app.usage.UsageStatsManager.setAppStandbyBuckets(Map<String,Integer>)void :: {'android.permission.CHANGE_APP_IDLE_STATE'}
android.app.usage.UsageStatsManager.getAppMinStandbyBucket(String)int :: {'android.permission.PACKAGE_USAGE_STATS'}
android.app.usage.UsageStatsManager.setEstimatedLaunchTimeMillis(String,long)void :: {'android.permission.CHANGE_APP_LAUNCH_TIME_ESTIMATE'}
android.app.usage.UsageStatsManager.setEstimatedLaunchTimesMillis(Map<String,Long>)void :: {'android.permission.CHANGE_APP_LAUNCH_TIME_ESTIMATE'}
android.app.usage.UsageStatsManager.registerAppUsageObserver(int,String[],long,TimeUnit,PendingIntent)void :: {'android.permission.OBSERVE_APP_USAGE'}
android.app.usage.UsageStatsManager.unregisterAppUsageObserver(int)void :: {'android.permission.OBSERVE_APP_USAGE'}
android.app.usage.UsageStatsManager.registerUsageSessionObserver(int,String[],Duration,Duration,PendingIntent,PendingIntent)void :: {'android.permission.OBSERVE_APP_USAGE'}
android.app.usage.UsageStatsManager.unregisterUsageSessionObserver(int)void :: {'android.permission.OBSERVE_APP_USAGE'}
android.app.usage.UsageStatsManager.registerAppUsageLimitObserver(int,String[],Duration,Duration,PendingIntent)void :: {'android.permission.SUSPEND_APPS', 'android.permission.OBSERVE_APP_USAGE'}
android.app.usage.UsageStatsManager.unregisterAppUsageLimitObserver(int)void :: {'android.permission.SUSPEND_APPS', 'android.permission.OBSERVE_APP_USAGE'}
android.app.usage.UsageStatsManager.whitelistAppTemporarily(String,long,UserHandle)void :: {'android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST'}
android.app.usage.UsageStatsManager.onCarrierPrivilegedAppsChanged()void :: {'android.permission.BIND_CARRIER_SERVICES'}
android.app.usage.UsageStatsManager.getLastTimeAnyComponentUsed(String)long :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.PACKAGE_USAGE_STATS'}
android.app.usage.UsageStatsManager.mService.queryBroadcastResponseStats(packageName,id,mContext.getOpPackageName)long :: {'android.permission.ACCESS_BROADCAST_RESPONSE_STATS)\n    @UserHandleAware\n    @NonNull\n    public List<BroadcastResponseStats> queryBroadcastResponseStats(\n            @Nullable String packageName', 'android.permission. @IntRange(from = 0'}
android.app.usage.UsageStatsManager.mService.clearBroadcastResponseStats(packageName,id,mContext.getOpPackageName)long :: {'android.permission.\n            @IntRange(from = 0', 'android.permission.ACCESS_BROADCAST_RESPONSE_STATS)\n    @UserHandleAware\n    public void clearBroadcastResponseStats(@Nullable String packageName'}
android.app.usage.UsageStatsManager.clearBroadcastEvents()void :: {'android.permission.ACCESS_BROADCAST_RESPONSE_STATS'}
android.app.usage.UsageStatsManager.getAppStandbyConstant(String)String :: {'android.permission.READ_DEVICE_CONFIG'}
android.app.wallpapereffectsgeneration.WallpaperEffectsGenerationManager.generateCinematicEffect(CinematicEffectRequest,Executor,CinematicEffectListener)void :: {'android.permission.MANAGE_WALLPAPER_EFFECTS_GENERATION'}
android.apphibernation.AppHibernationManager.isHibernatingForUser(String)boolean :: {'android.permission.MANAGE_APP_HIBERNATION'}
android.apphibernation.AppHibernationManager.setHibernatingForUser(String,boolean)void :: {'android.permission.MANAGE_APP_HIBERNATION'}
android.apphibernation.AppHibernationManager.isHibernatingGlobally(String)boolean :: {'android.permission.MANAGE_APP_HIBERNATION'}
android.apphibernation.AppHibernationManager.setHibernatingGlobally(String,boolean)void :: {'android.permission.MANAGE_APP_HIBERNATION'}
android.apphibernation.AppHibernationManager.getHibernatingPackagesForUser()List<String> :: {'android.permission.MANAGE_APP_HIBERNATION'}
android.apphibernation.AppHibernationManager.getHibernationStatsForUser(Set<String>)Map<String, :: {'android.permission.MANAGE_APP_HIBERNATION'}
android.apphibernation.AppHibernationManager.getHibernationStatsForUser()Map<String, :: {'android.permission.MANAGE_APP_HIBERNATION'}
android.companion.AssociationRequest.setSelfManaged(boolean)Builder :: {'android.permission.REQUEST_COMPANION_SELF_MANAGED'}
android.companion.AssociationRequest.setForceConfirmation(boolean)Builder :: {'android.permission.REQUEST_COMPANION_SELF_MANAGED'}
android.companion.CompanionDeviceManager.associate(AssociationRequest,Callback,Handler)void :: {'android.permission.REQUEST_COMPANION_PROFILE_WATCH', 'android.permission.REQUEST_COMPANION_PROFILE_AUTOMOTIVE_PROJECTION', 'android.permission.', 'android.permission.REQUEST_COMPANION_PROFILE_APP_STREAMING', 'android.permission.REQUEST_COMPANION_PROFILE_COMPUTER'}
android.companion.CompanionDeviceManager.associate(AssociationRequest,Executor,Callback)void :: {'android.permission.REQUEST_COMPANION_PROFILE_WATCH', 'android.permission.REQUEST_COMPANION_PROFILE_COMPUTER', 'android.permission.REQUEST_COMPANION_PROFILE_AUTOMOTIVE_PROJECTION', 'android.permission.REQUEST_COMPANION_PROFILE_APP_STREAMING'}
android.companion.CompanionDeviceManager.isDeviceAssociatedForWifiConnection(String,MacAddress,UserHandle)boolean :: {'android.permission.COMPANION_APPROVE_WIFI_CONNECTIONS', 'android.permission.MANAGE_COMPANION_DEVICES'}
android.companion.CompanionDeviceManager.getAllAssociations()List<AssociationInfo> :: {'android.permission.MANAGE_COMPANION_DEVICES'}
android.companion.CompanionDeviceManager.addOnAssociationsChangedListener(Executor,OnAssociationsChangedListener)void :: {'android.permission.MANAGE_COMPANION_DEVICES'}
android.companion.CompanionDeviceManager.removeOnAssociationsChangedListener(OnAssociationsChangedListener)void :: {'android.permission.MANAGE_COMPANION_DEVICES'}
android.companion.CompanionDeviceManager.canPairWithoutPrompt(String,String,UserHandle)boolean :: {'android.permission.MANAGE_COMPANION_DEVICES'}
android.companion.CompanionDeviceManager.startObservingDevicePresence(String)void :: {'android.permission.REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE'}
android.companion.CompanionDeviceManager.stopObservingDevicePresence(String)void :: {'android.permission.REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE'}
android.companion.CompanionDeviceManager.dispatchMessage(int,int,byte[])void :: {'android.permission.DELIVER_COMPANION_MESSAGES'}
android.companion.CompanionDeviceManager.associate(String,MacAddress,byte[])void :: {'android.permission.ASSOCIATE_COMPANION_DEVICES'}
android.companion.CompanionDeviceManager.notifyDeviceAppeared(int)void :: {'android.permission.REQUEST_COMPANION_SELF_MANAGED'}
android.companion.CompanionDeviceManager.notifyDeviceDisappeared(int)void :: {'android.permission.REQUEST_COMPANION_SELF_MANAGED'}
android.companion.CompanionDeviceService.dispatchMessage(int,int,byte[])void :: {'android.permission.DELIVER_COMPANION_MESSAGES'}
android.companion.virtual.VirtualDeviceManager.createVirtualDevice(int,VirtualDeviceParams)VirtualDevice :: {'android.permission.CREATE_VIRTUAL_DEVICE'}
android.companion.virtual.VirtualDeviceManager.close()void :: {'android.permission.CREATE_VIRTUAL_DEVICE'}
android.companion.virtual.VirtualDeviceManager.createVirtualKeyboard(VirtualDisplay,String,int,int)VirtualKeyboard :: {'android.permission.CREATE_VIRTUAL_DEVICE'}
android.companion.virtual.VirtualDeviceManager.createVirtualMouse(VirtualDisplay,String,int,int)VirtualMouse :: {'android.permission.CREATE_VIRTUAL_DEVICE'}
android.companion.virtual.VirtualDeviceManager.createVirtualTouchscreen(VirtualDisplay,String,int,int)VirtualTouchscreen :: {'android.permission.CREATE_VIRTUAL_DEVICE'}
android.companion.virtual.VirtualDeviceManager.createVirtualAudioDevice(VirtualDisplay,Executor,AudioConfigurationChangeCallback)VirtualAudioDevice :: {'android.permission.CREATE_VIRTUAL_DEVICE'}
android.companion.virtual.VirtualDeviceManager.setShowPointerIcon(boolean)void :: {'android.permission.CREATE_VIRTUAL_DEVICE'}
android.companion.virtual.VirtualDeviceParams.setLockState(int)Builder :: {'android.permission. conditional = true', 'android.permission.value = ADD_ALWAYS_UNLOCKED_DISPLAY'}
android.companion.virtual.audio.VirtualAudioDevice.startAudioInjection(AudioFormat)AudioInjection :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.companion.virtual.audio.VirtualAudioDevice.startAudioCapture(AudioFormat)AudioCapture :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.companion.virtual.audio.VirtualAudioDevice.close()void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.companion.virtual.audio.VirtualAudioSession.onAppsNeedingAudioRoutingChanged(int[])void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.companion.virtual.audio.VirtualAudioSession.close()void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.companion.virtual.audio.VirtualAudioSession.createAudioStreams(int[])void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.companion.virtual.audio.VirtualAudioSession.releaseAudioStreams()void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.content.AttributionSource.getRenouncedPermissions()Set<String> :: {'android.permission.RENOUNCE_PERMISSIONS'}
android.content.AttributionSource.setRenouncedPermissions(Set<String>)Builder :: {'android.permission.RENOUNCE_PERMISSIONS'}
android.content.ClipboardManager.setPrimaryClipAsPackage(ClipData,String)void :: {'android.permission.SET_CLIP_SOURCE'}
android.content.ClipboardManager.getPrimaryClipSource()String :: {'android.permission.SET_CLIP_SOURCE'}
android.content.ContentProviderClient.setDetectNotResponding(long)void :: {'android.permission.REMOVE_TASKS'}
android.content.ContentResolver.registerContentObserverAsUser(Uri,boolean,ContentObserver,UserHandle)void :: {'android.permission.MODULE_LIBRARIES', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.ContentResolver.putCache(Uri,Bundle)void :: {'android.permission.CACHE_CONTENT'}
android.content.ContentResolver.getCache(Uri)Bundle :: {'android.permission.CACHE_CONTENT'}
android.content.Context.startActivityAsUser(Intent,UserHandle)void :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.Context.startActivityAsUser(Intent,Bundle,UserHandle)void :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.Context.startActivitiesAsUser(Intent[],Bundle,UserHandle)int :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.Context.sendBroadcastAsUser(Intent,UserHandle)void :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.Context.sendBroadcastAsUser(Intent,UserHandle,String)void :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.Context.sendBroadcastAsUser(Intent,UserHandle,String,Bundle)void :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.Context.sendBroadcastAsUser(Intent,UserHandle,String,int)void :: {'android.permission.R', 'android.permission. trackingBug = 170729553'}
android.content.Context.sendOrderedBroadcastAsUser(Intent,UserHandle,String,BroadcastReceiver,Handler,int,String,Bundle)void :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.Context.sendOrderedBroadcastAsUser(Intent,UserHandle,String,int,BroadcastReceiver,Handler,int,String,Bundle)void :: {'android.permission.R', 'android.permission. trackingBug = 170729553'}
android.content.Context.sendOrderedBroadcastAsUser(Intent,UserHandle,String,int,Bundle,BroadcastReceiver,Handler,int,String,Bundle)void :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.Context.sendStickyBroadcast(Intent)void :: {'android.permission.BROADCAST_STICKY'}
android.content.Context.sendStickyBroadcast(Intent,Bundle)void :: {'android.permission.BROADCAST_STICKY'}
android.content.Context.sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)void :: {'android.permission.BROADCAST_STICKY'}
android.content.Context.removeStickyBroadcast(Intent)void :: {'android.permission.BROADCAST_STICKY'}
android.content.Context.sendStickyBroadcastAsUser(Intent,UserHandle)void :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.BROADCAST_STICKY'}
android.content.Context.sendStickyBroadcastAsUser(Intent,UserHandle,Bundle)void :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.BROADCAST_STICKY'}
android.content.Context.sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)void :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.BROADCAST_STICKY'}
android.content.Context.removeStickyBroadcastAsUser(Intent,UserHandle)void :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.BROADCAST_STICKY'}
android.content.Context.registerReceiverForAllUsers(BroadcastReceiver,IntentFilter,String,Handler)Intent :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.Context.registerReceiverForAllUsers(BroadcastReceiver,IntentFilter,String,Handler,int)Intent :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.Context.registerReceiverAsUser(BroadcastReceiver,UserHandle,IntentFilter,String,Handler)Intent :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.Context.registerReceiverAsUser(BroadcastReceiver,UserHandle,IntentFilter,String,Handler,int)Intent :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.Context.startForegroundServiceAsUser(Intent,UserHandle)ComponentName :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.Context.startServiceAsUser(Intent,UserHandle)ComponentName :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.Context.stopServiceAsUser(Intent,UserHandle)boolean :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.Context.bindServiceAsUser(Intent,ServiceConnection,int,UserHandle)boolean :: {'android.permission.INTERACT_ACROSS_PROFILES', 'android.permission.INTERACT_ACROSS_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.Context.bindServiceAsUser(Intent,ServiceConnection,int,Handler,UserHandle)boolean :: {'android.permission.INTERACT_ACROSS_PROFILES', 'android.permission.INTERACT_ACROSS_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.ContextParams.getRenouncedPermissions()Set<String> :: {'android.permission.RENOUNCE_PERMISSIONS'}
android.content.ContextParams.setRenouncedPermissions(Set<String>)Builder :: {'android.permission.RENOUNCE_PERMISSIONS'}
android.content.om.OverlayManager.setEnabledExclusiveInCategory(String,UserHandle)void :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.om.OverlayManager.setEnabled(String,boolean,UserHandle)void :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.om.OverlayManager.getOverlayInfosForTarget(String,UserHandle)List<OverlayInfo> :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.om.OverlayManager.invalidateCachesForOverlay(String,UserHandle)void :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.'}
android.content.pm.CrossProfileApps.startActivity(Intent,UserHandle,Activity)void :: {'android.permission.INTERACT_ACROSS_PROFILES', 'android.permission.INTERACT_ACROSS_USERS'}
android.content.pm.CrossProfileApps.startActivity(Intent,UserHandle,Activity,Bundle)void :: {'android.permission.INTERACT_ACROSS_PROFILES', 'android.permission.INTERACT_ACROSS_USERS'}
android.content.pm.CrossProfileApps.startActivity(ComponentName,UserHandle,Activity,Bundle)void :: {'android.permission.INTERACT_ACROSS_PROFILES', 'android.permission.START_CROSS_PROFILE_ACTIVITIES'}
android.content.pm.CrossProfileApps.startActivity(ComponentName,UserHandle)void :: {'android.permission.INTERACT_ACROSS_PROFILES', 'android.permission.START_CROSS_PROFILE_ACTIVITIES'}
android.content.pm.CrossProfileApps.setInteractAcrossProfilesAppOp(String,int)void :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.CONFIGURE_INTERACT_ACROSS_PROFILES'}
android.content.pm.CrossProfileApps.resetInteractAcrossProfilesAppOps(Collection<String>,Set<String>)void :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.CONFIGURE_INTERACT_ACROSS_PROFILES'}
android.content.pm.CrossProfileApps.clearInteractAcrossProfilesAppOps()void :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.CONFIGURE_INTERACT_ACROSS_PROFILES'}
android.content.pm.LauncherApps.getMainActivityLaunchIntent(ComponentName,Bundle,UserHandle)PendingIntent :: {'android.permission.START_TASKS_FROM_RECENTS'}
android.content.pm.LauncherApps.cacheShortcuts(String,List<String>,UserHandle,int)void :: {'android.permission.ACCESS_SHORTCUTS'}
android.content.pm.LauncherApps.uncacheShortcuts(String,List<String>,UserHandle,int)void :: {'android.permission.ACCESS_SHORTCUTS'}
android.content.pm.PackageInstaller.uninstall(String,IntentSender)void :: {'android.permission.REQUEST_DELETE_PACKAGES', 'android.permission.DELETE_PACKAGES'}
android.content.pm.PackageInstaller.uninstall(VersionedPackage,IntentSender)void :: {'android.permission.REQUEST_DELETE_PACKAGES', 'android.permission.DELETE_PACKAGES'}
android.content.pm.PackageInstaller.uninstall(VersionedPackage,int,IntentSender)void :: {'android.permission.REQUEST_DELETE_PACKAGES', 'android.permission.DELETE_PACKAGES'}
android.content.pm.PackageInstaller.installExistingPackage(String,int,IntentSender)void :: {'android.permission.INSTALL_EXISTING_PACKAGES', 'android.permission.INSTALL_PACKAGES'}
android.content.pm.PackageInstaller.uninstallExistingPackage(String,IntentSender)void :: {'android.permission.DELETE_PACKAGES'}
android.content.pm.PackageInstaller.setPermissionsResult(int,boolean)void :: {'android.permission.INSTALL_PACKAGES'}
android.content.pm.PackageInstaller.getDataLoaderParams()DataLoaderParams :: {'android.permission.USE_INSTALLER_V2'}
android.content.pm.PackageInstaller.addFile(int,String,long,byte[],byte[])void :: {'android.permission.USE_INSTALLER_V2'}
android.content.pm.PackageInstaller.removeFile(int,String)void :: {'android.permission.USE_INSTALLER_V2'}
android.content.pm.PackageInstaller.commitTransferred(IntentSender)void :: {'android.permission.INSTALL_PACKAGES'}
android.content.pm.PackageInstaller.setGrantedRuntimePermissions(String[])void :: {'android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS'}
android.content.pm.PackageInstaller.setAllocateAggressive(boolean)void :: {'android.permission.ALLOCATE_AGGRESSIVE'}
android.content.pm.PackageInstaller.setStaged()void :: {'android.permission.INSTALL_PACKAGES'}
android.content.pm.PackageInstaller.setInstallAsApex()void :: {'android.permission.INSTALL_PACKAGES'}
android.content.pm.PackageInstaller.setDataLoaderParams(DataLoaderParams)void :: {'android.permission.INSTALL_PACKAGES', 'android.permission.USE_INSTALLER_V2'}
android.content.pm.PackageManager.getPackageInfoAsUser(String,int,int)PackageInfo :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.pm.PackageManager.getPackageInfoAsUser(String,PackageInfoFlags,int)PackageInfo :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.pm.PackageManager.getApplicationInfoAsUser(String,int,UserHandle)ApplicationInfo :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.pm.PackageManager.getApplicationInfoAsUser(String,ApplicationInfoFlags,UserHandle)ApplicationInfo :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.pm.PackageManager.getInstalledPackagesAsUser(int,int)List<PackageInfo> :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.pm.PackageManager.getInstalledPackagesAsUser(PackageInfoFlags,int)List<PackageInfo> :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.pm.PackageManager.grantRuntimePermission(String,String,UserHandle)void :: {'android.permission.GRANT_RUNTIME_PERMISSIONS'}
android.content.pm.PackageManager.revokeRuntimePermission(String,String,UserHandle)void :: {'android.permission.REVOKE_RUNTIME_PERMISSIONS'}
android.content.pm.PackageManager.revokeRuntimePermission(String,String,UserHandle,String)void :: {'android.permission.REVOKE_RUNTIME_PERMISSIONS'}
android.content.pm.PackageManager.getPermissionFlags(String,String,UserHandle)int :: {'android.permission.GET_RUNTIME_PERMISSIONS', 'android.permission.REVOKE_RUNTIME_PERMISSIONS', 'android.permission.GRANT_RUNTIME_PERMISSIONS'}
android.content.pm.PackageManager.updatePermissionFlags(String,String,int,int,UserHandle)void :: {'android.permission.REVOKE_RUNTIME_PERMISSIONS', 'android.permission.GRANT_RUNTIME_PERMISSIONS'}
android.content.pm.PackageManager.getWhitelistedRestrictedPermissions(String,int)Set<String> :: {'android.permission.WHITELIST_RESTRICTED_PERMISSIONS', 'android.permission.\n            conditional = true'}
android.content.pm.PackageManager.addWhitelistedRestrictedPermission(String,String,int)boolean :: {'android.permission.WHITELIST_RESTRICTED_PERMISSIONS', 'android.permission.\n            conditional = true'}
android.content.pm.PackageManager.removeWhitelistedRestrictedPermission(String,String,int)boolean :: {'android.permission.\n        conditional = true', 'android.permission.WHITELIST_RESTRICTED_PERMISSIONS'}
android.content.pm.PackageManager.setAutoRevokeWhitelisted(String,boolean)boolean :: {'android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONS', 'android.permission.\n            conditional = true'}
android.content.pm.PackageManager.isAutoRevokeWhitelisted(String)boolean :: {'android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONS', 'android.permission.\n            conditional = true'}
android.content.pm.PackageManager.getInstantApps()List<InstantAppInfo> :: {'android.permission.ACCESS_INSTANT_APPS'}
android.content.pm.PackageManager.getInstantAppIcon(String)Drawable :: {'android.permission.ACCESS_INSTANT_APPS'}
android.content.pm.PackageManager.getDeclaredSharedLibraries(String,int)List<SharedLibraryInfo> :: {'android.permission.ACCESS_SHARED_LIBRARIES'}
android.content.pm.PackageManager.getDeclaredSharedLibraries(String,PackageInfoFlags)List<SharedLibraryInfo> :: {'android.permission.ACCESS_SHARED_LIBRARIES'}
android.content.pm.PackageManager.queryIntentActivitiesAsUser(Intent,int,UserHandle)List<ResolveInfo> :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.pm.PackageManager.queryIntentActivitiesAsUser(Intent,ResolveInfoFlags,UserHandle)List<ResolveInfo> :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.pm.PackageManager.queryBroadcastReceiversAsUser(Intent,int,UserHandle)List<ResolveInfo> :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.pm.PackageManager.queryBroadcastReceiversAsUser(Intent,ResolveInfoFlags,UserHandle)List<ResolveInfo> :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.pm.PackageManager.queryIntentServicesAsUser(Intent,int,UserHandle)List<ResolveInfo> :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.pm.PackageManager.queryIntentServicesAsUser(Intent,ResolveInfoFlags,UserHandle)List<ResolveInfo> :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.pm.PackageManager.queryIntentContentProvidersAsUser(Intent,int,UserHandle)List<ResolveInfo> :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.pm.PackageManager.queryIntentContentProvidersAsUser(Intent,ResolveInfoFlags,UserHandle)List<ResolveInfo> :: {'android.permission.INTERACT_ACROSS_USERS'}
android.content.pm.PackageManager.installExistingPackageAsUser(String,int)int :: {'android.permission.INTERACT_ACROSS_USERS_FULL', 'android.permission.INSTALL_EXISTING_PACKAGES', 'android.permission.INSTALL_PACKAGES'}
android.content.pm.PackageManager.verifyIntentFilter(int,int,List<String>)void :: {'android.permission.INTENT_FILTER_VERIFICATION_AGENT'}
android.content.pm.PackageManager.getIntentVerificationStatusAsUser(String,int)int :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.pm.PackageManager.updateIntentVerificationStatusAsUser(String,int,int)boolean :: {'android.permission.SET_PREFERRED_APPLICATIONS'}
android.content.pm.PackageManager.getDefaultBrowserPackageNameAsUser(int)String :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.pm.PackageManager.setDefaultBrowserPackageNameAsUser(String,int)boolean :: {'android.permission.SET_PREFERRED_APPLICATIONS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.pm.PackageManager.setUpdateAvailable(String,boolean)void :: {'android.permission.INSTALL_PACKAGES'}
android.content.pm.PackageManager.deletePackage(String,IPackageDeleteObserver,int)void :: {'android.permission.DELETE_PACKAGES'}
android.content.pm.PackageManager.deletePackageAsUser(String,IPackageDeleteObserver,int,int)void :: {'android.permission.INTERACT_ACROSS_USERS_FULL', 'android.permission.DELETE_PACKAGES'}
android.content.pm.PackageManager.setComponentEnabledSetting(ComponentName,int,int)void :: {'android.permission.CHANGE_COMPONENT_ENABLED_STATE', 'android.permission.\n            conditional = true'}
android.content.pm.PackageManager.setComponentEnabledSettings(List<ComponentEnabledSetting>)void :: {'android.permission.CHANGE_COMPONENT_ENABLED_STATE', 'android.permission.\n            conditional = true'}
android.content.pm.PackageManager.setSyntheticAppDetailsActivityEnabled(String,boolean)void :: {'android.permission.CHANGE_COMPONENT_ENABLED_STATE', 'android.permission.\n            conditional = true'}
android.content.pm.PackageManager.setApplicationEnabledSetting(String,int,int)void :: {'android.permission.CHANGE_COMPONENT_ENABLED_STATE', 'android.permission.\n            conditional = true'}
android.content.pm.PackageManager.addOnPermissionsChangeListener(OnPermissionsChangedListener)void :: {'android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS'}
android.content.pm.PackageManager.removeOnPermissionsChangeListener(OnPermissionsChangedListener)void :: {'android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS'}
android.content.pm.PackageManager.setDistractingPackageRestrictions(String[],int)String[] :: {'android.permission.SUSPEND_APPS'}
android.content.pm.PackageManager.setPackagesSuspended(String[],boolean,PersistableBundle,PersistableBundle,String)String[] :: {'android.permission.SUSPEND_APPS'}
android.content.pm.PackageManager.setPackagesSuspended(String[],boolean,PersistableBundle,PersistableBundle,SuspendDialogInfo)String[] :: {'android.permission.SUSPEND_APPS'}
android.content.pm.PackageManager.getUnsuspendablePackages(String[])String[] :: {'android.permission.SUSPEND_APPS'}
android.content.pm.PackageManager.setHarmfulAppWarning(String,CharSequence)void :: {'android.permission.SET_HARMFUL_APP_WARNINGS'}
android.content.pm.PackageManager.getHarmfulAppWarning(String)CharSequence :: {'android.permission.SET_HARMFUL_APP_WARNINGS'}
android.content.pm.PackageManager.makeUidVisible(int,int)void :: {'android.permission.MODULE_LIBRARIES'}
android.content.pm.PackageManager.getHoldLockToken()IBinder :: {'android.permission.INJECT_EVENTS'}
android.content.pm.PackageManager.setKeepUninstalledPackages(List<String>)void :: {'android.permission.KEEP_UNINSTALLED_PACKAGES'}
android.content.pm.ShortcutManager.getShareTargets(IntentFilter)List<ShareShortcutInfo> :: {'android.permission.MANAGE_APP_PREDICTIONS'}
android.content.pm.dex.ArtManager.snapshotRuntimeProfile(int,String,String,Executor,SnapshotRuntimeProfileCallback)void :: {'android.permission.PACKAGE_USAGE_STATS', 'android.permission.READ_RUNTIME_PROFILES'}
android.content.pm.dex.ArtManager.isRuntimeProfilingEnabled(int)boolean :: {'android.permission.PACKAGE_USAGE_STATS', 'android.permission.READ_RUNTIME_PROFILES'}
android.content.pm.verify.domain.DomainVerificationManager.queryValidVerificationPackageNames()List<String> :: {'android.permission.DOMAIN_VERIFICATION_AGENT'}
android.content.pm.verify.domain.DomainVerificationManager.getDomainVerificationInfo(String)DomainVerificationInfo :: {'android.permission.DOMAIN_VERIFICATION_AGENT'}
android.content.pm.verify.domain.DomainVerificationManager.setDomainVerificationStatus(UUID,Set<String>,int)int :: {'android.permission.DOMAIN_VERIFICATION_AGENT'}
android.content.pm.verify.domain.DomainVerificationManager.setDomainVerificationLinkHandlingAllowed(String,boolean)void :: {'android.permission.UPDATE_DOMAIN_VERIFICATION_USER_SELECTION'}
android.content.pm.verify.domain.DomainVerificationManager.setDomainVerificationUserSelection(UUID,Set<String>,boolean)int :: {'android.permission.UPDATE_DOMAIN_VERIFICATION_USER_SELECTION'}
android.content.pm.verify.domain.DomainVerificationManager.getOwnersForDomain(String)SortedSet<DomainOwner> :: {'android.permission.UPDATE_DOMAIN_VERIFICATION_USER_SELECTION'}
android.content.rollback.RollbackManager.getAvailableRollbacks()List<RollbackInfo> :: {'android.permission.MANAGE_ROLLBACKS', 'android.permission.TEST_MANAGE_ROLLBACKS'}
android.content.rollback.RollbackManager.getRecentlyCommittedRollbacks()List<RollbackInfo> :: {'android.permission.MANAGE_ROLLBACKS', 'android.permission.TEST_MANAGE_ROLLBACKS'}
android.content.rollback.RollbackManager.commitRollback(int,List<VersionedPackage>,IntentSender)void :: {'android.permission.MANAGE_ROLLBACKS', 'android.permission.TEST_MANAGE_ROLLBACKS'}
android.content.rollback.RollbackManager.reloadPersistedData()void :: {'android.permission.TEST_MANAGE_ROLLBACKS'}
android.content.rollback.RollbackManager.expireRollbackForPackage(String)void :: {'android.permission.TEST_MANAGE_ROLLBACKS'}
android.content.rollback.RollbackManager.blockRollbackManager(long)void :: {'android.permission.TEST_MANAGE_ROLLBACKS'}
android.debug.AdbManager.isAdbWifiSupported()boolean :: {'android.permission.MANAGE_DEBUGGING'}
android.debug.AdbManager.isAdbWifiQrSupported()boolean :: {'android.permission.MANAGE_DEBUGGING'}
android.graphics.fonts.FontManager.getFontConfig()FontConfig :: {'android.permission.UPDATE_FONTS'}
android.graphics.fonts.FontManager.fontFile.getSignature(), :: {'android.permission.UPDATE_FONTS) public @ResultCode int updateFontFamily(\n            @NonNull FontFamilyUpdateRequest request', 'android.permission.getParcelFileDescriptor('}
android.hardware.SensorPrivacyManager.addSensorPrivacyListener(int,OnSensorPrivacyChangedListener)void :: {'android.permission.OBSERVE_SENSOR_PRIVACY'}
android.hardware.SensorPrivacyManager.addSensorPrivacyListener(int,int,OnSensorPrivacyChangedListener)void :: {'android.permission.OBSERVE_SENSOR_PRIVACY'}
android.hardware.SensorPrivacyManager.addSensorPrivacyListener(int,Executor,OnSensorPrivacyChangedListener)void :: {'android.permission.OBSERVE_SENSOR_PRIVACY'}
android.hardware.SensorPrivacyManager.addSensorPrivacyListener(OnSensorPrivacyChangedListener)void :: {'android.permission.OBSERVE_SENSOR_PRIVACY'}
android.hardware.SensorPrivacyManager.addSensorPrivacyListener(Executor,OnSensorPrivacyChangedListener)void :: {'android.permission.OBSERVE_SENSOR_PRIVACY'}
android.hardware.SensorPrivacyManager.removeSensorPrivacyListener(int,OnSensorPrivacyChangedListener)void :: {'android.permission.OBSERVE_SENSOR_PRIVACY'}
android.hardware.SensorPrivacyManager.removeSensorPrivacyListener(OnSensorPrivacyChangedListener)void :: {'android.permission.OBSERVE_SENSOR_PRIVACY'}
android.hardware.SensorPrivacyManager.isSensorPrivacyEnabled(int)boolean :: {'android.permission.OBSERVE_SENSOR_PRIVACY'}
android.hardware.SensorPrivacyManager.isSensorPrivacyEnabled(int,int)boolean :: {'android.permission.OBSERVE_SENSOR_PRIVACY'}
android.hardware.SensorPrivacyManager.areAnySensorPrivacyTogglesEnabled(int)boolean :: {'android.permission.OBSERVE_SENSOR_PRIVACY'}
android.hardware.SensorPrivacyManager.setSensorPrivacy(int,boolean)void :: {'android.permission.MANAGE_SENSOR_PRIVACY'}
android.hardware.SensorPrivacyManager.setSensorPrivacy(int,int,boolean)void :: {'android.permission.MANAGE_SENSOR_PRIVACY'}
android.hardware.SensorPrivacyManager.setSensorPrivacy(int,int,boolean,int)void :: {'android.permission.MANAGE_SENSOR_PRIVACY'}
android.hardware.SensorPrivacyManager.setSensorPrivacyForProfileGroup(int,int,boolean)void :: {'android.permission.MANAGE_SENSOR_PRIVACY'}
android.hardware.SensorPrivacyManager.setSensorPrivacyForProfileGroup(int,int,boolean,int)void :: {'android.permission.MANAGE_SENSOR_PRIVACY'}
android.hardware.SensorPrivacyManager.suppressSensorPrivacyReminders(int,boolean)void :: {'android.permission.MANAGE_SENSOR_PRIVACY'}
android.hardware.SensorPrivacyManager.suppressSensorPrivacyReminders(int,boolean,int)void :: {'android.permission.MANAGE_SENSOR_PRIVACY'}
android.hardware.SensorPrivacyManager.requiresAuthentication()boolean :: {'android.permission.OBSERVE_SENSOR_PRIVACY'}
android.hardware.SensorPrivacyManager.setAllSensorPrivacy(boolean)void :: {'android.permission.MANAGE_SENSOR_PRIVACY'}
android.hardware.SensorPrivacyManager.addAllSensorPrivacyListener(OnAllSensorPrivacyChangedListener)void :: {'android.permission.OBSERVE_SENSOR_PRIVACY'}
android.hardware.SensorPrivacyManager.removeAllSensorPrivacyListener(OnAllSensorPrivacyChangedListener)void :: {'android.permission.OBSERVE_SENSOR_PRIVACY'}
android.hardware.SensorPrivacyManager.isAllSensorPrivacyEnabled()boolean :: {'android.permission.OBSERVE_SENSOR_PRIVACY'}
android.hardware.biometrics.BiometricManager.getButtonLabel()CharSequence :: {'android.permission.USE_BIOMETRIC'}
android.hardware.biometrics.BiometricManager.getPromptMessage()CharSequence :: {'android.permission.USE_BIOMETRIC'}
android.hardware.biometrics.BiometricManager.getSettingName()CharSequence :: {'android.permission.USE_BIOMETRIC'}
android.hardware.biometrics.BiometricManager.getSensorProperties()List<SensorProperties> :: {'android.permission.TEST_BIOMETRIC'}
android.hardware.biometrics.BiometricManager.createTestSession(int)BiometricTestSession :: {'android.permission.TEST_BIOMETRIC'}
android.hardware.biometrics.BiometricManager.getUiPackage()String :: {'android.permission.TEST_BIOMETRIC'}
android.hardware.biometrics.BiometricManager.canAuthenticate()int :: {'android.permission.USE_BIOMETRIC'}
android.hardware.biometrics.BiometricManager.canAuthenticate(int)int :: {'android.permission.USE_BIOMETRIC'}
android.hardware.biometrics.BiometricManager.canAuthenticate(int,int)int :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.biometrics.BiometricManager.getStrings(int)Strings :: {'android.permission.USE_BIOMETRIC'}
android.hardware.biometrics.BiometricManager.hasEnrolledBiometrics(int)boolean :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.biometrics.BiometricManager.registerEnabledOnKeyguardCallback(IBiometricEnabledOnKeyguardCallback)void :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.biometrics.BiometricManager.invalidateAuthenticatorIds(int,int,IInvalidationCallback)void :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.biometrics.BiometricManager.resetLockoutTimeBound(IBinder,String,int,int,byte[])void :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.biometrics.BiometricPrompt.setUseDefaultTitle()Builder :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.biometrics.BiometricPrompt.setTextForDeviceCredential(CharSequence,CharSequence,CharSequence)Builder :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.biometrics.BiometricPrompt.setAllowedSensorIds(List<Integer>)Builder :: {'android.permission.USE_BIOMETRIC_INTERNAL', 'android.permission.TEST_BIOMETRIC'}
android.hardware.biometrics.BiometricPrompt.setAllowBackgroundAuthentication(boolean)Builder :: {'android.permission.USE_BIOMETRIC_INTERNAL', 'android.permission.TEST_BIOMETRIC'}
android.hardware.biometrics.BiometricPrompt.shouldUseDefaultTitle()boolean :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.biometrics.BiometricPrompt.authenticateUser(CancellationSignal,Executor,AuthenticationCallback,int)void :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.biometrics.BiometricPrompt.authenticateForOperation(CancellationSignal,Executor,AuthenticationCallback,long)long :: {'android.permission.USE_BIOMETRIC'}
android.hardware.biometrics.BiometricPrompt.authenticate(CryptoObject,CancellationSignal,Executor,AuthenticationCallback)void :: {'android.permission.USE_BIOMETRIC'}
android.hardware.biometrics.BiometricPrompt.authenticate(CancellationSignal,Executor,AuthenticationCallback)void :: {'android.permission.USE_BIOMETRIC'}
android.hardware.biometrics.BiometricTestSession.setTestHalEnabled(boolean)void :: {'android.permission.TEST_BIOMETRIC'}
android.hardware.biometrics.BiometricTestSession.startEnroll(int)void :: {'android.permission.TEST_BIOMETRIC'}
android.hardware.biometrics.BiometricTestSession.finishEnroll(int)void :: {'android.permission.TEST_BIOMETRIC'}
android.hardware.biometrics.BiometricTestSession.acceptAuthentication(int)void :: {'android.permission.TEST_BIOMETRIC'}
android.hardware.biometrics.BiometricTestSession.rejectAuthentication(int)void :: {'android.permission.TEST_BIOMETRIC'}
android.hardware.biometrics.BiometricTestSession.notifyAcquired(int,int)void :: {'android.permission.TEST_BIOMETRIC'}
android.hardware.biometrics.BiometricTestSession.notifyError(int,int)void :: {'android.permission.TEST_BIOMETRIC'}
android.hardware.biometrics.BiometricTestSession.cleanupInternalState(int)void :: {'android.permission.TEST_BIOMETRIC'}
android.hardware.biometrics.BiometricTestSession.close()void :: {'android.permission.TEST_BIOMETRIC'}
android.hardware.camera2.CameraManager.isConcurrentSessionConfigurationSupported(Map<String,SessionConfiguration>)boolean :: {'android.permission.CAMERA'}
android.hardware.camera2.CameraManager.openCamera(String,CameraDevice.StateCallback,Handler)void :: {'android.permission.CAMERA'}
android.hardware.camera2.CameraManager.openCamera(String,Executor,CameraDevice.StateCallback)void :: {'android.permission.CAMERA'}
android.hardware.camera2.CameraManager.openCamera(String,int,Executor,CameraDevice.StateCallback)void :: {'android.permission.SYSTEM_CAMERA', 'android.permission.', 'android.permission.CAMERA'}
android.hardware.camera2.CameraManager.onCameraOpened(String,String)void :: {'android.permission.CAMERA_OPEN_CLOSE_LISTENER'}
android.hardware.camera2.CameraManager.onCameraClosed(String)void :: {'android.permission.CAMERA_OPEN_CLOSE_LISTENER'}
android.hardware.camera2.CameraManager.injectCamera(String,String,String,Executor,CameraInjectionSession.InjectionStatusCallback)void :: {'android.permission.CAMERA_INJECT_EXTERNAL_CAMERA'}
android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl.createCameraAdvancedExtensionSession(CameraDevice,Context,ExtensionSessionConfiguration,int)CameraAdvancedExtensionSessionImpl :: {'android.permission.CAMERA'}
android.hardware.camera2.impl.CameraExtensionSessionImpl.createCameraExtensionSession(CameraDevice,Context,ExtensionSessionConfiguration,int)CameraExtensionSessionImpl :: {'android.permission.CAMERA'}
android.hardware.devicestate.DeviceStateManager.requestState(DeviceStateRequest,Executor,DeviceStateRequest.Callback)void :: {'android.permission.CONTROL_DEVICE_STATE', 'android.permission.\n            conditional = true'}
android.hardware.devicestate.DeviceStateManager.cancelStateRequest()void :: {'android.permission.CONTROL_DEVICE_STATE', 'android.permission.\n            conditional = true'}
android.hardware.display.ColorDisplayManager.setNightDisplayActivated(boolean)boolean :: {'android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS'}
android.hardware.display.ColorDisplayManager.setNightDisplayColorTemperature(int)boolean :: {'android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS'}
android.hardware.display.ColorDisplayManager.getNightDisplayAutoMode()int :: {'android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS'}
android.hardware.display.ColorDisplayManager.setNightDisplayAutoMode(int)boolean :: {'android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS'}
android.hardware.display.ColorDisplayManager.setNightDisplayCustomStartTime(LocalTime)boolean :: {'android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS'}
android.hardware.display.ColorDisplayManager.setNightDisplayCustomEndTime(LocalTime)boolean :: {'android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS'}
android.hardware.display.ColorDisplayManager.isDeviceColorManaged()boolean :: {'android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS'}
android.hardware.display.ColorDisplayManager.mManager.setSaturationLevel(saturationLevel)int :: {'android.permission. to = 100', 'android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)\n    public boolean setSaturationLevel(@IntRange(from = 0'}
android.hardware.display.ColorDisplayManager.isSaturationActivated()boolean :: {'android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS'}
android.hardware.display.ColorDisplayManager.mManager.setAppSaturationLevel(packageName,saturationLevel)int :: {'android.permission.\n            @IntRange(from = 0', 'android.permission. to = 100', 'android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)\n    public boolean setAppSaturationLevel(@NonNull String packageName'}
android.hardware.display.ColorDisplayManager.setDisplayWhiteBalanceEnabled(boolean)boolean :: {'android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS'}
android.hardware.display.ColorDisplayManager.setReduceBrightColorsActivated(boolean)boolean :: {'android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS'}
android.hardware.display.ColorDisplayManager.mManager.setReduceBrightColorsStrength(strength)int :: {'android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)\n    public boolean setReduceBrightColorsStrength(@IntRange(from = 0', 'android.permission. to = 100'}
android.hardware.display.ColorDisplayManager.getTransformCapabilities()int :: {'android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS'}
android.hardware.display.DisplayManager.setSaturationLevel(float)void :: {'android.permission.CONTROL_DISPLAY_SATURATION'}
android.hardware.display.DisplayManager.setUserDisabledHdrTypes(int[])void :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.hardware.display.DisplayManager.setAreUserDisabledHdrTypesAllowed(boolean)void :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.hardware.display.DisplayManager.getBrightnessEvents()List<BrightnessChangeEvent> :: {'android.permission.BRIGHTNESS_SLIDER_USAGE'}
android.hardware.display.DisplayManager.getAmbientBrightnessStats()List<AmbientBrightnessDayStats> :: {'android.permission.ACCESS_AMBIENT_LIGHT_STATS'}
android.hardware.display.DisplayManager.setBrightnessConfiguration(BrightnessConfiguration)void :: {'android.permission.CONFIGURE_DISPLAY_BRIGHTNESS'}
android.hardware.display.DisplayManager.setBrightnessConfigurationForDisplay(BrightnessConfiguration,String)void :: {'android.permission.CONFIGURE_DISPLAY_BRIGHTNESS'}
android.hardware.display.DisplayManager.getBrightnessConfigurationForDisplay(String)BrightnessConfiguration :: {'android.permission.CONFIGURE_DISPLAY_BRIGHTNESS'}
android.hardware.display.DisplayManager.getBrightnessConfiguration()BrightnessConfiguration :: {'android.permission.CONFIGURE_DISPLAY_BRIGHTNESS'}
android.hardware.display.DisplayManager.getDefaultBrightnessConfiguration()BrightnessConfiguration :: {'android.permission.CONFIGURE_DISPLAY_BRIGHTNESS'}
android.hardware.display.DisplayManager.mGlobal.setBrightness(displayId,brightness)float :: {'android.permission. to = 1f', 'android.permission. @FloatRange(from = 0f', 'android.permission.CONTROL_DISPLAY_BRIGHTNESS)\n    public void setBrightness(int displayId'}
android.hardware.display.DisplayManager.getBrightness(int)float :: {'android.permission. to = 1f', 'android.permission.CONTROL_DISPLAY_BRIGHTNESS)\n    @FloatRange(from = 0f'}
android.hardware.display.DisplayManager.setGlobalUserPreferredDisplayMode(Display.Mode)void :: {'android.permission.MODIFY_USER_PREFERRED_DISPLAY_MODE'}
android.hardware.display.DisplayManager.clearGlobalUserPreferredDisplayMode()void :: {'android.permission.MODIFY_USER_PREFERRED_DISPLAY_MODE'}
android.hardware.display.DisplayManager.setShouldAlwaysRespectAppRequestedMode(boolean)void :: {'android.permission.OVERRIDE_DISPLAY_MODE_REQUESTS'}
android.hardware.display.DisplayManager.shouldAlwaysRespectAppRequestedMode()boolean :: {'android.permission.OVERRIDE_DISPLAY_MODE_REQUESTS'}
android.hardware.display.DisplayManager.setRefreshRateSwitchingType(int)void :: {'android.permission.MODIFY_REFRESH_RATE_SWITCHING_TYPE'}
android.hardware.face.FaceManager.authenticate(CryptoObject,CancellationSignal,AuthenticationCallback,Handler,int,boolean)void :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.face.FaceManager.detectFace(CancellationSignal,FaceDetectionCallback,int)void :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.face.FaceManager.enroll(int,byte[],CancellationSignal,EnrollmentCallback,int[])void :: {'android.permission.MANAGE_BIOMETRIC'}
android.hardware.face.FaceManager.enroll(int,byte[],CancellationSignal,EnrollmentCallback,int[],Surface,boolean)void :: {'android.permission.MANAGE_BIOMETRIC'}
android.hardware.face.FaceManager.enrollRemotely(int,byte[],CancellationSignal,EnrollmentCallback,int[])void :: {'android.permission.MANAGE_BIOMETRIC'}
android.hardware.face.FaceManager.generateChallenge(int,int,GenerateChallengeCallback)void :: {'android.permission.MANAGE_BIOMETRIC'}
android.hardware.face.FaceManager.generateChallenge(int,GenerateChallengeCallback)void :: {'android.permission.MANAGE_BIOMETRIC'}
android.hardware.face.FaceManager.revokeChallenge(int,int,long)void :: {'android.permission.MANAGE_BIOMETRIC'}
android.hardware.face.FaceManager.resetLockout(int,int,byte[])void :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.face.FaceManager.setFeature(int,int,boolean,byte[],SetFeatureCallback)void :: {'android.permission.MANAGE_BIOMETRIC'}
android.hardware.face.FaceManager.getFeature(int,int,GetFeatureCallback)void :: {'android.permission.MANAGE_BIOMETRIC'}
android.hardware.face.FaceManager.remove(Face,int,RemovalCallback)void :: {'android.permission.MANAGE_BIOMETRIC'}
android.hardware.face.FaceManager.removeAll(int,RemovalCallback)void :: {'android.permission.MANAGE_BIOMETRIC'}
android.hardware.face.FaceManager.getEnrolledFaces(int)List<Face> :: {'android.permission.MANAGE_BIOMETRIC'}
android.hardware.face.FaceManager.getEnrolledFaces()List<Face> :: {'android.permission.MANAGE_BIOMETRIC'}
android.hardware.face.FaceManager.hasEnrolledTemplates()boolean :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.face.FaceManager.hasEnrolledTemplates(int)boolean :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.face.FaceManager.isHardwareDetected()boolean :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.face.FaceManager.getSensorPropertiesInternal()List<FaceSensorPropertiesInternal> :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.face.FaceManager.getLockoutModeForUser(int,int)int :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.face.FaceManager.addLockoutResetCallback(LockoutResetCallback)void :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.fingerprint.FingerprintManager.getSensorProperties()List<SensorProperties> :: {'android.permission.TEST_BIOMETRIC'}
android.hardware.fingerprint.FingerprintManager.createTestSession(int)BiometricTestSession :: {'android.permission.TEST_BIOMETRIC'}
android.hardware.fingerprint.FingerprintManager.authenticate(CryptoObject,CancellationSignal,int,AuthenticationCallback,Handler)void :: {'android.permission.USE_BIOMETRIC', 'android.permission.USE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.authenticate(CryptoObject,CancellationSignal,AuthenticationCallback,Handler,int)void :: {'android.permission.USE_BIOMETRIC', 'android.permission.USE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.authenticate(CryptoObject,CancellationSignal,AuthenticationCallback,Handler,int,int,int)void :: {'android.permission.USE_BIOMETRIC', 'android.permission.USE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.detectFingerprint(CancellationSignal,FingerprintDetectionCallback,int)void :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.fingerprint.FingerprintManager.enroll(byte,CancellationSignal,int,EnrollmentCallback,int)void :: {'android.permission.MANAGE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.generateChallenge(int,int,GenerateChallengeCallback)void :: {'android.permission.MANAGE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.generateChallenge(int,GenerateChallengeCallback)void :: {'android.permission.MANAGE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.revokeChallenge(int,long)void :: {'android.permission.MANAGE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.resetLockout(int,int,byte[])void :: {'android.permission.RESET_FINGERPRINT_LOCKOUT'}
android.hardware.fingerprint.FingerprintManager.remove(Fingerprint,int,RemovalCallback)void :: {'android.permission.MANAGE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.removeAll(int,RemovalCallback)void :: {'android.permission.MANAGE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.rename(int,int,String)void :: {'android.permission.MANAGE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints(int)List<Fingerprint> :: {'android.permission.R', 'android.permission. trackingBug = 170729553'}
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints()List<Fingerprint> :: {'android.permission.USE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.setUdfpsOverlayController(IUdfpsOverlayController)void :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.fingerprint.FingerprintManager.setSidefpsController(ISidefpsController)void :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.fingerprint.FingerprintManager.onPointerDown(long,int,int,int,float,float)void :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.fingerprint.FingerprintManager.onPointerUp(long,int)void :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.fingerprint.FingerprintManager.onUiReady(long,int)void :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints()boolean :: {'android.permission.USE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints(int)boolean :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.USE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.isHardwareDetected()boolean :: {'android.permission.USE_FINGERPRINT'}
android.hardware.fingerprint.FingerprintManager.getSensorPropertiesInternal()List<FingerprintSensorPropertiesInternal> :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.fingerprint.FingerprintManager.addAuthenticatorsRegisteredCallback(IFingerprintAuthenticatorsRegisteredCallback)void :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.fingerprint.FingerprintManager.getLockoutModeForUser(int,int)int :: {'android.permission.USE_BIOMETRIC_INTERNAL'}
android.hardware.hdmi.HdmiControlManager.setStandbyMode(boolean)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.toggleAndFollowTvPower()void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.shouldHandleTvPowerKey()boolean :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.setHdmiCecVolumeControlEnabled(int)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.getHdmiCecVolumeControlEnabled()int :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.addHotplugEventListener(HotplugEventListener)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.addHotplugEventListener(Executor,HotplugEventListener)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.removeHotplugEventListener(HotplugEventListener)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.addHdmiControlStatusChangeListener(HdmiControlStatusChangeListener)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.addHdmiControlStatusChangeListener(Executor,HdmiControlStatusChangeListener)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.removeHdmiControlStatusChangeListener(HdmiControlStatusChangeListener)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.addHdmiCecVolumeControlFeatureListener(Executor,HdmiCecVolumeControlFeatureListener)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.removeHdmiCecVolumeControlFeatureListener(HdmiCecVolumeControlFeatureListener)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.getUserCecSettings()List<String> :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.getAllowedCecSettingStringValues(String)List<String> :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.getAllowedCecSettingIntValues(String)List<Integer> :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.setHdmiCecEnabled(int)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.getHdmiCecEnabled()int :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.addHdmiCecEnabledChangeListener(CecSettingChangeListener)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.addHdmiCecEnabledChangeListener(Executor,CecSettingChangeListener)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.removeHdmiCecEnabledChangeListener(CecSettingChangeListener)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.setHdmiCecVersion(int)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.getHdmiCecVersion()int :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.setRoutingControl(int)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.getRoutingControl()int :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.setPowerControlMode(String)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.getPowerControlMode()String :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.setPowerStateChangeOnActiveSourceLost(String)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.getPowerStateChangeOnActiveSourceLost()String :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.setSystemAudioControl(int)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.getSystemAudioControl()int :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.setSystemAudioModeMuting(int)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.getSystemAudioModeMuting()int :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.setTvWakeOnOneTouchPlay(int)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.getTvWakeOnOneTouchPlay()int :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.setTvSendStandbyOnSleep(int)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.getTvSendStandbyOnSleep()int :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.setSadPresenceInQuery(String,int)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.setSadsPresenceInQuery(List<String>,int)void :: {'android.permission.HDMI_CEC'}
android.hardware.hdmi.HdmiControlManager.getSadPresenceInQuery(String)int :: {'android.permission.HDMI_CEC'}
android.hardware.input.InputManager.setCurrentKeyboardLayoutForInputDevice(InputDeviceIdentifier,String)void :: {'android.permission.SET_KEYBOARD_LAYOUT'}
android.hardware.input.InputManager.addKeyboardLayoutForInputDevice(InputDeviceIdentifier,String)void :: {'android.permission.SET_KEYBOARD_LAYOUT'}
android.hardware.input.InputManager.removeKeyboardLayoutForInputDevice(InputDeviceIdentifier,String)void :: {'android.permission.SET_KEYBOARD_LAYOUT'}
android.hardware.input.InputManager.if(opacity)float :: {'android.permission. to = 1', 'android.permission.WRITE_SECURE_SETTINGS)\n    public void setMaximumObscuringOpacityForTouch(@FloatRange(from = 0'}
android.hardware.input.InputManager.setBlockUntrustedTouchesMode(Context,int)void :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.hardware.input.InputManager.injectInputEvent(InputEvent,int,int)boolean :: {'android.permission.INJECT_EVENTS'}
android.hardware.input.InputManager.injectInputEvent(InputEvent,int)boolean :: {'android.permission.INJECT_EVENTS'}
android.hardware.input.VirtualKeyboard.close()void :: {'android.permission.CREATE_VIRTUAL_DEVICE'}
android.hardware.input.VirtualKeyboard.sendKeyEvent(VirtualKeyEvent)void :: {'android.permission.CREATE_VIRTUAL_DEVICE'}
android.hardware.input.VirtualMouse.close()void :: {'android.permission.CREATE_VIRTUAL_DEVICE'}
android.hardware.input.VirtualMouse.sendButtonEvent(VirtualMouseButtonEvent)void :: {'android.permission.CREATE_VIRTUAL_DEVICE'}
android.hardware.input.VirtualMouse.sendScrollEvent(VirtualMouseScrollEvent)void :: {'android.permission.CREATE_VIRTUAL_DEVICE'}
android.hardware.input.VirtualMouse.sendRelativeEvent(VirtualMouseRelativeEvent)void :: {'android.permission.CREATE_VIRTUAL_DEVICE'}
android.hardware.input.VirtualMouse.getCursorPosition()PointF :: {'android.permission.CREATE_VIRTUAL_DEVICE'}
android.hardware.input.VirtualTouchscreen.close()void :: {'android.permission.CREATE_VIRTUAL_DEVICE'}
android.hardware.input.VirtualTouchscreen.sendTouchEvent(VirtualTouchEvent)void :: {'android.permission.CREATE_VIRTUAL_DEVICE'}
android.hardware.lights.SystemLightsManager.getLights()List<Light> :: {'android.permission.CONTROL_DEVICE_LIGHTS'}
android.hardware.lights.SystemLightsManager.getLightState(Light)LightState :: {'android.permission.CONTROL_DEVICE_LIGHTS'}
android.hardware.lights.SystemLightsManager.openSession()LightsSession :: {'android.permission.CONTROL_DEVICE_LIGHTS'}
android.hardware.lights.SystemLightsManager.openSession(int)LightsSession :: {'android.permission.CONTROL_DEVICE_LIGHTS'}
android.hardware.lights.SystemLightsManager.SystemLightsSession()SystemLightsSession() :: {'android.permission.CONTROL_DEVICE_LIGHTS'}
android.hardware.lights.SystemLightsManager.requestLights(LightsRequest)void :: {'android.permission.CONTROL_DEVICE_LIGHTS'}
android.hardware.lights.SystemLightsManager.close()void :: {'android.permission.CONTROL_DEVICE_LIGHTS'}
android.hardware.location.ContextHubClient.sendMessageToNanoApp(NanoAppMessage)int :: {'android.permission.ACCESS_CONTEXT_HUB'}
android.hardware.location.ContextHubManager.getContextHubHandles()int[] :: {'android.permission.ACCESS_CONTEXT_HUB'}
android.hardware.location.ContextHubManager.getContextHubInfo(int)ContextHubInfo :: {'android.permission.ACCESS_CONTEXT_HUB'}
android.hardware.location.ContextHubManager.loadNanoApp(int,NanoApp)int :: {'android.permission.ACCESS_CONTEXT_HUB'}
android.hardware.location.ContextHubManager.unloadNanoApp(int)int :: {'android.permission.ACCESS_CONTEXT_HUB'}
android.hardware.location.ContextHubManager.getNanoAppInstanceInfo(int)NanoAppInstanceInfo :: {'android.permission.ACCESS_CONTEXT_HUB'}
android.hardware.location.ContextHubManager.findNanoAppOnHub(int,NanoAppFilter)int[] :: {'android.permission.ACCESS_CONTEXT_HUB'}
android.hardware.location.ContextHubManager.sendMessage(int,int,ContextHubMessage)int :: {'android.permission.ACCESS_CONTEXT_HUB'}
android.hardware.location.ContextHubManager.getContextHubs()List<ContextHubInfo> :: {'android.permission.ACCESS_CONTEXT_HUB'}
android.hardware.location.ContextHubManager.loadNanoApp(ContextHubInfo,NanoAppBinary)ContextHubTransaction<Void> :: {'android.permission.ACCESS_CONTEXT_HUB'}
android.hardware.location.ContextHubManager.unloadNanoApp(ContextHubInfo,long)ContextHubTransaction<Void> :: {'android.permission.ACCESS_CONTEXT_HUB'}
android.hardware.location.ContextHubManager.enableNanoApp(ContextHubInfo,long)ContextHubTransaction<Void> :: {'android.permission.ACCESS_CONTEXT_HUB'}
android.hardware.location.ContextHubManager.disableNanoApp(ContextHubInfo,long)ContextHubTransaction<Void> :: {'android.permission.ACCESS_CONTEXT_HUB'}
android.hardware.location.ContextHubManager.queryNanoApps(ContextHubInfo)ContextHubTransaction<List<NanoAppState>> :: {'android.permission.ACCESS_CONTEXT_HUB'}
android.hardware.location.ContextHubManager.createClient(Context,ContextHubInfo,Executor,ContextHubClientCallback)ContextHubClient :: {'android.permission.ACCESS_CONTEXT_HUB'}
android.hardware.location.ContextHubManager.createClient(ContextHubInfo,ContextHubClientCallback,Executor)ContextHubClient :: {'android.permission.ACCESS_CONTEXT_HUB'}
android.hardware.location.ContextHubManager.createClient(ContextHubInfo,ContextHubClientCallback)ContextHubClient :: {'android.permission.ACCESS_CONTEXT_HUB'}
android.hardware.location.ContextHubManager.createClient(Context,ContextHubInfo,PendingIntent,long)ContextHubClient :: {'android.permission.ACCESS_CONTEXT_HUB'}
android.hardware.location.ContextHubManager.createClient(ContextHubInfo,PendingIntent,long)ContextHubClient :: {'android.permission.ACCESS_CONTEXT_HUB'}
android.hardware.radio.RadioManager.listModules(List<ModuleProperties>)int :: {'android.permission.ACCESS_BROADCAST_RADIO'}
android.hardware.radio.RadioManager.openTuner(int,BandConfig,boolean,RadioTuner.Callback,Handler)RadioTuner :: {'android.permission.ACCESS_BROADCAST_RADIO'}
android.hardware.radio.RadioManager.addAnnouncementListener(Set<Integer>,Announcement.OnListUpdatedListener)void :: {'android.permission.ACCESS_BROADCAST_RADIO'}
android.hardware.radio.RadioManager.addAnnouncementListener(Executor,Set<Integer>,Announcement.OnListUpdatedListener)void :: {'android.permission.ACCESS_BROADCAST_RADIO'}
android.hardware.radio.RadioManager.removeAnnouncementListener(Announcement.OnListUpdatedListener)void :: {'android.permission.ACCESS_BROADCAST_RADIO'}
android.hardware.soundtrigger.SoundTrigger.listModulesAsOriginator(ArrayList<ModuleProperties>,Identity)int :: {'android.permission.CAPTURE_AUDIO_HOTWORD', 'android.permission.RECORD_AUDIO'}
android.hardware.soundtrigger.SoundTrigger.listModulesAsMiddleman(ArrayList<ModuleProperties>,Identity,Identity)int :: {'android.permission.SOUNDTRIGGER_DELEGATE_IDENTITY'}
android.hardware.soundtrigger.SoundTrigger.attachModuleAsMiddleman(int,SoundTrigger.StatusListener,Handler,Identity,Identity)SoundTriggerModule :: {'android.permission.SOUNDTRIGGER_DELEGATE_IDENTITY'}
android.hardware.soundtrigger.SoundTrigger.attachModuleAsOriginator(int,SoundTrigger.StatusListener,Handler,Identity)SoundTriggerModule :: {'android.permission.CAPTURE_AUDIO_HOTWORD', 'android.permission.RECORD_AUDIO'}
android.hardware.usb.UsbManager.grantPermission(UsbDevice,String)void :: {'android.permission.MANAGE_USB'}
android.hardware.usb.UsbManager.setCurrentFunctions(long)void :: {'android.permission.MANAGE_USB'}
android.hardware.usb.UsbManager.getCurrentFunctions()long :: {'android.permission.MANAGE_USB'}
android.hardware.usb.UsbManager.getUsbBandwidthMbps()int :: {'android.permission.MANAGE_USB'}
android.hardware.usb.UsbManager.getGadgetHalVersion()int :: {'android.permission.MANAGE_USB'}
android.hardware.usb.UsbManager.getUsbHalVersion()int :: {'android.permission.MANAGE_USB'}
android.hardware.usb.UsbManager.resetUsbGadget()void :: {'android.permission.MANAGE_USB'}
android.hardware.usb.UsbManager.enableUsbDataSignal(boolean)boolean :: {'android.permission.MANAGE_USB'}
android.hardware.usb.UsbManager.getPorts()List<UsbPort> :: {'android.permission.MANAGE_USB'}
android.hardware.usb.UsbManager.enableContaminantDetection(UsbPort,boolean)void :: {'android.permission.MANAGE_USB'}
android.hardware.usb.UsbManager.enableLimitPowerTransfer(UsbPort,boolean,int,IUsbOperationInternal)void :: {'android.permission.MANAGE_USB'}
android.hardware.usb.UsbManager.resetUsbPort(UsbPort,int,IUsbOperationInternal)void :: {'android.permission.MANAGE_USB'}
android.hardware.usb.UsbManager.enableUsbData(UsbPort,boolean,int,IUsbOperationInternal)boolean :: {'android.permission.MANAGE_USB'}
android.hardware.usb.UsbManager.enableUsbDataWhileDocked(UsbPort,int,IUsbOperationInternal)void :: {'android.permission.MANAGE_USB'}
android.hardware.usb.UsbPort.getStatus()UsbPortStatus :: {'android.permission.MANAGE_USB'}
android.hardware.usb.UsbPort.setRoles(int,int)void :: {'android.permission.MANAGE_USB'}
android.hardware.usb.UsbPort.resetUsbPort(Executor,Consumer<Integer>)void :: {'android.permission.MANAGE_USB'}
android.hardware.usb.UsbPort.enableUsbData(boolean)int :: {'android.permission.MANAGE_USB'}
android.hardware.usb.UsbPort.enableUsbDataWhileDocked()int :: {'android.permission.MANAGE_USB'}
android.hardware.usb.UsbPort.enableLimitPowerTransfer(boolean)int :: {'android.permission.MANAGE_USB'}
android.location.LastLocationRequest.setHiddenFromAppOps(boolean)Builder :: {'android.permission.UPDATE_APP_OPS_STATS'}
android.location.LastLocationRequest.setAdasGnssBypass(boolean)LastLocationRequest.Builder :: {'android.permission.LOCATION_BYPASS'}
android.location.LastLocationRequest.setLocationSettingsIgnored(boolean)Builder :: {'android.permission.LOCATION_BYPASS'}
android.location.LocationManager.setExtraLocationControllerPackage(String)void :: {'android.permission.LOCATION_HARDWARE'}
android.location.LocationManager.setExtraLocationControllerPackageEnabled(boolean)void :: {'android.permission.LOCATION_HARDWARE'}
android.location.LocationManager.setLocationControllerExtraPackage(String)void :: {'android.permission.LOCATION_HARDWARE'}
android.location.LocationManager.setLocationControllerExtraPackageEnabled(boolean)void :: {'android.permission.LOCATION_HARDWARE'}
android.location.LocationManager.setLocationEnabledForUser(boolean,UserHandle)void :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.location.LocationManager.setAdasGnssLocationEnabled(boolean)void :: {'android.permission.LOCATION_BYPASS'}
android.location.LocationManager.setProviderEnabledForUser(String,boolean,UserHandle)boolean :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.location.LocationManager.setAutomotiveGnssSuspended(boolean)void :: {'android.permission.CONTROL_AUTOMOTIVE_GNSS'}
android.location.LocationManager.isAutomotiveGnssSuspended()boolean :: {'android.permission.CONTROL_AUTOMOTIVE_GNSS'}
android.location.LocationManager.getLastLocation()Location :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.getLastKnownLocation(String)Location :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.getLastKnownLocation(String,LastLocationRequest)Location :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.getCurrentLocation(String,CancellationSignal,Executor,Consumer<Location>)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.getCurrentLocation(LocationRequest,CancellationSignal,Executor,Consumer<Location>)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.getCurrentLocation(String,LocationRequest,CancellationSignal,Executor,Consumer<Location>)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestSingleUpdate(String,LocationListener,Looper)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestSingleUpdate(Criteria,LocationListener,Looper)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestSingleUpdate(String,PendingIntent)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestSingleUpdate(Criteria,PendingIntent)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestLocationUpdates(String,long,float,LocationListener)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestLocationUpdates(String,long,float,LocationListener,Looper)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestLocationUpdates(String,long,float,Executor,LocationListener)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestLocationUpdates(long,float,Criteria,LocationListener,Looper)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestLocationUpdates(long,float,Criteria,Executor,LocationListener)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestLocationUpdates(String,long,float,PendingIntent)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestLocationUpdates(long,float,Criteria,PendingIntent)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestLocationUpdates(LocationRequest,LocationListener,Looper)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestLocationUpdates(LocationRequest,Executor,LocationListener)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestLocationUpdates(LocationRequest,PendingIntent)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestLocationUpdates(String,LocationRequest,Executor,LocationListener)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.requestLocationUpdates(String,LocationRequest,PendingIntent)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.injectLocation(Location)boolean :: {'android.permission.LOCATION_HARDWARE', 'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.isProviderPackage(String)boolean :: {'android.permission.READ_DEVICE_CONFIG'}
android.location.LocationManager.isProviderPackage(String,String)boolean :: {'android.permission.READ_DEVICE_CONFIG'}
android.location.LocationManager.isProviderPackage(String,String,String)boolean :: {'android.permission.READ_DEVICE_CONFIG'}
android.location.LocationManager.addProximityAlert(double,double,float,long,PendingIntent)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.getGpsStatus(GpsStatus)GpsStatus :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.addGpsStatusListener(GpsStatus.Listener)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.registerGnssStatusCallback(GnssStatus.Callback)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.registerGnssStatusCallback(GnssStatus.Callback,Handler)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.registerGnssStatusCallback(Executor,GnssStatus.Callback)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.addNmeaListener(GpsStatus.NmeaListener)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.addNmeaListener(OnNmeaMessageListener)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.addNmeaListener(OnNmeaMessageListener,Handler)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.addNmeaListener(Executor,OnNmeaMessageListener)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback,Handler)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.registerGnssMeasurementsCallback(Executor,GnssMeasurementsEvent.Callback)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.registerGnssMeasurementsCallback(GnssRequest,Executor,GnssMeasurementsEvent.Callback)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.registerGnssMeasurementsCallback(GnssMeasurementRequest,Executor,GnssMeasurementsEvent.Callback)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.injectGnssMeasurementCorrections(GnssMeasurementCorrections)void :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.registerGnssNavigationMessageCallback(GnssNavigationMessage.Callback,Handler)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.registerGnssNavigationMessageCallback(Executor,GnssNavigationMessage.Callback)boolean :: {'android.permission.ACCESS_FINE_LOCATION'}
android.location.LocationManager.addProviderRequestChangedListener(Executor,ChangedListener)void :: {'android.permission.LOCATION_HARDWARE'}
android.location.LocationManager.removeProviderRequestChangedListener(ProviderRequest.ChangedListener)void :: {'android.permission.LOCATION_HARDWARE'}
android.location.LocationManager.registerGnssBatchedLocationCallback(long,boolean,BatchedLocationCallback,Handler)boolean :: {'android.permission.LOCATION_HARDWARE', 'android.permission.UPDATE_APP_OPS_STATS'}
android.location.LocationManager.flushGnssBatch()void :: {'android.permission.LOCATION_HARDWARE'}
android.location.LocationManager.unregisterGnssBatchedLocationCallback(BatchedLocationCallback)boolean :: {'android.permission.LOCATION_HARDWARE'}
android.location.LocationRequest.setLocationSettingsIgnored(boolean)LocationRequest :: {'android.permission.LOCATION_BYPASS'}
android.location.LocationRequest.setHiddenFromAppOps(boolean)Builder :: {'android.permission.UPDATE_APP_OPS_STATS'}
android.location.LocationRequest.setAdasGnssBypass(boolean)Builder :: {'android.permission.LOCATION_BYPASS'}
android.location.LocationRequest.setLocationSettingsIgnored(boolean)Builder :: {'android.permission.LOCATION_BYPASS'}
android.location.LocationRequest.setLowPower(boolean)Builder :: {'android.permission.LOCATION_HARDWARE'}
android.location.LocationRequest.setWorkSource(WorkSource)Builder :: {'android.permission.UPDATE_DEVICE_STATS'}
android.media.AudioAttributes.setSystemUsage(int)Builder :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioAttributes.setHotwordModeEnabled(boolean)Builder :: {'android.permission.CAPTURE_AUDIO_HOTWORD'}
android.media.AudioDeviceVolumeManager.setDeviceAbsoluteVolumeBehavior(AudioDeviceAttributes,VolumeInfo,Executor,OnAudioDeviceVolumeChangedListener,boolean)void :: {'android.permission.BLUETOOTH_PRIVILEGED', 'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioDeviceVolumeManager.setDeviceAbsoluteMultiVolumeBehavior(AudioDeviceAttributes,List<VolumeInfo>,Executor,OnAudioDeviceVolumeChangedListener,boolean)void :: {'android.permission.BLUETOOTH_PRIVILEGED', 'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioDeviceVolumeManager.addOnDeviceVolumeBehaviorChangedListener(Executor,OnDeviceVolumeBehaviorChangedListener)void :: {'android.permission.QUERY_AUDIO_STATE', 'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioDeviceVolumeManager.removeOnDeviceVolumeBehaviorChangedListener(OnDeviceVolumeBehaviorChangedListener)void :: {'android.permission.QUERY_AUDIO_STATE', 'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.setMasterMute(boolean,int)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.getLastAudibleStreamVolume(int)int :: {'android.permission.QUERY_AUDIO_STATE"'}
android.media.AudioManager.setVolumeIndexForAttributes(AudioAttributes,int,int)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.getVolumeIndexForAttributes(AudioAttributes)int :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.getMaxVolumeIndexForAttributes(AudioAttributes)int :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.getMinVolumeIndexForAttributes(AudioAttributes)int :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.setSupportedSystemUsages(int[])void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.getSupportedSystemUsages()int[] :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.forceVolumeControlStream(int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.media.AudioManager.setPreferredDeviceForStrategy(AudioProductStrategy,AudioDeviceAttributes)boolean :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.removePreferredDeviceForStrategy(AudioProductStrategy)boolean :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.getPreferredDeviceForStrategy(AudioProductStrategy)AudioDeviceAttributes :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.setPreferredDevicesForStrategy(AudioProductStrategy,List<AudioDeviceAttributes>)boolean :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.getPreferredDevicesForStrategy(AudioProductStrategy)List<AudioDeviceAttributes> :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.addOnPreferredDeviceForStrategyChangedListener(Executor,OnPreferredDeviceForStrategyChangedListener)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.removeOnPreferredDeviceForStrategyChangedListener(OnPreferredDeviceForStrategyChangedListener)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.addOnPreferredDevicesForStrategyChangedListener(Executor,OnPreferredDevicesForStrategyChangedListener)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.removeOnPreferredDevicesForStrategyChangedListener(OnPreferredDevicesForStrategyChangedListener)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.setPreferredDeviceForCapturePreset(int,AudioDeviceAttributes)boolean :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.clearPreferredDevicesForCapturePreset(int)boolean :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.getPreferredDevicesForCapturePreset(int)List<AudioDeviceAttributes> :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.addOnPreferredDevicesForCapturePresetChangedListener(Executor,OnPreferredDevicesForCapturePresetChangedListener)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.removeOnPreferredDevicesForCapturePresetChangedListener(OnPreferredDevicesForCapturePresetChangedListener)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.setHfpEnabled(boolean)void :: {'android.permission.BLUETOOTH_STACK'}
android.media.AudioManager.setHfpVolume(int)void :: {'android.permission.BLUETOOTH_STACK'}
android.media.AudioManager.setHfpSamplingRate(int)void :: {'android.permission.BLUETOOTH_STACK'}
android.media.AudioManager.setBluetoothHeadsetProperties(String,boolean,boolean)void :: {'android.permission.BLUETOOTH_STACK'}
android.media.AudioManager.setA2dpSuspended(boolean)void :: {'android.permission.BLUETOOTH_STACK'}
android.media.AudioManager.requestAudioFocus(OnAudioFocusChangeListener,AudioAttributes,int,int)int :: {'android.permission.MODIFY_PHONE_STATE'}
android.media.AudioManager.requestAudioFocus(OnAudioFocusChangeListener,AudioAttributes,int,int,AudioPolicy)int :: {'android.permission.MODIFY_AUDIO_ROUTING', 'android.permission.MODIFY_PHONE_STATE'}
android.media.AudioManager.requestAudioFocusForTest(AudioFocusRequest,String,int,int)int :: {'android.permission.QUERY_AUDIO_STATE"'}
android.media.AudioManager.abandonAudioFocusForTest(AudioFocusRequest,String)int :: {'android.permission.QUERY_AUDIO_STATE"'}
android.media.AudioManager.getFadeOutDurationOnFocusLossMillis(AudioAttributes)long :: {'android.permission.QUERY_AUDIO_STATE")\n    public @IntRange(from = 0'}
android.media.AudioManager.requestAudioFocus(AudioFocusRequest,AudioPolicy)int :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.setFocusRequestResult(AudioFocusInfo,int,AudioPolicy)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.dispatchAudioFocusChange(AudioFocusInfo,int,AudioPolicy)int :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.registerAudioPolicy(AudioPolicy)int :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.unregisterAudioPolicyAsync(AudioPolicy)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.unregisterAudioPolicy(AudioPolicy)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.getDevicesForAttributes(AudioAttributes)List<AudioDeviceAttributes> :: {'android.permission.QUERY_AUDIO_STATE', 'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.setDeviceVolumeBehavior(AudioDeviceAttributes,int)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.getDeviceVolumeBehavior(AudioDeviceAttributes)int :: {'android.permission.QUERY_AUDIO_STATE', 'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.isFullVolumeDevice()boolean :: {'android.permission.QUERY_AUDIO_STATE', 'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.setWiredDeviceConnectionState(int,int,String,String)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.setWiredDeviceConnectionState(AudioDeviceAttributes,int)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.setTestDeviceConnectionState(AudioDeviceAttributes,boolean)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.handleBluetoothActiveDeviceChanged(BluetoothDevice,BluetoothDevice,BluetoothProfileConnectionInfo)void :: {'android.permission.BLUETOOTH_STACK'}
android.media.AudioManager.Objects.requireNonNull(device)long :: {'android.permission. @IntRange(from = 0', 'android.permission.MODIFY_AUDIO_ROUTING)\n    public boolean setAdditionalOutputDeviceDelay(\n            @NonNull AudioDeviceInfo device'}
android.media.AudioManager.setEncodedSurroundMode(int)boolean :: {'android.permission.WRITE_SETTINGS'}
android.media.AudioManager.setSurroundFormatEnabled(int,boolean)boolean :: {'android.permission.WRITE_SETTINGS'}
android.media.AudioManager.isUltrasoundSupported()boolean :: {'android.permission.ACCESS_ULTRASOUND'}
android.media.AudioManager.getAudioProductStrategies()List<AudioProductStrategy> :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.getAudioVolumeGroups()List<AudioVolumeGroup> :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.setMultiAudioFocusEnabled(boolean)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.isPstnCallAudioInterceptable()boolean :: {'android.permission.CALL_AUDIO_INTERCEPTION'}
android.media.AudioManager.getCallUplinkInjectionAudioTrack(AudioFormat)AudioTrack :: {'android.permission.CALL_AUDIO_INTERCEPTION'}
android.media.AudioManager.getCallDownlinkExtractionAudioRecord(AudioFormat)AudioRecord :: {'android.permission.CALL_AUDIO_INTERCEPTION'}
android.media.AudioManager.muteAwaitConnection(int[],AudioDeviceAttributes,long,TimeUnit)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.getMutingExpectedDevice()AudioDeviceAttributes :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.cancelMuteAwaitConnection(AudioDeviceAttributes)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.registerMuteAwaitConnectionCallback(Executor,MuteAwaitConnectionCallback)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.unregisterMuteAwaitConnectionCallback(MuteAwaitConnectionCallback)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.addAssistantServicesUids(int[])void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.removeAssistantServicesUids(int[])void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.getAssistantServicesUids()int[] :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.setActiveAssistantServiceUids(int[])void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioManager.getActiveAssistantServicesUids()int[] :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioRecord.AudioRecord(int,int,int,int,int)AudioRecord(int :: {'android.permission.RECORD_AUDIO'}
android.media.AudioRecord.AudioRecord(AudioAttributes,AudioFormat,int,int)AudioRecord(AudioAttributes :: {'android.permission.RECORD_AUDIO'}
android.media.AudioRecord.setMaxSharedAudioHistoryMillis(long)Builder :: {'android.permission.CAPTURE_AUDIO_HOTWORD'}
android.media.AudioRecord.build()AudioRecord :: {'android.permission.RECORD_AUDIO'}
android.media.AudioRecord.Objects.requireNonNull(sharedPackage)long :: {'android.permission.\n                                  @IntRange(from = 0', 'android.permission.CAPTURE_AUDIO_HOTWORD)\n    @NonNull public MediaSyncEvent shareAudioHistory(@NonNull String sharedPackage'}
android.media.AudioRecordingConfiguration.getClientUid()int :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.AudioSystem.getMasterBalance()float :: {'android.permission.MODIFY_AUDIO_SETTINGS'}
android.media.AudioSystem.setMasterBalance(float)int :: {'android.permission.MODIFY_AUDIO_SETTINGS'}
android.media.AudioTrack.if(contentId)int :: {'android.permission.MODIFY_AUDIO_ROUTING)\n        public TunerConfiguration(\n                @IntRange(from = 0) int contentId', 'android.permission. @IntRange(from = 1'}
android.media.AudioTrack.getContentId()int :: {'android.permission.MODIFY_AUDIO_ROUTING)\n        public @IntRange(from = 1'}
android.media.AudioTrack.getSyncId()int :: {'android.permission.MODIFY_AUDIO_ROUTING)\n        public @IntRange(from = 1'}
android.media.AudioTrack.setTunerConfiguration(TunerConfiguration)Builder :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.MediaCodec.createByCodecNameForClient(String,int,int)MediaCodec :: {'android.permission.MEDIA_RESOURCE_OVERRIDE_PID'}
android.media.MediaPlayer.setOnRtpRxNoticeListener(Context,Executor,OnRtpRxNoticeListener)void :: {'android.permission.BIND_IMS_SERVICE'}
android.media.MediaRouter2.getInstance(Context,String)MediaRouter2 :: {'android.permission.MEDIA_CONTENT_CONTROL'}
android.media.MediaRouter2.startScan()void :: {'android.permission.MEDIA_CONTENT_CONTROL'}
android.media.MediaRouter2.stopScan()void :: {'android.permission.MEDIA_CONTENT_CONTROL'}
android.media.MediaRouter2.transfer(RoutingController,MediaRoute2Info)void :: {'android.permission.MEDIA_CONTENT_CONTROL'}
android.media.MediaRouter2.setRouteVolume(MediaRoute2Info,int)void :: {'android.permission.MEDIA_CONTENT_CONTROL'}
android.media.RingtoneManager.ensureDefaultRingtones(Context)void :: {'android.permission.WRITE_SETTINGS'}
android.media.Spatializer.isAvailableForDevice(AudioDeviceAttributes)boolean :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.Spatializer.hasHeadTracker(AudioDeviceAttributes)boolean :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.Spatializer.setHeadTrackerEnabled(boolean,AudioDeviceAttributes)void :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.Spatializer.isHeadTrackerEnabled(AudioDeviceAttributes)boolean :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.Spatializer.setEnabled(boolean)void :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.Spatializer.getCompatibleAudioDevices()List<AudioDeviceAttributes> :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.Spatializer.addCompatibleAudioDevice(AudioDeviceAttributes)void :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.Spatializer.removeCompatibleAudioDevice(AudioDeviceAttributes)void :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.Spatializer.getHeadTrackingMode()int :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.Spatializer.getDesiredHeadTrackingMode()int :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.Spatializer.getSupportedHeadTrackingModes()List<Integer> :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.Spatializer.setDesiredHeadTrackingMode(int)void :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.Spatializer.recenterHeadTracker()void :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.Spatializer.addOnHeadTrackingModeChangedListener(Executor,OnHeadTrackingModeChangedListener)void :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.Spatializer.removeOnHeadTrackingModeChangedListener(OnHeadTrackingModeChangedListener)void :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.Spatializer.setOnHeadToSoundstagePoseUpdatedListener(Executor,OnHeadToSoundstagePoseUpdatedListener)void :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.Spatializer.clearOnHeadToSoundstagePoseUpdatedListener()void :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.Spatializer.setGlobalTransform(float[])void :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.Spatializer.setEffectParameter(int,byte[])void :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.Spatializer.getEffectParameter(int,byte[])void :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.Spatializer.getOutput()int :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS)\n    public @IntRange(from = 0'}
android.media.Spatializer.setOnSpatializerOutputChangedListener(Executor,OnSpatializerOutputChangedListener)void :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.Spatializer.clearOnSpatializerOutputChangedListener()void :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.audiofx.AudioEffect.AudioEffect(UUID,AudioDeviceAttributes)AudioEffect(@NonNull :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.audiofx.AudioEffect.isEffectSupportedForDevice(UUID,AudioDeviceAttributes)boolean :: {'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS'}
android.media.audiofx.SourceDefaultEffect.uuid.toString(), :: {'android.permission.toString(', 'android.permission.\n    public SourceDefaultEffect(UUID type', 'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS', 'android.permission. int priority', 'android.permission. UUID uuid'}
android.media.audiofx.StreamDefaultEffect.uuid.toString(), :: {'android.permission.toString(', 'android.permission.\n    public StreamDefaultEffect(UUID type', 'android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS', 'android.permission. int priority', 'android.permission. UUID uuid'}
android.media.audiopolicy.AudioPolicy.getFocusStack()List<AudioFocusInfo> :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.audiopolicy.AudioPolicy.sendFocusLoss(AudioFocusInfo)boolean :: {'android.permission.MODIFY_AUDIO_ROUTING'}
android.media.musicrecognition.MusicRecognitionManager.beginStreamingSearch(RecognitionRequest,Executor,RecognitionCallback)void :: {'android.permission.MANAGE_MUSIC_RECOGNITION'}
android.media.session.MediaSessionManager.setOnVolumeKeyLongPressListener(OnVolumeKeyLongPressListener,Handler)void :: {'android.permission.SET_VOLUME_KEY_LONG_PRESS_LISTENER'}
android.media.session.MediaSessionManager.setOnMediaKeyListener(OnMediaKeyListener,Handler)void :: {'android.permission.SET_MEDIA_KEY_LISTENER'}
android.media.session.MediaSessionManager.addOnMediaKeyEventDispatchedListener(Executor,OnMediaKeyEventDispatchedListener)void :: {'android.permission.MEDIA_CONTENT_CONTROL'}
android.media.session.MediaSessionManager.removeOnMediaKeyEventDispatchedListener(OnMediaKeyEventDispatchedListener)void :: {'android.permission.MEDIA_CONTENT_CONTROL'}
android.media.soundtrigger.SoundTriggerDetector.startRecognition(int)boolean :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerDetector.stopRecognition()boolean :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerManager.updateModel(Model)void :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerManager.getModel(UUID)Model :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerManager.deleteModel(UUID)void :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerManager.createSoundTriggerDetector(UUID,SoundTriggerDetector.Callback,Handler)SoundTriggerDetector :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerManager.loadSoundModel(SoundModel)int :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerManager.startRecognition(UUID,Bundle,ComponentName,RecognitionConfig)int :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerManager.stopRecognition(UUID)int :: {'android.permission.R', 'android.permission. trackingBug = 170729553'}
android.media.soundtrigger.SoundTriggerManager.unloadSoundModel(UUID)int :: {'android.permission.R', 'android.permission. trackingBug = 170729553'}
android.media.soundtrigger.SoundTriggerManager.isRecognitionActive(UUID)boolean :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerManager.getModelState(UUID)int :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerManager.getModuleProperties()SoundTrigger.ModuleProperties :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerManager.setParameter(UUID,int,int)int :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerManager.getParameter(UUID,int)int :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.soundtrigger.SoundTriggerManager.queryParameter(UUID,int)ModelParamRange :: {'android.permission.MANAGE_SOUND_TRIGGER'}
android.media.tv.TvInputManager.onCurrentTunedInfosUpdated(List<TunedInfo>)void :: {'android.permission.ACCESS_TUNED_INFO'}
android.media.tv.TvInputManager.getAvailableExtensionInterfaceNames(String)List<String> :: {'android.permission.TIS_EXTENSION_INTERFACE'}
android.media.tv.TvInputManager.getExtensionInterface(String,String)IBinder :: {'android.permission.TIS_EXTENSION_INTERFACE'}
android.media.tv.TvInputManager.setParentalControlsEnabled(boolean)void :: {'android.permission.MODIFY_PARENTAL_CONTROLS'}
android.media.tv.TvInputManager.addBlockedRating(TvContentRating)void :: {'android.permission.MODIFY_PARENTAL_CONTROLS'}
android.media.tv.TvInputManager.removeBlockedRating(TvContentRating)void :: {'android.permission.MODIFY_PARENTAL_CONTROLS'}
android.media.tv.TvInputManager.getTvContentRatingSystemList()List<TvContentRatingSystemInfo> :: {'android.permission.READ_CONTENT_RATING_SYSTEMS'}
android.media.tv.TvInputManager.notifyPreviewProgramBrowsableDisabled(String,long)void :: {'android.permission.NOTIFY_TV_INPUTS'}
android.media.tv.TvInputManager.notifyWatchNextProgramBrowsableDisabled(String,long)void :: {'android.permission.NOTIFY_TV_INPUTS'}
android.media.tv.TvInputManager.notifyPreviewProgramAddedToWatchNext(String,long,long)void :: {'android.permission.NOTIFY_TV_INPUTS'}
android.media.tv.TvInputManager.getClientPid(String)int :: {'android.permission.TUNER_RESOURCE_ACCESS'}
android.media.tv.TvInputManager.getClientPriority(int,String)int :: {'android.permission.TUNER_RESOURCE_ACCESS'}
android.media.tv.TvInputManager.getClientPriority(int)int :: {'android.permission.TUNER_RESOURCE_ACCESS'}
android.media.tv.TvInputManager.getAvailableTvStreamConfigList(String)List<TvStreamConfig> :: {'android.permission.CAPTURE_TV_INPUT'}
android.media.tv.TvInputManager.captureFrame(String,Surface,TvStreamConfig)boolean :: {'android.permission.CAPTURE_TV_INPUT'}
android.media.tv.TvInputManager.isSingleSessionActive()boolean :: {'android.permission.CAPTURE_TV_INPUT'}
android.media.tv.TvInputManager.getHardwareList()List<TvInputHardwareInfo> :: {'android.permission.TV_INPUT_HARDWARE'}
android.media.tv.TvInputManager.acquireTvInputHardware(int,HardwareCallback,TvInputInfo)Hardware :: {'android.permission.TV_INPUT_HARDWARE'}
android.media.tv.TvInputManager.acquireTvInputHardware(int,TvInputInfo,HardwareCallback)Hardware :: {'android.permission.TV_INPUT_HARDWARE'}
android.media.tv.TvInputManager.acquireTvInputHardware(int,TvInputInfo,String,int,Executor,HardwareCallback)Hardware :: {'android.permission.TV_INPUT_HARDWARE'}
android.media.tv.TvInputManager.releaseTvInputHardware(int,Hardware)void :: {'android.permission.TV_INPUT_HARDWARE'}
android.media.tv.TvInputManager.getDvbDeviceList()List<DvbDeviceInfo> :: {'android.permission.DVB_DEVICE'}
android.media.tv.TvInputManager.openDvbDevice(DvbDeviceInfo,int)ParcelFileDescriptor :: {'android.permission.DVB_DEVICE'}
android.media.tv.TvInputManager.getCurrentTunedInfos()List<TunedInfo> :: {'android.permission.ACCESS_TUNED_INFO'}
android.media.tv.TvView.setMain()void :: {'android.permission.CHANGE_HDMI_CEC_ACTIVE_SOURCE'}
android.media.tv.TvView.unblockContent(TvContentRating)void :: {'android.permission.MODIFY_PARENTAL_CONTROLS'}
android.media.tv.tuner.Tuner.Tuner(Context,String,int)Tuner(@NonNull :: {'android.permission.ACCESS_TV_TUNER'}
android.media.tv.tuner.Tuner.updateResourcePriority(int,int)void :: {'android.permission.TUNER_RESOURCE_ACCESS'}
android.media.tv.tuner.Tuner.hasUnusedFrontend(int)boolean :: {'android.permission.TUNER_RESOURCE_ACCESS'}
android.media.tv.tuner.Tuner.openDescrambler()Descrambler :: {'android.permission.ACCESS_TV_DESCRAMBLER'}
android.media.tv.tuner.Tuner.openSharedFilter(Context,String,Executor,SharedFilterCallback)public :: {'android.permission.ACCESS_TV_SHARED_FILTER'}
android.media.voice.KeyphraseModelManager.getKeyphraseSoundModel(int,Locale)SoundTrigger.KeyphraseSoundModel :: {'android.permission.MANAGE_VOICE_KEYPHRASES'}
android.media.voice.KeyphraseModelManager.updateKeyphraseSoundModel(SoundTrigger.KeyphraseSoundModel)void :: {'android.permission.MANAGE_VOICE_KEYPHRASES'}
android.media.voice.KeyphraseModelManager.deleteKeyphraseSoundModel(int,Locale)void :: {'android.permission.MANAGE_VOICE_KEYPHRASES'}
android.net.NetworkPolicyManager.registerSubscriptionCallback(SubscriptionCallback)void :: {'android.permission.OBSERVE_NETWORK_POLICY'}
android.net.NetworkPolicyManager.unregisterSubscriptionCallback(SubscriptionCallback)void :: {'android.permission.OBSERVE_NETWORK_POLICY'}
android.net.NetworkPolicyManager.getRestrictBackgroundStatus(int)int :: {'android.permission.PERMISSION_MAINLINE_NETWORK_STACK'}
android.net.NetworkPolicyManager.getSubscriptionPlan(NetworkTemplate)SubscriptionPlan :: {'android.permission.NETWORK_STACK', 'android.permission.PERMISSION_MAINLINE_NETWORK_STACK'}
android.net.NetworkPolicyManager.notifyStatsProviderWarningReached()void :: {'android.permission.NETWORK_STACK', 'android.permission.PERMISSION_MAINLINE_NETWORK_STACK'}
android.net.NetworkPolicyManager.notifyStatsProviderLimitReached()void :: {'android.permission.NETWORK_STACK', 'android.permission.PERMISSION_MAINLINE_NETWORK_STACK'}
android.net.NetworkPolicyManager.isUidNetworkingBlocked(int,boolean)boolean :: {'android.permission.OBSERVE_NETWORK_POLICY'}
android.net.NetworkPolicyManager.isUidRestrictedOnMeteredNetworks(int)boolean :: {'android.permission.OBSERVE_NETWORK_POLICY'}
android.net.NetworkPolicyManager.getMultipathPreference(Network)int :: {'android.permission.PERMISSION_MAINLINE_NETWORK_STACK'}
android.net.NetworkPolicyManager.registerNetworkPolicyCallback(Executor,NetworkPolicyCallback)void :: {'android.permission.OBSERVE_NETWORK_POLICY'}
android.net.NetworkPolicyManager.unregisterNetworkPolicyCallback(NetworkPolicyCallback)void :: {'android.permission.OBSERVE_NETWORK_POLICY'}
android.net.NetworkScoreManager.getActiveScorerPackage()String :: {'android.permission.REQUEST_NETWORK_SCORES', 'android.permission.SCORE_NETWORKS'}
android.net.NetworkScoreManager.getActiveScorer()NetworkScorerAppData :: {'android.permission.REQUEST_NETWORK_SCORES'}
android.net.NetworkScoreManager.getAllValidScorers()List<NetworkScorerAppData> :: {'android.permission.REQUEST_NETWORK_SCORES'}
android.net.NetworkScoreManager.updateScores(ScoredNetwork[])boolean :: {'android.permission.SCORE_NETWORKS'}
android.net.NetworkScoreManager.clearScores()boolean :: {'android.permission.REQUEST_NETWORK_SCORES', 'android.permission.SCORE_NETWORKS'}
android.net.NetworkScoreManager.setActiveScorer(String)boolean :: {'android.permission.REQUEST_NETWORK_SCORES', 'android.permission.SCORE_NETWORKS'}
android.net.NetworkScoreManager.disableScoring()void :: {'android.permission.REQUEST_NETWORK_SCORES', 'android.permission.SCORE_NETWORKS'}
android.net.NetworkScoreManager.requestScores(NetworkKey[])boolean :: {'android.permission.REQUEST_NETWORK_SCORES'}
android.net.NetworkScoreManager.requestScores(Collection<NetworkKey>)boolean :: {'android.permission.REQUEST_NETWORK_SCORES'}
android.net.NetworkScoreManager.registerNetworkScoreCache(int,INetworkScoreCache)void :: {'android.permission. int', 'android.permission. INetworkScoreCache', 'android.permission.REQUEST_NETWORK_SCORES)\n    @Deprecated // migrate to registerNetworkScoreCache(int'}
android.net.NetworkScoreManager.registerNetworkScoreCache(int,INetworkScoreCache,int)void :: {'android.permission.REQUEST_NETWORK_SCORES'}
android.net.NetworkScoreManager.unregisterNetworkScoreCache(int,INetworkScoreCache)void :: {'android.permission.REQUEST_NETWORK_SCORES'}
android.net.NetworkScoreManager.registerNetworkScoreCallback(int,int,Executor,NetworkScoreCallback)void :: {'android.permission.REQUEST_NETWORK_SCORES'}
android.net.NetworkScoreManager.isCallerActiveScorer(int)boolean :: {'android.permission.REQUEST_NETWORK_SCORES'}
android.net.PacProxyManager.addPacProxyInstalledListener(Executor,PacProxyInstalledListener)void :: {'android.permission.NETWORK_STACK', 'android.permission.NETWORK_SETTINGS', 'android.permission.PERMISSION_MAINLINE_NETWORK_STACK'}
android.net.PacProxyManager.removePacProxyInstalledListener(PacProxyInstalledListener)void :: {'android.permission.NETWORK_STACK', 'android.permission.NETWORK_SETTINGS', 'android.permission.PERMISSION_MAINLINE_NETWORK_STACK'}
android.net.PacProxyManager.setCurrentProxyScriptUrl(ProxyInfo)void :: {'android.permission.NETWORK_STACK', 'android.permission.NETWORK_SETTINGS', 'android.permission.PERMISSION_MAINLINE_NETWORK_STACK'}
android.net.VpnManager.factoryReset()void :: {'android.permission.NETWORK_SETTINGS'}
android.net.VpnManager.setAlwaysOnVpnPackageForUser(int,String,boolean,List<String>)boolean :: {'android.permission.CONTROL_ALWAYS_ON_VPN'}
android.net.VpnManager.getAlwaysOnVpnPackageForUser(int)String :: {'android.permission.CONTROL_ALWAYS_ON_VPN'}
android.net.VpnManager.isVpnLockdownEnabled(int)boolean :: {'android.permission.CONTROL_ALWAYS_ON_VPN'}
android.net.VpnManager.setAppExclusionList(int,String,List<String>)boolean :: {'android.permission.NETWORK_STACK', 'android.permission.NETWORK_SETTINGS', 'android.permission.PERMISSION_MAINLINE_NETWORK_STACK'}
android.net.VpnManager.getAppExclusionList(int,String)List<String> :: {'android.permission.NETWORK_STACK', 'android.permission.NETWORK_SETTINGS', 'android.permission.PERMISSION_MAINLINE_NETWORK_STACK'}
android.net.VpnManager.getVpnLockdownAllowlist(int)List<String> :: {'android.permission.CONTROL_ALWAYS_ON_VPN'}
android.net.VpnService.prepareAndAuthorize(Context)void :: {'android.permission.CONTROL_VPN'}
android.net.vcn.VcnManager.setVcnConfig(ParcelUuid,VcnConfig): :: {'android.permission."carrier privileges") // TODO (b/72967236'}
android.net.vcn.VcnManager.clearVcnConfig(ParcelUuid): :: {'android.permission."carrier privileges") // TODO (b/72967236'}
android.net.vcn.VcnManager.addVcnUnderlyingNetworkPolicyListener(Executor,VcnUnderlyingNetworkPolicyListener)void :: {'android.permission.NETWORK_FACTORY'}
android.net.vcn.VcnManager.getUnderlyingNetworkPolicy(NetworkCapabilities,LinkProperties)VcnUnderlyingNetworkPolicy :: {'android.permission.NETWORK_FACTORY'}
android.net.vcn.VcnManager.addVcnNetworkPolicyChangeListener(Executor,VcnNetworkPolicyChangeListener)void :: {'android.permission.NETWORK_FACTORY'}
android.net.vcn.VcnManager.removeVcnNetworkPolicyChangeListener(VcnNetworkPolicyChangeListener)void :: {'android.permission.NETWORK_FACTORY'}
android.net.vcn.VcnManager.applyVcnNetworkPolicy(NetworkCapabilities,LinkProperties)VcnNetworkPolicyResult :: {'android.permission.NETWORK_FACTORY'}
android.nfc.NfcAdapter.enable()boolean :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.nfc.NfcAdapter.disable()boolean :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.nfc.NfcAdapter.disable(boolean)boolean :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.nfc.NfcAdapter.enableSecureNfc(boolean)boolean :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.nfc.NfcAdapter.enableNdefPush()boolean :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.nfc.NfcAdapter.disableNdefPush()boolean :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.nfc.NfcAdapter.addNfcUnlockHandler(NfcUnlockHandler,String[])boolean :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.nfc.NfcAdapter.removeNfcUnlockHandler(NfcUnlockHandler)boolean :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.nfc.NfcAdapter.setControllerAlwaysOn(boolean)boolean :: {'android.permission.NFC_SET_CONTROLLER_ALWAYS_ON'}
android.nfc.NfcAdapter.isControllerAlwaysOn()boolean :: {'android.permission.NFC_SET_CONTROLLER_ALWAYS_ON'}
android.nfc.NfcAdapter.isControllerAlwaysOnSupported()boolean :: {'android.permission.NFC_SET_CONTROLLER_ALWAYS_ON'}
android.nfc.NfcAdapter.registerControllerAlwaysOnListener(Executor,ControllerAlwaysOnListener)void :: {'android.permission.NFC_SET_CONTROLLER_ALWAYS_ON'}
android.nfc.NfcAdapter.unregisterControllerAlwaysOnListener(ControllerAlwaysOnListener)void :: {'android.permission.NFC_SET_CONTROLLER_ALWAYS_ON'}
android.nfc.cardemulation.CardEmulation.unsetOffHostForService(ComponentName)boolean :: {'android.permission.NFC'}
android.nfc.cardemulation.CardEmulation.setOffHostForService(ComponentName,String)boolean :: {'android.permission.NFC'}
android.nfc.cardemulation.CardEmulation.getAidsForPreferredPaymentService()List<String> :: {'android.permission.NFC_PREFERRED_PAYMENT_INFO'}
android.nfc.cardemulation.CardEmulation.getRouteDestinationForPreferredPaymentService()String :: {'android.permission.NFC_PREFERRED_PAYMENT_INFO'}
android.nfc.cardemulation.CardEmulation.getDescriptionForPreferredPaymentService()CharSequence :: {'android.permission.NFC_PREFERRED_PAYMENT_INFO'}
android.os.BatteryManager.setChargingStateUpdateDelayMillis(int)boolean :: {'android.permission.POWER_SAVER'}
android.os.BatteryStatsManager.getBatteryUsageStats()BatteryUsageStats :: {'android.permission.BATTERY_STATS'}
android.os.BatteryStatsManager.getBatteryUsageStats(BatteryUsageStatsQuery)BatteryUsageStats :: {'android.permission.BATTERY_STATS'}
android.os.BatteryStatsManager.getBatteryUsageStats(List<BatteryUsageStatsQuery>)List<BatteryUsageStats> :: {'android.permission.BATTERY_STATS'}
android.os.BatteryStatsManager.mBatteryStats.noteWifiRssiChanged(newRssi)int :: {'android.permission.UPDATE_DEVICE_STATS)\n    public void reportWifiRssiChanged(@IntRange(from = -127', 'android.permission. to = 0'}
android.os.BatteryStatsManager.reportWifiOn()void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.os.BatteryStatsManager.reportWifiOff()void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.os.BatteryStatsManager.reportWifiState(int,String)void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.os.BatteryStatsManager.reportWifiScanStartedFromSource(WorkSource)void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.os.BatteryStatsManager.reportWifiScanStoppedFromSource(WorkSource)void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.os.BatteryStatsManager.mBatteryStats.noteWifiBatchedScanStartedFromSource(ws,csph)int :: {'android.permission.\n            @IntRange(from = 0', 'android.permission.UPDATE_DEVICE_STATS)\n    public void reportWifiBatchedScanStartedFromSource(@NonNull WorkSource ws'}
android.os.BatteryStatsManager.reportWifiBatchedScanStoppedFromSource(WorkSource)void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.os.BatteryStatsManager.getCellularBatteryStats()CellularBatteryStats :: {'android.permission.UPDATE_DEVICE_STATS', 'android.permission.BATTERY_STATS'}
android.os.BatteryStatsManager.getWifiBatteryStats()WifiBatteryStats :: {'android.permission.UPDATE_DEVICE_STATS', 'android.permission.BATTERY_STATS'}
android.os.BatteryStatsManager.getWakeLockStats()WakeLockStats :: {'android.permission.BATTERY_STATS'}
android.os.BatteryStatsManager.getBluetoothBatteryStats()BluetoothBatteryStats :: {'android.permission.BATTERY_STATS'}
android.os.BatteryStatsManager.reportFullWifiLockAcquiredFromSource(WorkSource)void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.os.BatteryStatsManager.reportFullWifiLockReleasedFromSource(WorkSource)void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.os.BatteryStatsManager.reportWifiSupplicantStateChanged(int,boolean)void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.os.BatteryStatsManager.reportWifiMulticastEnabled(WorkSource)void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.os.BatteryStatsManager.reportWifiMulticastDisabled(WorkSource)void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.os.BatteryStatsManager.reportMobileRadioPowerState(boolean,int)void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.os.BatteryStatsManager.reportWifiRadioPowerState(boolean,int)void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.os.BatteryStatsManager.reportNetworkInterfaceForTransports(String,int[])void :: {'android.permission.NETWORK_STACK', 'android.permission.PERMISSION_MAINLINE_NETWORK_STACK'}
android.os.BatteryStatsManager.reportBluetoothOn(int,int,String)void :: {'android.permission.BLUETOOTH_CONNECT'}
android.os.BatteryStatsManager.reportBluetoothOff(int,int,String)void :: {'android.permission.BLUETOOTH_CONNECT'}
android.os.BatteryStatsManager.reportBleScanStarted(WorkSource,boolean)void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.os.BatteryStatsManager.reportBleScanStopped(WorkSource,boolean)void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.os.BatteryStatsManager.reportBleScanReset()void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.os.BatteryStatsManager.reportBleScanResults(WorkSource,int)void :: {'android.permission.UPDATE_DEVICE_STATS'}
android.os.BatteryStatsManager.setChargerAcOnline(boolean,boolean)void :: {'android.permission.DEVICE_POWER'}
android.os.BatteryStatsManager.setBatteryLevel(int,boolean)void :: {'android.permission.DEVICE_POWER'}
android.os.BatteryStatsManager.unplugBattery(boolean)void :: {'android.permission.DEVICE_POWER'}
android.os.BatteryStatsManager.resetBattery(boolean)void :: {'android.permission.DEVICE_POWER'}
android.os.BatteryStatsManager.suspendBatteryInput()void :: {'android.permission.DEVICE_POWER'}
android.os.BugreportManager.startBugreport(ParcelFileDescriptor,ParcelFileDescriptor,BugreportParams,Executor,BugreportCallback)void :: {'android.permission.DUMP'}
android.os.BugreportManager.requestBugreport(BugreportParams,CharSequence,CharSequence)void :: {'android.permission.DUMP'}
android.os.Build.getSerial()String :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.os.DeviceIdleManager.endIdle(String)void :: {'android.permission.DEVICE_POWER'}
android.os.DropBoxManager.getNextEntry(String,long)Entry :: {'android.permission.READ_LOGS', 'android.permission.PACKAGE_USAGE_STATS'}
android.os.IncidentManager.reportIncident(IncidentReportArgs)void :: {'android.permission.DUMP', 'android.permission.PACKAGE_USAGE_STATS'}
android.os.IncidentManager.requestAuthorization(int,String,int,AuthListener)void :: {'android.permission.REQUEST_INCIDENT_REPORT_APPROVAL'}
android.os.IncidentManager.requestAuthorization(int,String,int,Executor,AuthListener)void :: {'android.permission.REQUEST_INCIDENT_REPORT_APPROVAL'}
android.os.IncidentManager.cancelAuthorization(AuthListener)void :: {'android.permission.REQUEST_INCIDENT_REPORT_APPROVAL'}
android.os.IncidentManager.getPendingReports()List<PendingReport> :: {'android.permission.APPROVE_INCIDENT_REPORTS'}
android.os.IncidentManager.approveReport(Uri)void :: {'android.permission.APPROVE_INCIDENT_REPORTS'}
android.os.IncidentManager.denyReport(Uri)void :: {'android.permission.APPROVE_INCIDENT_REPORTS'}
android.os.IncidentManager.getIncidentReportList(String)List<Uri> :: {'android.permission.DUMP', 'android.permission.PACKAGE_USAGE_STATS'}
android.os.IncidentManager.getIncidentReport(Uri)IncidentReport :: {'android.permission.DUMP', 'android.permission.PACKAGE_USAGE_STATS'}
android.os.IncidentManager.deleteIncidentReports(Uri)void :: {'android.permission.DUMP', 'android.permission.PACKAGE_USAGE_STATS'}
android.os.PowerExemptionManager.addToPermanentAllowList(String)void :: {'android.permission.DEVICE_POWER'}
android.os.PowerExemptionManager.addToPermanentAllowList(List<String>)void :: {'android.permission.DEVICE_POWER'}
android.os.PowerExemptionManager.getAllowListedAppIds(boolean)int[] :: {'android.permission.DEVICE_POWER'}
android.os.PowerExemptionManager.removeFromPermanentAllowList(String)void :: {'android.permission.DEVICE_POWER'}
android.os.PowerExemptionManager.addToTemporaryAllowList(String,int,String,long)void :: {'android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST'}
android.os.PowerExemptionManager.addToTemporaryAllowListForEvent(String,int,String,int)long :: {'android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST'}
android.os.PowerManager.userActivity(long,int,int)void :: {'android.permission.USER_ACTIVITY', 'android.permission.DEVICE_POWER'}
android.os.PowerManager.dream(long)void :: {'android.permission.READ_DREAM_STATE', 'android.permission.WRITE_DREAM_STATE'}
android.os.PowerManager.reboot(String)void :: {'android.permission.REBOOT'}
android.os.PowerManager.rebootSafeMode()void :: {'android.permission.REBOOT'}
android.os.PowerManager.setPowerSaveModeEnabled(boolean)boolean :: {'android.permission.DEVICE_POWER', 'android.permission.POWER_SAVER'}
android.os.PowerManager.setFullPowerSavePolicy(BatterySaverPolicyConfig)boolean :: {'android.permission.DEVICE_POWER', 'android.permission.POWER_SAVER'}
android.os.PowerManager.setDynamicPowerSaveHint(boolean,int)boolean :: {'android.permission.POWER_SAVER'}
android.os.PowerManager.setAdaptivePowerSavePolicy(BatterySaverPolicyConfig)boolean :: {'android.permission.DEVICE_POWER', 'android.permission.POWER_SAVER'}
android.os.PowerManager.setAdaptivePowerSaveEnabled(boolean)boolean :: {'android.permission.DEVICE_POWER', 'android.permission.POWER_SAVER'}
android.os.PowerManager.setBatteryDischargePrediction(Duration,boolean)void :: {'android.permission.DEVICE_POWER', 'android.permission.BATTERY_PREDICTION'}
android.os.PowerManager.isLowPowerStandbySupported()boolean :: {'android.permission.DEVICE_POWER', 'android.permission.MANAGE_LOW_POWER_STANDBY'}
android.os.PowerManager.setLowPowerStandbyEnabled(boolean)void :: {'android.permission.DEVICE_POWER', 'android.permission.MANAGE_LOW_POWER_STANDBY'}
android.os.PowerManager.setLowPowerStandbyActiveDuringMaintenance(boolean)void :: {'android.permission.DEVICE_POWER', 'android.permission.MANAGE_LOW_POWER_STANDBY'}
android.os.PowerManager.forceLowPowerStandbyActive(boolean)void :: {'android.permission.DEVICE_POWER', 'android.permission.MANAGE_LOW_POWER_STANDBY'}
android.os.PowerManager.isAmbientDisplayAvailable()boolean :: {'android.permission.READ_DREAM_STATE'}
android.os.PowerManager.suppressAmbientDisplay(String,boolean)void :: {'android.permission.WRITE_DREAM_STATE'}
android.os.PowerManager.isAmbientDisplaySuppressedForToken(String)boolean :: {'android.permission.READ_DREAM_STATE'}
android.os.PowerManager.isAmbientDisplaySuppressed()boolean :: {'android.permission.READ_DREAM_STATE'}
android.os.PowerManager.isAmbientDisplaySuppressedForTokenByApp(String,int)boolean :: {'android.permission.READ_DREAM_STATE', 'android.permission.READ_DREAM_SUPPRESSION'}
android.os.PowerManager.forceSuspend()boolean :: {'android.permission.DEVICE_POWER'}
android.os.PowerWhitelistManager.addToWhitelist(String)void :: {'android.permission.DEVICE_POWER'}
android.os.PowerWhitelistManager.addToWhitelist(List<String>)void :: {'android.permission.DEVICE_POWER'}
android.os.PowerWhitelistManager.removeFromWhitelist(String)void :: {'android.permission.DEVICE_POWER'}
android.os.PowerWhitelistManager.whitelistAppTemporarily(String,long,int,String)void :: {'android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST'}
android.os.PowerWhitelistManager.whitelistAppTemporarily(String,long)void :: {'android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST'}
android.os.PowerWhitelistManager.whitelistAppTemporarilyForEvent(String,int,String)long :: {'android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST'}
android.os.PowerWhitelistManager.whitelistAppTemporarilyForEvent(String,int,int,String)long :: {'android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST'}
android.os.RecoverySystem.processPackage(Context,File,ProgressListener,Handler)void :: {'android.permission.RECOVERY'}
android.os.RecoverySystem.processPackage(Context,File,ProgressListener)void :: {'android.permission.RECOVERY'}
android.os.RecoverySystem.installPackage(Context,File)void :: {'android.permission.REBOOT', 'android.permission.RECOVERY'}
android.os.RecoverySystem.installPackage(Context,File,boolean)void :: {'android.permission.RECOVERY'}
android.os.RecoverySystem.prepareForUnattendedUpdate(Context,String,IntentSender)void :: {'android.permission.REBOOT', 'android.permission.RECOVERY'}
android.os.RecoverySystem.clearPrepareForUnattendedUpdate(Context)void :: {'android.permission.REBOOT', 'android.permission.RECOVERY'}
android.os.RecoverySystem.rebootAndApply(Context,String,String)void :: {'android.permission.RECOVERY'}
android.os.RecoverySystem.isPreparedForUnattendedUpdate(Context)boolean :: {'android.permission.REBOOT', 'android.permission.RECOVERY'}
android.os.RecoverySystem.rebootAndApply(Context,String,boolean)int :: {'android.permission.REBOOT', 'android.permission.RECOVERY'}
android.os.RecoverySystem.scheduleUpdateOnBoot(Context,File)void :: {'android.permission.RECOVERY'}
android.os.RecoverySystem.cancelScheduledUpdate(Context)void :: {'android.permission.RECOVERY'}
android.os.RecoverySystem.rebootWipeAb(Context,File,String)void :: {'android.permission.REBOOT', 'android.permission.RECOVERY'}
android.os.SystemConfigManager.getDisabledUntilUsedPreinstalledCarrierApps()Set<String> :: {'android.permission.READ_CARRIER_APP_INFO'}
android.os.SystemConfigManager.getDisabledUntilUsedPreinstalledCarrierAssociatedApps()Map<String, :: {'android.permission.READ_CARRIER_APP_INFO'}
android.os.SystemConfigManager.getDisabledUntilUsedPreinstalledCarrierAssociatedAppEntries()Map<String, :: {'android.permission.READ_CARRIER_APP_INFO'}
android.os.SystemConfigManager.getSystemPermissionUids(String)int[] :: {'android.permission.GET_RUNTIME_PERMISSIONS'}
android.os.SystemUpdateManager.retrieveSystemUpdateInfo()Bundle :: {'android.permission.READ_SYSTEM_UPDATE_INFO', 'android.permission.', 'android.permission.RECOVERY'}
android.os.SystemUpdateManager.updateSystemUpdateInfo(PersistableBundle)void :: {'android.permission.READ_SYSTEM_UPDATE_INFO', 'android.permission.RECOVERY'}
android.os.UserManager.canSwitchUsers()boolean :: {'android.permission.READ_PHONE_STATE', 'android.permission.MANAGE_USERS'}
android.os.UserManager.getUserSwitchability()int :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.READ_PHONE_STATE', 'android.permission.MANAGE_USERS'}
android.os.UserManager.getUserSwitchability(UserHandle)int :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.READ_PHONE_STATE', 'android.permission.MANAGE_USERS'}
android.os.UserManager.getUserType()String :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.getUserName()String :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.GET_ACCOUNTS_PRIVILEGED', 'android.permission.QUERY_USERS'}
android.os.UserManager.isUserNameSet()boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.GET_ACCOUNTS_PRIVILEGED', 'android.permission.QUERY_USERS'}
android.os.UserManager.isPrimaryUser()boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.isAdminUser()boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.isUserAdmin(int)boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.isUserOfType(String)boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.isRestrictedProfile(UserHandle)boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.canHaveRestrictedProfile()boolean :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.hasRestrictedProfiles()boolean :: {'android.permission.TIRAMISU'}
android.os.UserManager.getRestrictedProfileParent()UserHandle :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.isGuestUser(int)boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.isGuestUser()boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.isManagedProfile(int)boolean :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.isEphemeralUser()boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.isUserEphemeral(int)boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.isUserRunning(UserHandle)boolean :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.isUserRunning(int)boolean :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.isUserRunningOrStopping(UserHandle)boolean :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.isUserUnlocked(UserHandle)boolean :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.isUserUnlocked(int)boolean :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.isUserUnlockingOrUnlocked(UserHandle)boolean :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.isUserUnlockingOrUnlocked(int)boolean :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.getUserInfo(int)UserInfo :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.getUserRestrictionSource(String,UserHandle)int :: {'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.getUserRestrictionSources(String,UserHandle)List<EnforcingUser> :: {'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.getUserRestrictions(UserHandle)Bundle :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.hasBaseUserRestriction(String,UserHandle)boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.setUserRestriction(String,boolean)void :: {'android.permission.TIRAMISU'}
android.os.UserManager.setUserRestriction(String,boolean,UserHandle)void :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.hasUserRestriction(String,UserHandle)boolean :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.hasUserRestrictionForUser(String,UserHandle)boolean :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.hasUserRestrictionForUser(String,int)boolean :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.createUser(String,String,int)UserInfo :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.createUser(NewUserRequest)NewUserResponse :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.preCreateUser(String)UserInfo :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.createGuest(Context)UserInfo :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.findCurrentGuestUser()UserInfo :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.createProfile(String,String,Set<String>)UserHandle :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.createProfileForUser(String,int,int)UserInfo :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.createProfileForUser(String,String,int,int)UserInfo :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.createProfileForUser(String,String,int,int,String[])UserInfo :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.createProfileForUserEvenWhenDisallowed(String,String,int,int,String[])UserInfo :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.createRestrictedProfile(String)UserInfo :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.getPreInstallableSystemPackages(String)Set<String> :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.getSeedAccountName()String :: {'android.permission.TIRAMISU'}
android.os.UserManager.getSeedAccountType()String :: {'android.permission.TIRAMISU'}
android.os.UserManager.getSeedAccountOptions()PersistableBundle :: {'android.permission.TIRAMISU'}
android.os.UserManager.setSeedAccountData(int,String,String,PersistableBundle)void :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.clearSeedAccountData()void :: {'android.permission.TIRAMISU'}
android.os.UserManager.markGuestForDeletion(int)boolean :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.setUserEnabled(int)void :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.setUserAdmin(int)void :: {'android.permission.MANAGE_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.os.UserManager.evictCredentialEncryptionKey(int)void :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.getUserCount()int :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.getUsers()List<UserInfo> :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.getAliveUsers()List<UserInfo> :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.getUsers(boolean)List<UserInfo> :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.getUsers(boolean,boolean,boolean)List<UserInfo> :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.getUserHandles(boolean)List<UserHandle> :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.getSerialNumbersOfUsers(boolean)long[] :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.getUserAccount(int)String :: {'android.permission.MANAGE_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.os.UserManager.setUserAccount(int,String)void :: {'android.permission.MANAGE_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.os.UserManager.getPrimaryUser()UserInfo :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.canAddMoreUsers()boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.canAddMoreUsers(String)boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.getRemainingCreatableUserCount(String)int :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.getRemainingCreatableProfileCount(String)int :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.canAddMoreManagedProfiles(int,boolean)boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.canAddMoreProfilesToUser(String,int)boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.isUserTypeEnabled(String)boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.getProfiles(int)List<UserInfo> :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.isSameProfileGroup(UserHandle,UserHandle)boolean :: {'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.isSameProfileGroup(int,int)boolean :: {'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.getEnabledProfiles(int)List<UserInfo> :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.getProfileIds(int,boolean)int[] :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.getProfileIdsWithDisabled(int)int[] :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.getEnabledProfileIds(int)int[] :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.getCredentialOwnerProfile(int)int :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.getProfileParent(int)UserInfo :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.getProfileParent(UserHandle)UserHandle :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.requestQuietModeEnabled(boolean,UserHandle)boolean :: {'android.permission.MANAGE_USERS', 'android.permission.MODIFY_QUIET_MODE'}
android.os.UserManager.requestQuietModeEnabled(boolean,UserHandle,IntentSender)boolean :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.isMediaSharedWithParent()boolean :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.removeUser(int)boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.removeUser(UserHandle)boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.removeUserEvenWhenDisallowed(int)boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.removeUserWhenPossible(UserHandle,boolean)int :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.setUserName(int,String)void :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.setUserName(String)void :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.setUserIcon(int,Bitmap)void :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.setUserIcon(Bitmap)void :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.getUserIcon(int)Bitmap :: {'android.permission.MANAGE_USERS', 'android.permission.GET_ACCOUNTS_PRIVILEGED'}
android.os.UserManager.getUserIcon()Bitmap :: {'android.permission.MANAGE_USERS', 'android.permission.GET_ACCOUNTS_PRIVILEGED'}
android.os.UserManager.isUserSwitcherEnabled()boolean :: {'android.permission.MANAGE_USERS', 'android.permission.CREATE_USERS//AndINTERACT_ifdiffprofilegroup'}
android.os.UserManager.isUserSwitcherEnabled(boolean)boolean :: {'android.permission.MANAGE_USERS', 'android.permission.CREATE_USERS//AndINTERACT_ifdiffprofilegroup'}
android.os.UserManager.areThereUsersToWhichToSwitch()boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.setDefaultGuestRestrictions(Bundle)void :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.getDefaultGuestRestrictions()Bundle :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.someUserHasSeedAccount(String,String)boolean :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.someUserHasAccount(String,String)boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
android.os.Vibrator.setAlwaysOnEffect(int,VibrationEffect,VibrationAttributes)boolean :: {'android.permission.VIBRATE_ALWAYS_ON'}
android.os.Vibrator.setAlwaysOnEffect(int,String,int,VibrationEffect,VibrationAttributes)boolean :: {'android.permission.VIBRATE_ALWAYS_ON'}
android.os.Vibrator.vibrate(long)void :: {'android.permission.VIBRATE'}
android.os.Vibrator.vibrate(long,AudioAttributes)void :: {'android.permission.VIBRATE'}
android.os.Vibrator.vibrate(long[],int)void :: {'android.permission.VIBRATE'}
android.os.Vibrator.vibrate(long[],int,AudioAttributes)void :: {'android.permission.VIBRATE'}
android.os.Vibrator.vibrate(VibrationEffect)void :: {'android.permission.VIBRATE'}
android.os.Vibrator.vibrate(VibrationEffect,AudioAttributes)void :: {'android.permission.VIBRATE'}
android.os.Vibrator.vibrate(VibrationEffect,VibrationAttributes)void :: {'android.permission.VIBRATE'}
android.os.Vibrator.vibrate(int,String,VibrationEffect,String,VibrationAttributes)void :: {'android.permission.VIBRATE'}
android.os.Vibrator.cancel()void :: {'android.permission.VIBRATE'}
android.os.Vibrator.cancel(int)void :: {'android.permission.VIBRATE'}
android.os.Vibrator.isVibrating()boolean :: {'android.permission.ACCESS_VIBRATOR_STATE'}
android.os.Vibrator.addVibratorStateListener(OnVibratorStateChangedListener)void :: {'android.permission.ACCESS_VIBRATOR_STATE'}
android.os.Vibrator.addVibratorStateListener(Executor,OnVibratorStateChangedListener)void :: {'android.permission.ACCESS_VIBRATOR_STATE'}
android.os.Vibrator.removeVibratorStateListener(OnVibratorStateChangedListener)void :: {'android.permission.ACCESS_VIBRATOR_STATE'}
android.os.VibratorManager.setAlwaysOnEffect(int,String,int,CombinedVibration,VibrationAttributes)boolean :: {'android.permission.VIBRATE_ALWAYS_ON'}
android.os.VibratorManager.vibrate(CombinedVibration)void :: {'android.permission.VIBRATE'}
android.os.VibratorManager.vibrate(CombinedVibration,VibrationAttributes)void :: {'android.permission.VIBRATE'}
android.os.VibratorManager.vibrate(int,String,CombinedVibration,String,VibrationAttributes)void :: {'android.permission.VIBRATE'}
android.os.VibratorManager.cancel()void :: {'android.permission.VIBRATE'}
android.os.VibratorManager.cancel(int)void :: {'android.permission.VIBRATE'}
android.os.image.DynamicSystemClient.bind()void :: {'android.permission.INSTALL_DYNAMIC_SYSTEM'}
android.os.image.DynamicSystemClient.unbind()void :: {'android.permission.INSTALL_DYNAMIC_SYSTEM'}
android.os.image.DynamicSystemClient.start(Uri,long)void :: {'android.permission.INSTALL_DYNAMIC_SYSTEM'}
android.os.image.DynamicSystemClient.start(Uri,long,long)void :: {'android.permission.INSTALL_DYNAMIC_SYSTEM'}
android.os.image.DynamicSystemManager.setAshmem(ParcelFileDescriptor,long)boolean :: {'android.permission.MANAGE_DYNAMIC_SYSTEM'}
android.os.image.DynamicSystemManager.submitFromAshmem(int)boolean :: {'android.permission.MANAGE_DYNAMIC_SYSTEM'}
android.os.image.DynamicSystemManager.getAvbPublicKey(AvbPublicKey)boolean :: {'android.permission.MANAGE_DYNAMIC_SYSTEM'}
android.os.image.DynamicSystemManager.commit()boolean :: {'android.permission.MANAGE_DYNAMIC_SYSTEM'}
android.os.image.DynamicSystemManager.startInstallation(String)boolean :: {'android.permission.MANAGE_DYNAMIC_SYSTEM'}
android.os.image.DynamicSystemManager.createPartition(String,long,boolean)Pair<Integer, :: {'android.permission.MANAGE_DYNAMIC_SYSTEM'}
android.os.image.DynamicSystemManager.closePartition()boolean :: {'android.permission.MANAGE_DYNAMIC_SYSTEM'}
android.os.image.DynamicSystemManager.finishInstallation()boolean :: {'android.permission.MANAGE_DYNAMIC_SYSTEM'}
android.os.image.DynamicSystemManager.getInstallationProgress()GsiProgress :: {'android.permission.MANAGE_DYNAMIC_SYSTEM'}
android.os.image.DynamicSystemManager.abort()boolean :: {'android.permission.MANAGE_DYNAMIC_SYSTEM'}
android.os.image.DynamicSystemManager.isInUse()boolean :: {'android.permission.MANAGE_DYNAMIC_SYSTEM'}
android.os.image.DynamicSystemManager.isInstalled()boolean :: {'android.permission.MANAGE_DYNAMIC_SYSTEM'}
android.os.image.DynamicSystemManager.isEnabled()boolean :: {'android.permission.MANAGE_DYNAMIC_SYSTEM'}
android.os.image.DynamicSystemManager.remove()boolean :: {'android.permission.MANAGE_DYNAMIC_SYSTEM'}
android.os.image.DynamicSystemManager.setEnable(boolean,boolean)boolean :: {'android.permission.MANAGE_DYNAMIC_SYSTEM'}
android.os.image.DynamicSystemManager.suggestScratchSize()long :: {'android.permission.MANAGE_DYNAMIC_SYSTEM'}
android.os.storage.StorageManager.getManageSpaceActivityIntent(String,int)PendingIntent :: {'android.permission.MANAGE_EXTERNAL_STORAGE'}
android.os.storage.StorageManager.getStorageVolumesIncludingSharedProfiles()List<StorageVolume> :: {'android.permission.MANAGE_EXTERNAL_STORAGE'}
android.os.storage.StorageManager.getExternalStorageMountMode(int,String)int :: {'android.permission.WRITE_MEDIA_STORAGE'}
android.permission.LegacyPermissionManager.grantDefaultPermissionsToLuiApp(String,UserHandle,Executor,Consumer<Boolean>)void :: {'android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS'}
android.permission.LegacyPermissionManager.revokeDefaultPermissionsFromLuiApps(String[],UserHandle,Executor,Consumer<Boolean>)void :: {'android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS'}
android.permission.LegacyPermissionManager.grantDefaultPermissionsToEnabledImsServices(String[],UserHandle,Executor,Consumer<Boolean>)void :: {'android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS'}
android.permission.LegacyPermissionManager.grantDefaultPermissionsToEnabledTelephonyDataServices(String[],UserHandle,Executor,Consumer<Boolean>)void :: {'android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS'}
android.permission.LegacyPermissionManager.revokeDefaultPermissionsFromDisabledTelephonyDataServices(String[],UserHandle,Executor,Consumer<Boolean>)void :: {'android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS'}
android.permission.LegacyPermissionManager.grantDefaultPermissionsToEnabledCarrierApps(String[],UserHandle,Executor,Consumer<Boolean>)void :: {'android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS'}
android.permission.PermissionControllerManager.revokeRuntimePermissions(Map<String,List<String>>,boolean,int,Executor,OnRevokeRuntimePermissionsCallback)void :: {'android.permission.REVOKE_RUNTIME_PERMISSIONS'}
android.permission.PermissionControllerManager.setRuntimePermissionGrantStateByDeviceAdmin(String,AdminPermissionControlParams,Executor,Consumer<Boolean>)void :: {'android.permission.REVOKE_RUNTIME_PERMISSIONS', 'android.permission.GRANT_RUNTIME_PERMISSIONS', 'android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY'}
android.permission.PermissionControllerManager.getRuntimePermissionBackup(UserHandle,Executor,Consumer<byte[]>)void :: {'android.permission.GET_RUNTIME_PERMISSIONS'}
android.permission.PermissionControllerManager.stageAndApplyRuntimePermissionsBackup(byte[],UserHandle)void :: {'android.permission.RESTORE_RUNTIME_PERMISSIONS', 'android.permission.GRANT_RUNTIME_PERMISSIONS'}
android.permission.PermissionControllerManager.applyStagedRuntimePermissionBackup(String,UserHandle,Executor,Consumer<Boolean>)void :: {'android.permission.RESTORE_RUNTIME_PERMISSIONS', 'android.permission.GRANT_RUNTIME_PERMISSIONS'}
android.permission.PermissionControllerManager.getAppPermissions(String,OnGetAppPermissionResultCallback,Handler)void :: {'android.permission.GET_RUNTIME_PERMISSIONS'}
android.permission.PermissionControllerManager.revokeRuntimePermission(String,String)void :: {'android.permission.REVOKE_RUNTIME_PERMISSIONS'}
android.permission.PermissionControllerManager.countPermissionApps(List<String>,int,OnCountPermissionAppsResultCallback,Handler)void :: {'android.permission.GET_RUNTIME_PERMISSIONS'}
android.permission.PermissionControllerManager.getPermissionUsages(boolean,long,Executor,OnPermissionUsageResultCallback)void :: {'android.permission.GET_RUNTIME_PERMISSIONS'}
android.permission.PermissionControllerManager.grantOrUpgradeDefaultRuntimePermissions(Executor,Consumer<Boolean>)void :: {'android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY'}
android.permission.PermissionControllerManager.getPrivilegesDescriptionStringForProfile(String,Executor,Consumer<CharSequence>)void :: {'android.permission.MANAGE_COMPANION_DEVICES'}
android.permission.PermissionControllerManager.notifyOneTimePermissionSessionTimeout(String)void :: {'android.permission.REVOKE_RUNTIME_PERMISSIONS'}
android.permission.PermissionControllerManager.getHibernationEligibility(String,Executor,IntConsumer)void :: {'android.permission.MANAGE_APP_HIBERNATION'}
android.permission.PermissionControllerService.getPrivilegesDescriptionStringForProfile(String)String :: {'android.permission.MANAGE_COMPANION_DEVICES'}
android.permission.PermissionControllerService.onGetUnusedAppCount(IntConsumer)void :: {'android.permission.MANAGE_APP_HIBERNATION'}
android.permission.PermissionControllerService.onGetHibernationEligibility(String,IntConsumer)void :: {'android.permission.MANAGE_APP_HIBERNATION'}
android.permission.PermissionManager.checkPermissionForDataDelivery(String,AttributionSource,String)int :: {'android.permission. conditional = true', 'android.permission.UPDATE_APP_OPS_STATS'}
android.permission.PermissionManager.checkPermissionForStartDataDelivery(String,AttributionSource,String)int :: {'android.permission. conditional = true', 'android.permission.UPDATE_APP_OPS_STATS'}
android.permission.PermissionManager.checkPermissionForDataDeliveryFromDataSource(String,AttributionSource,String)int :: {'android.permission. conditional = true', 'android.permission.UPDATE_APP_OPS_STATS'}
android.permission.PermissionManager.if(DEBUG_TRACE_GRANTS,permissionName,user.getIdentifier){ :: {'android.permission. @NonNull UserHandle user', 'android.permission.\n            @NonNull String permissionName', 'android.permission.GRANT_RUNTIME_PERMISSIONS)\n    //@SystemApi\n    public void grantRuntimePermission(@NonNull String packageName'}
android.permission.PermissionManager.if(DEBUG_TRACE_PERMISSION_UPDATES,permName,user.getIdentifier){ :: {'android.permission.\n            @NonNull String permName', 'android.permission. @NonNull UserHandle user', 'android.permission. @Nullable String reason', 'android.permission.REVOKE_RUNTIME_PERMISSIONS)\n    //@SystemApi\n    public void revokeRuntimePermission(@NonNull String packageName'}
android.permission.PermissionManager.mPermissionManager.getPermissionFlags(packageName,permissionName,user.getIdentifier){ :: {'android.permission.GET_RUNTIME_PERMISSIONS', 'android.permission.REVOKE_RUNTIME_PERMISSIONS', 'android.permission.GRANT_RUNTIME_PERMISSIONS'}
android.permission.PermissionManager.if(DEBUG_TRACE_PERMISSION_UPDATES,permissionName,user.getIdentifier){ :: {'android.permission.REVOKE_RUNTIME_PERMISSIONS', 'android.permission.GRANT_RUNTIME_PERMISSIONS'}
android.permission.PermissionManager.getAllowlistedRestrictedPermissions(String,int)Set<String> :: {'android.permission.WHITELIST_RESTRICTED_PERMISSIONS', 'android.permission.\n            conditional = true'}
android.permission.PermissionManager.addAllowlistedRestrictedPermission(String,String,int)boolean :: {'android.permission.WHITELIST_RESTRICTED_PERMISSIONS', 'android.permission.\n            conditional = true'}
android.permission.PermissionManager.removeAllowlistedRestrictedPermission(String,String,int)boolean :: {'android.permission.WHITELIST_RESTRICTED_PERMISSIONS', 'android.permission.\n            conditional = true'}
android.permission.PermissionManager.isAutoRevokeExempted(String)boolean :: {'android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONS', 'android.permission.\n            conditional = true'}
android.permission.PermissionManager.setAutoRevokeExempted(String,boolean)boolean :: {'android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONS', 'android.permission.\n            conditional = true'}
android.permission.PermissionManager.addOnPermissionsChangeListener(PackageManager.OnPermissionsChangedListener)void :: {'android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS'}
android.permission.PermissionManager.removeOnPermissionsChangeListener(PackageManager.OnPermissionsChangedListener)void :: {'android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS'}
android.permission.PermissionManager.getRuntimePermissionsVersion()int :: {'android.permission.UPGRADE_RUNTIME_PERMISSIONS', 'android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY'}
android.permission.PermissionManager.mPackageManager.setRuntimePermissionsVersion(version,mContext.getUserId)int :: {'android.permission.UPGRADE_RUNTIME_PERMISSIONS', 'android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY'}
android.permission.PermissionManager.getIndicatorAppOpUsageData()List<PermissionGroupUsage> :: {'android.permission.GET_APP_OPS_STATS'}
android.permission.PermissionManager.getIndicatorAppOpUsageData(boolean)List<PermissionGroupUsage> :: {'android.permission.GET_APP_OPS_STATS'}
android.permission.PermissionManager.getAutoRevokeExemptionRequestedPackages()Set<String> :: {'android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY'}
android.permission.PermissionManager.getAutoRevokeExemptionGrantedPackages()Set<String> :: {'android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY'}
android.permission.PermissionManager.startOneTimePermissionSession(String,long,int,int)void :: {'android.permission.MANAGE_ONE_TIME_PERMISSION_SESSIONS'}
android.permission.PermissionManager.startOneTimePermissionSession(String,long,long,int,int)void :: {'android.permission.MANAGE_ONE_TIME_PERMISSION_SESSIONS'}
android.permission.PermissionManager.stopOneTimePermissionSession(String)void :: {'android.permission.MANAGE_ONE_TIME_PERMISSION_SESSIONS'}
android.permission.PermissionManager.revokePostNotificationPermissionWithoutKillForTest(String,int)void :: {'android.permission.REVOKE_POST_NOTIFICATIONS_WITHOUT_KILL'}
android.print.PrintManager.addPrintServicesChangeListener(PrintServicesChangeListener,Handler)void :: {'android.permission.READ_PRINT_SERVICES'}
android.print.PrintManager.removePrintServicesChangeListener(PrintServicesChangeListener)void :: {'android.permission.READ_PRINT_SERVICES'}
android.print.PrintManager.getPrintServices(int)List<PrintServiceInfo> :: {'android.permission.READ_PRINT_SERVICES'}
android.print.PrintManager.addPrintServiceRecommendationsChangeListener(PrintServiceRecommendationsChangeListener,Handler)void :: {'android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS'}
android.print.PrintManager.removePrintServiceRecommendationsChangeListener(PrintServiceRecommendationsChangeListener)void :: {'android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS'}
android.print.PrintManager.getPrintServiceRecommendations()List<RecommendationInfo> :: {'android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS'}
android.provider.CallLog.storeCallComposerPicture(Context,InputStream,Executor,OutcomeReceiver<Uri,CallComposerLoggingException>)void :: {'android.permission.WRITE_CALL_LOG', 'android.permission.INTERACT_ACROSS_USERS'}
android.provider.ContactsContract.queryRawContactEntity(ContentResolver,long)Map<String, :: {'android.permission.INTERACT_ACROSS_USERS'}
android.provider.ContactsContract.addSimAccount(ContentResolver,String,String,int,int)void :: {'android.permission.MANAGE_SIM_ACCOUNTS"'}
android.provider.ContactsContract.removeSimAccounts(ContentResolver,int)void :: {'android.permission.MANAGE_SIM_ACCOUNTS"'}
android.provider.ContactsContract.setDefaultAccount(ContentResolver,Account)void :: {'android.permission.SET_DEFAULT_ACCOUNT_FOR_CONTACTS'}
android.provider.DeviceConfig.getProperty(String,String)String :: {'android.permission.READ_DEVICE_CONFIG'}
android.provider.DeviceConfig.getProperties(String,String)Properties :: {'android.permission.READ_DEVICE_CONFIG'}
android.provider.DeviceConfig.getString(String,String,String)String :: {'android.permission.READ_DEVICE_CONFIG'}
android.provider.DeviceConfig.getBoolean(String,String,boolean)boolean :: {'android.permission.READ_DEVICE_CONFIG'}
android.provider.DeviceConfig.getInt(String,String,int)int :: {'android.permission.READ_DEVICE_CONFIG'}
android.provider.DeviceConfig.getLong(String,String,long)long :: {'android.permission.READ_DEVICE_CONFIG'}
android.provider.DeviceConfig.getFloat(String,String,float)float :: {'android.permission.READ_DEVICE_CONFIG'}
android.provider.DeviceConfig.setProperty(String,String,String,boolean)boolean :: {'android.permission.WRITE_DEVICE_CONFIG'}
android.provider.DeviceConfig.setProperties(Properties)boolean :: {'android.permission.WRITE_DEVICE_CONFIG'}
android.provider.DeviceConfig.deleteProperty(String,String)boolean :: {'android.permission.WRITE_DEVICE_CONFIG'}
android.provider.DeviceConfig.resetToDefaults(int,String)void :: {'android.permission.WRITE_DEVICE_CONFIG'}
android.provider.DeviceConfig.setSyncDisabledMode(int)void :: {'android.permission.WRITE_DEVICE_CONFIG'}
android.provider.DeviceConfig.getSyncDisabledMode()int :: {'android.permission.WRITE_DEVICE_CONFIG'}
android.provider.DeviceConfig.addOnPropertiesChangedListener(String,Executor,OnPropertiesChangedListener)void :: {'android.permission.READ_DEVICE_CONFIG'}
android.provider.Settings.putString(ContentResolver,String,String,boolean)boolean :: {'android.permission.MODIFY_SETTINGS_OVERRIDEABLE_BY_RESTORE'}
android.provider.Settings.putString(ContentResolver,String,String,String,boolean)boolean :: {'android.permission.WRITE_DEVICE_CONFIG'}
android.provider.Settings.resetToDefaults(ContentResolver,String)void :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.provider.Settings.putString(ContentResolver,String,String,String,boolean,boolean)boolean :: {'android.permission.MODIFY_SETTINGS_OVERRIDEABLE_BY_RESTORE'}
android.provider.Settings.getString(ContentResolver,String)String :: {'android.permission.READ_DEVICE_CONFIG'}
android.provider.Settings.getStrings(ContentResolver,String,List<String>)Map<String, :: {'android.permission.READ_DEVICE_CONFIG'}
android.provider.Settings.setStrings(ContentResolver,String,Map<String,String>)boolean :: {'android.permission.WRITE_DEVICE_CONFIG'}
android.provider.Settings.deleteString(ContentResolver,String,String)boolean :: {'android.permission.WRITE_DEVICE_CONFIG'}
android.provider.Settings.resetToDefaults(ContentResolver,int,String)void :: {'android.permission.WRITE_DEVICE_CONFIG'}
android.provider.Settings.setSyncDisabledMode(ContentResolver,int)void :: {'android.permission.WRITE_DEVICE_CONFIG'}
android.provider.Settings.getSyncDisabledMode(ContentResolver)int :: {'android.permission.WRITE_DEVICE_CONFIG'}
android.provider.Settings.registerMonitorCallback(ContentResolver,RemoteCallback)void :: {'android.permission.MONITOR_DEVICE_CONFIG_ACCESS'}
android.se.omapi.Reader.reset()boolean :: {'android.permission.SECURE_ELEMENT_PRIVILEGED_OPERATION'}
android.security.FileIntegrityManager.isAppSourceCertificateTrusted(X509Certificate)boolean :: {'android.permission.REQUEST_INSTALL_PACKAGES', 'android.permission.INSTALL_PACKAGES'}
android.security.KeyChain.setCredentialManagementApp(Context,String,AppUriAuthenticationPolicy)boolean :: {'android.permission.MANAGE_CREDENTIAL_MANAGEMENT_APP'}
android.security.KeyChain.removeCredentialManagementApp(Context)boolean :: {'android.permission.MANAGE_CREDENTIAL_MANAGEMENT_APP', 'android.permission.\n            conditional = true'}
android.security.attestationverification.AttestationVerificationManager.verifyAttestation(AttestationProfile,int,Bundle,byte[],Executor,BiConsumer<,VerificationToken>)void :: {'android.permission.USE_ATTESTATION_VERIFICATION_SERVICE'}
android.security.attestationverification.AttestationVerificationManager.verifyToken(AttestationProfile,int,Bundle,VerificationToken,Duration)int :: {'android.permission.USE_ATTESTATION_VERIFICATION_SERVICE'}
android.security.keystore.AttestationUtils.attestDeviceIds(Context,int[],byte[])X509Certificate[] :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.security.keystore.recovery.RecoveryController.getInstance(Context)RecoveryController :: {'android.permission.RECOVER_KEYSTORE'}
android.security.keystore.recovery.RecoveryController.isRecoverableKeyStoreEnabled(Context)boolean :: {'android.permission.RECOVER_KEYSTORE'}
android.security.keystore.recovery.RecoveryController.initRecoveryService(String,byte[],byte[])void :: {'android.permission.RECOVER_KEYSTORE'}
android.security.keystore.recovery.RecoveryController.getKeyChainSnapshot()KeyChainSnapshot :: {'android.permission.RECOVER_KEYSTORE'}
android.security.keystore.recovery.RecoveryController.setSnapshotCreatedPendingIntent(PendingIntent)void :: {'android.permission.RECOVER_KEYSTORE'}
android.security.keystore.recovery.RecoveryController.setServerParams(byte[])void :: {'android.permission.RECOVER_KEYSTORE'}
android.security.keystore.recovery.RecoveryController.getAliases()List<String> :: {'android.permission.RECOVER_KEYSTORE'}
android.security.keystore.recovery.RecoveryController.setRecoveryStatus(String,int)void :: {'android.permission.RECOVER_KEYSTORE'}
android.security.keystore.recovery.RecoveryController.getRecoveryStatus(String)int :: {'android.permission.RECOVER_KEYSTORE'}
android.security.keystore.recovery.RecoveryController.setRecoverySecretTypes(int[])void :: {'android.permission.RECOVER_KEYSTORE'}
android.security.keystore.recovery.RecoveryController.getRecoverySecretTypes()int[] :: {'android.permission.RECOVER_KEYSTORE'}
android.security.keystore.recovery.RecoveryController.generateKey(String)Key :: {'android.permission.RECOVER_KEYSTORE'}
android.security.keystore.recovery.RecoveryController.generateKey(String,byte[])Key :: {'android.permission.RECOVER_KEYSTORE'}
android.security.keystore.recovery.RecoveryController.importKey(String,byte[])Key :: {'android.permission.RECOVER_KEYSTORE'}
android.security.keystore.recovery.RecoveryController.importKey(String,byte[],byte[])Key :: {'android.permission.RECOVER_KEYSTORE'}
android.security.keystore.recovery.RecoveryController.getKey(String)Key :: {'android.permission.RECOVER_KEYSTORE'}
android.security.keystore.recovery.RecoveryController.removeKey(String)void :: {'android.permission.RECOVER_KEYSTORE'}
android.security.keystore.recovery.RecoveryController.createRecoverySession()RecoverySession :: {'android.permission.RECOVER_KEYSTORE'}
android.security.keystore.recovery.RecoveryController.getRootCertificates()Map<String, :: {'android.permission.RECOVER_KEYSTORE'}
android.security.keystore.recovery.RecoverySession.newInstance(RecoveryController)RecoverySession :: {'android.permission.RECOVER_KEYSTORE'}
android.security.keystore.recovery.RecoverySession.start(String,CertPath,byte[],byte[],List<KeyChainProtectionParams>)byte[] :: {'android.permission.RECOVER_KEYSTORE'}
android.security.keystore.recovery.RecoverySession.recoverKeyChainSnapshot(byte[],List<WrappedApplicationKey>)Map<String, :: {'android.permission.RECOVER_KEYSTORE'}
android.security.keystore.recovery.RecoverySession.close()void :: {'android.permission.RECOVER_KEYSTORE'}
android.service.dataloader.DataLoaderService.writeData(String,long,long,ParcelFileDescriptor)void :: {'android.permission.INSTALL_PACKAGES'}
android.service.games.GameService.IllegalStateException(Can){ :: {'android.permission.MANAGE_GAME_ACTIVITY)\n    public final void createGameSession(@IntRange(from = 0) int taskId) {\n        if (mGameServiceController == null'}
android.service.games.GameSession.restartGame()boolean :: {'android.permission.MANAGE_GAME_ACTIVITY'}
android.service.games.GameSession.takeScreenshot(Executor,ScreenshotCallback)void :: {'android.permission.MANAGE_GAME_ACTIVITY'}
android.service.games.GameSession.startActivityFromGameSessionForResult(Intent,Bundle,Executor,GameSessionActivityCallback)void :: {'android.permission.MANAGE_GAME_ACTIVITY'}
android.service.oemlock.OemLockManager.getLockName()String :: {'android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE'}
android.service.oemlock.OemLockManager.setOemUnlockAllowedByCarrier(boolean,byte[])void :: {'android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE'}
android.service.oemlock.OemLockManager.isOemUnlockAllowedByCarrier()boolean :: {'android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE'}
android.service.oemlock.OemLockManager.setOemUnlockAllowedByUser(boolean)void :: {'android.permission.MANAGE_USER_OEM_UNLOCK_STATE'}
android.service.oemlock.OemLockManager.isOemUnlockAllowedByUser()boolean :: {'android.permission.MANAGE_USER_OEM_UNLOCK_STATE'}
android.service.persistentdata.PersistentDataBlockManager.getDataBlockSize()int :: {'android.permission.ACCESS_PDB_STATE'}
android.service.persistentdata.PersistentDataBlockManager.wipe()void :: {'android.permission.OEM_UNLOCK_STATE'}
android.service.persistentdata.PersistentDataBlockManager.setOemUnlockEnabled(boolean)void :: {'android.permission.OEM_UNLOCK_STATE'}
android.service.persistentdata.PersistentDataBlockManager.getOemUnlockEnabled()boolean :: {'android.permission.OEM_UNLOCK_STATE', 'android.permission.READ_OEM_UNLOCK_STATE'}
android.service.persistentdata.PersistentDataBlockManager.getFlashLockState()int :: {'android.permission.OEM_UNLOCK_STATE', 'android.permission.READ_OEM_UNLOCK_STATE'}
android.service.persistentdata.PersistentDataBlockManager.getPersistentDataPackageName()String :: {'android.permission.ACCESS_PDB_STATE'}
android.service.voice.AlwaysOnHotwordDetector.triggerHardwareRecognitionEventForTest(int,int,boolean,int,int,int,boolean,AudioFormat,byte[],List<KeyphraseRecognitionExtra>)void :: {'android.permission.CAPTURE_AUDIO_HOTWORD', 'android.permission.RECORD_AUDIO'}
android.service.voice.AlwaysOnHotwordDetector.startRecognition(int)boolean :: {'android.permission.CAPTURE_AUDIO_HOTWORD', 'android.permission.RECORD_AUDIO'}
android.service.voice.AlwaysOnHotwordDetector.startRecognition()boolean :: {'android.permission.CAPTURE_AUDIO_HOTWORD', 'android.permission.RECORD_AUDIO'}
android.service.voice.AlwaysOnHotwordDetector.stopRecognition()boolean :: {'android.permission.CAPTURE_AUDIO_HOTWORD', 'android.permission.RECORD_AUDIO'}
android.service.voice.AlwaysOnHotwordDetector.setParameter(int,int)int :: {'android.permission.CAPTURE_AUDIO_HOTWORD', 'android.permission.RECORD_AUDIO'}
android.service.voice.AlwaysOnHotwordDetector.getParameter(int)int :: {'android.permission.CAPTURE_AUDIO_HOTWORD', 'android.permission.RECORD_AUDIO'}
android.service.voice.AlwaysOnHotwordDetector.queryParameter(int)ModelParamRange :: {'android.permission.CAPTURE_AUDIO_HOTWORD', 'android.permission.RECORD_AUDIO'}
android.service.voice.HotwordDetector.startRecognition()boolean :: {'android.permission.CAPTURE_AUDIO_HOTWORD', 'android.permission.RECORD_AUDIO'}
android.service.voice.SoftwareHotwordDetector.startRecognition()boolean :: {'android.permission.RECORD_AUDIO'}
android.service.voice.SoftwareHotwordDetector.stopRecognition()boolean :: {'android.permission.RECORD_AUDIO'}
android.service.voice.VoiceInteractionService.createAlwaysOnHotwordDetector(SuppressLint)AlwaysOnHotwordDetector :: {'android.permission.MANAGE_HOTWORD_DETECTION'}
android.service.voice.VoiceInteractionService.createHotwordDetector(PersistableBundle,SharedMemory,HotwordDetector.Callback)HotwordDetector :: {'android.permission.MANAGE_HOTWORD_DETECTION'}
android.service.voice.VoiceInteractionService.createKeyphraseModelManager()KeyphraseModelManager :: {'android.permission.MANAGE_VOICE_KEYPHRASES'}
android.speech.SpeechRecognizer.setTemporaryOnDeviceRecognizer(ComponentName)void :: {'android.permission.MANAGE_SPEECH_RECOGNITION'}
android.telecom.CallScreeningService.setShouldScreenCallViaAudioProcessing(boolean)Builder :: {'android.permission.CAPTURE_AUDIO_OUTPUT'}
android.telecom.Conference.setConferenceState(boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telecom.Conference.setCallDirection(int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telecom.Conference.setAddress(Uri,int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telecom.Connection.setConnectionStartElapsedRealtimeMillis(long)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telecom.Connection.onCallFilteringCompleted(CallFilteringCompletionInfo)void :: {'android.permission.READ_CONTACTS'}
android.telecom.ConnectionService.onCreateUnknownConnection(PhoneAccountHandle,ConnectionRequest)Connection :: {'android.permission.MODIFY_PHONE_STATE'}
android.telecom.PhoneAccount.setGroupId(String)Builder :: {'android.permission.MODIFY_PHONE_STATE'}
android.telecom.RemoteConnection.onCallFilteringCompleted(Connection.CallFilteringCompletionInfo)void :: {'android.permission.READ_CONTACTS'}
android.telecom.TelecomManager.getDefaultOutgoingPhoneAccount(String)PhoneAccountHandle :: {'android.permission.READ_PHONE_STATE'}
android.telecom.TelecomManager.getUserSelectedOutgoingPhoneAccount()PhoneAccountHandle :: {'android.permission.READ_PHONE_STATE'}
android.telecom.TelecomManager.setUserSelectedOutgoingPhoneAccount(PhoneAccountHandle)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telecom.TelecomManager.getPhoneAccountsSupportingScheme(String)List<PhoneAccountHandle> :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telecom.TelecomManager.getCallCapablePhoneAccounts()List<PhoneAccountHandle> :: {'android.permission.READ_PHONE_STATE'}
android.telecom.TelecomManager.getSelfManagedPhoneAccounts()List<PhoneAccountHandle> :: {'android.permission.READ_PHONE_STATE'}
android.telecom.TelecomManager.getOwnSelfManagedPhoneAccounts()List<PhoneAccountHandle> :: {'android.permission.MANAGE_OWN_CALLS'}
android.telecom.TelecomManager.getCallCapablePhoneAccounts(boolean)List<PhoneAccountHandle> :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telecom.TelecomManager.getDefaultDialerPackage(UserHandle)String :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telecom.TelecomManager.setDefaultDialer(String)boolean :: {'android.permission.WRITE_SECURE_SETTINGS', 'android.permission.MODIFY_PHONE_STATE'}
android.telecom.TelecomManager.isVoiceMailNumber(PhoneAccountHandle,String)boolean :: {'android.permission.READ_PHONE_STATE'}
android.telecom.TelecomManager.getVoiceMailNumber(PhoneAccountHandle)String :: {'android.permission.READ_PHONE_STATE'}
android.telecom.TelecomManager.getLine1Number(PhoneAccountHandle)String :: {'android.permission.READ_PHONE_NUMBERS', 'android.permission.READ_PHONE_STATE', 'android.permission.READ_SMS'}
android.telecom.TelecomManager.isInCall()boolean :: {'android.permission.READ_PHONE_NUMBERS', 'android.permission.READ_PHONE_STATE', 'android.permission.READ_SMS'}
android.telecom.TelecomManager.isInManagedCall()boolean :: {'android.permission.READ_PHONE_STATE'}
android.telecom.TelecomManager.getCallState()int :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telecom.TelecomManager.isRinging()boolean :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telecom.TelecomManager.endCall()boolean :: {'android.permission.READ_PHONE_STATE', 'android.permission.ANSWER_PHONE_CALLS'}
android.telecom.TelecomManager.acceptRingingCall()void :: {'android.permission.MODIFY_PHONE_STATE', 'android.permission.ANSWER_PHONE_CALLS'}
android.telecom.TelecomManager.acceptRingingCall(int)void :: {'android.permission.MODIFY_PHONE_STATE', 'android.permission.ANSWER_PHONE_CALLS'}
android.telecom.TelecomManager.silenceRinger()void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telecom.TelecomManager.isTtySupported()boolean :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telecom.TelecomManager.getCurrentTtyMode()int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telecom.TelecomManager.handleMmi(String)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telecom.TelecomManager.handleMmi(String,PhoneAccountHandle)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telecom.TelecomManager.getAdnUriForPhoneAccount(PhoneAccountHandle)Uri :: {'android.permission.MODIFY_PHONE_STATE'}
android.telecom.TelecomManager.cancelMissedCallsNotification()void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telecom.TelecomManager.showInCallScreen(boolean)void :: {'android.permission.READ_PHONE_STATE'}
android.telecom.TelecomManager.placeCall(Uri,Bundle)void :: {'android.permission.MANAGE_OWN_CALLS', 'android.permission.CALL_PHONE'}
android.telecom.TelecomManager.startConference(List<Uri>,Bundle)void :: {'android.permission.MANAGE_OWN_CALLS', 'android.permission.CALL_PHONE'}
android.telecom.TelecomManager.enablePhoneAccount(PhoneAccountHandle,boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telecom.TelecomManager.dumpAnalytics()TelecomAnalytics :: {'android.permission.DUMP'}
android.telecom.TelecomManager.isInEmergencyCall()boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telecom.TelecomManager.isInSelfManagedCall(String,UserHandle)boolean :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.AnomalyReporter.initialize(Context)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.CarrierConfigManager.getConfigForSubId(int)PersistableBundle :: {'android.permission.READ_PHONE_STATE'}
android.telephony.CarrierConfigManager.overrideConfig(int,PersistableBundle)void :: {'android.permission.READ_PHONE_STATE', 'android.permission.MODIFY_PHONE_STATE'}
android.telephony.CarrierConfigManager.overrideConfig(int,PersistableBundle,boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.CarrierConfigManager.getConfig()PersistableBundle :: {'android.permission.READ_PHONE_STATE'}
android.telephony.CarrierConfigManager.notifyConfigChangedForSubId(int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.CarrierConfigManager.updateConfigForPhoneId(int,String)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.CarrierConfigManager.getDefaultCarrierServicePackageName()String :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.CarrierConfigManager.getConfigByComponentForSubId(String,int)PersistableBundle :: {'android.permission.READ_PHONE_STATE'}
android.telephony.PhoneStateListener.onMessageWaitingIndicatorChanged(boolean)void :: {'android.permission.READ_PHONE_STATE'}
android.telephony.PhoneStateListener.onCallForwardingIndicatorChanged(boolean)void :: {'android.permission.READ_PHONE_STATE'}
android.telephony.PhoneStateListener.onCellLocationChanged(CellLocation)void :: {'android.permission.ACCESS_FINE_LOCATION'}
android.telephony.PhoneStateListener.onCallStateChanged(int,String)void :: {'android.permission. conditional = true', 'android.permission.READ_PHONE_STATE'}
android.telephony.PhoneStateListener.onCellInfoChanged(List<CellInfo>)void :: {'android.permission.READ_PHONE_STATE', 'android.permission.ACCESS_FINE_LOCATION'}
android.telephony.PhoneStateListener.onPreciseCallStateChanged(PreciseCallState)void :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.PhoneStateListener.onCallDisconnectCauseChanged(int,int)void :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.PhoneStateListener.onImsCallDisconnectCauseChanged(ImsReasonInfo)void :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.PhoneStateListener.onPreciseDataConnectionStateChanged(PreciseDataConnectionState)void :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.PhoneStateListener.onSrvccStateChanged(int)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.PhoneStateListener.onVoiceActivationStateChanged(int)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.PhoneStateListener.onDisplayInfoChanged(TelephonyDisplayInfo)void :: {'android.permission.READ_PHONE_STATE'}
android.telephony.PhoneStateListener.onEmergencyNumberListChanged(Map<Integer,List<EmergencyNumber>>)void :: {'android.permission.READ_PHONE_STATE'}
android.telephony.PhoneStateListener.onOutgoingEmergencyCall(EmergencyNumber)void :: {'android.permission.READ_ACTIVE_EMERGENCY_SESSION'}
android.telephony.PhoneStateListener.onOutgoingEmergencyCall(EmergencyNumber,int)void :: {'android.permission.READ_ACTIVE_EMERGENCY_SESSION'}
android.telephony.PhoneStateListener.onOutgoingEmergencySms(EmergencyNumber)void :: {'android.permission.READ_ACTIVE_EMERGENCY_SESSION'}
android.telephony.PhoneStateListener.onActiveDataSubscriptionIdChanged(int)void :: {'android.permission.READ_PHONE_STATE'}
android.telephony.PhoneStateListener.onCallAttributesChanged(CallAttributes)void :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.PhoneStateListener.onRadioPowerStateChanged(int)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.PhoneStateListener.onRegistrationFailed(CellIdentity,String,int,int,int)void :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.ACCESS_FINE_LOCATION'}
android.telephony.PhoneStateListener.onBarringInfoChanged(BarringInfo)void :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.ACCESS_FINE_LOCATION'}
android.telephony.ServiceState.getOperatorAlphaLong()String :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.ServiceState.getVoiceOperatorAlphaLong()String :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.ServiceState.getOperatorAlphaShort()String :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.ServiceState.getVoiceOperatorAlphaShort()String :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.ServiceState.getDataOperatorAlphaShort()String :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.ServiceState.getOperatorAlpha()String :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.ServiceState.getOperatorNumeric()String :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.ServiceState.getVoiceOperatorNumeric()String :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.ServiceState.getDataOperatorNumeric()String :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.ServiceState.getCdmaNetworkId()int :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.ServiceState.getCdmaSystemId()int :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.SignalStrengthUpdateRequest.setSystemThresholdReportingRequestedWhileIdle(boolean)Builder :: {'android.permission.LISTEN_ALWAYS_REPORTED_SIGNAL_STRENGTH'}
android.telephony.SmsManager.sendTextMessageWithoutPersisting(String,String,String,PendingIntent,PendingIntent)void :: {'android.permission.SEND_SMS', 'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SmsManager.sendMultipartTextMessageWithoutPersisting(String,String,List<String>,List<PendingIntent>,List<PendingIntent>)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SmsManager.copyMessageToIcc(byte[],byte[],int)boolean :: {'android.permission.ACCESS_MESSAGES_ON_ICC'}
android.telephony.SmsManager.deleteMessageFromIcc(int)boolean :: {'android.permission.ACCESS_MESSAGES_ON_ICC'}
android.telephony.SmsManager.updateMessageOnIcc(int,int,byte[])boolean :: {'android.permission.ACCESS_MESSAGES_ON_ICC'}
android.telephony.SmsManager.getMessagesFromIcc()List<SmsMessage> :: {'android.permission.ACCESS_MESSAGES_ON_ICC'}
android.telephony.SmsManager.getSmsCapacityOnIcc()int :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.SmsManager.getSmsMessagesForFinancialApp(Bundle,Executor,FinancialSmsCallback)void :: {'android.permission.SMS_FINANCIAL_TRANSACTIONS'}
android.telephony.SmsManager.checkSmsShortCodeDestination(String,String)int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.SmsManager.getSmscAddress()String :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.SmsManager.setSmscAddress(String)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SmsManager.getPremiumSmsConsent(String)int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE', 'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SmsManager.setPremiumSmsConsent(String,int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SmsManager.resetAllCellBroadcastRanges()void :: {'android.permission.MODIFY_CELL_BROADCASTS'}
android.telephony.SubscriptionManager.getActiveSubscriptionInfo(int)SubscriptionInfo :: {'android.permission.READ_PHONE_STATE'}
android.telephony.SubscriptionManager.getActiveSubscriptionInfoForIcc(String)SubscriptionInfo :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.SubscriptionManager.getActiveSubscriptionInfoForSimSlotIndex(int)SubscriptionInfo :: {'android.permission.READ_PHONE_STATE'}
android.telephony.SubscriptionManager.getActiveSubscriptionInfoList()List<SubscriptionInfo> :: {'android.permission.READ_PHONE_STATE'}
android.telephony.SubscriptionManager.getActiveSubscriptionInfoCount()int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.SubscriptionManager.setIconTint(int,int)int :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SubscriptionManager.setDisplayName(String,int,int)int :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SubscriptionManager.setDefaultVoiceSubscriptionId(int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SubscriptionManager.setDefaultSmsSubId(int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SubscriptionManager.setDefaultDataSubId(int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SubscriptionManager.getActiveSubscriptionIdList()int[] :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.SubscriptionManager.getCompleteActiveSubscriptionIdList()int[] :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.SubscriptionManager.isActiveSubscriptionId(int)boolean :: {'android.permission.READ_PHONE_STATE'}
android.telephony.SubscriptionManager.setPreferredDataSubscriptionId(int,boolean,Executor,Consumer<Integer>)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SubscriptionManager.getPreferredDataSubscriptionId()int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.SubscriptionManager.getOpportunisticSubscriptions()List<SubscriptionInfo> :: {'android.permission.READ_PHONE_STATE'}
android.telephony.SubscriptionManager.switchToSubscription(int,PendingIntent)void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS', 'android.permission.READ_PHONE_STATE'}
android.telephony.SubscriptionManager.setOpportunistic(boolean,int)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SubscriptionManager.createSubscriptionGroup(List<Integer>)ParcelUuid :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SubscriptionManager.addSubscriptionsIntoGroup(List<Integer>,ParcelUuid)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SubscriptionManager.removeSubscriptionsFromGroup(List<Integer>,ParcelUuid)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SubscriptionManager.getSubscriptionsInGroup(ParcelUuid)List<SubscriptionInfo> :: {'android.permission.READ_PHONE_STATE'}
android.telephony.SubscriptionManager.setSubscriptionEnabled(int,boolean)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SubscriptionManager.setUiccApplicationsEnabled(int,boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SubscriptionManager.canDisablePhysicalSubscription()boolean :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.SubscriptionManager.isSubscriptionEnabled(int)boolean :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.SubscriptionManager.setDeviceToDeviceStatusSharingPreference(int,int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SubscriptionManager.setDeviceToDeviceStatusSharingContacts(int,List<Uri>)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SubscriptionManager.getEnabledSubscriptionId(int)int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.SubscriptionManager.getAllSimSpecificSettingsForBackup()byte[] :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.SubscriptionManager.restoreSimSpecificSettingsForIccIdFromBackup(String)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SubscriptionManager.restoreAllSimSpecificSettingsFromBackup(byte[])void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SubscriptionManager.getPhoneNumber(int,int)String :: {'android.permission.READ_PHONE_NUMBERS', 'android.permission.READ_PRIVILEGED_PHONE_STATE', 'android.permission.', 'android.permission.carrierprivileges'}
android.telephony.SubscriptionManager.getPhoneNumber(int)String :: {'android.permission.READ_PHONE_NUMBERS', 'android.permission.READ_PRIVILEGED_PHONE_STATE', 'android.permission.', 'android.permission.carrierprivileges'}
android.telephony.SubscriptionManager.setCarrierPhoneNumber(int,String)void :: {'android.permission."carrier privileges"'}
android.telephony.SubscriptionManager.setUsageSetting(int,int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyCallback.onMessageWaitingIndicatorChanged(boolean)void :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyCallback.onCallForwardingIndicatorChanged(boolean)void :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyCallback.onCellLocationChanged(CellLocation)void :: {'android.permission.ACCESS_FINE_LOCATION'}
android.telephony.TelephonyCallback.onCallStateChanged(int)void :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyCallback.onCellInfoChanged(List<CellInfo>)void :: {'android.permission.READ_PHONE_STATE', 'android.permission.ACCESS_FINE_LOCATION'}
android.telephony.TelephonyCallback.onPreciseCallStateChanged(PreciseCallState)void :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.TelephonyCallback.onCallDisconnectCauseChanged(int,int)void :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.TelephonyCallback.onImsCallDisconnectCauseChanged(ImsReasonInfo)void :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.TelephonyCallback.onPreciseDataConnectionStateChanged(PreciseDataConnectionState)void :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.TelephonyCallback.onSrvccStateChanged(int)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyCallback.onVoiceActivationStateChanged(int)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyCallback.onEmergencyNumberListChanged(Map<Integer,List<EmergencyNumber>>)void :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyCallback.onOutgoingEmergencyCall(EmergencyNumber,int)void :: {'android.permission.READ_ACTIVE_EMERGENCY_SESSION'}
android.telephony.TelephonyCallback.onOutgoingEmergencySms(EmergencyNumber,int)void :: {'android.permission.READ_ACTIVE_EMERGENCY_SESSION'}
android.telephony.TelephonyCallback.onActiveDataSubscriptionIdChanged(int)void :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyCallback.onRadioPowerStateChanged(int)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyCallback.onRegistrationFailed(CellIdentity,String,int,int,int)void :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.ACCESS_FINE_LOCATION'}
android.telephony.TelephonyCallback.onAllowedNetworkTypesChanged(int,long)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyCallback.onCallAttributesChanged(CallAttributes)void :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.TelephonyCallback.onBarringInfoChanged(BarringInfo)void :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.ACCESS_FINE_LOCATION'}
android.telephony.TelephonyCallback.onPhysicalChannelConfigChanged(List<PhysicalChannelConfig>)void :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.TelephonyCallback.onDataEnabledChanged(boolean,int)void :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.TelephonyCallback.onLinkCapacityEstimateChanged(List<LinkCapacityEstimate>)void :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.TelephonyManager.getDeviceSoftwareVersion()String :: {'android.permission.READ_BASIC_PHONE_STATE', 'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getDeviceSoftwareVersion(int)String :: {'android.permission.READ_PHONE_STATE', 'android.permission.SEND_RESPOND_VIA_MESSAGE', 'android.permission.READ_CALL_LOG'}
android.telephony.TelephonyManager.getDeviceId()String :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getDeviceId(int)String :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getImei()String :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getImei(int)String :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getMeid()String :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getMeid(int)String :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getNai()String :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getCellLocation()CellLocation :: {'android.permission.ACCESS_FINE_LOCATION'}
android.telephony.TelephonyManager.getNeighboringCellInfo()List<NeighboringCellInfo> :: {'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.TelephonyManager.getCarrierConfig()PersistableBundle :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getNetworkType()int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getNetworkType(int)int :: {'android.permission.P'}
android.telephony.TelephonyManager.getDataNetworkType()int :: {'android.permission.READ_BASIC_PHONE_STATE', 'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getDataNetworkType(int)int :: {'android.permission.P'}
android.telephony.TelephonyManager.getVoiceNetworkType()int :: {'android.permission.READ_BASIC_PHONE_STATE', 'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getVoiceNetworkType(int)int :: {'android.permission.P'}
android.telephony.TelephonyManager.getSimCardState(int)int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getSimCardState(int,int)int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getSimApplicationState(int)int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getSimApplicationState(int,int)int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.isApplicationOnUicc(int)boolean :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getSimSerialNumber()String :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getSimSerialNumber(int)String :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.isLteCdmaEvdoGsmWcdmaEnabled()boolean :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getLteOnCdmaMode(int)int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getUiccCardsInfo()List<UiccCardInfo> :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getUiccSlotsInfo()UiccSlotInfo[] :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.refreshUiccProfile()void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.switchSlots(int[])boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setSimSlotMapping(Collection<UiccSlotMapping>)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getLogicalToPhysicalSlotMapping()Map<Integer, :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getSimSlotMapping()Collection<UiccSlotMapping> :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getSubscriberId()String :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getSubscriberId(int)String :: {'android.permission.P'}
android.telephony.TelephonyManager.getCarrierInfoForImsiEncryption(int)ImsiEncryptionInfo :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.resetCarrierKeysForImsiEncryption()void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getGroupIdLevel1()String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getGroupIdLevel1(int)String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getLine1Number()String :: {'android.permission.READ_PHONE_NUMBERS', 'android.permission.READ_PHONE_STATE', 'android.permission.READ_SMS'}
android.telephony.TelephonyManager.getLine1Number(int)String :: {'android.permission.READ_PHONE_NUMBERS', 'android.permission.READ_PHONE_STATE', 'android.permission.READ_SMS'}
android.telephony.TelephonyManager.getLine1AlphaTag()String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getLine1AlphaTag(int)String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getMergedImsisFromGroup()String[] :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getMsisdn()String :: {'android.permission.READ_PHONE_NUMBERS', 'android.permission.READ_PHONE_STATE', 'android.permission.READ_SMS'}
android.telephony.TelephonyManager.getMsisdn(int)String :: {'android.permission.READ_PHONE_NUMBERS', 'android.permission.READ_PHONE_STATE', 'android.permission.READ_SMS'}
android.telephony.TelephonyManager.getVoiceMailNumber()String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getVoiceMailNumber(int)String :: {'android.permission.READ_PHONE_NUMBERS', 'android.permission.READ_PHONE_STATE', 'android.permission.READ_SMS'}
android.telephony.TelephonyManager.getVisualVoicemailPackageName()String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.sendVisualVoicemailSmsForSubscriber(int,String,int,String,PendingIntent)void :: {'android.permission.SEND_SMS'}
android.telephony.TelephonyManager.setVoiceActivationState(int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setVoiceActivationState(int,int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setDataActivationState(int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setDataActivationState(int,int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getVoiceActivationState()int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getVoiceActivationState(int)int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getDataActivationState()int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getDataActivationState(int)int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getVoiceMessageCount()int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getVoiceMessageCount(int)int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getVoiceMailAlphaTag()String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getVoiceMailAlphaTag(int)String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getIsimDomain()String :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getIsimImpu()String[] :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getCallState()int :: {'android.permission. conditional = true', 'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getCallStateForSubscription()int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getCallState(int)int :: {'android.permission. conditional = true', 'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getCallStateForSlot(int)int :: {'android.permission. conditional = true', 'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getCdmaEnhancedRoamingIndicatorDisplayNumber()int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getCdmaEriIconIndex(int)int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getCdmaEriIconMode(int)int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getCdmaEriText()String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getCdmaEriText(int)String :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getAllCellInfo()List<CellInfo> :: {'android.permission.ACCESS_FINE_LOCATION'}
android.telephony.TelephonyManager.requestCellInfoUpdate(Executor,CellInfoCallback)void :: {'android.permission.ACCESS_FINE_LOCATION'}
android.telephony.TelephonyManager.requestCellInfoUpdate(WorkSource,Executor,CellInfoCallback)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccOpenLogicalChannelBySlot(int,String,int)IccOpenLogicalChannelResponse :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccOpenLogicalChannelByPort(int,int,String,int)IccOpenLogicalChannelResponse :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccCloseLogicalChannelBySlot(int,int)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccCloseLogicalChannelByPort(int,int,int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccTransmitApduLogicalChannelBySlot(int,int,int,int,int,int,int,String)String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccTransmitApduLogicalChannelByPort(int,int,int,int,int,int,int,int,String)String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccTransmitApduBasicChannelBySlot(int,int,int,int,int,int,String)String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccTransmitApduBasicChannelByPort(int,int,int,int,int,int,int,String)String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.resetRadioConfig()boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.rebootRadio()boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.rebootModem()void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.requestNumberVerification(PhoneNumberRange,long,Executor,NumberVerificationCallback)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getIsimIst()String :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getForbiddenPlmns()String[] :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getForbiddenPlmns(int,int)String[] :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.setForbiddenPlmns(List<String>)int :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.resetIms(int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getPreferredNetworkType(int)) :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getPreferredNetworkTypeBitmask()long :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getAllowedNetworkTypesBitmask()long :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getAllowedNetworkTypes()long :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.setNetworkSelectionModeAutomatic()void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getAvailableNetworks()CellNetworkScanResult :: {'android.permission.ACCESS_COARSE_LOCATION', 'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.requestNetworkScan(NetworkScanRequest,Executor,TelephonyScanManager.NetworkScanCallback)NetworkScan :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.requestNetworkScan(int,NetworkScanRequest,Executor,TelephonyScanManager.NetworkScanCallback)NetworkScan :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.requestNetworkScan(NetworkScanRequest,TelephonyScanManager.NetworkScanCallback)NetworkScan :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setNetworkSelectionModeManual(String,boolean)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setNetworkSelectionModeManual(String,boolean,int)boolean :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION', 'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setNetworkSelectionModeManual(OperatorInfo,boolean)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getNetworkSelectionMode()int :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getManualNetworkSelectionPlmn()String :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.TelephonyManager.isInEmergencySmsMode()boolean :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.setPreferredNetworkTypeBitmask(long)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setAllowedNetworkTypes(long)boolean :: {'android.permission.CAPABILITY_USES_ALLOWED_NETWORK_TYPES_BITMASK', 'android.permission.TelephonyManager#isRadioInterfaceCapabilitySupported"'}
android.telephony.TelephonyManager.setAllowedNetworkTypesForReason(int,long)void :: {'android.permission.CAPABILITY_USES_ALLOWED_NETWORK_TYPES_BITMASK', 'android.permission.TelephonyManager#isRadioInterfaceCapabilitySupported"'}
android.telephony.TelephonyManager.getAllowedNetworkTypesForReason(int)long :: {'android.permission.CAPABILITY_USES_ALLOWED_NETWORK_TYPES_BITMASK', 'android.permission.TelephonyManager#isRadioInterfaceCapabilitySupported"'}
android.telephony.TelephonyManager.isTetheringApnRequired()boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getCdmaMdn()String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getCdmaMdn(int)String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getCdmaMin()String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getCdmaMin(int)String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.checkCarrierPrivilegesForPackage(String)int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.checkCarrierPrivilegesForPackageAnyPhone(String)int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getCarrierPackageNamesForIntentAndPhone(Intent,int)List<String> :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getCarrierServicePackageName()String :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getCarrierServicePackageNameForLogicalSlot(int)String :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getPackagesWithCarrierPrivileges()List<String> :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getCarrierPrivilegedPackagesForAllActiveSubscriptions()List<String> :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.setCallComposerStatus(int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getCallComposerStatus()int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.call(String,String)void :: {'android.permission.CALL_PHONE'}
android.telephony.TelephonyManager.endCall()boolean :: {'android.permission.CALL_PHONE'}
android.telephony.TelephonyManager.answerRingingCall()void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.isOffhook()boolean :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.isRinging()boolean :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.isIdle()boolean :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.isRadioOn()boolean :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.supplyPin(String)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.supplyPuk(String,String)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.supplyPinReportResult(String)int[] :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.supplyPukReportResult(String,String)int[] :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.supplyIccLockPin(String)PinResult :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.supplyIccLockPuk(String,String)PinResult :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.sendUssdRequest(String,UssdResponseCallback,Handler)void :: {'android.permission.CALL_PHONE'}
android.telephony.TelephonyManager.handlePinMmi(String)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.handlePinMmiForSubscriber(int,String)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.toggleRadioOnOff()void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setRadio(boolean)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setRadioPower(boolean)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.shutdownAllRadios()void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.isAnyRadioPoweredOn()boolean :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getRadioPowerState()int :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.enableDataConnectivity()boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.disableDataConnectivity()boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getMobileProvisioningUrl()String :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.setDataEnabled(boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setDataEnabled(int,boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.isDataEnabled()boolean :: {'android.permission.MODIFY_PHONE_STATE', 'android.permission.READ_PHONE_STATE', 'android.permission.READ_BASIC_PHONE_STATE', 'android.permission.ACCESS_NETWORK_STATE'}
android.telephony.TelephonyManager.isDataRoamingEnabled()boolean :: {'android.permission.READ_BASIC_PHONE_STATE', 'android.permission.READ_PHONE_STATE', 'android.permission.ACCESS_NETWORK_STATE'}
android.telephony.TelephonyManager.getCdmaRoamingMode()int :: {'android.permission.READ_BASIC_PHONE_STATE', 'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE', 'android.permission.MODIFY_PHONE_STATE', 'android.permission.ACCESS_NETWORK_STATE'}
android.telephony.TelephonyManager.setCdmaRoamingMode(int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getCdmaSubscriptionMode()int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.setCdmaSubscriptionMode(int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setDataRoamingEnabled(boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.enableVideoCalling(boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.isVideoCallingEnabled()boolean :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.setSimPowerState(int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setSimPowerStateForSlot(int,int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setSimPowerState(int,Executor,Consumer<Integer>)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setSimPowerStateForSlot(int,int,Executor,Consumer<Integer>)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getAndUpdateDefaultRespondViaMessageApplication()ComponentName :: {'android.permission.INTERACT_ACROSS_USERS'}
android.telephony.TelephonyManager.getDefaultRespondViaMessageApplication()ComponentName :: {'android.permission.INTERACT_ACROSS_USERS'}
android.telephony.TelephonyManager.getPhoneAccountHandle()PhoneAccountHandle :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getSubscriptionId(PhoneAccountHandle)int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.resetSettings()void :: {'android.permission.CONNECTIVITY_INTERNAL'}
android.telephony.TelephonyManager.getSimLocale()Locale :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.requestModemActivityInfo(Executor,OutcomeReceiver<ModemActivityInfo,ModemActivityInfoException>)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getServiceState()ServiceState :: {'android.permission.READ_PHONE_STATE', 'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.TelephonyManager.getServiceState(int)ServiceState :: {'android.permission.READ_PHONE_STATE', 'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.TelephonyManager.getCarrierIdFromMccMnc(String)int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getCertsFromCarrierPrivilegeAccessRules()List<String> :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getAidForAppType(int)String :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getTelephonyHistograms()List<TelephonyHistogram> :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setAllowedCarriers(int,List<CarrierIdentifier>)int :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setCarrierRestrictionRules(CarrierRestrictionRules)int :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getAllowedCarriers(int)List<CarrierIdentifier> :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getCarrierRestrictionRules()CarrierRestrictionRules :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.setCarrierDataEnabled(boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setRadioEnabled(boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setVoNrEnabled(boolean)int :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.isVoNrEnabled()boolean :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.reportDefaultNetworkStatus(boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.resetAllCarrierActions()void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setPolicyDataEnabled(boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setDataEnabledForReason(int,boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.isDataEnabledForReason(int)boolean :: {'android.permission.MODIFY_PHONE_STATE', 'android.permission.READ_PHONE_STATE', 'android.permission.READ_BASIC_PHONE_STATE', 'android.permission.ACCESS_NETWORK_STATE'}
android.telephony.TelephonyManager.getEmergencyCallbackMode()boolean :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.isManualNetworkSelectionAllowed()boolean :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.isDataConnectionAllowed()boolean :: {'android.permission.READ_BASIC_PHONE_STATE', 'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE', 'android.permission.ACCESS_NETWORK_STATE'}
android.telephony.TelephonyManager.getNumberOfModemsWithSimultaneousDataConnections()int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.setOpportunisticNetworkState(boolean)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.isOpportunisticNetworkEnabled()boolean :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getSupportedRadioAccessFamily()long :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.notifyOtaEmergencyNumberDbInstalled()void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.updateOtaEmergencyNumberDbFilePath(ParcelFileDescriptor)void :: {'android.permission.READ_ACTIVE_EMERGENCY_SESSION'}
android.telephony.TelephonyManager.resetOtaEmergencyNumberDbFilePath()void :: {'android.permission.READ_ACTIVE_EMERGENCY_SESSION'}
android.telephony.TelephonyManager.getEmergencyNumberList()Map<Integer, :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getEmergencyNumberList(int)Map<Integer, :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.isPotentialEmergencyNumber(String)boolean :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getEmergencyNumberDbVersion()int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getPreferredOpportunisticDataSubscription()int :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.enableModemForSlot(int,boolean)boolean :: {'android.permission.READ_PHONE_STATE', 'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.isModemEnabledForSlot(int)boolean :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.setMultiSimCarrierRestriction(boolean)void :: {'android.permission.READ_PHONE_STATE', 'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.isMultiSimSupported()int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.switchMultiSimConfig(int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.doesSwitchMultiSimConfigTriggerReboot()boolean :: {'android.permission.READ_PHONE_STATE', 'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getCarrierPrivilegeStatus(int)int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.isDataEnabledForApn(int)boolean :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.isApnMetered(int)boolean :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.setSystemSelectionChannels(List<RadioAccessSpecifier>,Executor,Consumer<Boolean>)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setSystemSelectionChannels(List<RadioAccessSpecifier>)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getSystemSelectionChannels()List<RadioAccessSpecifier> :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.matchesCurrentSimOperator(String,int,String)boolean :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getCallForwarding(int,Executor,CallForwardingInfoCallback)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.setCallForwarding(CallForwardingInfo,Executor,Consumer<Integer>)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getCallWaitingStatus(Executor,Consumer<Integer>)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.setCallWaitingEnabled(boolean,Executor,Consumer<Integer>)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setMobileDataPolicyEnabled(int,boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.isMobileDataPolicyEnabled(int)boolean :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.isIccLockEnabled()boolean :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.setIccLockEnabled(boolean,String)PinResult :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.changeIccLockPin(String,String)PinResult :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.notifyUserActivity()void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setNrDualConnectivityState(int)int :: {'android.permission.CAPABILITY_NR_DUAL_CONNECTIVITY_CONFIGURATION_AVAILABLE', 'android.permission.TelephonyManager#isRadioInterfaceCapabilitySupported"'}
android.telephony.TelephonyManager.isNrDualConnectivityEnabled()boolean :: {'android.permission.CAPABILITY_NR_DUAL_CONNECTIVITY_CONFIGURATION_AVAILABLE', 'android.permission.TelephonyManager#isRadioInterfaceCapabilitySupported"'}
android.telephony.TelephonyManager.getEquivalentHomePlmns()List<String> :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.sendThermalMitigationRequest(ThermalMitigationRequest)int :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.bootstrapAuthenticationRequest(int,Uri,UaSecurityProtocolIdentifier,boolean,Executor,BootstrapAuthenticationCallback)void :: {'android.permission.PERFORM_IMS_SINGLE_REGISTRATION', 'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setSignalStrengthUpdateRequest(SignalStrengthUpdateRequest)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.clearSignalStrengthUpdateRequest(SignalStrengthUpdateRequest)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getPhoneCapability()PhoneCapability :: {'android.permission.READ_PRIVILEGED_PHONE_STATE', 'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.prepareForUnattendedReboot()int :: {'android.permission.REBOOT'}
android.telephony.TelephonyManager.getNetworkSlicingConfiguration(Executor,OutcomeReceiver<NetworkSlicingConfig,NetworkSlicingException>)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getLastKnownCellIdentity()CellIdentity :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_LAST_KNOWN_CELL_ID'}
android.telephony.TelephonyManager.setVoiceServiceStateOverride(boolean)void :: {'android.permission.BIND_TELECOM_CONNECTION_SERVICE'}
android.telephony.TelephonyManager.registerCarrierPrivilegesCallback(int,Executor,CarrierPrivilegesCallback)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.unregisterCarrierPrivilegesCallback(CarrierPrivilegesCallback)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.setRemovableEsimAsDefaultEuicc(boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.isRemovableEsimDefaultEuicc()boolean :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyRegistryManager.notifyCallStateChangedForAllSubscriptions(int,String)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.euicc.EuiccManager.getOtaStatus()int :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.downloadSubscription(DownloadableSubscription,boolean,PendingIntent)void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.continueOperation(Intent,Bundle)void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.getDownloadableSubscriptionMetadata(DownloadableSubscription,PendingIntent)void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.getDefaultDownloadableSubscriptionList(PendingIntent)void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.deleteSubscription(int,PendingIntent)void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.switchToSubscription(int,PendingIntent)void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.switchToSubscription(int,int,PendingIntent)void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.updateSubscriptionNickname(int,String,PendingIntent)void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.eraseSubscriptions(PendingIntent)void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.eraseSubscriptions(int,PendingIntent)void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.setSupportedCountries(List<String>)void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.setUnsupportedCountries(List<String>)void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.getSupportedCountries()List<String> :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.getUnsupportedCountries()List<String> :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.isSupportedCountry(String)boolean :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.ims.ImsMmTelManager.registerImsRegistrationCallback(Executor,RegistrationCallback)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.registerImsRegistrationCallback(Executor,RegistrationManager.RegistrationCallback)void :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.unregisterImsRegistrationCallback(RegistrationCallback)void :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.unregisterImsRegistrationCallback(RegistrationManager.RegistrationCallback)void :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.getRegistrationState(Executor,Consumer<Integer>)void :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.getRegistrationTransportType(Executor,Consumer<Integer>)void :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.registerMmTelCapabilityCallback(Executor,CapabilityCallback)void :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.unregisterMmTelCapabilityCallback(CapabilityCallback)void :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.isAdvancedCallingSettingEnabled()boolean :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.setAdvancedCallingSettingEnabled(boolean)void :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.MODIFY_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.isCapable(int,int)boolean :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.isAvailable(int,int)boolean :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.isSupported(int,int,Executor,Consumer<Boolean>)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.isVtSettingEnabled(). :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.setVtSettingEnabled(boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.isVoWiFiSettingEnabled()boolean :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.setVoWiFiSettingEnabled(boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.isCrossSimCallingEnabled()boolean :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.setCrossSimCallingEnabled(boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.isVoWiFiRoamingSettingEnabled()boolean :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.setVoWiFiRoamingSettingEnabled(boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.setVoWiFiNonPersistent(boolean,int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.getVoWiFiModeSetting()int :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.setVoWiFiModeSetting(int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.getVoWiFiRoamingModeSetting()int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.setVoWiFiRoamingModeSetting(int)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.setRttCapabilitySetting(boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.isTtyOverVolteEnabled()boolean :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.getFeatureState(Executor,Consumer<Integer>)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.registerImsStateCallback(Executor,ImsStateCallback)void :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsRcsManager.registerImsRegistrationCallback(Executor,RegistrationManager.RegistrationCallback)void :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.ims.ImsRcsManager.unregisterImsRegistrationCallback(RegistrationManager.RegistrationCallback)void :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.ims.ImsRcsManager.getRegistrationState(Executor,Consumer<Integer>)void :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.ims.ImsRcsManager.getRegistrationTransportType(Executor,Consumer<Integer>)void :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.ims.ImsRcsManager.addOnAvailabilityChangedListener(Executor,OnAvailabilityChangedListener)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsRcsManager.removeOnAvailabilityChangedListener(OnAvailabilityChangedListener)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsRcsManager.isCapable(int,int)boolean :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsRcsManager.isAvailable(int,int)boolean :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ImsRcsManager.registerImsStateCallback(Executor,ImsStateCallback)void :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE', 'android.permission.ACCESS_RCS_USER_CAPABILITY_EXCHANGE'}
android.telephony.ims.ProvisioningManager.registerProvisioningChangedCallback(Executor,Callback)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ProvisioningManager.unregisterProvisioningChangedCallback(Callback)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ProvisioningManager.registerFeatureProvisioningChangedCallback(Executor,FeatureProvisioningCallback)void :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.ims.ProvisioningManager.getProvisioningIntValue(int)int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ProvisioningManager.getProvisioningStringValue(int)String :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ProvisioningManager.setProvisioningIntValue(int,int)int :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.ims.ProvisioningManager.setProvisioningStringValue(int,String)int :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.ims.ProvisioningManager.setProvisioningStatusForCapability(int,int,boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.ims.ProvisioningManager.getProvisioningStatusForCapability(int,int)boolean :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.ims.ProvisioningManager.getRcsProvisioningStatusForCapability(int)boolean :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ProvisioningManager.getRcsProvisioningStatusForCapability(int,int)boolean :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.ims.ProvisioningManager.setRcsProvisioningStatusForCapability(int,boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.ims.ProvisioningManager.setRcsProvisioningStatusForCapability(int,int,boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.ims.ProvisioningManager.isProvisioningRequiredForCapability(int,int)boolean :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.ims.ProvisioningManager.isRcsProvisioningRequiredForCapability(int,int)boolean :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.ims.ProvisioningManager.notifyRcsAutoConfigurationReceived(byte[],boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.ims.ProvisioningManager.setRcsClientConfiguration(RcsClientConfiguration)void :: {'android.permission.PERFORM_IMS_SINGLE_REGISTRATION'}
android.telephony.ims.ProvisioningManager.isRcsVolteSingleRegistrationCapable()boolean :: {'android.permission.PERFORM_IMS_SINGLE_REGISTRATION', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ProvisioningManager.registerRcsProvisioningCallback(Executor,RcsProvisioningCallback)void :: {'android.permission.PERFORM_IMS_SINGLE_REGISTRATION', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ProvisioningManager.unregisterRcsProvisioningCallback(RcsProvisioningCallback)void :: {'android.permission.PERFORM_IMS_SINGLE_REGISTRATION', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.ProvisioningManager.triggerRcsReconfiguration()void :: {'android.permission.PERFORM_IMS_SINGLE_REGISTRATION', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.RcsUceAdapter.requestCapabilities(Collection<Uri>,Executor,CapabilitiesCallback)void :: {'android.permission.ACCESS_RCS_USER_CAPABILITY_EXCHANGE', 'android.permission.READ_CONTACTS'}
android.telephony.ims.RcsUceAdapter.requestAvailability(Uri,Executor,CapabilitiesCallback)void :: {'android.permission.ACCESS_RCS_USER_CAPABILITY_EXCHANGE', 'android.permission.READ_CONTACTS'}
android.telephony.ims.RcsUceAdapter.getUcePublishState()int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.RcsUceAdapter.addOnPublishStateChangedListener(Executor,OnPublishStateChangedListener)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.RcsUceAdapter.removeOnPublishStateChangedListener(OnPublishStateChangedListener)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.RcsUceAdapter.isUceSettingEnabled()boolean :: {'android.permission.READ_PHONE_STATE'}
android.telephony.ims.RcsUceAdapter.setUceSettingEnabled(boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.ims.RegistrationManager.registerImsRegistrationCallback(Executor,RegistrationCallback)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.RegistrationManager.unregisterImsRegistrationCallback(RegistrationCallback)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.RegistrationManager.getRegistrationState(Executor,Consumer<Integer>)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.RegistrationManager.getRegistrationTransportType(Executor,Consumer<Integer>)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.SipDelegateManager.isSupported()boolean :: {'android.permission.PERFORM_IMS_SINGLE_REGISTRATION', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.ims.SipDelegateManager.createSipDelegate(DelegateRequest,Executor,DelegateConnectionStateCallback,DelegateConnectionMessageCallback)void :: {'android.permission.PERFORM_IMS_SINGLE_REGISTRATION'}
android.telephony.ims.SipDelegateManager.destroySipDelegate(SipDelegateConnection,int)void :: {'android.permission.PERFORM_IMS_SINGLE_REGISTRATION'}
android.telephony.ims.SipDelegateManager.Objects.requireNonNull(connection,SipDelegateConnection)int :: {'android.permission. to = 699', 'android.permission.\n            @IntRange(from = 100', 'android.permission.PERFORM_IMS_SINGLE_REGISTRATION)\n    public void triggerFullNetworkRegistration(@NonNull SipDelegateConnection connection'}
android.telephony.ims.SipDelegateManager.registerImsStateCallback(Executor,ImsStateCallback)void :: {'android.permission.PERFORM_IMS_SINGLE_REGISTRATION', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.view.Display.getBrightnessInfo()BrightnessInfo :: {'android.permission.CONTROL_DISPLAY_BRIGHTNESS'}
android.view.Display.requestColorMode(int)void :: {'android.permission.CONFIGURE_DISPLAY_COLOR_MODE'}
android.view.Display.setUserPreferredDisplayMode(Display.Mode)void :: {'android.permission.MODIFY_USER_PREFERRED_DISPLAY_MODE'}
android.view.Display.clearUserPreferredDisplayMode()void :: {'android.permission.MODIFY_USER_PREFERRED_DISPLAY_MODE'}
android.view.InputDevice.enable()void :: {'android.permission.DISABLE_INPUT_DEVICE'}
android.view.InputDevice.disable()void :: {'android.permission.DISABLE_INPUT_DEVICE'}
android.view.SurfaceControlHdrLayerInfoListener.register(IBinder)void :: {'android.permission.CONTROL_DISPLAY_BRIGHTNESS'}
android.view.SurfaceControlHdrLayerInfoListener.unregister(IBinder)void :: {'android.permission.CONTROL_DISPLAY_BRIGHTNESS'}
android.view.SurfaceControlHdrLayerInfoListener.unregisterAll()void :: {'android.permission.CONTROL_DISPLAY_BRIGHTNESS'}
android.view.View.setUnrestrictedPreferKeepClearRects(List<Rect>)void :: {'android.permission.SET_UNRESTRICTED_KEEP_CLEAR_AREAS'}
android.view.Window.setHideOverlayWindows(boolean)void :: {'android.permission.HIDE_OVERLAY_WINDOWS'}
android.view.WindowManager.getCurrentImeTouchRegion()Region :: {'android.permission.RESTRICTED_VR_ACCESS'}
android.view.WindowManager.setSystemApplicationOverlay(boolean)void :: {'android.permission.SYSTEM_APPLICATION_OVERLAY'}
android.view.accessibility.AccessibilityManager.performAccessibilityShortcut()void :: {'android.permission.MANAGE_ACCESSIBILITY'}
android.view.accessibility.AccessibilityManager.performAccessibilityShortcut(String)void :: {'android.permission.MANAGE_ACCESSIBILITY'}
android.view.accessibility.AccessibilityManager.registerSystemAction(RemoteAction,int)void :: {'android.permission.MANAGE_ACCESSIBILITY'}
android.view.accessibility.AccessibilityManager.unregisterSystemAction(int)void :: {'android.permission.MANAGE_ACCESSIBILITY'}
android.view.accessibility.AccessibilityManager.notifyAccessibilityButtonClicked(int)void :: {'android.permission.STATUS_BAR_SERVICE'}
android.view.accessibility.AccessibilityManager.notifyAccessibilityButtonClicked(int,String)void :: {'android.permission.STATUS_BAR_SERVICE'}
android.view.accessibility.AccessibilityManager.getAccessibilityShortcutTargets(int)List<String> :: {'android.permission.MANAGE_ACCESSIBILITY'}
android.view.accessibility.CaptioningManager.setSystemAudioCaptioningEnabled(boolean)void :: {'android.permission.SET_SYSTEM_AUDIO_CAPTION'}
android.view.accessibility.CaptioningManager.setSystemAudioCaptioningUiEnabled(boolean)void :: {'android.permission.SET_SYSTEM_AUDIO_CAPTION'}
android.view.contentcapture.ContentCaptureManager.resetTemporaryService(int)void :: {'android.permission.MANAGE_CONTENT_CAPTURE'}
android.view.contentcapture.ContentCaptureManager.setTemporaryService(int,String,int)void :: {'android.permission.MANAGE_CONTENT_CAPTURE'}
android.view.contentcapture.ContentCaptureManager.setDefaultServiceEnabled(int,boolean)void :: {'android.permission.MANAGE_CONTENT_CAPTURE'}
android.view.displayhash.DisplayHashManager.setDisplayHashThrottlingEnabled(boolean)void :: {'android.permission.READ_FRAME_BUFFER'}
android.view.inputmethod.InputMethodManager.getInputMethodListAsUser(int)List<InputMethodInfo> :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.view.inputmethod.InputMethodManager.getInputMethodListAsUser(int,int)List<InputMethodInfo> :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.view.inputmethod.InputMethodManager.getEnabledInputMethodListAsUser(int)List<InputMethodInfo> :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.view.inputmethod.InputMethodManager.showInputMethodPickerFromSystem(boolean,int)void :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.view.inputmethod.InputMethodManager.setCurrentInputMethodSubtype(InputMethodSubtype)boolean :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.view.translation.UiTranslationManager.startTranslation(TranslationSpec,TranslationSpec,List<AutofillId>,ActivityId)void :: {'android.permission.MANAGE_UI_TRANSLATION'}
android.view.translation.UiTranslationManager.startTranslation(TranslationSpec,TranslationSpec,List<AutofillId>,ActivityId,UiTranslationSpec)void :: {'android.permission.MANAGE_UI_TRANSLATION'}
android.view.translation.UiTranslationManager.finishTranslation(ActivityId)void :: {'android.permission.MANAGE_UI_TRANSLATION'}
android.view.translation.UiTranslationManager.pauseTranslation(ActivityId)void :: {'android.permission.MANAGE_UI_TRANSLATION'}
android.view.translation.UiTranslationManager.resumeTranslation(ActivityId)void :: {'android.permission.MANAGE_UI_TRANSLATION'}
android.widget.TextView.setTextOperationUser(UserHandle)void :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.window.DisplayAreaOrganizer.registerOrganizer(int)List<DisplayAreaAppearedInfo> :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.window.DisplayAreaOrganizer.unregisterOrganizer()void :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.window.DisplayAreaOrganizer.createTaskDisplayArea(int,int,String)DisplayAreaAppearedInfo :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.window.DisplayAreaOrganizer.deleteTaskDisplayArea(WindowContainerToken)void :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.window.DisplayAreaOrganizer.getController()IDisplayAreaOrganizerController :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.window.TaskOrganizer.registerOrganizer()List<TaskAppearedInfo> :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.window.TaskOrganizer.unregisterOrganizer()void :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.window.TaskOrganizer.createRootTask(int,int,IBinder)void :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.window.TaskOrganizer.deleteRootTask(WindowContainerToken)boolean :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.window.TaskOrganizer.getImeTarget(int)WindowContainerToken :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.window.TaskOrganizer.setInterceptBackPressedOnTaskRoot(WindowContainerToken,boolean)void :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.window.TaskOrganizer.restartTaskTopActivityProcessIfVisible(WindowContainerToken)void :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.window.TaskOrganizer.updateCameraCompatControlState(WindowContainerToken,int)void :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.window.TaskOrganizer.setIsIgnoreOrientationRequestDisabled(boolean)void :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.window.TaskOrganizer.getController()ITaskOrganizerController :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.window.WindowOrganizer.applyTransaction(WindowContainerTransaction)void :: {'android.permission.MANAGE_ACTIVITY_TASKS', 'android.permission.\n            conditional = true'}
android.window.WindowOrganizer.applySyncTransaction(WindowContainerTransaction,WindowContainerTransactionCallback)int :: {'android.permission.MANAGE_ACTIVITY_TASKS', 'android.permission.\n            conditional = true'}
android.window.WindowOrganizer.startTransition(int,IBinder,WindowContainerTransaction)IBinder :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.window.WindowOrganizer.finishTransition(IBinder,WindowContainerTransaction,WindowContainerTransactionCallback)int :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.window.WindowOrganizer.startLegacyTransition(int,RemoteAnimationAdapter,WindowContainerTransactionCallback,WindowContainerTransaction)int :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.window.WindowOrganizer.registerTransitionPlayer(ITransitionPlayer)void :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
com.android.internal.location.GpsNetInitiatedHandler.onOutgoingEmergencyCall(EmergencyNumber,int)void :: {'android.permission.READ_ACTIVE_EMERGENCY_SESSION'}
com.android.internal.location.GpsNetInitiatedHandler.onCallStateChanged(int)void :: {'android.permission.READ_PHONE_STATE'}
com.android.internal.telephony.IccSmsInterfaceManager.resetAllCellBroadcastRanges()void :: {'android.permission.MODIFY_CELL_BROADCASTS'}
com.android.libraries.tv.tvsystem.media.TvAudioManager.setDeviceVolumeBehavior(AudioDeviceAttributes,int)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
com.android.libraries.tv.tvsystem.media.TvAudioManager.getDeviceVolumeBehavior(AudioDeviceAttributes)int :: {'android.permission.MODIFY_AUDIO_ROUTING'}
com.android.libraries.tv.tvsystem.pm.TvPackageInstaller.uninstallExistingPackage(String,IntentSender)void :: {'android.permission.DELETE_PACKAGES'}
com.android.libraries.tv.tvsystem.wifi.TvWifiManager.startLocalOnlyHotspot(SoftApConfiguration,Executor,WifiManager.LocalOnlyHotspotCallback)void :: {'android.permission.NETWORK_SETTINGS', 'android.permission.NETWORK_SETUP_WIZARD'}
com.android.server.WallpaperUpdateReceiver.isUserSetWallpaper(WallpaperManager,Context)boolean :: {'android.permission.READ_WALLPAPER_INTERNAL'}
com.android.server.accessibility.AccessibilityManagerService.setSystemAudioCaptioningEnabled(boolean,int)void :: {'android.permission.SET_SYSTEM_AUDIO_CAPTION'}
com.android.server.accessibility.AccessibilityManagerService.setSystemAudioCaptioningUiEnabled(boolean,int)void :: {'android.permission.SET_SYSTEM_AUDIO_CAPTION'}
com.android.server.app.GameManagerService.getAvailableGameModes(String)int[] :: {'android.permission.MANAGE_GAME_MODE'}
com.android.server.app.GameManagerService.getGameModeInfo(String,int)GameModeInfo :: {'android.permission.MANAGE_GAME_MODE'}
com.android.server.app.GameManagerService.setGameMode(String,int,int)void :: {'android.permission.MANAGE_GAME_MODE'}
com.android.server.app.GameManagerService.isAngleEnabled(String,int)boolean :: {'android.permission.MANAGE_GAME_MODE'}
com.android.server.app.GameManagerService.notifyGraphicsEnvironmentSetup(String,int)void :: {'android.permission.MANAGE_GAME_MODE'}
com.android.server.app.GameManagerService.setGameServiceProvider(String)void :: {'android.permission.SET_GAME_SERVICE'}
com.android.server.app.GameManagerService.updateUseAngle(String,int)void :: {'android.permission.WRITE_SECURE_SETTINGS'}
com.android.server.app.GameManagerService.setGameModeConfigOverride(String,int,int,String,String)void :: {'android.permission.MANAGE_GAME_MODE'}
com.android.server.app.GameManagerService.resetGameModeConfigOverride(String,int,int)void :: {'android.permission.MANAGE_GAME_MODE'}
com.android.server.app.GameServiceProviderInstanceImpl.createGameSession(int)void :: {'android.permission.MANAGE_GAME_ACTIVITY'}
com.android.server.app.GameServiceProviderInstanceImpl.takeScreenshot(int,AndroidFuture)void :: {'android.permission.MANAGE_GAME_ACTIVITY'}
com.android.server.app.GameServiceProviderInstanceImpl.restartGame(int)void :: {'android.permission.MANAGE_GAME_ACTIVITY'}
com.android.server.audio.AudioService.registerDeviceVolumeDispatcherForAbsoluteVolume(boolean,IAudioDeviceVolumeDispatcher,String,AudioDeviceAttributes,List<VolumeInfo>,boolean)void :: {'android.permission.BLUETOOTH_PRIVILEGED', 'android.permission.MODIFY_AUDIO_ROUTING'}
com.android.server.audio.AudioService.Objects.requireNonNull(device,device)long :: {'android.permission. @IntRange(from = 0', 'android.permission.MODIFY_AUDIO_ROUTING)\n    public boolean setAdditionalOutputDeviceDelay(\n            @NonNull AudioDeviceAttributes device'}
com.android.server.companion.virtual.VirtualDeviceImpl.mContext.enforceCallingOrSelfPermission(android.Manifest.permission.CREATE_VIRTUAL_DEVICE,Permission){ :: {'android.permission.CREATE_VIRTUAL_DEVICE)\n    @Override // Binder call\n    public void onAudioSessionEnded('}
com.android.server.companion.virtual.audio.VirtualAudioController.onRecordingConfigChanged(List<AudioRecordingConfiguration>)void :: {'android.permission.MODIFY_AUDIO_ROUTING'}
com.android.server.companion.virtual.audio.VirtualAudioController.findRecordingConfigurations(List<AudioRecordingConfiguration>,ArraySet<Integer>)List<AudioRecordingConfiguration> :: {'android.permission.MODIFY_AUDIO_ROUTING'}
com.android.server.content.ContentService.putCache(String,Uri,Bundle,int)void :: {'android.permission.CACHE_CONTENT'}
com.android.server.content.ContentService.getCache(String,Uri,int)Bundle :: {'android.permission.CACHE_CONTENT'}
com.android.server.graphics.fonts.FontManagerService.getFontConfig()FontConfig :: {'android.permission.UPDATE_FONTS'}
com.android.server.graphics.fonts.FontManagerService.updateFontFamily(List<FontUpdateRequest>,int)int :: {'android.permission.UPDATE_FONTS'}
com.android.server.inputmethod.InputMethodManagerService.onCommand(String)int :: {'android.permission.DUMP', 'android.permission.WRITE_SECURE_SETTINGS', 'android.permission.', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
com.android.server.location.LocationManagerService.setAutomotiveGnssSuspended(boolean)void :: {'android.permission.CONTROL_AUTOMOTIVE_GNSS'}
com.android.server.location.LocationManagerService.isAutomotiveGnssSuspended()boolean :: {'android.permission.CONTROL_AUTOMOTIVE_GNSS'}
com.android.server.notification.NotificationManagerService.getHistoricalNotifications(String,int,boolean)StatusBarNotification[] :: {'android.permission.ACCESS_NOTIFICATIONS'}
com.android.server.notification.NotificationManagerService.getHistoricalNotificationsWithAttribution(String,String,int,boolean)StatusBarNotification[] :: {'android.permission.ACCESS_NOTIFICATIONS'}
com.android.server.notification.NotificationManagerService.getNotificationHistory(String,String)NotificationHistory :: {'android.permission.ACCESS_NOTIFICATIONS'}
com.android.server.os.BugreportManagerServiceImpl.startBugreport(int,String,FileDescriptor,FileDescriptor,int,IDumpstateListener,boolean)void :: {'android.permission.DUMP'}
com.android.server.pm.DexOptHelper.performPackageDexOptUpgradeIfNeeded()void :: {'android.permission.READ_DEVICE_CONFIG'}
com.android.server.pm.verify.domain.DomainVerificationManagerInternal.getDomainVerificationInfo(String)DomainVerificationInfo :: {'android.permission.UPDATE_DOMAIN_VERIFICATION_USER_SELECTION', 'android.permission.DOMAIN_VERIFICATION_AGENT'}
com.android.server.pm.verify.domain.DomainVerificationManagerInternal.setDomainVerificationStatusInternal(int,UUID,Set<String>,int)int :: {'android.permission.DOMAIN_VERIFICATION_AGENT'}
com.android.server.power.PowerManagerService.isLowPowerStandbySupported()boolean :: {'android.permission.DEVICE_POWER', 'android.permission.MANAGE_LOW_POWER_STANDBY'}
com.android.server.power.PowerManagerService.setLowPowerStandbyEnabled(boolean)void :: {'android.permission.DEVICE_POWER', 'android.permission.MANAGE_LOW_POWER_STANDBY'}
com.android.server.power.PowerManagerService.setLowPowerStandbyActiveDuringMaintenance(boolean)void :: {'android.permission.DEVICE_POWER', 'android.permission.MANAGE_LOW_POWER_STANDBY'}
com.android.server.power.PowerManagerService.forceLowPowerStandbyActive(boolean)void :: {'android.permission.DEVICE_POWER', 'android.permission.MANAGE_LOW_POWER_STANDBY'}
com.android.server.wm.WindowManagerService.addKeyguardLockedStateListener(IKeyguardLockedStateListener)void :: {'android.permission.SUBSCRIBE_TO_KEYGUARD_LOCKED_STATE'}
com.android.server.wm.WindowManagerService.removeKeyguardLockedStateListener(IKeyguardLockedStateListener)void :: {'android.permission.SUBSCRIBE_TO_KEYGUARD_LOCKED_STATE'}
com.android.server.wm.WindowManagerService.showGlobalActions()void :: {'android.permission.INTERNAL_SYSTEM_WINDOW'}
com.android.server.wm.WindowManagerService.if(mContext.checkCallingOrSelfPermission)int :: {'android.permission.ACCESS_FPS_COUNTER)\n    public void registerTaskFpsCallback(@IntRange(from = 0'}
com.android.server.wm.WindowManagerService.unregisterTaskFpsCallback(ITaskFpsCallback)void :: {'android.permission.ACCESS_FPS_COUNTER'}
com.android.settingslib.bluetooth.LocalBluetoothManager.create(Context,Handler,UserHandle)LocalBluetoothManager :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
com.android.setupwizardlib.util.SystemBarHelper.setBackButtonVisible(Window,boolean)void :: {'android.permission.STATUS_BAR"'}
com.android.shell.BugreportRequestedReceiver.onReceive(Context,Intent)void :: {'android.permission.TRIGGER_SHELL_BUGREPORT'}
android.accessibilityservice.AccessibilityService.onAccessibilityEvent(AccessibilityEvent)interface :: {'android.permission.BIND_ACCESSIBILITY_SERVICE'}
android.accessibilityservice.FingerprintGestureController.FingerprintGestureController(IAccessibilityServiceConnection)FingerprintGestureController(IAccessibilityServiceConnection :: {'android.permission.USE_FINGERPRINT'}
android.accounts.AccountManager.AccountManager(Context,IAccountManager)AccountManager(Context :: {'android.permission.GET_ACCOUNTS', 'android.permission.GET_ACCOUNTS_PRIVILEGED', 'android.permission.WRITE_CONTACTS', 'android.permission.READ_CONTACTS'}
android.accounts.AccountManager.getAuthenticatorTypesAsUser(int)AuthenticatorDescription[] :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.accounts.AccountManager.getAccountsByType(String)Account[] :: {'android.permission.GET_ACCOUNTS'}
android.accounts.AccountManager.hasFeatures(Account,String[],AccountManagerCallback<Boolean>,Handler)AccountManagerFuture<Boolean> :: {'android.permission.GET_ACCOUNTS'}
android.accounts.AccountManager.getAccountsByTypeAndFeatures(String,String[],AccountManagerCallback<Account[]>,Handler)AccountManagerFuture<Account[]> :: {'android.permission.GET_ACCOUNTS'}
android.app.ActivityClient.invalidateHomeTaskSnapshot(IBinder)void :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
android.app.ActivityManager.getProcessesInErrorState()List<ProcessErrorStateInfo> :: {'android.permission.DUMP'}
android.app.ActivityManager.setProcessStateSummary(byte[])void :: {'android.permission.DUMP'}
android.app.ActivityManager.forceStopPackageAsUser(String,int)void :: {'android.permission.FORCE_STOP_PACKAGES'}
android.app.ActivityManager.handleIncomingUser(int,int,int,boolean,boolean,String,String)int :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.ActivityManagerInternal.getAppProfileStatsForDebugging(long,int)Pair<String, :: {'android.permission.INTERACT_ACROSS_PROFILES', 'android.permission.INTERACT_ACROSS_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.AlarmManager.onAlarm()void :: {'android.permission.SCHEDULE_EXACT_ALARM'}
android.app.AppOpsManager.stopWatchingMode(OnOpChangedListener)void :: {'android.permission.WATCH_APPOPS'}
android.app.AppOpsManager.stopWatchingNoted(OnOpNotedListener)void :: {'android.permission.WATCH_APPOPS'}
android.app.DownloadManager.Request(Uri)Request(Uri :: {'android.permission.INTERNET'}
android.app.DownloadManager.setDestinationUri(Uri)Request :: {'android.permission.WRITE_EXTERNAL_STORAGE'}
android.app.DownloadManager.setDestinationInExternalPublicDir(String,String)Request :: {'android.permission.WRITE_EXTERNAL_STORAGE'}
android.app.Notification.getGroup()String :: {'android.permission.VIBRATE'}
android.app.Notification.setFullScreenIntent(PendingIntent,boolean)Builder :: {'android.permission.USE_FULL_SCREEN_INTENT'}
android.app.NotificationManager.from(Context)NotificationManager :: {'android.permission.STATUS_BAR_SERVICE'}
android.app.Service.startForeground(int,Notification)void :: {'android.permission.FOREGROUND_SERVICE'}
android.app.WallpaperManager.suggestDesiredDimensions(int,int)void :: {'android.permission.SET_WALLPAPER_HINTS'}
android.app.admin.DelegatedAdminReceiver.onChoosePrivateKeyAlias(Context,Intent,int,Uri,String)String :: {'android.permission.BIND_DEVICE_ADMIN'}
android.app.admin.DeviceAdminReceiver.getManager(Context)DevicePolicyManager :: {'android.permission.BIND_DEVICE_ADMIN'}
android.app.admin.DevicePolicyManager.onInstallUpdateError(int,String)void :: {'android.permission.DISPATCH_PROVISIONING_MESSAGE', 'android.permission.BIND_DEVICE_ADMIN'}
android.app.admin.DevicePolicyManager.wipeData(int)void :: {'android.permission.MASTER_CLEAR'}
android.app.admin.DevicePolicyManager.wipeData(int,CharSequence)void :: {'android.permission.MASTER_CLEAR'}
android.app.admin.DevicePolicyManager.getFactoryResetProtectionPolicy(ComponentName)FactoryResetProtectionPolicy :: {'android.permission.MASTER_CLEAR'}
android.app.admin.DevicePolicyManager.setAlwaysOnVpnPackage(ComponentName,String,boolean)void :: {'android.permission.BIND_VPN_SERVICE'}
android.app.admin.DevicePolicyManager.getNearbyNotificationStreamingPolicy(int)int :: {'android.permission.READ_NEARBY_STREAMING_POLICY'}
android.app.admin.DevicePolicyManager.getNearbyAppStreamingPolicy(int)int :: {'android.permission.READ_NEARBY_STREAMING_POLICY'}
android.app.admin.DevicePolicyManager.bindDeviceAdminServiceAsUser(ComponentName,Intent,ServiceConnection,int,UserHandle)boolean :: {'android.permission.BIND_DEVICE_ADMIN'}
android.app.admin.DevicePolicyManager.getOwnerInstalledCaCerts(UserHandle)List<String> :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.app.job.JobInfo.getId()int :: {'android.permission.CONNECTIVITY_INTERNAL'}
android.app.timezone.RulesManager.getRulesState()RulesState :: {'android.permission.QUERY_TIME_ZONE_RULES', 'android.permission.UPDATE_TIME_ZONE_RULES'}
android.app.trust.TrustManager.reportUnlockAttempt(boolean,int)void :: {'android.permission.ACCESS_KEYGUARD_SECURE_STORAGE'}
android.app.trust.TrustManager.reportUserRequestedUnlock(int,boolean)void :: {'android.permission.ACCESS_KEYGUARD_SECURE_STORAGE'}
android.app.trust.TrustManager.reportUserMayRequestUnlock(int)void :: {'android.permission.ACCESS_KEYGUARD_SECURE_STORAGE'}
android.app.trust.TrustManager.reportUnlockLockout(int,int)void :: {'android.permission.ACCESS_KEYGUARD_SECURE_STORAGE'}
android.app.trust.TrustManager.reportEnabledTrustAgentsChanged(int)void :: {'android.permission.ACCESS_KEYGUARD_SECURE_STORAGE'}
android.app.trust.TrustManager.reportKeyguardShowingChanged()void :: {'android.permission.ACCESS_KEYGUARD_SECURE_STORAGE'}
android.app.trust.TrustManager.registerTrustListener(TrustListener)void :: {'android.permission.TRUST_LISTENER'}
android.app.trust.TrustManager.unregisterTrustListener(TrustListener)void :: {'android.permission.TRUST_LISTENER'}
android.app.usage.UsageStatsManager.queryUsageStats(int,long,long)List<UsageStats> :: {'android.permission.PACKAGE_USAGE_STATS'}
android.app.usage.UsageStatsManager.queryConfigurations(int,long,long)List<ConfigurationStats> :: {'android.permission.PACKAGE_USAGE_STATS'}
android.app.usage.UsageStatsManager.queryEventStats(int,long,long)List<EventStats> :: {'android.permission.PACKAGE_USAGE_STATS'}
android.app.usage.UsageStatsManager.queryEvents(long,long)UsageEvents :: {'android.permission.PACKAGE_USAGE_STATS'}
android.app.usage.UsageStatsManager.queryAndAggregateUsageStats(long,long)Map<String, :: {'android.permission.PACKAGE_USAGE_STATS'}
android.app.usage.UsageStatsManager.isAppInactive(String)boolean :: {'android.permission.PACKAGE_USAGE_STATS'}
android.app.usage.UsageStatsManager.reportUsageStart(Activity,String,long)void :: {'android.permission.OBSERVE_APP_USAGE'}
android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int,UserHandle,ComponentName,Bundle)boolean :: {'android.permission.BIND_APPWIDGET'}
android.companion.AssociationRequest.AssociationRequest(boolean,List<DeviceFilter<,String,CharSequence,boolean,boolean)AssociationRequest( :: {'android.permission.REQUEST_COMPANION_PROFILE_WATCH', 'android.permission.REQUEST_COMPANION_PROFILE_AUTOMOTIVE_PROJECTION', 'android.permission.REQUEST_COMPANION_PROFILE_COMPUTER', 'android.permission.REQUEST_COMPANION_PROFILE_APP_STREAMING'}
android.companion.CompanionDeviceManager.getAssociations()List<String> :: {'android.permission.REQUEST_COMPANION_USE_DATA_IN_BACKGROUND', 'android.permission.REQUEST_COMPANION_RUN_IN_BACKGROUND'}
android.companion.CompanionDeviceService.onDeviceAppeared(String)void :: {'android.permission.BIND_COMPANION_DEVICE_SERVICE'}
android.content.ContentResolver.registerContentObserver(Uri,boolean,ContentObserver,int)void :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.content.ContentResolver.getSyncAutomatically(Account,String)boolean :: {'android.permission.READ_SYNC_SETTINGS'}
android.content.ContentResolver.setSyncAutomatically(Account,String,boolean)void :: {'android.permission.WRITE_SYNC_SETTINGS'}
android.content.ContentResolver.addPeriodicSync(Account,String,Bundle,long)void :: {'android.permission.WRITE_SYNC_SETTINGS'}
android.content.ContentResolver.removePeriodicSync(Account,String,Bundle)void :: {'android.permission.WRITE_SYNC_SETTINGS'}
android.content.ContentResolver.cancelSync(SyncRequest)void :: {'android.permission.WRITE_SYNC_SETTINGS'}
android.content.ContentResolver.getPeriodicSyncs(Account,String)List<PeriodicSync> :: {'android.permission.READ_SYNC_SETTINGS'}
android.content.ContentResolver.getIsSyncable(Account,String)int :: {'android.permission.READ_SYNC_SETTINGS'}
android.content.ContentResolver.setIsSyncable(Account,String,int)void :: {'android.permission.WRITE_SYNC_SETTINGS'}
android.content.ContentResolver.getMasterSyncAutomatically()boolean :: {'android.permission.READ_SYNC_SETTINGS'}
android.content.ContentResolver.setMasterSyncAutomatically(boolean)void :: {'android.permission.WRITE_SYNC_SETTINGS'}
android.content.ContentResolver.isSyncActive(Account,String)boolean :: {'android.permission.READ_SYNC_STATS'}
android.content.ContentResolver.getCurrentSync()SyncInfo :: {'android.permission.READ_SYNC_STATS'}
android.content.ContentResolver.getCurrentSyncs()List<SyncInfo> :: {'android.permission.READ_SYNC_STATS'}
android.content.ContentResolver.isSyncPending(Account,String)boolean :: {'android.permission.READ_SYNC_STATS'}
android.content.Context.getAssets()AssetManager :: {'android.permission.START_ACTIVITIES_FROM_BACKGROUND'}
android.content.Context.getExternalFilesDir(String)File :: {'android.permission.WRITE_EXTERNAL_STORAGE', 'android.permission.READ_EXTERNAL_STORAGE'}
android.content.Context.getExternalFilesDirs(String)File[] :: {'android.permission.WRITE_EXTERNAL_STORAGE'}
android.content.Context.getObbDir()File :: {'android.permission.WRITE_EXTERNAL_STORAGE', 'android.permission.READ_EXTERNAL_STORAGE'}
android.content.Context.getObbDirs()File[] :: {'android.permission.WRITE_EXTERNAL_STORAGE'}
android.content.Context.getExternalCacheDir()File :: {'android.permission.WRITE_EXTERNAL_STORAGE', 'android.permission.READ_EXTERNAL_STORAGE'}
android.content.Context.getExternalCacheDirs()File[] :: {'android.permission.WRITE_EXTERNAL_STORAGE'}
android.content.Context.getExternalMediaDirs()File[] :: {'android.permission.WRITE_EXTERNAL_STORAGE'}
android.content.Context.setWallpaper(Bitmap)void :: {'android.permission.SET_WALLPAPER'}
android.content.Context.setWallpaper(InputStream)void :: {'android.permission.SET_WALLPAPER'}
android.content.Context.clearWallpaper()void :: {'android.permission.SET_WALLPAPER'}
android.content.Context.registerReceiver(BroadcastReceiver,IntentFilter)Intent :: {'android.permission.BROADCAST_STICKY'}
android.content.Intent.isAccessUriMode(int)boolean :: {'android.permission.SUSPEND_APPS', 'android.permission.MANAGE_USERS', 'android.permission.REQUEST_INSTALL_PACKAGES', 'android.permission.MASTER_CLEAR', 'android.permission.PROCESS_OUTGOING_CALLS', 'android.permission.INTERACT_ACROSS_USERS', 'android.permission.RECEIVE_MEDIA_RESOURCE_USAGE', 'android.permission.RECEIVE_BOOT_COMPLETED', 'android.permission.CALL_PHONE', 'android.permission.GRANT_RUNTIME_PERMISSIONS', 'android.permission.START_VIEW_PERMISSION_USAGE', 'android.permission.SEND_SHOW_SUSPENDED_APP_DETAILS', 'android.permission.START_VIEW_APP_FEATURES', 'android.permission.INSTALL_PACKAGES', 'android.permission.BATTERY_STATS', 'android.permission.REQUEST_DELETE_PACKAGES'}
android.content.RestrictionsManager.RestrictionsManager(Context,IRestrictionsManager)RestrictionsManager(Context :: {'android.permission.BIND_DEVICE_ADMIN'}
android.content.pm.ApplicationInfo.getCategoryTitle(Context,int)CharSequence :: {'android.permission.FACTORY_TEST'}
android.content.pm.CrossProfileApps.getTargetUserProfiles()List<UserHandle> :: {'android.permission.INTERACT_ACROSS_PROFILES', 'android.permission.START_CROSS_PROFILE_ACTIVITIES'}
android.content.pm.CrossProfileApps.canConfigureInteractAcrossProfiles(String)boolean :: {'android.permission.INTERACT_ACROSS_PROFILES', 'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_APP_OPS_MODES'}
android.content.pm.CrossProfileApps.canUserAttemptToConfigureInteractAcrossProfiles(String)boolean :: {'android.permission.INTERACT_ACROSS_PROFILES'}
android.content.pm.CrossProfileAppsInternal.setInteractAcrossProfilesAppOp(String,int,int)void :: {'android.permission.INTERACT_ACROSS_PROFILES'}
android.content.pm.PackageInfo.isOverlayPackage()boolean :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.content.pm.PackageInstaller.setRequireUserAction(int)void :: {'android.permission.REQUEST_INSTALL_PACKAGES', 'android.permission.UPDATE_PACKAGES_WITHOUT_USER_ACTION'}
android.content.pm.PackageManager.getInstallSourceInfo(String)InstallSourceInfo :: {'android.permission.DELETE_PACKAGES'}
android.content.pm.PackageManager.freeStorageAndNotify(long,IPackageDataObserver)void :: {'android.permission.DELETE_CACHE_FILES', 'android.permission.INTERACT_ACROSS_USERS'}
android.content.pm.PackageManager.getPackageSizeInfo(String,IPackageStatsObserver)void :: {'android.permission.GET_PACKAGE_SIZE'}
android.content.pm.PackageManager.canRequestPackageInstalls()boolean :: {'android.permission.REQUEST_INSTALL_PACKAGES'}
android.content.pm.PackageManagerInternal.getSuspendingPackage(String,int)String :: {'android.permission.SUSPEND_APPS', 'android.permission.MANAGE_USERS'}
android.content.pm.verify.domain.DomainVerificationManager.DomainVerificationManager(Context,IDomainVerificationManager)DomainVerificationManager(Context :: {'android.permission.UPDATE_DOMAIN_VERIFICATION_USER_SELECTION'}
android.hardware.Camera.getNumberOfCameras()int :: {'android.permission.CAMERA'}
android.hardware.Sensor.getHighestDirectReportRateLevel()int :: {'android.permission.HIGH_SAMPLING_RATE_SENSORS'}
android.hardware.Sensor.getMinDelay()int :: {'android.permission.HIGH_SAMPLING_RATE_SENSORS'}
android.hardware.SensorManager.SensorManager()SensorManager() :: {'android.permission.HIGH_SAMPLING_RATE_SENSORS'}
android.hardware.camera2.CameraCharacteristics.getKeysNeedingPermission()List<Key<?>> :: {'android.permission.CAMERA'}
android.hardware.camera2.CameraDevice.getId()String :: {'android.permission.CAMERA'}
android.hardware.camera2.CameraInjectionSession.close()void :: {'android.permission.CAMERA_INJECT_EXTERNAL_CAMERA'}
android.hardware.devicestate.DeviceStateManager.registerCallback(Executor,DeviceStateCallback)void :: {'android.permission.CONTROL_DEVICE_STATE'}
android.hardware.display.DisplayManager.startWifiDisplayScan()void :: {'android.permission.CONFIGURE_WIFI_DISPLAY'}
android.hardware.display.DisplayManager.stopWifiDisplayScan()void :: {'android.permission.CONFIGURE_WIFI_DISPLAY'}
android.hardware.display.DisplayManager.connectWifiDisplay(String)void :: {'android.permission.CONFIGURE_WIFI_DISPLAY'}
android.hardware.display.DisplayManager.renameWifiDisplay(String,String)void :: {'android.permission.CONFIGURE_WIFI_DISPLAY'}
android.hardware.display.DisplayManager.forgetWifiDisplay(String)void :: {'android.permission.CONFIGURE_WIFI_DISPLAY'}
android.hardware.display.DisplayManager.setTemporaryBrightness(int,float)void :: {'android.permission.CONTROL_DISPLAY_BRIGHTNESS'}
android.hardware.display.DisplayManager.setTemporaryAutoBrightnessAdjustment(float)void :: {'android.permission.CONTROL_DISPLAY_BRIGHTNESS'}
android.hardware.display.DisplayManagerGlobal.setTemporaryBrightness(int,float)void :: {'android.permission.CONTROL_DISPLAY_BRIGHTNESS'}
android.hardware.display.DisplayManagerGlobal.setTemporaryAutoBrightnessAdjustment(float)void :: {'android.permission.CONTROL_DISPLAY_BRIGHTNESS'}
android.hardware.hdmi.HdmiControlManager.HdmiControlManager(IHdmiControlService)HdmiControlManager(IHdmiControlService :: {'android.permission.HDMI_CEC'}
android.hardware.location.GeofenceHardware.getMonitoringTypes()int[] :: {'android.permission.LOCATION_HARDWARE'}
android.hardware.location.GeofenceHardware.addGeofence(int,int,GeofenceHardwareRequest,GeofenceHardwareCallback)boolean :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.LOCATION_HARDWARE'}
android.hardware.location.GeofenceHardware.removeGeofence(int,int)boolean :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.LOCATION_HARDWARE'}
android.hardware.location.GeofenceHardware.pauseGeofence(int,int)boolean :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.LOCATION_HARDWARE'}
android.hardware.location.GeofenceHardware.resumeGeofence(int,int,int)boolean :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.LOCATION_HARDWARE'}
android.hardware.location.GeofenceHardware.registerForMonitorStateChangeCallback(int,GeofenceHardwareMonitorCallback)boolean :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.LOCATION_HARDWARE'}
android.hardware.location.GeofenceHardware.unregisterForMonitorStateChangeCallback(int,GeofenceHardwareMonitorCallback)boolean :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.LOCATION_HARDWARE'}
android.hardware.usb.UsbManager.hasPermission(UsbDevice)boolean :: {'android.permission.CAMERA'}
android.hardware.usb.UsbManager.requestPermission(UsbDevice,PendingIntent)void :: {'android.permission.CAMERA'}
android.location.LocationManager.LocationManager(Context,ILocationManager)LocationManager(@NonNull :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.location.LocationManager.removeProximityAlert(PendingIntent)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.media.AudioDeviceInfo.enforceValidAudioDeviceTypeOut(int)void :: {'android.permission.CAPTURE_AUDIO_OUTPUT'}
android.media.AudioManager.startBluetoothSco()void :: {'android.permission.MODIFY_AUDIO_SETTINGS'}
android.media.AudioManager.setBluetoothScoOn(boolean)void :: {'android.permission.MODIFY_AUDIO_SETTINGS'}
android.media.AudioManager.setCommunicationDevice(AudioDeviceInfo)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.media.MediaExtractor.MediaExtractor()class :: {'android.permission.INTERNET'}
android.media.MediaExtractor.setDataSource(Context,Uri,Map<String,String>)void :: {'android.permission.INTERNET'}
android.media.MediaExtractor.setDataSource(String,Map<String,String>)void :: {'android.permission.INTERNET'}
android.media.MediaExtractor.setDataSource(String)void :: {'android.permission.INTERNET'}
android.media.MediaPlayer.MediaPlayer()MediaPlayer() :: {'android.permission.INTERNET'}
android.media.MediaPlayer.setWakeMode(Context,int)void :: {'android.permission.WAKE_LOCK'}
android.media.MediaRecorder.isSystemOnlyAudioSource(int)boolean :: {'android.permission.CAPTURE_AUDIO_OUTPUT'}
android.media.MediaRouter.setRouterGroupId(String)void :: {'android.permission.CONFIGURE_WIFI_DISPLAY'}
android.media.MediaRouter2Manager.getInstance(Context)MediaRouter2Manager :: {'android.permission.MEDIA_CONTENT_CONTROL'}
android.media.RingtoneManager.getCursor()Cursor :: {'android.permission.READ_EXTERNAL_STORAGE'}
android.media.RingtoneManager.getValidRingtoneUri(Context)Uri :: {'android.permission.READ_EXTERNAL_STORAGE'}
android.media.RingtoneManager.openRingtone(Context,Uri)InputStream :: {'android.permission.READ_EXTERNAL_STORAGE'}
android.media.audiofx.EnvironmentalReverb.EnvironmentalReverb(int,int)EnvironmentalReverb(int :: {'android.permission.MODIFY_AUDIO_SETTINGS'}
android.media.audiofx.PresetReverb.PresetReverb(int,int)PresetReverb(int :: {'android.permission.MODIFY_AUDIO_SETTINGS'}
android.media.audiofx.Visualizer.System.loadLibrary(audioeffect_jni)class :: {'android.permission.MODIFY_AUDIO_SETTINGS'}
android.media.projection.MediaProjectionManager.getMediaProjection(int,Intent)MediaProjection :: {'android.permission.SYSTEM_ALERT_WINDOW'}
android.media.session.MediaSessionManager.getActiveSessions(ComponentName)List<MediaController> :: {'android.permission.MEDIA_CONTENT_CONTROL'}
android.media.session.MediaSessionManager.getMediaKeyEventSession()MediaSession.Token :: {'android.permission.MEDIA_CONTENT_CONTROL'}
android.media.session.MediaSessionManager.getMediaKeyEventSessionPackageName()String :: {'android.permission.MEDIA_CONTENT_CONTROL'}
android.media.session.MediaSessionManager.getSession2Tokens()List<Session2Token> :: {'android.permission.MEDIA_CONTENT_CONTROL', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.media.session.MediaSessionManager.addOnActiveSessionsChangedListener(OnActiveSessionsChangedListener,ComponentName)void :: {'android.permission.MEDIA_CONTENT_CONTROL'}
android.media.session.MediaSessionManager.addOnActiveSessionsChangedListener(OnActiveSessionsChangedListener,ComponentName,Handler)void :: {'android.permission.MEDIA_CONTENT_CONTROL'}
android.media.session.MediaSessionManager.removeOnActiveSessionsChangedListener(OnActiveSessionsChangedListener)void :: {'android.permission.MEDIA_CONTENT_CONTROL', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.media.session.MediaSessionManager.removeOnSession2TokensChangedListener(OnSession2TokensChangedListener)void :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
android.media.session.MediaSessionManager.isTrustedForMediaControl(RemoteUserInfo)boolean :: {'android.permission.MEDIA_CONTENT_CONTROL'}
android.media.session.MediaSessionManager.addOnMediaKeyEventSessionChangedListener(Executor,OnMediaKeyEventSessionChangedListener)void :: {'android.permission.MEDIA_CONTENT_CONTROL'}
android.media.soundtrigger.SoundTriggerDetector.getCaptureAudioFormat()AudioFormat :: {'android.permission.SOUND_TRIGGER_RUN_IN_BATTERY_SAVER'}
android.media.tv.TvInputService.createExtension()IBinder :: {'android.permission.BIND_TV_INPUT'}
android.media.tv.interactive.TvInteractiveAppService.onRegisterAppLinkInfo(AppLinkInfo)void :: {'android.permission.BIND_TV_INTERACTIVE_APP'}
android.net.VpnService.getService()IVpnManager :: {'android.permission.BIND_VPN_SERVICE'}
android.net.rtp.AudioGroup.AudioGroup()AudioGroup() :: {'android.permission.RECORD_AUDIO'}
android.net.rtp.AudioStream.AudioStream(InetAddress)AudioStream(InetAddress :: {'android.permission.INTERNET'}
android.net.rtp.RtpStream.getLocalAddress()InetAddress :: {'android.permission.INTERNET'}
android.net.sip.SipAudioCall.onReadyToCall(SipAudioCall)void :: {'android.permission.ACCESS_WIFI_STATE', 'android.permission.RECORD_AUDIO', 'android.permission.USE_SIP', 'android.permission.INTERNET', 'android.permission.MODIFY_AUDIO_SETTINGS', 'android.permission.WAKE_LOCK'}
android.net.sip.SipAudioCall.setSpeakerMode(boolean)void :: {'android.permission.MODIFY_AUDIO_SETTINGS'}
android.net.sip.SipAudioCall.startAudio()void :: {'android.permission.ACCESS_WIFI_STATE', 'android.permission.WAKE_LOCK', 'android.permission.RECORD_AUDIO'}
android.net.sip.SipManager.newInstance(Context)SipManager :: {'android.permission.USE_SIP'}
android.nfc.NfcAdapter.onTagDiscovered(Tag)interface :: {'android.permission.NFC_TRANSACTION_EVENT', 'android.permission.NFC_PREFERRED_PAYMENT_INFO'}
android.nfc.NfcAdapter.setBeamPushUris(Uri[],Activity)void :: {'android.permission.NFC'}
android.nfc.NfcAdapter.setBeamPushUrisCallback(CreateBeamUrisCallback,Activity)void :: {'android.permission.NFC'}
android.nfc.NfcAdapter.setNdefPushMessage(NdefMessage,Activity,Activity)void :: {'android.permission.NFC'}
android.nfc.NfcAdapter.setNdefPushMessageCallback(CreateNdefMessageCallback,Activity,Activity)void :: {'android.permission.NFC'}
android.nfc.NfcAdapter.setOnNdefPushCompleteCallback(OnNdefPushCompleteCallback,Activity,Activity)void :: {'android.permission.NFC'}
android.nfc.NfcAdapter.enableForegroundDispatch(Activity,PendingIntent,IntentFilter[],String[][])void :: {'android.permission.NFC'}
android.nfc.NfcAdapter.disableForegroundDispatch(Activity)void :: {'android.permission.NFC'}
android.nfc.NfcAdapter.enableForegroundNdefPush(Activity,NdefMessage)void :: {'android.permission.NFC'}
android.nfc.NfcAdapter.disableForegroundNdefPush(Activity)void :: {'android.permission.NFC'}
android.nfc.NfcAdapter.dispatch(Tag)void :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.nfc.cardemulation.CardEmulation.isDefaultServiceForCategory(ComponentName,String)boolean :: {'android.permission.NFC'}
android.nfc.cardemulation.CardEmulation.isDefaultServiceForAid(ComponentName,String)boolean :: {'android.permission.NFC'}
android.nfc.cardemulation.HostNfcFService.sendResponsePacket(byte[])void :: {'android.permission.BIND_NFC_SERVICE'}
android.nfc.tech.IsoDep.get(Tag)IsoDep :: {'android.permission.NFC'}
android.nfc.tech.IsoDep.setTimeout(int)void :: {'android.permission.NFC'}
android.nfc.tech.IsoDep.getTimeout()int :: {'android.permission.NFC'}
android.nfc.tech.IsoDep.transceive(byte[])byte[] :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.get(Tag)MifareClassic :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.authenticateSectorWithKeyA(int,byte[])boolean :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.authenticateSectorWithKeyB(int,byte[])boolean :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.readBlock(int)byte[] :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.writeBlock(int,byte[])void :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.increment(int,int)void :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.decrement(int,int)void :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.transfer(int)void :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.restore(int)void :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.transceive(byte[])byte[] :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.setTimeout(int)void :: {'android.permission.NFC'}
android.nfc.tech.MifareClassic.getTimeout()int :: {'android.permission.NFC'}
android.nfc.tech.MifareUltralight.get(Tag)MifareUltralight :: {'android.permission.NFC'}
android.nfc.tech.MifareUltralight.readPages(int)byte[] :: {'android.permission.NFC'}
android.nfc.tech.MifareUltralight.writePage(int,byte[])void :: {'android.permission.NFC'}
android.nfc.tech.MifareUltralight.transceive(byte[])byte[] :: {'android.permission.NFC'}
android.nfc.tech.MifareUltralight.setTimeout(int)void :: {'android.permission.NFC'}
android.nfc.tech.MifareUltralight.getTimeout()int :: {'android.permission.NFC'}
android.nfc.tech.Ndef.get(Tag)Ndef :: {'android.permission.NFC'}
android.nfc.tech.Ndef.isWritable()boolean :: {'android.permission.NFC'}
android.nfc.tech.Ndef.getNdefMessage()NdefMessage :: {'android.permission.NFC'}
android.nfc.tech.Ndef.writeNdefMessage(NdefMessage)void :: {'android.permission.NFC'}
android.nfc.tech.Ndef.makeReadOnly()boolean :: {'android.permission.NFC'}
android.nfc.tech.NdefFormatable.get(Tag)NdefFormatable :: {'android.permission.NFC'}
android.nfc.tech.NdefFormatable.format(NdefMessage)void :: {'android.permission.NFC'}
android.nfc.tech.NdefFormatable.formatReadOnly(NdefMessage)void :: {'android.permission.NFC'}
android.nfc.tech.NfcA.get(Tag)NfcA :: {'android.permission.NFC'}
android.nfc.tech.NfcA.transceive(byte[])byte[] :: {'android.permission.NFC'}
android.nfc.tech.NfcA.setTimeout(int)void :: {'android.permission.NFC'}
android.nfc.tech.NfcA.getTimeout()int :: {'android.permission.NFC'}
android.nfc.tech.NfcB.get(Tag)NfcB :: {'android.permission.NFC'}
android.nfc.tech.NfcB.transceive(byte[])byte[] :: {'android.permission.NFC'}
android.nfc.tech.NfcF.get(Tag)NfcF :: {'android.permission.NFC'}
android.nfc.tech.NfcF.transceive(byte[])byte[] :: {'android.permission.NFC'}
android.nfc.tech.NfcF.setTimeout(int)void :: {'android.permission.NFC'}
android.nfc.tech.NfcF.getTimeout()int :: {'android.permission.NFC'}
android.nfc.tech.NfcV.get(Tag)NfcV :: {'android.permission.NFC'}
android.nfc.tech.NfcV.transceive(byte[])byte[] :: {'android.permission.NFC'}
android.nfc.tech.TagTechnology.getTag()Tag :: {'android.permission.NFC'}
android.nfc.tech.TagTechnology.connect()void :: {'android.permission.NFC'}
android.nfc.tech.TagTechnology.reconnect()void :: {'android.permission.NFC'}
android.nfc.tech.TagTechnology.close()void :: {'android.permission.NFC'}
android.os.Build.deriveFingerprint()String :: {'android.permission.READ_CALL_LOG', 'android.permission.WRITE_EXTERNAL_STORAGE', 'android.permission.BIND_ACCESSIBILITY_SERVICE', 'android.permission.FOREGROUND_SERVICE', 'android.permission.WRITE_CALL_LOG', 'android.permission.READ_PHONE_STATE', 'android.permission.WRITE_CONTACTS', 'android.permission.READ_CONTACTS', 'android.permission.BIND_DREAM_SERVICE', 'android.permission.READ_EXTERNAL_STORAGE'}
android.os.DropBoxManager.Entry(String,long)Entry(@NonNull :: {'android.permission.READ_LOGS'}
android.os.Environment.getExternalStorageDirectory()File :: {'android.permission.WRITE_EXTERNAL_STORAGE', 'android.permission.READ_EXTERNAL_STORAGE'}
android.os.Environment.isExternalStorageManager()boolean :: {'android.permission.MANAGE_EXTERNAL_STORAGE'}
android.os.Environment.isExternalStorageManager(File)boolean :: {'android.permission.MANAGE_EXTERNAL_STORAGE'}
android.os.Environment.maybeTranslateEmulatedPathToInternal(File)File :: {'android.permission.WRITE_MEDIA_STORAGE'}
android.os.FileUriExposedException.FileUriExposedException(String)class :: {'android.permission.READ_EXTERNAL_STORAGE'}
android.os.PowerManager.sleepReasonToString(int)String :: {'android.permission.DEVICE_POWER'}
android.os.PowerManager.locationPowerSaveModeToString(int)String :: {'android.permission.REBOOT', 'android.permission.RECOVERY'}
android.os.PowerManager.newWakeLock(int,String)WakeLock :: {'android.permission.WAKE_LOCK'}
android.os.PowerManager.userActivity(long,boolean)void :: {'android.permission.DEVICE_POWER'}
android.os.PowerManager.goToSleep(long)void :: {'android.permission.USER_ACTIVITY', 'android.permission.DEVICE_POWER'}
android.os.PowerManager.goToSleep(long,int,int)void :: {'android.permission.DEVICE_POWER'}
android.os.PowerManager.wakeUp(long)void :: {'android.permission.DEVICE_POWER'}
android.os.PowerManager.wakeUp(long,String)void :: {'android.permission.DEVICE_POWER'}
android.os.PowerManager.wakeUp(long,int,String)void :: {'android.permission.DEVICE_POWER'}
android.os.PowerManager.nap(long)void :: {'android.permission.DEVICE_POWER'}
android.os.PowerManager.boostScreenBrightness(long)void :: {'android.permission.READ_DREAM_STATE', 'android.permission.DEVICE_POWER', 'android.permission.WRITE_DREAM_STATE'}
android.os.PowerManager.getPowerSaveModeTrigger()int :: {'android.permission.POWER_SAVER'}
android.os.PowerManager.getBatteryDischargePrediction()Duration :: {'android.permission.DEVICE_POWER', 'android.permission.BATTERY_PREDICTION'}
android.os.PowerManager.getLastShutdownReason()int :: {'android.permission.DEVICE_POWER'}
android.os.RecoverySystem.rebootWipeUserData(Context)void :: {'android.permission.REBOOT'}
android.os.RecoverySystem.rebootWipeUserData(Context,boolean,String,boolean,boolean)void :: {'android.permission.REBOOT'}
android.os.UserManager.isUserForeground()boolean :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.createUser(String,int)UserInfo :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.convertUserIdsToUserHandles(int[])List<UserHandle> :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
android.os.UserManager.requestQuietModeEnabled(boolean,UserHandle,IntentSender,int)boolean :: {'android.permission.MANAGE_USERS'}
android.os.UserManager.getBadgedLabelForUser(CharSequence,UserHandle)CharSequence :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS'}
android.os.UserManager.isRemoveResultSuccessful(int)boolean :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS'}
android.os.health.SystemHealthManager.takeUidSnapshot(int)HealthStats :: {'android.permission.BATTERY_STATS'}
android.os.health.SystemHealthManager.takeUidSnapshots(int[])HealthStats[] :: {'android.permission.BATTERY_STATS'}
android.os.storage.StorageManager.getAllocatableBytes(UUID)long :: {'android.permission.ALLOCATE_AGGRESSIVE'}
android.os.storage.StorageManager.isAppIoBlocked(UUID,int,int,int)boolean :: {'android.permission.WRITE_MEDIA_STORAGE'}
android.os.storage.StorageVolume.StorageVolume(String,File,File,String,boolean,boolean,boolean,boolean,boolean,long,UserHandle,UUID,String,String)StorageVolume(String :: {'android.permission.WRITE_EXTERNAL_STORAGE', 'android.permission.READ_EXTERNAL_STORAGE'}
android.os.storage.StorageVolume.createAccessIntent(String)Intent :: {'android.permission.WRITE_EXTERNAL_STORAGE', 'android.permission.READ_EXTERNAL_STORAGE'}
android.os.storage.VolumeInfo.getInternalPathForUser(int)File :: {'android.permission.WRITE_MEDIA_STORAGE'}
android.permission.PermissionManager.PermissionManager(Context)PermissionManager(@NonNull :: {'android.permission.START_REVIEW_PERMISSION_DECISIONS'}
android.printservice.PrintService.onConnected()void :: {'android.permission.BIND_PRINT_SERVICE'}
android.provider.BlockedNumberContract.notifyEmergencyContact(Context)void :: {'android.permission.WRITE_BLOCKED_NUMBERS', 'android.permission.READ_BLOCKED_NUMBERS'}
android.provider.DocumentsProvider.attachInfo(Context,ProviderInfo)void :: {'android.permission.MANAGE_DOCUMENTS'}
android.provider.SearchIndexablesProvider.attachInfo(Context,ProviderInfo)void :: {'android.permission.READ_SEARCH_INDEXABLES'}
android.provider.Settings.setInSystemServer()void :: {'android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS', 'android.permission.PACKAGE_USAGE_STATS'}
android.provider.Settings.canDrawOverlays(Context)boolean :: {'android.permission.SYSTEM_ALERT_WINDOW'}
android.provider.Settings.canWrite(Context)boolean :: {'android.permission.WRITE_SETTINGS'}
android.provider.SimPhonebookContract.getEfUriPath(int)String :: {'android.permission.WRITE_CONTACTS', 'android.permission.READ_CONTACTS'}
android.provider.SimPhonebookContract.getContentUri(int,int)Uri :: {'android.permission.MODIFY_PHONE_STATE'}
android.provider.Telephony.Telephony()Telephony() :: {'android.permission.BROADCAST_SMS'}
android.provider.Telephony.getMessagesFromIntent(Intent)SmsMessage[] :: {'android.permission.READ_PRIVILEGED_PHONE_STATE', 'android.permission.RECEIVE_EMERGENCY_BROADCAST', 'android.permission.RECEIVE_WAP_PUSH', 'android.permission.BROADCAST_WAP_PUSH', 'android.permission.RECEIVE_SMS', 'android.permission.BROADCAST_SMS', 'android.permission.RECEIVE_MMS'}
android.provider.Telephony.CellBroadcasts()CellBroadcasts() :: {'android.permission.WRITE_APN_SETTINGS'}
android.provider.VoicemailContract.VoicemailContract()VoicemailContract() :: {'android.permission.ADD_VOICEMAIL'}
android.security.attestationverification.AttestationVerificationService.onVerifyPeerDeviceAttestation(Bundle,byte[])int :: {'android.permission.BIND_ATTESTATION_VERIFICATION_SERVICE'}
android.service.ambientcontext.AmbientContextDetectionService.startDetection(AmbientContextEventRequest,String,RemoteCallback,RemoteCallback)void :: {'android.permission.BIND_AMBIENT_CONTEXT_DETECTION_SERVICE'}
android.service.attention.AttentionService.checkAttention(IAttentionCallback)void :: {'android.permission.BIND_ATTENTION_SERVICE'}
android.service.autofill.AutofillService.onConnected()void :: {'android.permission.BIND_AUTOFILL_SERVICE'}
android.service.autofill.InlineSuggestionRenderService.measuredSize(View,int,int,Size,Size)Size :: {'android.permission.BIND_INLINE_SUGGESTION_RENDER_SERVICE'}
android.service.autofill.augmented.AugmentedAutofillService.onBind(Intent)IBinder :: {'android.permission.BIND_AUGMENTED_AUTOFILL_SERVICE'}
android.service.carrier.CarrierMessagingService.onFilterSms(MessagePdu,String,int,int,ResultCallback<Boolean>)void :: {'android.permission.BIND_CARRIER_SERVICES'}
android.service.carrier.CarrierService.onLoadConfig(CarrierIdentifier)PersistableBundle :: {'android.permission.BIND_CARRIER_SERVICES'}
android.service.chooser.ChooserTargetService.onGetChooserTargets(ComponentName,IntentFilter)List<ChooserTarget> :: {'android.permission.BIND_CHOOSER_TARGET_SERVICE'}
android.service.cloudsearch.CloudSearchService.onSearch(SearchRequest)void :: {'android.permission.MANAGE_CLOUDSEARCH'}
android.service.contentcapture.ContentCaptureService.onBind(Intent)IBinder :: {'android.permission.BIND_CONTENT_CAPTURE_SERVICE'}
android.service.contentsuggestions.ContentSuggestionsService.onBind(Intent)IBinder :: {'android.permission.BIND_CONTENT_SUGGESTIONS_SERVICE'}
android.service.dreams.DreamService.setDebug(boolean)void :: {'android.permission.BIND_DREAM_SERVICE'}
android.service.euicc.EuiccService.encodeSmdxSubjectAndReasonCode(String,String)int :: {'android.permission.BIND_EUICC_SERVICE'}
android.service.games.GameService.onConnected()void :: {'android.permission.BIND_GAME_SERVICE'}
android.service.games.GameSessionService.onNewSession(CreateGameSessionRequest)GameSession :: {'android.permission.BIND_GAME_SERVICE'}
android.service.notification.ConditionProviderService.requestRebind(ComponentName)void :: {'android.permission.ACCESS_NOTIFICATION_POLICY', 'android.permission.BIND_CONDITION_PROVIDER_SERVICE'}
android.service.notification.NotificationListenerService.onNotificationPosted(StatusBarNotification)void :: {'android.permission.BIND_NOTIFICATION_LISTENER_SERVICE'}
android.service.quickaccesswallet.QuickAccessWalletService.onWalletCardsRequested(GetWalletCardsRequest,GetWalletCardsCallback)void :: {'android.permission.BIND_QUICK_ACCESS_WALLET_SERVICE'}
android.service.resolver.ResolverRankerService.onPredictSharingProbabilities(List<ResolverTarget>)void :: {'android.permission.BIND_RESOLVER_RANKER_SERVICE'}
android.service.resumeonreboot.ResumeOnRebootService.onWrap(byte[],long)byte[] :: {'android.permission.BIND_RESUME_ON_REBOOT_SERVICE'}
android.service.rotationresolver.RotationResolverService.resolveRotation(IRotationResolverCallback,RotationResolutionRequest)void :: {'android.permission.BIND_ROTATION_RESOLVER_SERVICE'}
android.service.selectiontoolbar.SelectionToolbarRenderService.onShow(int,ShowInfo,RemoteCallbackWrapper)void :: {'android.permission.BIND_SELECTION_TOOLBAR_RENDER_SERVICE'}
android.service.storage.ExternalStorageService.onStartSession(String,int,ParcelFileDescriptor,File,File)void :: {'android.permission.BIND_EXTERNAL_STORAGE_SERVICE'}
android.service.textclassifier.TextClassifierService.onConnected()void :: {'android.permission.BIND_TEXTCLASSIFIER_SERVICE'}
android.service.timezone.TimeZoneProviderService.reportSuggestion(TimeZoneProviderSuggestion)void :: {'android.permission.BIND_TIME_ZONE_PROVIDER_SERVICE'}
android.service.translation.TranslationService.onConnected()void :: {'android.permission.BIND_TRANSLATION_SERVICE'}
android.service.trust.TrustAgentService.onUnlockAttempt(boolean)void :: {'android.permission.BIND_TRUST_AGENT'}
android.service.voice.AlwaysOnHotwordDetector.getStart()int :: {'android.permission.SOUND_TRIGGER_RUN_IN_BATTERY_SAVER'}
android.service.voice.HotwordDetectionService.getMaxCustomInitializationStatus()int :: {'android.permission.BIND_HOTWORD_DETECTION_SERVICE'}
android.service.voice.VoiceInteractionService.onLaunchVoiceAssistFromKeyguard()void :: {'android.permission.BIND_VOICE_INTERACTION'}
android.service.vr.VrListenerService.onCurrentVrActivityChanged(ComponentName)void :: {'android.permission.BIND_VR_LISTENER_SERVICE'}
android.service.wallpaper.WallpaperService.Engine()Engine() :: {'android.permission.BIND_WALLPAPER'}
android.service.wallpapereffectsgeneration.WallpaperEffectsGenerationService.onGenerateCinematicEffect(CinematicEffectRequest)void :: {'android.permission.BIND_WALLPAPER_EFFECTS_GENERATION'}
android.service.watchdog.ExplicitHealthCheckService.onRequestHealthCheck(String)void :: {'android.permission.BIND_EXPLICIT_HEALTH_CHECK_SERVICE'}
android.speech.SpeechRecognizer.SpeechRecognizer(Context,ComponentName)SpeechRecognizer(final :: {'android.permission.RECORD_AUDIO'}
android.telecom.Call.getContactDisplayName()String :: {'android.permission.READ_CONTACTS'}
android.telecom.Connection.VideoProviderHandler()class :: {'android.permission.CAMERA'}
android.telecom.TelecomManager.getPhoneAccount(PhoneAccountHandle)PhoneAccount :: {'android.permission.READ_PHONE_NUMBERS'}
android.telecom.TelecomManager.hasManageOngoingCallsPermission()boolean :: {'android.permission.MANAGE_ONGOING_CALLS'}
android.telecom.TelecomManager.addNewIncomingCall(PhoneAccountHandle,Bundle)void :: {'android.permission.MANAGE_OWN_CALLS'}
android.telecom.TelecomManager.addNewIncomingConference(PhoneAccountHandle,Bundle)void :: {'android.permission.MANAGE_OWN_CALLS'}
android.telecom.TelecomManager.acceptHandover(Uri,int,PhoneAccountHandle)void :: {'android.permission.MANAGE_OWN_CALLS'}
android.telephony.CarrierConfigManager.isConfigForIdentifiedCarrier(PersistableBundle)boolean :: {'android.permission.READ_PHONE_STATE'}
android.telephony.CellBroadcastService.onGsmCellBroadcastSms(int,byte[])void :: {'android.permission.BIND_CELL_BROADCAST_SERVICE'}
android.telephony.CellLocation.requestLocationUpdate()void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.NetworkRegistrationInfo.getCellIdentity()CellIdentity :: {'android.permission.ACCESS_FINE_LOCATION'}
android.telephony.PhoneStateListener.PhoneStateListener()PhoneStateListener() :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PHONE_STATE', 'android.permission.ACCESS_FINE_LOCATION', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.PhoneStateListener.onServiceStateChanged(ServiceState)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.PhoneStateListener.onDataConnectionStateChanged(int)void :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_CALL_LOG'}
android.telephony.ServiceState.getIsManualSelection()boolean :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.ServiceState.isGsm(int)boolean :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.SmsManager.sendTextMessage(String,String,String,PendingIntent,PendingIntent)void :: {'android.permission.SEND_SMS'}
android.telephony.SmsManager.injectSmsPdu(byte[],String,PendingIntent)void :: {'android.permission.SEND_SMS', 'android.permission.MODIFY_PHONE_STATE'}
android.telephony.SmsManager.sendMultipartTextMessage(String,String,ArrayList<String>,ArrayList<PendingIntent>,ArrayList<PendingIntent>)void :: {'android.permission.SEND_SMS'}
android.telephony.SmsManager.sendMultipartTextMessage(String,String,ArrayList<String>,ArrayList<PendingIntent>,ArrayList<PendingIntent>,int,boolean,int)void :: {'android.permission.SEND_SMS'}
android.telephony.SmsManager.sendDataMessage(String,String,short,byte[],PendingIntent,PendingIntent)void :: {'android.permission.SEND_SMS'}
android.telephony.SmsManager.enableCellBroadcastRange(int,int,int)boolean :: {'android.permission.RECEIVE_EMERGENCY_BROADCAST'}
android.telephony.SmsManager.disableCellBroadcastRange(int,int,int)boolean :: {'android.permission.RECEIVE_EMERGENCY_BROADCAST'}
android.telephony.SubscriptionManager.getAllSubscriptionInfoList()List<SubscriptionInfo> :: {'android.permission.READ_PHONE_STATE'}
android.telephony.SubscriptionManager.getCompleteActiveSubscriptionInfoList()List<SubscriptionInfo> :: {'android.permission.READ_PHONE_STATE'}
android.telephony.SubscriptionManager.requestEmbeddedSubscriptionInfoListRefresh()void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.SubscriptionManager.requestEmbeddedSubscriptionInfoListRefresh(int)void :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.SubscriptionManager.getActiveSubscriptionInfoCountMax()int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.SubscriptionManager.getResourcesForSubId(Context,int)Resources :: {'android.permission.READ_PHONE_STATE'}
android.telephony.SubscriptionManager.isSubscriptionVisible(SubscriptionInfo)boolean :: {'android.permission.READ_PHONE_STATE', 'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyCallback.init(Executor)void :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.isNetworkRoaming()boolean :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getNetworkTypeName()String :: {'android.permission.READ_BASIC_PHONE_STATE', 'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.setCarrierInfoForImsiEncryption(ImsiEncryptionInfo)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setLine1NumberForDisplay(String,String)boolean :: {'android.permission.READ_PHONE_NUMBERS', 'android.permission.READ_PHONE_STATE', 'android.permission.READ_SMS'}
android.telephony.TelephonyManager.setVisualVoicemailSmsFilterSettings(VisualVoicemailSmsFilterSettings)void :: {'android.permission.READ_PHONE_STATE', 'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.sendVisualVoicemailSms(String,int,String,PendingIntent)void :: {'android.permission.SEND_SMS'}
android.telephony.TelephonyManager.getSubscriberInfo()IPhoneSubInfo :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.getDataActivity()int :: {'android.permission.READ_PHONE_STATE'}
android.telephony.TelephonyManager.iccOpenLogicalChannel(String)IccOpenLogicalChannelResponse :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccOpenLogicalChannel(String,int)IccOpenLogicalChannelResponse :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccOpenLogicalChannel(int,String,int)IccOpenLogicalChannelResponse :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccCloseLogicalChannel(int)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccCloseLogicalChannel(int,int)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccTransmitApduLogicalChannel(int,int,int,int,int,int,String)String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccTransmitApduLogicalChannel(int,int,int,int,int,int,int,String)String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccTransmitApduBasicChannel(int,int,int,int,int,String)String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccTransmitApduBasicChannel(int,int,int,int,int,int,String)String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccExchangeSimIO(int,int,int,int,int,String)byte[] :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.iccExchangeSimIO(int,int,int,int,int,int,String)byte[] :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.sendEnvelopeWithStatus(String)String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.sendEnvelopeWithStatus(int,String)String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.nvReadItem(int)String :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.nvWriteItem(int,String)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.nvWriteCdmaPrl(byte[])boolean :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.updateServiceLocation()void :: {'android.permission.READ_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.getServiceStateForSubscriber(int,boolean,boolean)ServiceState :: {'android.permission.READ_PHONE_STATE', 'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.TelephonyManager.setVoicemailRingtoneUri(PhoneAccountHandle,Uri)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setVoicemailVibrationEnabled(PhoneAccountHandle,boolean)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getClientRequestStats(int)List<ClientRequestStats> :: {'android.permission.MODIFY_PHONE_STATE', 'android.permission.READ_PHONE_STATE', 'android.permission.READ_BASIC_PHONE_STATE', 'android.permission.ACCESS_NETWORK_STATE'}
android.telephony.TelephonyManager.getSignalStrength()SignalStrength :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.TelephonyManager.setCarrierTestOverride(String,String,String,String,String,String,String)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.setCarrierTestOverride(String,String,String,String,String,String,String,String,String)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.getCarrierIdListVersion()int :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
android.telephony.TelephonyManager.setPreferredOpportunisticDataSubscription(int,boolean,Executor,Consumer<Integer>)void :: {'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.registerTelephonyCallback(int,Executor,TelephonyCallback)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.telephony.TelephonyManager.isNetworkTypeValid(int)boolean :: {'android.permission.PERFORM_IMS_SINGLE_REGISTRATION', 'android.permission.MODIFY_PHONE_STATE'}
android.telephony.TelephonyManager.onCarrierServiceChanged(String,int)void :: {'android.permission.ACCESS_FINE_LOCATION'}
android.telephony.TelephonyScanManager.requestNetworkScan(int,boolean,NetworkScanRequest,Executor,NetworkScanCallback,String,String)NetworkScan :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.MODIFY_PHONE_STATE'}
android.telephony.VisualVoicemailService.finish()void :: {'android.permission.BIND_VISUAL_VOICEMAIL_SERVICE'}
android.telephony.VisualVoicemailService.setSmsFilterSettings(Context,PhoneAccountHandle,VisualVoicemailSmsFilterSettings)void :: {'android.permission.READ_PHONE_STATE'}
android.telephony.VisualVoicemailService.sendVisualVoicemailSms(Context,PhoneAccountHandle,String,short,String,PendingIntent)void :: {'android.permission.SEND_SMS'}
android.telephony.euicc.EuiccManager.EuiccManager(Context)EuiccManager(Context :: {'android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS'}
android.telephony.euicc.EuiccManager.retainSubscriptionsForFactoryReset(PendingIntent)void :: {'android.permission.MASTER_CLEAR'}
android.telephony.gba.GbaService.GbaService()GbaService() :: {'android.permission.BIND_GBA_SERVICE'}
android.telephony.ims.ImsMmTelManager.ImsMmTelManager(int,BinderCacheManager<ITelephony>)ImsMmTelManager(int :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.ims.ImsMmTelManager.unregisterImsStateCallback(ImsStateCallback)void :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.ims.ImsRcsManager.unregisterImsStateCallback(ImsStateCallback)void :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.telephony.ims.SipDelegateManager.unregisterImsStateCallback(ImsStateCallback)void :: {'android.permission.READ_PRECISE_PHONE_STATE'}
android.view.View.View(Context)View(Context :: {'android.permission.START_TASKS_FROM_RECENTS'}
android.view.WindowManager.isSystemAlertWindowType(int)boolean :: {'android.permission.SYSTEM_ALERT_WINDOW'}
android.view.WindowManager.setTrustedOverlay()void :: {'android.permission.INTERNAL_SYSTEM_WINDOW'}
android.view.WindowManager.isSystemApplicationOverlay()boolean :: {'android.permission.SYSTEM_APPLICATION_OVERLAY'}
android.view.inputmethod.InputMethod.initializeInternal(IBinder,IInputMethodPrivilegedOperations,int,boolean,int)void :: {'android.permission.BIND_INPUT_METHOD'}
android.view.inputmethod.InputMethodManager.ensureDefaultInstanceForDefaultDisplayIfNecessary()void :: {'android.permission.BIND_INPUT_METHOD'}
android.view.inputmethod.InputMethodManager.setInputMethod(IBinder,String)void :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.view.inputmethod.InputMethodManager.setInputMethodAndSubtype(IBinder,String,InputMethodSubtype)void :: {'android.permission.WRITE_SECURE_SETTINGS'}
android.view.textservice.SpellCheckerSession.SpellCheckerSession(SpellCheckerInfo,TextServicesManager,SpellCheckerSessionListener,Executor)SpellCheckerSession( :: {'android.permission.BIND_TEXT_SERVICE'}
android.webkit.WebSettings.setBlockNetworkLoads(boolean)void :: {'android.permission.INTERNET'}
android.webkit.WebSettings.setGeolocationEnabled(boolean)void :: {'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_COARSE_LOCATION'}
android.window.WindowContainerTransaction.merge(WindowContainerTransaction,boolean)void :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
com.android.internal.inputmethod.InputBindResult.getVirtualDisplayToScreenMatrix()Matrix :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
com.android.internal.telephony.SmsPermissions.checkCallingOrSelfCanGetSmscAddress(String,String)boolean :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
com.android.internal.telephony.SmsPermissions.checkCallingOrSelfCanSetSmscAddress(String,String)boolean :: {'android.permission.MODIFY_PHONE_STATE'}
com.android.internal.telephony.SubscriptionController.createSubscriptionGroup(int[],String)ParcelUuid :: {'android.permission.MODIFY_PHONE_STATE'}
com.android.internal.telephony.SubscriptionController.removeSubscriptionsFromGroup(int[],ParcelUuid,String)void :: {'android.permission.MODIFY_PHONE_STATE'}
com.android.internal.telephony.SubscriptionController.getSubscriptionsInGroup(ParcelUuid,String,String)List<SubscriptionInfo> :: {'android.permission.READ_PHONE_STATE'}
com.android.internal.telephony.TelephonyPermissions.enforceCallingOrSelfReadPhoneStatePermissionOrCarrierPrivilege(Context,int,String)void :: {'android.permission.READ_PHONE_STATE'}
com.android.internal.telephony.TelephonyPermissions.enforceCallingOrSelfReadPrivilegedPhoneStatePermissionOrCarrierPrivilege(Context,int,String)void :: {'android.permission.READ_PRIVILEGED_PHONE_STATE'}
com.android.internal.telephony.TelephonyPermissions.enforceCallingOrSelfReadPrecisePhoneStatePermissionOrCarrierPrivilege(Context,int,String)void :: {'android.permission.READ_PRECISE_PHONE_STATE', 'android.permission.READ_PRIVILEGED_PHONE_STATE'}
com.android.internal.telephony.util.TelephonyUtils.checkDumpPermission(Context,String,PrintWriter)boolean :: {'android.permission.DUMP'}
com.android.internal.util.DumpUtils.checkDumpPermission(Context,String,PrintWriter)boolean :: {'android.permission.DUMP'}
com.android.internal.util.DumpUtils.checkUsageStatsPermission(Context,String,PrintWriter)boolean :: {'android.permission.PACKAGE_USAGE_STATS'}
com.android.internal.util.DumpUtils.checkDumpAndUsageStatsPermission(Context,String,PrintWriter)boolean :: {'android.permission.DUMP', 'android.permission.PACKAGE_USAGE_STATS'}
com.android.internal.widget.LockPatternUtils.requireCredentialEntry(int)void :: {'android.permission.ACCESS_KEYGUARD_SECURE_STORAGE'}
com.android.internal.widget.LockPatternUtils.requireStrongAuth(int,int)void :: {'android.permission.ACCESS_KEYGUARD_SECURE_STORAGE'}
com.android.media.tv.remoteprovider.TvRemoteProvider.TvRemoteProvider(Context)TvRemoteProvider(Context :: {'android.permission.BIND_TV_REMOTE_SERVICE'}
com.android.nfc_extras.NfcAdapterExtras.initService(NfcAdapter)void :: {'android.permission.WRITE_SECURE_SETTINGS'}
com.android.nfc_extras.NfcAdapterExtras.get(NfcAdapter)NfcAdapterExtras :: {'android.permission.WRITE_SECURE_SETTINGS'}
com.android.nfc_extras.NfcAdapterExtras.getCardEmulationRoute()CardEmulationRoute :: {'android.permission.WRITE_SECURE_SETTINGS'}
com.android.nfc_extras.NfcAdapterExtras.setCardEmulationRoute(CardEmulationRoute)void :: {'android.permission.WRITE_SECURE_SETTINGS'}
com.android.nfc_extras.NfcAdapterExtras.getEmbeddedExecutionEnvironment()NfcExecutionEnvironment :: {'android.permission.WRITE_SECURE_SETTINGS'}
com.android.nfc_extras.NfcExecutionEnvironment.open()void :: {'android.permission.WRITE_SECURE_SETTINGS'}
com.android.nfc_extras.NfcExecutionEnvironment.close()void :: {'android.permission.WRITE_SECURE_SETTINGS'}
com.android.nfc_extras.NfcExecutionEnvironment.transceive(byte[])byte[] :: {'android.permission.WRITE_SECURE_SETTINGS'}
com.android.server.TelephonyRegistry.isActiveDataSubIdReadPhoneStateEnforcedInPlatformCompat(String,UserHandle)boolean :: {'android.permission.READ_PHONE_STATE'}
com.android.server.TelephonyRegistry.isCellInfoReadPhoneStateEnforcedInPlatformCompat(String,UserHandle)boolean :: {'android.permission.READ_PHONE_STATE'}
com.android.server.TelephonyRegistry.isDisplayInfoReadPhoneStateEnforcedInPlatformCompat(String,UserHandle)boolean :: {'android.permission.READ_PHONE_STATE'}
com.android.server.TelephonyRegistry.notifyDisplayInfoChanged(int,int,TelephonyDisplayInfo)void :: {'android.permission.READ_PHONE_STATE'}
com.android.server.am.UserController.stopGuestOrEphemeralUserIfBackground(int)void :: {'android.permission.MANAGE_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
com.android.server.am.UserController.maybeUnlockUser(int)boolean :: {'android.permission.MANAGE_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
com.android.server.app.GameManagerService.getGameMode(String,int)int :: {'android.permission.MANAGE_GAME_MODE'}
com.android.server.backup.BackupPasswordManager.usePbkdf2Fallback()boolean :: {'android.permission.BACKUP'}
com.android.server.camera.CameraServiceProxy.setDeviceStateFlags(int)void :: {'android.permission.CAMERA_SEND_SYSTEM_EVENTS'}
com.android.server.camera.CameraServiceProxy.clearDeviceStateFlags(int)void :: {'android.permission.CAMERA_SEND_SYSTEM_EVENTS'}
com.android.server.job.controllers.QuotaController.clearAppStatsLocked(int,String)void :: {'android.permission.INSTALL_PACKAGES'}
com.android.server.locales.LocaleManagerService.notifyRegisteredReceivers(String,int,LocaleList)void :: {'android.permission.READ_APP_SPECIFIC_LOCALES'}
com.android.server.media.MediaServerUtils.checkDumpPermission(Context,String,PrintWriter)boolean :: {'android.permission.DUMP'}
com.android.server.pm.BroadcastHelper.doSendBroadcast(String,String,Bundle,int,String,IIntentReceiver,int[],boolean,SparseArray<int[]>,Bundle)void :: {'android.permission.ACCESS_INSTANT_APPS'}
com.android.server.pm.ComputerEngine.canViewInstantApps(int,int)boolean :: {'android.permission.ACCESS_INSTANT_APPS'}
com.android.server.pm.UserManagerInternal.removeUserEvenWhenDisallowed(int)boolean :: {'android.permission.MANAGE_USERS'}
com.android.server.pm.UserManagerService.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(int,String)void :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS'}
com.android.server.pm.UserManagerService.checkQueryOrInteractPermissionIfCallerInOtherProfileGroup(int,String)void :: {'android.permission.INTERACT_ACROSS_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
com.android.server.pm.UserManagerService.getUserRestrictionSource(String,int)int :: {'android.permission.MANAGE_USERS'}
com.android.server.pm.UserManagerService.checkManageUserAndAcrossUsersFullPermission(String)void :: {'android.permission.MANAGE_USERS', 'android.permission.INTERACT_ACROSS_USERS_FULL'}
com.android.server.pm.UserManagerService.checkManageUsersPermission(String)void :: {'android.permission.MANAGE_USERS'}
com.android.server.pm.UserManagerService.checkCreateUsersPermission(String)void :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
com.android.server.pm.UserManagerService.checkQueryUsersPermission(String)void :: {'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
com.android.server.pm.UserManagerService.checkQueryOrCreateUsersPermission(String)void :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
com.android.server.pm.UserManagerService.checkCreateUsersPermission(int)void :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
com.android.server.pm.UserManagerService.hasManageUsersPermission()boolean :: {'android.permission.MANAGE_USERS'}
com.android.server.pm.UserManagerService.hasManageUsersPermission(int)boolean :: {'android.permission.MANAGE_USERS'}
com.android.server.pm.UserManagerService.hasManageUsersOrPermission(String)boolean :: {'android.permission.MANAGE_USERS'}
com.android.server.pm.UserManagerService.hasCreateUsersPermission()boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS'}
com.android.server.pm.UserManagerService.hasQueryUsersPermission()boolean :: {'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
com.android.server.pm.UserManagerService.hasQueryOrCreateUsersPermission()boolean :: {'android.permission.CREATE_USERS', 'android.permission.MANAGE_USERS', 'android.permission.QUERY_USERS'}
com.android.server.pm.dex.ArtManagerService.checkShellPermissions(int,String,int)boolean :: {'android.permission.READ_RUNTIME_PROFILES'}
com.android.server.policy.PhoneWindowManager.adjustConfigurationLw(Configuration,int,int)void :: {'android.permission.INTERNAL_SYSTEM_WINDOW'}
com.android.server.usage.StorageStatsService.enforceCratesPermission(int,String)void :: {'android.permission.MANAGE_CRATES'}
com.android.server.usage.UsageStatsService.shouldObfuscateNotificationEvents(int,int)boolean :: {'android.permission.MANAGE_NOTIFICATIONS'}
com.android.server.vibrator.VibratorManagerService.enforceUpdateAppOpsStatsPermission(int)void :: {'android.permission.UPDATE_APP_OPS_STATS'}
com.android.server.vr.Vr2dDisplay.setVirtualDisplayProperties(Vr2dDisplayProperties)void :: {'android.permission.ACCESS_VR_MANAGER'}
com.android.server.vr.VrManagerInternal.setVr2dDisplayProperties(Vr2dDisplayProperties)void :: {'android.permission.ACCESS_VR_MANAGER'}
com.android.server.wm.ActivityClientController.invalidateHomeTaskSnapshot(IBinder)void :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
com.android.server.wm.WindowManagerService.requestAssistScreenshot(IAssistDataReceiver)boolean :: {'android.permission.MODIFY_TOUCH_MODE_STATE'}
com.android.server.wm.WindowState.getRequestedVisibility(int)boolean :: {'android.permission.INTERNAL_SYSTEM_WINDOW'}
com.android.server.wm.WindowToken.isFirstChildWindowGreaterThanSecond(WindowState,WindowState)boolean :: {'android.permission.MANAGE_APP_TOKENS'}
com.android.settingslib.bluetooth.BluetoothEventManager.registerCallback(BluetoothCallback)void :: {'android.permission.INTERACT_ACROSS_USERS_FULL'}
com.android.systemui.shared.system.ActivityManagerWrapper.invalidateHomeTaskSnapshot(Activity)void :: {'android.permission.MANAGE_ACTIVITY_TASKS'}
com.android.systemui.statusbar.tv.notifications.TvNotificationPanel.startNotificationHandlerActivity(Intent)void :: {'android.permission.STATUS_BAR_SERVICE'}
com.android.wm.shell.pip.PipBoundsState.onConfigurationChanged()void :: {'android.permission.SET_UNRESTRICTED_KEEP_CLEAR_AREAS'}
