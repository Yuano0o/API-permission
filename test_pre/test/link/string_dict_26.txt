android.accessibilityservice.AccessibilityService.onAccessibilityEvent(AccessibilityEvent)interface :: android.permission.BIND_ACCESSIBILITY_SERVICE
android.accessibilityservice.FingerprintGestureController.FingerprintGestureController(IAccessibilityServiceConnection)FingerprintGestureController(IAccessibilityServiceConnection :: android.permission.USE_FINGERPRINT
android.accounts.AccountManager.AccountManager(Context,IAccountManager)AccountManager(Context :: android.permission.GET_ACCOUNTS,android.permission.WRITE_CONTACTS,android.permission.READ_CONTACTS,android.permission.GET_ACCOUNTS_PRIVILEGED
android.accounts.AccountManager.getAuthenticatorTypesAsUser(int)AuthenticatorDescription[] :: android.permission.INTERACT_ACROSS_USERS_FULL
android.accounts.AccountManager.getAccountsByType(String)Account[] :: android.permission.GET_ACCOUNTS
android.accounts.AccountManager.hasFeatures(Account,String[],AccountManagerCallback<Boolean>,Handler)AccountManagerFuture<Boolean> :: android.permission.GET_ACCOUNTS
android.accounts.AccountManager.getAccountsByTypeAndFeatures(String,String[],AccountManagerCallback<Account[]>,Handler)AccountManagerFuture<Account[]> :: android.permission.GET_ACCOUNTS
android.app.ActivityManager.getRecentTasksForUser(int,int,int)List<RecentTaskInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.ActivityManager.addOnUidImportanceListener(OnUidImportanceListener,int)void :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.forceStopPackageAsUser(String,int)void :: android.permission.FORCE_STOP_PACKAGES
android.app.ActivityManager.handleIncomingUser(int,int,int,boolean,boolean,String,String)int :: android.permission.INTERACT_ACROSS_USERS,android.permission.INTERACT_ACROSS_USERS_FULL
android.app.DownloadManager.Request(Uri)Request(Uri :: android.permission.INTERNET
android.app.DownloadManager.setDestinationToSystemCache()Request :: android.permission.ACCESS_CACHE_FILESYSTEM
android.app.Notification.getGroup()String :: android.permission.VIBRATE
android.app.WallpaperManager.setResource(int)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(Bitmap)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(Bitmap,Rect,boolean)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(Bitmap,Rect,boolean,int,int)int :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.WallpaperManager.setStream(InputStream)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(InputStream,Rect,boolean)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.suggestDesiredDimensions(int,int)void :: android.permission.SET_WALLPAPER_HINTS
android.app.WallpaperManager.clear()void :: android.permission.SET_WALLPAPER
android.app.admin.DeviceAdminReceiver.getManager(Context)DevicePolicyManager :: android.permission.BIND_DEVICE_ADMIN
android.app.admin.DevicePolicyManager.isAdminActive(ComponentName)boolean :: android.permission.BIND_DEVICE_ADMIN,android.permission.DISPATCH_PROVISIONING_MESSAGE
android.app.admin.DevicePolicyManager.setAlwaysOnVpnPackage(ComponentName,String,boolean)void :: android.permission.BIND_VPN_SERVICE
android.app.admin.DevicePolicyManager.setDeviceProvisioningConfigApplied()void :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isDeviceProvisioningConfigApplied()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.bindDeviceAdminServiceAsUser(ComponentName,Intent,ServiceConnection,int,UserHandle)boolean :: android.permission.BIND_DEVICE_ADMIN
android.app.admin.DevicePolicyManager.getOwnerInstalledCaCerts(UserHandle)List<String> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.job.JobInfo.getId()int :: android.permission.CONNECTIVITY_INTERNAL
android.app.trust.TrustManager.reportUnlockAttempt(boolean,int)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.reportUnlockLockout(int,int)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.reportEnabledTrustAgentsChanged(int)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.reportKeyguardShowingChanged()void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.registerTrustListener(TrustListener)void :: android.permission.TRUST_LISTENER
android.app.trust.TrustManager.unregisterTrustListener(TrustListener)void :: android.permission.TRUST_LISTENER
android.app.usage.NetworkStatsManager.NetworkStatsManager(Context)NetworkStatsManager(Context :: android.permission.PACKAGE_USAGE_STATS
android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int,UserHandle,ComponentName,Bundle)boolean :: android.permission.BIND_APPWIDGET
android.bluetooth.BluetoothA2dp.connect(BluetoothDevice)boolean :: android.permission.BLUETOOTH,android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dp.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dp.setPriority(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dp.isA2dpPlaying(BluetoothDevice)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dpSink.connect(BluetoothDevice)boolean :: android.permission.BLUETOOTH,android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dpSink.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dpSink.getAudioConfig(BluetoothDevice)BluetoothAudioConfig :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dpSink.setPriority(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dpSink.getPriority(BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dpSink.isA2dpPlaying(BluetoothDevice)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.nameForState(int)String :: android.permission.BLUETOOTH,android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getDefaultAdapter()BluetoothAdapter :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.disable(boolean)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getName()String :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.factoryReset()boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.getUuids()ParcelUuid[] :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.setScanMode(int,int)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.bluetooth.BluetoothAdapter.listenUsingRfcommOn(int)BluetoothServerSocket :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.listenUsingRfcommOn(int,boolean,boolean)BluetoothServerSocket :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.listenUsingEncryptedRfcommWithServiceRecord(String,UUID)BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.readOutOfBandData()Pair<byte[], :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.changeApplicationBluetoothState(boolean,BluetoothStateChangeCallback)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAvrcpController.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.toString()String :: android.permission.BLUETOOTH,android.permission.ACCESS_COARSE_LOCATION,android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.createBond(int)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.createBondOutOfBand(int,OobData)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.setDeviceOutOfBandData(byte[],byte[])boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.cancelBondProcess()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.removeBond()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.isConnected()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.isEncrypted()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.sdpSearch(ParcelUuid)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setPin(byte[])boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.getPhonebookAccessPermission()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setPhonebookAccessPermission(int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.getMessageAccessPermission()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setMessageAccessPermission(int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.getSimAccessPermission()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setSimAccessPermission(int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.createRfcommSocket(int)BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createL2capSocket(int)BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createInsecureL2capSocket(int)BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createInsecureRfcommSocket(int)BluetoothSocket :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.createScoSocket()BluetoothSocket :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothGatt.registerApp(BluetoothGattCallback,Handler)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.disconnect()void :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.discoverServices()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.discoverServiceByUuid(UUID)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.getServices()List<BluetoothGattService> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.getService(UUID)BluetoothGattService :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.readCharacteristic(BluetoothGattCharacteristic)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.readUsingCharacteristicUuid(UUID,int,int)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.writeCharacteristic(BluetoothGattCharacteristic)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.readDescriptor(BluetoothGattDescriptor)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.writeDescriptor(BluetoothGattDescriptor)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.beginReliableWrite()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.executeReliableWrite()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.abortReliableWrite()void :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.setCharacteristicNotification(BluetoothGattCharacteristic,boolean)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.readRemoteRssi()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.requestMtu(int)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGattCharacteristic.BluetoothGattCharacteristic(UUID,int,int)BluetoothGattCharacteristic(UUID :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGattCharacteristic.addDescriptor(BluetoothGattDescriptor)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGattDescriptor.BluetoothGattDescriptor(UUID,int)BluetoothGattDescriptor(UUID :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGattDescriptor.BluetoothGattDescriptor(UUID,int,int)BluetoothGattDescriptor(UUID :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGattDescriptor.getInstanceId()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGattServer.unregisterCallback()void :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGattServer.connect(BluetoothDevice,boolean)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGattServer.cancelConnection(BluetoothDevice)void :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGattServer.sendResponse(BluetoothDevice,int,int,int,byte[])boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGattServer.notifyCharacteristicChanged(BluetoothDevice,BluetoothGattCharacteristic,boolean)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGattServer.addService(BluetoothGattService)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGattServer.removeService(BluetoothGattService)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGattServer.clearServices()void :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGattServer.getServices()List<BluetoothGattService> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGattServer.getService(UUID)BluetoothGattService :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGattService.BluetoothGattService(UUID,int)BluetoothGattService(UUID :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGattService.addService(BluetoothGattService)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGattService.addCharacteristic(BluetoothGattCharacteristic)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadset.connect(BluetoothDevice)boolean :: android.permission.BLUETOOTH,android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.setPriority(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.getPriority(BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadset.startVoiceRecognition(BluetoothDevice)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadset.stopVoiceRecognition(BluetoothDevice)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadset.isAudioConnected(BluetoothDevice)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadset.isAudioOn()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadset.sendVendorSpecificResultCode(BluetoothDevice,String,String)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHealth.registerSinkAppConfiguration(String,int,BluetoothHealthCallback)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHealth.registerAppConfiguration(String,int,int,int,BluetoothHealthCallback)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHealth.unregisterAppConfiguration(BluetoothHealthAppConfiguration)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHealth.connectChannelToSource(BluetoothDevice,BluetoothHealthAppConfiguration)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHealth.connectChannelToSink(BluetoothDevice,BluetoothHealthAppConfiguration,int)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHealth.disconnectChannel(BluetoothDevice,BluetoothHealthAppConfiguration,int)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHealth.getMainChannelFd(BluetoothDevice,BluetoothHealthAppConfiguration)ParcelFileDescriptor :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHealth.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHealth.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHealth.getDevicesMatchingConnectionStates(int[])List<BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothInputDevice.connect(BluetoothDevice)boolean :: android.permission.BLUETOOTH,android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothInputDevice.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothInputDevice.setPriority(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothInputDevice.getPriority(BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothInputDevice.virtualUnplug(BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothInputDevice.getProtocolMode(BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothInputDevice.setProtocolMode(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothInputDevice.getReport(BluetoothDevice,byte,byte,int)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothInputDevice.setReport(BluetoothDevice,byte,String)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothInputDevice.sendData(BluetoothDevice,String)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothInputHost.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothPan.connect(BluetoothDevice)boolean :: android.permission.BLUETOOTH,android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothPan.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothSap.close()void :: android.permission.BLUETOOTH
android.bluetooth.BluetoothServerSocket.accept()BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothSocket.BluetoothSocket(int,int,boolean,boolean,String,int)BluetoothSocket(int :: android.permission.BLUETOOTH
android.bluetooth.le.AdvertisingSet.enableAdvertising(boolean,int,int)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.AdvertisingSet.getOwnAddress()void :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.le.BluetoothLeAdvertiser.BluetoothLeAdvertiser(IBluetoothManager)BluetoothLeAdvertiser(IBluetoothManager :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(AdvertiseSettings,AdvertiseData,AdvertiseCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(AdvertiseSettings,AdvertiseData,AdvertiseData,AdvertiseCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeAdvertiser.stopAdvertising(AdvertiseCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.BluetoothLeScanner(IBluetoothManager)BluetoothLeScanner(IBluetoothManager :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScan(ScanCallback)void :: android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.bluetooth.le.BluetoothLeScanner.startScan(List<ScanFilter>,ScanSettings,ScanCallback)void :: android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.bluetooth.le.PeriodicAdvertisingManager.PeriodicAdvertisingManager(IBluetoothManager)PeriodicAdvertisingManager(IBluetoothManager :: android.permission.BLUETOOTH_ADMIN
android.companion.CompanionDeviceManager.associate(AssociationRequest,Callback,Handler)void :: android.permission.RUN_IN_BACKGROUND
android.content.ContentResolver.getSyncAutomatically(Account,String)boolean :: android.permission.READ_SYNC_SETTINGS
android.content.ContentResolver.setSyncAutomatically(Account,String,boolean)void :: android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.addPeriodicSync(Account,String,Bundle,long)void :: android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.removePeriodicSync(Account,String,Bundle)void :: android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.cancelSync(SyncRequest)void :: android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.getPeriodicSyncs(Account,String)List<PeriodicSync> :: android.permission.READ_SYNC_SETTINGS
android.content.ContentResolver.getIsSyncable(Account,String)int :: android.permission.READ_SYNC_SETTINGS
android.content.ContentResolver.setIsSyncable(Account,String,int)void :: android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.getMasterSyncAutomatically()boolean :: android.permission.READ_SYNC_SETTINGS
android.content.ContentResolver.setMasterSyncAutomatically(boolean)void :: android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.isSyncActive(Account,String)boolean :: android.permission.READ_SYNC_STATS
android.content.ContentResolver.getCurrentSync()SyncInfo :: android.permission.READ_SYNC_STATS
android.content.ContentResolver.getCurrentSyncs()List<SyncInfo> :: android.permission.READ_SYNC_STATS
android.content.ContentResolver.isSyncPending(Account,String)boolean :: android.permission.READ_SYNC_STATS
android.content.Context.getExternalFilesDir(String)File :: android.permission.READ_EXTERNAL_STORAGE,android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.getExternalFilesDirs(String)File[] :: android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.getObbDir()File :: android.permission.READ_EXTERNAL_STORAGE,android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.getObbDirs()File[] :: android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.getExternalCacheDir()File :: android.permission.READ_EXTERNAL_STORAGE,android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.getExternalCacheDirs()File[] :: android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.getExternalMediaDirs()File[] :: android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.setWallpaper(Bitmap)void :: android.permission.SET_WALLPAPER
android.content.Context.setWallpaper(InputStream)void :: android.permission.SET_WALLPAPER
android.content.Context.clearWallpaper()void :: android.permission.SET_WALLPAPER
android.content.Context.registerReceiver(BroadcastReceiver,IntentFilter)Intent :: android.permission.BROADCAST_STICKY
android.content.Intent.isAccessUriMode(int)boolean :: android.permission.RECEIVE_BOOT_COMPLETED,android.permission.INTERACT_ACROSS_USERS,android.permission.MANAGE_USERS,android.permission.PROCESS_OUTGOING_CALLS,android.permission.REQUEST_INSTALL_PACKAGES,android.permission.RECEIVE_MEDIA_RESOURCE_USAGE,android.permission.CALL_PHONE,android.permission.MASTER_CLEAR
android.content.RestrictionsManager.RestrictionsManager(Context,IRestrictionsManager)RestrictionsManager(Context :: android.permission.BIND_DEVICE_ADMIN
android.content.pm.ApplicationInfo.getCategoryTitle(Context,int)CharSequence :: android.permission.FACTORY_TEST
android.content.pm.PackageManager.deletePackage(String,IPackageDeleteObserver,int)void :: android.permission.DELETE_PACKAGES
android.content.pm.PackageManager.deleteApplicationCacheFiles(String,IPackageDataObserver)void :: android.permission.DELETE_CACHE_FILES
android.content.pm.PackageManager.deleteApplicationCacheFilesAsUser(String,int,IPackageDataObserver)void :: android.permission.INTERACT_ACROSS_USERS,android.permission.DELETE_CACHE_FILES
android.content.pm.PackageManager.getPackageSizeInfoAsUser(String,int,IPackageStatsObserver)void :: android.permission.GET_PACKAGE_SIZE
android.content.pm.PackageManager.canRequestPackageInstalls()boolean :: android.permission.REQUEST_INSTALL_PACKAGES
android.hardware.Camera.getNumberOfCameras()int :: android.permission.CAMERA
android.hardware.camera2.CameraDevice.getId()String :: android.permission.CAMERA
android.hardware.display.DisplayManager.DisplayManager(Context)DisplayManager(Context :: android.permission.CAPTURE_SECURE_VIDEO_OUTPUT,android.permission.CAPTURE_VIDEO_OUTPUT
android.hardware.display.DisplayManager.startWifiDisplayScan()void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.hardware.display.DisplayManager.stopWifiDisplayScan()void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.hardware.display.DisplayManager.connectWifiDisplay(String)void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.hardware.display.DisplayManager.renameWifiDisplay(String,String)void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.hardware.display.DisplayManager.forgetWifiDisplay(String)void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.hardware.hdmi.HdmiControlManager.HdmiControlManager(IHdmiControlService)HdmiControlManager(IHdmiControlService :: android.permission.HDMI_CEC
android.hardware.location.GeofenceHardware.getMonitoringTypes()int[] :: android.permission.LOCATION_HARDWARE
android.hardware.location.GeofenceHardware.addGeofence(int,int,GeofenceHardwareRequest,GeofenceHardwareCallback)boolean :: android.permission.ACCESS_FINE_LOCATION,android.permission.LOCATION_HARDWARE
android.hardware.location.GeofenceHardware.removeGeofence(int,int)boolean :: android.permission.ACCESS_FINE_LOCATION,android.permission.LOCATION_HARDWARE
android.hardware.location.GeofenceHardware.pauseGeofence(int,int)boolean :: android.permission.ACCESS_FINE_LOCATION,android.permission.LOCATION_HARDWARE
android.hardware.location.GeofenceHardware.resumeGeofence(int,int,int)boolean :: android.permission.ACCESS_FINE_LOCATION,android.permission.LOCATION_HARDWARE
android.hardware.location.GeofenceHardware.registerForMonitorStateChangeCallback(int,GeofenceHardwareMonitorCallback)boolean :: android.permission.ACCESS_FINE_LOCATION,android.permission.LOCATION_HARDWARE
android.hardware.location.GeofenceHardware.unregisterForMonitorStateChangeCallback(int,GeofenceHardwareMonitorCallback)boolean :: android.permission.ACCESS_FINE_LOCATION,android.permission.LOCATION_HARDWARE
android.location.LocationManager.LocationManager(Context,ILocationManager)LocationManager(Context :: android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.removeProximityAlert(PendingIntent)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.removeGeofence(Geofence,PendingIntent)void :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.removeAllGeofences(PendingIntent)void :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationRequest.create()LocationRequest :: android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.location.LocationRequest.setWorkSource(WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.location.LocationRequest.setHideFromAppOps(boolean)void :: android.permission.UPDATE_APP_OPS_STATS
android.media.AudioManager.startBluetoothSco()void :: android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioManager.startBluetoothScoVirtualCall()void :: android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioManager.setBluetoothScoOn(boolean)void :: android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioManager.registerAudioPolicy(AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.MediaExtractor.setDataSource(MediaDataSource)void :: android.permission.INTERNET
android.media.MediaExtractor.setDataSource(Context,Uri,Map<String,String>)void :: android.permission.INTERNET
android.media.MediaExtractor.setDataSource(String,Map<String,String>)void :: android.permission.INTERNET
android.media.MediaExtractor.setDataSource(String)void :: android.permission.INTERNET
android.media.MediaPlayer.MediaPlayer()MediaPlayer() :: android.permission.INTERNET
android.media.MediaPlayer.setWakeMode(Context,int)void :: android.permission.WAKE_LOCK
android.media.MediaRecorder.isSystemOnlyAudioSource(int)boolean :: android.permission.CAPTURE_AUDIO_OUTPUT
android.media.RingtoneManager.getCursor()Cursor :: android.permission.READ_EXTERNAL_STORAGE
android.media.RingtoneManager.getValidRingtoneUri(Context)Uri :: android.permission.READ_EXTERNAL_STORAGE
android.media.RingtoneManager.openRingtone(Context,Uri)InputStream :: android.permission.READ_EXTERNAL_STORAGE
android.media.audiofx.EnvironmentalReverb.EnvironmentalReverb(int,int)EnvironmentalReverb(int :: android.permission.MODIFY_AUDIO_SETTINGS
android.media.audiofx.PresetReverb.PresetReverb(int,int)PresetReverb(int :: android.permission.MODIFY_AUDIO_SETTINGS
android.media.audiofx.Visualizer.System.loadLibrary(audioeffect_jni)class :: android.permission.MODIFY_AUDIO_SETTINGS
android.media.session.MediaSession.MediaSession(Context,String,int)MediaSession(@NonNull :: android.permission.INTERACT_ACROSS_USERS_FULL
android.media.session.MediaSessionManager.getActiveSessionsForUser(ComponentName,int)List<MediaController> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.media.tv.TvInputService.onCreateSession(String)Session :: android.permission.BIND_TV_INPUT
android.net.ConnectivityManager.startUsingNetworkFeature(int,String)int :: android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.stopUsingNetworkFeature(int,String)int :: android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.requestRouteToHost(int,int)boolean :: android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.requestRouteToHostAddress(int,InetAddress)boolean :: android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.tether(String)int :: android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.untether(String)int :: android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.setUsbTethering(boolean)int :: android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.reportInetCondition(int,int)void :: android.permission.STATUS_BAR
android.net.ConnectivityManager.requestNetwork(NetworkRequest,NetworkCallback)void :: android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.requestNetwork(NetworkRequest,NetworkCallback,Handler)void :: android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.requestNetwork(NetworkRequest,NetworkCallback,int)void :: android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.requestNetwork(NetworkRequest,NetworkCallback,Handler,int)void :: android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.requestNetwork(NetworkRequest,PendingIntent)void :: android.permission.CHANGE_NETWORK_STATE
android.net.TrafficStats.setThreadStatsUid(int)void :: android.permission.UPDATE_DEVICE_STATS
android.net.VpnService.getService()IConnectivityManager :: android.permission.BIND_VPN_SERVICE
android.net.VpnService.prepareAndAuthorize(Context)void :: android.permission.CONTROL_VPN
android.net.rtp.AudioGroup.AudioGroup()AudioGroup() :: android.permission.RECORD_AUDIO
android.net.rtp.AudioStream.AudioStream(InetAddress)AudioStream(InetAddress :: android.permission.INTERNET
android.net.rtp.RtpStream.getLocalAddress()InetAddress :: android.permission.INTERNET
android.net.sip.SipAudioCall.onReadyToCall(SipAudioCall)void :: android.permission.ACCESS_WIFI_STATE,android.permission.MODIFY_AUDIO_SETTINGS,android.permission.WAKE_LOCK,android.permission.INTERNET,android.permission.USE_SIP,android.permission.RECORD_AUDIO
android.net.sip.SipAudioCall.setSpeakerMode(boolean)void :: android.permission.MODIFY_AUDIO_SETTINGS
android.net.sip.SipAudioCall.startAudio()void :: android.permission.RECORD_AUDIO,android.permission.ACCESS_WIFI_STATE,android.permission.WAKE_LOCK
android.net.sip.SipManager.newInstance(Context)SipManager :: android.permission.USE_SIP
android.net.wifi.WifiManager.getScanResults()List<ScanResult> :: android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.net.wifi.WifiManager.watchLocalOnlyHotspot(LocalOnlyHotspotObserver,Handler)void :: android.permission.ACCESS_COARSE_LOCATION
android.net.wifi.aware.IdentityChangedListener.onIdentityChanged(byte[])void :: android.permission.ACCESS_COARSE_LOCATION
android.net.wifi.aware.WifiAwareManager.attach(AttachCallback,IdentityChangedListener,Handler)void :: android.permission.ACCESS_COARSE_LOCATION
android.net.wifi.aware.WifiAwareSession.publish(PublishConfig,DiscoverySessionCallback,Handler)void :: android.permission.ACCESS_COARSE_LOCATION
android.net.wifi.aware.WifiAwareSession.subscribe(SubscribeConfig,DiscoverySessionCallback,Handler)void :: android.permission.ACCESS_COARSE_LOCATION
android.net.wifi.p2p.WifiP2pManager.WifiP2pManager(IWifiP2pManager)WifiP2pManager(IWifiP2pManager :: android.permission.ACCESS_WIFI_STATE,android.permission.CHANGE_WIFI_STATE
android.nfc.NfcAdapter.setBeamPushUris(Uri[],Activity)void :: android.permission.NFC
android.nfc.NfcAdapter.setBeamPushUrisCallback(CreateBeamUrisCallback,Activity)void :: android.permission.NFC
android.nfc.NfcAdapter.setNdefPushMessage(NdefMessage,Activity,Activity)void :: android.permission.NFC
android.nfc.NfcAdapter.setNdefPushMessageCallback(CreateNdefMessageCallback,Activity,Activity)void :: android.permission.NFC
android.nfc.NfcAdapter.setOnNdefPushCompleteCallback(OnNdefPushCompleteCallback,Activity,Activity)void :: android.permission.NFC
android.nfc.NfcAdapter.enableForegroundDispatch(Activity,PendingIntent,IntentFilter[],String[][])void :: android.permission.NFC
android.nfc.NfcAdapter.disableForegroundDispatch(Activity)void :: android.permission.NFC
android.nfc.NfcAdapter.enableForegroundNdefPush(Activity,NdefMessage)void :: android.permission.NFC
android.nfc.NfcAdapter.disableForegroundNdefPush(Activity)void :: android.permission.NFC
android.nfc.NfcAdapter.dispatch(Tag)void :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.cardemulation.CardEmulation.isDefaultServiceForCategory(ComponentName,String)boolean :: android.permission.NFC
android.nfc.cardemulation.CardEmulation.isDefaultServiceForAid(ComponentName,String)boolean :: android.permission.NFC
android.nfc.cardemulation.HostNfcFService.sendResponsePacket(byte[])void :: android.permission.BIND_NFC_SERVICE
android.nfc.tech.IsoDep.get(Tag)IsoDep :: android.permission.NFC
android.nfc.tech.IsoDep.setTimeout(int)void :: android.permission.NFC
android.nfc.tech.IsoDep.getTimeout()int :: android.permission.NFC
android.nfc.tech.IsoDep.transceive(byte[])byte[] :: android.permission.NFC
android.nfc.tech.MifareClassic.get(Tag)MifareClassic :: android.permission.NFC
android.nfc.tech.MifareClassic.authenticateSectorWithKeyA(int,byte[])boolean :: android.permission.NFC
android.nfc.tech.MifareClassic.authenticateSectorWithKeyB(int,byte[])boolean :: android.permission.NFC
android.nfc.tech.MifareClassic.readBlock(int)byte[] :: android.permission.NFC
android.nfc.tech.MifareClassic.writeBlock(int,byte[])void :: android.permission.NFC
android.nfc.tech.MifareClassic.increment(int,int)void :: android.permission.NFC
android.nfc.tech.MifareClassic.decrement(int,int)void :: android.permission.NFC
android.nfc.tech.MifareClassic.transfer(int)void :: android.permission.NFC
android.nfc.tech.MifareClassic.restore(int)void :: android.permission.NFC
android.nfc.tech.MifareClassic.transceive(byte[])byte[] :: android.permission.NFC
android.nfc.tech.MifareClassic.setTimeout(int)void :: android.permission.NFC
android.nfc.tech.MifareClassic.getTimeout()int :: android.permission.NFC
android.nfc.tech.MifareUltralight.get(Tag)MifareUltralight :: android.permission.NFC
android.nfc.tech.MifareUltralight.readPages(int)byte[] :: android.permission.NFC
android.nfc.tech.MifareUltralight.writePage(int,byte[])void :: android.permission.NFC
android.nfc.tech.MifareUltralight.transceive(byte[])byte[] :: android.permission.NFC
android.nfc.tech.MifareUltralight.setTimeout(int)void :: android.permission.NFC
android.nfc.tech.MifareUltralight.getTimeout()int :: android.permission.NFC
android.nfc.tech.Ndef.get(Tag)Ndef :: android.permission.NFC
android.nfc.tech.Ndef.isWritable()boolean :: android.permission.NFC
android.nfc.tech.Ndef.getNdefMessage()NdefMessage :: android.permission.NFC
android.nfc.tech.Ndef.writeNdefMessage(NdefMessage)void :: android.permission.NFC
android.nfc.tech.Ndef.makeReadOnly()boolean :: android.permission.NFC
android.nfc.tech.NdefFormatable.get(Tag)NdefFormatable :: android.permission.NFC
android.nfc.tech.NdefFormatable.format(NdefMessage)void :: android.permission.NFC
android.nfc.tech.NdefFormatable.formatReadOnly(NdefMessage)void :: android.permission.NFC
android.nfc.tech.NfcA.get(Tag)NfcA :: android.permission.NFC
android.nfc.tech.NfcA.transceive(byte[])byte[] :: android.permission.NFC
android.nfc.tech.NfcA.setTimeout(int)void :: android.permission.NFC
android.nfc.tech.NfcA.getTimeout()int :: android.permission.NFC
android.nfc.tech.NfcB.get(Tag)NfcB :: android.permission.NFC
android.nfc.tech.NfcB.transceive(byte[])byte[] :: android.permission.NFC
android.nfc.tech.NfcF.get(Tag)NfcF :: android.permission.NFC
android.nfc.tech.NfcF.transceive(byte[])byte[] :: android.permission.NFC
android.nfc.tech.NfcF.setTimeout(int)void :: android.permission.NFC
android.nfc.tech.NfcF.getTimeout()int :: android.permission.NFC
android.nfc.tech.NfcV.get(Tag)NfcV :: android.permission.NFC
android.nfc.tech.NfcV.transceive(byte[])byte[] :: android.permission.NFC
android.nfc.tech.TagTechnology.getTag()Tag :: android.permission.NFC
android.nfc.tech.TagTechnology.connect()void :: android.permission.NFC
android.nfc.tech.TagTechnology.reconnect()void :: android.permission.NFC
android.nfc.tech.TagTechnology.close()void :: android.permission.NFC
android.os.Build.deriveFingerprint()String :: android.permission.BIND_DREAM_SERVICE,android.permission.READ_CALL_LOG,android.permission.READ_EXTERNAL_STORAGE,android.permission.WRITE_CONTACTS,android.permission.BIND_ACCESSIBILITY_SERVICE,android.permission.READ_PHONE_STATE,android.permission.WRITE_CALL_LOG,android.permission.READ_CONTACTS,android.permission.WRITE_EXTERNAL_STORAGE
android.os.DropBoxManager.Entry(String,long)Entry(String :: android.permission.READ_LOGS
android.os.Environment.getExternalStorageDirectory()File :: android.permission.READ_EXTERNAL_STORAGE,android.permission.WRITE_EXTERNAL_STORAGE
android.os.Environment.maybeTranslateEmulatedPathToInternal(File)File :: android.permission.WRITE_MEDIA_STORAGE
android.os.FileUriExposedException.FileUriExposedException(String)class :: android.permission.READ_EXTERNAL_STORAGE
android.os.PowerManager.PowerManager(Context,IPowerManager,Handler)PowerManager(Context :: android.permission.RECOVERY,android.permission.DEVICE_POWER,android.permission.REBOOT
android.os.PowerManager.newWakeLock(int,String)WakeLock :: android.permission.WAKE_LOCK
android.os.PowerManager.userActivity(long,boolean)void :: android.permission.DEVICE_POWER
android.os.PowerManager.goToSleep(long)void :: android.permission.USER_ACTIVITY,android.permission.DEVICE_POWER
android.os.PowerManager.goToSleep(long,int,int)void :: android.permission.DEVICE_POWER
android.os.PowerManager.wakeUp(long)void :: android.permission.DEVICE_POWER
android.os.PowerManager.nap(long)void :: android.permission.DEVICE_POWER
android.os.PowerManager.boostScreenBrightness(long)void :: android.permission.DEVICE_POWER
android.os.PowerManager.setBacklightBrightness(int)void :: android.permission.DEVICE_POWER
android.os.PowerManager.reboot(String)void :: android.permission.REBOOT
android.os.PowerManager.rebootSafeMode()void :: android.permission.REBOOT
android.os.PowerManager.getLastShutdownReason()int :: android.permission.DEVICE_POWER
android.os.RecoverySystem.installPackage(Context,File)void :: android.permission.REBOOT
android.os.RecoverySystem.rebootWipeUserData(Context)void :: android.permission.REBOOT
android.os.RecoverySystem.rebootWipeUserData(Context,boolean,String,boolean)void :: android.permission.REBOOT
android.os.StrictMode.detectFileUriExposure()Builder :: android.permission.READ_EXTERNAL_STORAGE
android.os.UserManager.isManagedProfile(int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.getManagedProfileBadge(int)int :: android.permission.MANAGE_USERS
android.os.UserManager.getUserInfo(int)UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.createUser(String,int)UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.createProfileForUser(String,int,int)UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.createProfileForUserEvenWhenDisallowed(String,int,int,String[])UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.setUserEnabled(int)void :: android.permission.MANAGE_USERS
android.os.UserManager.getUsers()List<UserInfo> :: android.permission.MANAGE_USERS
android.os.UserManager.getPrimaryUser()UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.getProfiles(int)List<UserInfo> :: android.permission.MANAGE_USERS
android.os.UserManager.isSameProfileGroup(int,int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.getEnabledProfiles(int)List<UserInfo> :: android.permission.MANAGE_USERS
android.os.UserManager.getUsers(boolean)List<UserInfo> :: android.permission.MANAGE_USERS
android.os.UserManager.removeUser(int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.setUserName(int,String)void :: android.permission.MANAGE_USERS
android.os.UserManagerInternal.removeUserEvenWhenDisallowed(int)boolean :: android.permission.MANAGE_USERS
android.os.health.SystemHealthManager.takeUidSnapshot(int)HealthStats :: android.permission.BATTERY_STATS
android.os.health.SystemHealthManager.takeUidSnapshots(int[])HealthStats[] :: android.permission.BATTERY_STATS
android.os.storage.StorageManager.getAllocatableBytes(UUID)long :: android.permission.ALLOCATE_AGGRESSIVE
android.os.storage.StorageVolume.StorageVolume(String,int,File,String,boolean,boolean,boolean,long,boolean,long,UserHandle,String,String)StorageVolume(String :: android.permission.READ_EXTERNAL_STORAGE,android.permission.WRITE_EXTERNAL_STORAGE
android.os.storage.StorageVolume.createAccessIntent(String)Intent :: android.permission.READ_EXTERNAL_STORAGE,android.permission.WRITE_EXTERNAL_STORAGE
android.os.storage.VolumeInfo.getInternalPathForUser(int)File :: android.permission.WRITE_MEDIA_STORAGE
android.printservice.PrintService.onConnected()void :: android.permission.BIND_PRINT_SERVICE
android.provider.BlockedNumberContract.notifyEmergencyContact(Context)void :: android.permission.READ_BLOCKED_NUMBERS,android.permission.WRITE_BLOCKED_NUMBERS
android.provider.DocumentsProvider.attachInfo(Context,ProviderInfo)void :: android.permission.MANAGE_DOCUMENTS
android.provider.MediaStore.getContentUri(String)Uri :: android.permission.CAMERA
android.provider.SearchIndexablesProvider.attachInfo(Context,ProviderInfo)void :: android.permission.READ_SEARCH_INDEXABLES
android.provider.Settings.setInSystemServer()void :: android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS,android.permission.PACKAGE_USAGE_STATS
android.provider.Settings.canDrawOverlays(Context)boolean :: android.permission.SYSTEM_ALERT_WINDOW
android.provider.Settings.canWrite(Context)boolean :: android.permission.WRITE_SETTINGS
android.provider.Telephony.Telephony()Telephony() :: android.permission.BROADCAST_SMS
android.provider.Telephony.getMessagesFromIntent(Intent)SmsMessage[] :: android.permission.RECEIVE_EMERGENCY_BROADCAST,android.permission.RECEIVE_WAP_PUSH,android.permission.RECEIVE_SMS,android.permission.BROADCAST_SMS,android.permission.BROADCAST_WAP_PUSH,android.permission.RECEIVE_MMS
android.service.autofill.AutofillService.onConnected()void :: android.permission.BIND_AUTOFILL_SERVICE
android.service.carrier.CarrierMessagingService.onFilterSms(MessagePdu,String,int,int,ResultCallback<Boolean>)void :: android.permission.BIND_CARRIER_SERVICES
android.service.carrier.CarrierService.onLoadConfig(CarrierIdentifier)PersistableBundle :: android.permission.BIND_CARRIER_SERVICES
android.service.carrier.CarrierService.notifyCarrierNetworkChange(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.service.chooser.ChooserTargetService.onGetChooserTargets(ComponentName,IntentFilter)List<ChooserTarget> :: android.permission.BIND_CHOOSER_TARGET_SERVICE
android.service.dreams.DreamService.setDebug(boolean)void :: android.permission.BIND_DREAM_SERVICE
android.service.notification.ConditionProviderService.requestRebind(ComponentName)void :: android.permission.ACCESS_NOTIFICATION_POLICY,android.permission.BIND_CONDITION_PROVIDER_SERVICE
android.service.resolver.ResolverRankerService.onPredictSharingProbabilities(List<ResolverTarget>)void :: android.permission.BIND_RESOLVER_RANKER_SERVICE
android.service.trust.TrustAgentService.onUnlockAttempt(boolean)void :: android.permission.BIND_TRUST_AGENT
android.service.voice.VoiceInteractionService.onLaunchVoiceAssistFromKeyguard()void :: android.permission.BIND_VOICE_INTERACTION
android.service.vr.VrListenerService.onCurrentVrActivityChanged(ComponentName)void :: android.permission.BIND_VR_LISTENER_SERVICE
android.service.wallpaper.WallpaperService.getSurfaceHolder()SurfaceHolder :: android.permission.BIND_WALLPAPER
android.speech.SpeechRecognizer.SpeechRecognizer(Context,ComponentName)SpeechRecognizer(final :: android.permission.RECORD_AUDIO
android.support.v4.app.JobIntentService.dequeueWork()JobIntentService.GenericWorkItem :: android.permission.WAKE_LOCK
android.support.v4.app.NotificationCompat.build(Builder,NotificationBuilderWithBuilderAccessor)class :: android.permission.VIBRATE
android.support.v4.content.ContextCompat.getObbDirs(Context)File[] :: android.permission.WRITE_EXTERNAL_STORAGE
android.support.v4.content.ContextCompat.getExternalFilesDirs(Context,String)File[] :: android.permission.WRITE_EXTERNAL_STORAGE
android.support.v4.content.ContextCompat.getExternalCacheDirs(Context)File[] :: android.permission.WRITE_EXTERNAL_STORAGE
android.support.v4.content.WakefulBroadcastReceiver.startWakefulService(Context,Intent)ComponentName :: android.permission.WAKE_LOCK
android.support.v4.net.ConnectivityManagerCompat.isActiveNetworkMetered(ConnectivityManager)boolean :: android.permission.ACCESS_NETWORK_STATE
android.telecom.Connection.VideoProviderHandler()class :: android.permission.CAMERA
android.telecom.TelecomManager.getDefaultOutgoingPhoneAccount(String)PhoneAccountHandle :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getCallCapablePhoneAccounts()List<PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getSelfManagedPhoneAccounts()List<PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.setDefaultDialer(String)boolean :: android.permission.WRITE_SECURE_SETTINGS,android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.isVoiceMailNumber(PhoneAccountHandle,String)boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getVoiceMailNumber(PhoneAccountHandle)String :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getLine1Number(PhoneAccountHandle)String :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isInCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isInManagedCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getCallState()int :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.silenceRinger()void :: android.permission.MODIFY_PHONE_STATE,android.permission.ANSWER_PHONE_CALLS
android.telecom.TelecomManager.addNewIncomingCall(PhoneAccountHandle,Bundle)void :: android.permission.MANAGE_OWN_CALLS
android.telecom.TelecomManager.handleMmi(String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.handleMmi(String,PhoneAccountHandle)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.getAdnUriForPhoneAccount(PhoneAccountHandle)Uri :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.cancelMissedCallsNotification()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.showInCallScreen(boolean)void :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.enablePhoneAccount(PhoneAccountHandle,boolean)void :: android.permission.CALL_PHONE,android.permission.MANAGE_OWN_CALLS
android.telephony.CarrierConfigManager.getConfigForSubId(int)PersistableBundle :: android.permission.READ_PHONE_STATE
android.telephony.CarrierConfigManager.getConfig()PersistableBundle :: android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.PhoneStateListener()PhoneStateListener() :: android.permission.ACCESS_COARSE_LOCATION,android.permission.READ_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onCallStateChanged(int,String)void :: android.permission.READ_PHONE_STATE
android.telephony.SmsManager.sendTextMessage(String,String,String,PendingIntent,PendingIntent)void :: android.permission.SEND_SMS
android.telephony.SmsManager.sendTextMessageWithoutPersisting(String,String,String,PendingIntent,PendingIntent)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.injectSmsPdu(byte[],String,PendingIntent)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.sendMultipartTextMessage(String,String,ArrayList<String>,ArrayList<PendingIntent>,ArrayList<PendingIntent>)void :: android.permission.SEND_SMS
android.telephony.SmsManager.sendMultipartTextMessageWithoutPersisting(String,String,List<String>,List<PendingIntent>,List<PendingIntent>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.sendDataMessage(String,String,short,byte[],PendingIntent,PendingIntent)void :: android.permission.SEND_SMS
android.telephony.TelephonyManager.getDeviceSoftwareVersion()String :: android.permission.SEND_RESPOND_VIA_MESSAGE
android.telephony.TelephonyManager.getVisualVoicemailPackageName()String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setVisualVoicemailSmsFilterSettings(VisualVoicemailSmsFilterSettings)void :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.sendVisualVoicemailSms(String,int,String,PendingIntent)void :: android.permission.SEND_SMS
android.telephony.TelephonyManager.setVoiceActivationState(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataActivationState(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccOpenLogicalChannel(String)IccOpenLogicalChannelResponse :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccOpenLogicalChannel(String,int)IccOpenLogicalChannelResponse :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccOpenLogicalChannel(int,String,int)IccOpenLogicalChannelResponse :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccCloseLogicalChannel(int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccCloseLogicalChannel(int,int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduLogicalChannel(int,int,int,int,int,int,String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduLogicalChannel(int,int,int,int,int,int,int,String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduBasicChannel(int,int,int,int,int,String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduBasicChannel(int,int,int,int,int,int,String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccExchangeSimIO(int,int,int,int,int,String)byte[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccExchangeSimIO(int,int,int,int,int,int,String)byte[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.sendEnvelopeWithStatus(String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.sendEnvelopeWithStatus(int,String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.nvReadItem(int)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.nvWriteItem(int,String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.nvWriteCdmaPrl(byte[])boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.nvResetConfig(int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getPreferredNetworkType(int)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeAutomatic(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCellNetworkScanResults(int)CellNetworkScanResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeManual(int,OperatorInfo,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setPreferredNetworkType(int,int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.sendUssdRequest(String,UssdResponseCallback,Handler)void :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.setDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getDataEnabled(int)boolean :: android.permission.ACCESS_NETWORK_STATE,android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerState(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerStateForSlot(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setVoicemailRingtoneUri(PhoneAccountHandle,Uri)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setVoicemailVibrationEnabled(PhoneAccountHandle,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getTelephonyHistograms()List<TelephonyHistogram> :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAllowedCarriers(int,List<CarrierIdentifier>)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.VisualVoicemailService.finish()void :: android.permission.BIND_VISUAL_VOICEMAIL_SERVICE
android.telephony.VisualVoicemailService.setSmsFilterSettings(Context,PhoneAccountHandle,VisualVoicemailSmsFilterSettings)void :: android.permission.READ_PHONE_STATE
android.telephony.VisualVoicemailService.sendVisualVoicemailSms(Context,PhoneAccountHandle,String,short,String,PendingIntent)void :: android.permission.SEND_SMS
android.view.WindowManager.isSystemAlertWindowType(int)boolean :: android.permission.SYSTEM_ALERT_WINDOW
android.view.WindowManagerPolicy.canAddInternalSystemWindow()boolean :: android.permission.INTERNAL_SYSTEM_WINDOW
android.view.WindowManagerPolicy.getWindowLayerFromTypeLw(int,boolean)int :: android.permission.INTERNAL_SYSTEM_WINDOW
android.view.inputmethod.InputMethod.attachToken(IBinder)void :: android.permission.BIND_INPUT_METHOD
android.view.inputmethod.InputMethodManager.getInstance()InputMethodManager :: android.permission.BIND_INPUT_METHOD
android.view.textservice.SpellCheckerSession.SpellCheckerSession(SpellCheckerInfo,ITextServicesManager,SpellCheckerSessionListener)SpellCheckerSession( :: android.permission.BIND_TEXT_SERVICE
android.webkit.WebSettings.setBlockNetworkLoads(boolean)void :: android.permission.INTERNET
android.webkit.WebSettings.setGeolocationEnabled(boolean)void :: android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
com.android.internal.telephony.IccSmsInterfaceManager.enforcePrivilegedAppPermissions()void :: android.permission.MODIFY_PHONE_STATE
com.android.internal.util.DumpUtils.checkDumpPermission(Context,String,PrintWriter)boolean :: android.permission.DUMP
com.android.internal.util.DumpUtils.checkUsageStatsPermission(Context,String,PrintWriter)boolean :: android.permission.PACKAGE_USAGE_STATS
com.android.internal.util.DumpUtils.checkDumpAndUsageStatsPermission(Context,String,PrintWriter)boolean :: android.permission.DUMP,android.permission.PACKAGE_USAGE_STATS
com.android.internal.widget.LockPatternUtils.requireCredentialEntry(int)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.internal.widget.LockPatternUtils.requireStrongAuth(int,int)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.media.tv.remoteprovider.TvRemoteProvider.TvRemoteProvider(Context)TvRemoteProvider(Context :: android.permission.BIND_TV_REMOTE_SERVICE
com.android.nfc_extras.NfcAdapterExtras.initService(NfcAdapter)void :: android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcAdapterExtras.get(NfcAdapter)NfcAdapterExtras :: android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcAdapterExtras.getCardEmulationRoute()CardEmulationRoute :: android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcAdapterExtras.setCardEmulationRoute(CardEmulationRoute)void :: android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcAdapterExtras.getEmbeddedExecutionEnvironment()NfcExecutionEnvironment :: android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcExecutionEnvironment.open()void :: android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcExecutionEnvironment.close()void :: android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcExecutionEnvironment.transceive(byte[])byte[] :: android.permission.WRITE_SECURE_SETTINGS
com.android.server.pm.PackageManagerService.canViewInstantApps(int,int)boolean :: android.permission.ACCESS_INSTANT_APPS
com.android.server.pm.UserManagerService.getUserRestrictionSource(String,int)int :: android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.checkManageUserAndAcrossUsersFullPermission(String)void :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.checkManageUsersPermission(String)void :: android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.checkManageOrCreateUsersPermission(String)void :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.checkManageOrCreateUsersPermission(int)void :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.hasManageUsersPermission()boolean :: android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.hasManageOrCreateUsersPermission()boolean :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
com.android.server.policy.PhoneWindowManager.adjustConfigurationLw(Configuration,int,int)void :: android.permission.INTERNAL_SYSTEM_WINDOW
com.android.server.vr.Vr2dDisplay.setVirtualDisplayProperties(Vr2dDisplayProperties)void :: android.permission.ACCESS_VR_MANAGER
com.android.server.vr.VrManagerInternal.setVr2dDisplayProperties(Vr2dDisplayProperties)void :: android.permission.ACCESS_VR_MANAGER
com.android.server.wifi.WifiConfigManager.checkAndUpdateLastConnectUid(int,int)boolean :: android.permission.OVERRIDE_WIFI_CONFIG
com.android.server.wm.WindowState.subtractInsets(Rect,Rect,Rect,Rect)void :: android.permission.INTERNAL_SYSTEM_WINDOW
com.android.server.wm.WindowToken.isFirstChildWindowGreaterThanSecond(WindowState,WindowState)boolean :: android.permission.MANAGE_APP_TOKENS
