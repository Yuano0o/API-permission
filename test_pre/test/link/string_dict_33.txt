android.accessibilityservice.AccessibilityService.onAccessibilityEvent(AccessibilityEvent)interface :: android.permission.BIND_ACCESSIBILITY_SERVICE
android.accessibilityservice.FingerprintGestureController.FingerprintGestureController(IAccessibilityServiceConnection)FingerprintGestureController(IAccessibilityServiceConnection :: android.permission.USE_FINGERPRINT
android.accounts.AccountManager.AccountManager(Context,IAccountManager)AccountManager(Context :: android.permission.GET_ACCOUNTS,android.permission.WRITE_CONTACTS,android.permission.READ_CONTACTS,android.permission.GET_ACCOUNTS_PRIVILEGED
android.accounts.AccountManager.getAuthenticatorTypesAsUser(int)AuthenticatorDescription[] :: android.permission.INTERACT_ACROSS_USERS_FULL
android.accounts.AccountManager.getAccountsByType(String)Account[] :: android.permission.GET_ACCOUNTS
android.accounts.AccountManager.hasFeatures(Account,String[],AccountManagerCallback<Boolean>,Handler)AccountManagerFuture<Boolean> :: android.permission.GET_ACCOUNTS
android.accounts.AccountManager.getAccountsByTypeAndFeatures(String,String[],AccountManagerCallback<Account[]>,Handler)AccountManagerFuture<Account[]> :: android.permission.GET_ACCOUNTS
android.app.ActivityClient.invalidateHomeTaskSnapshot(IBinder)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityManager.getProcessesInErrorState()List<ProcessErrorStateInfo> :: android.permission.DUMP
android.app.ActivityManager.setProcessStateSummary(byte[])void :: android.permission.DUMP
android.app.ActivityManager.addOnUidImportanceListener(OnUidImportanceListener,int)void :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.forceStopPackageAsUser(String,int)void :: android.permission.FORCE_STOP_PACKAGES
android.app.ActivityManager.handleIncomingUser(int,int,int,boolean,boolean,String,String)int :: android.permission.INTERACT_ACROSS_USERS,android.permission.INTERACT_ACROSS_USERS_FULL
android.app.ActivityManager.killProcessesWhenImperceptible(int[],String)void :: android.permission.FORCE_STOP_PACKAGES
android.app.ActivityManagerInternal.getAppProfileStatsForDebugging(long,int)Pair<String, :: android.permission.INTERACT_ACROSS_USERS,android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.INTERACT_ACROSS_PROFILES
android.app.AlarmManager.onAlarm()void :: android.permission.SCHEDULE_EXACT_ALARM
android.app.AppOpsManager.stopWatchingMode(OnOpChangedListener)void :: android.permission.WATCH_APPOPS
android.app.AppOpsManager.stopWatchingNoted(OnOpNotedListener)void :: android.permission.WATCH_APPOPS
android.app.AppOpsManager.setHistoryParameters(int,long,int)void :: android.permission.WATCH_APPOPS
android.app.DownloadManager.Request(Uri)Request(Uri :: android.permission.INTERNET
android.app.DownloadManager.setDestinationUri(Uri)Request :: android.permission.WRITE_EXTERNAL_STORAGE
android.app.DownloadManager.setDestinationInExternalPublicDir(String,String)Request :: android.permission.WRITE_EXTERNAL_STORAGE
android.app.GameManager.getGameMode(String)int :: android.permission.MANAGE_GAME_MODE
android.app.GameManager.setGameMode(String,int)void :: android.permission.MANAGE_GAME_MODE
android.app.GameManager.getAvailableGameModes(String)int[] :: android.permission.MANAGE_GAME_MODE
android.app.GameManager.isAngleEnabled(String)boolean :: android.permission.MANAGE_GAME_MODE
android.app.Notification.getGroup()String :: android.permission.VIBRATE
android.app.Notification.setFullScreenIntent(PendingIntent,boolean)Builder :: android.permission.USE_FULL_SCREEN_INTENT
android.app.NotificationManager.from(Context)NotificationManager :: android.permission.STATUS_BAR_SERVICE
android.app.Service.startForeground(int,Notification)void :: android.permission.FOREGROUND_SERVICE
android.app.WallpaperManager.setResource(int)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(Bitmap)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(Bitmap,Rect,boolean)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(InputStream)void :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(InputStream,Rect,boolean)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.suggestDesiredDimensions(int,int)void :: android.permission.SET_WALLPAPER_HINTS
android.app.WallpaperManager.setDisplayPadding(Rect)void :: android.permission.SET_WALLPAPER_HINTS
android.app.WallpaperManager.clearWallpaper()void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.clear()void :: android.permission.SET_WALLPAPER
android.app.admin.DelegatedAdminReceiver.onChoosePrivateKeyAlias(Context,Intent,int,Uri,String)String :: android.permission.BIND_DEVICE_ADMIN
android.app.admin.DeviceAdminReceiver.getManager(Context)DevicePolicyManager :: android.permission.BIND_DEVICE_ADMIN
android.app.admin.DevicePolicyManager.onInstallUpdateError(int,String)void :: android.permission.BIND_DEVICE_ADMIN,android.permission.DISPATCH_PROVISIONING_MESSAGE
android.app.admin.DevicePolicyManager.wipeData(int)void :: android.permission.MASTER_CLEAR
android.app.admin.DevicePolicyManager.wipeData(int,CharSequence)void :: android.permission.MASTER_CLEAR
android.app.admin.DevicePolicyManager.getFactoryResetProtectionPolicy(ComponentName)FactoryResetProtectionPolicy :: android.permission.MASTER_CLEAR
android.app.admin.DevicePolicyManager.sendLostModeLocationUpdate(Executor,Consumer<Boolean>)void :: android.permission.TRIGGER_LOST_MODE
android.app.admin.DevicePolicyManager.setAlwaysOnVpnPackage(ComponentName,String,boolean)void :: android.permission.BIND_VPN_SERVICE
android.app.admin.DevicePolicyManager.getNearbyNotificationStreamingPolicy(int)int :: android.permission.READ_NEARBY_STREAMING_POLICY
android.app.admin.DevicePolicyManager.getNearbyAppStreamingPolicy(int)int :: android.permission.READ_NEARBY_STREAMING_POLICY
android.app.admin.DevicePolicyManager.setDeviceProvisioningConfigApplied()void :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isDeviceProvisioningConfigApplied()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.bindDeviceAdminServiceAsUser(ComponentName,Intent,ServiceConnection,int,UserHandle)boolean :: android.permission.BIND_DEVICE_ADMIN
android.app.admin.DevicePolicyManager.getOwnerInstalledCaCerts(UserHandle)List<String> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.admin.DevicePolicyManager.createAndProvisionManagedProfile(ManagedProfileProvisioningParams)UserHandle :: android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
android.app.admin.DevicePolicyManager.finalizeWorkProfileProvisioning(UserHandle,Account)void :: android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
android.app.admin.DevicePolicyManager.resetDefaultCrossProfileIntentFilters(int)void :: android.permission.PROVISION_DEMO_DEVICE
android.app.job.JobInfo.getId()int :: android.permission.CONNECTIVITY_INTERNAL
android.app.timezone.RulesManager.getRulesState()RulesState :: android.permission.QUERY_TIME_ZONE_RULES,android.permission.UPDATE_TIME_ZONE_RULES
android.app.trust.TrustManager.reportUnlockAttempt(boolean,int)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.reportUserRequestedUnlock(int,boolean)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.reportUserMayRequestUnlock(int)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.reportUnlockLockout(int,int)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.reportEnabledTrustAgentsChanged(int)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.reportKeyguardShowingChanged()void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.registerTrustListener(TrustListener)void :: android.permission.TRUST_LISTENER
android.app.trust.TrustManager.unregisterTrustListener(TrustListener)void :: android.permission.TRUST_LISTENER
android.app.usage.UsageStatsManager.queryUsageStats(int,long,long)List<UsageStats> :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.queryConfigurations(int,long,long)List<ConfigurationStats> :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.queryEventStats(int,long,long)List<EventStats> :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.queryEvents(long,long)UsageEvents :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.queryAndAggregateUsageStats(long,long)Map<String, :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.isAppInactive(String)boolean :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.reportUsageStart(Activity,String,long)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.onCarrierPrivilegedAppsChanged()void :: android.permission.BIND_CARRIER_SERVICES
android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int,UserHandle,ComponentName,Bundle)boolean :: android.permission.BIND_APPWIDGET
android.companion.AssociationRequest.AssociationRequest(boolean,List<DeviceFilter<,String,CharSequence,boolean,boolean)AssociationRequest( :: android.permission.REQUEST_COMPANION_PROFILE_APP_STREAMING,android.permission.REQUEST_COMPANION_PROFILE_COMPUTER,android.permission.REQUEST_COMPANION_PROFILE_WATCH,android.permission.REQUEST_COMPANION_PROFILE_AUTOMOTIVE_PROJECTION
android.companion.CompanionDeviceManager.getAssociations()List<String> :: android.permission.REQUEST_COMPANION_USE_DATA_IN_BACKGROUND,android.permission.REQUEST_COMPANION_RUN_IN_BACKGROUND
android.companion.CompanionDeviceManager.isDeviceAssociatedForWifiConnection(String,MacAddress,UserHandle)boolean :: android.permission.MANAGE_COMPANION_DEVICES,android.permission.COMPANION_APPROVE_WIFI_CONNECTIONS
android.companion.CompanionDeviceManager.startObservingDevicePresence(String)void :: android.permission.REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE
android.companion.CompanionDeviceManager.stopObservingDevicePresence(String)void :: android.permission.REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE
android.companion.CompanionDeviceManager.dispatchMessage(int,int,byte[])void :: android.permission.DELIVER_COMPANION_MESSAGES
android.companion.CompanionDeviceService.onDeviceAppeared(String)void :: android.permission.BIND_COMPANION_DEVICE_SERVICE
android.companion.CompanionDeviceService.dispatchMessage(int,int,byte[])void :: android.permission.DELIVER_COMPANION_MESSAGES
android.companion.virtual.VirtualDeviceManager.createVirtualDevice(int,VirtualDeviceParams)VirtualDevice :: android.permission.CREATE_VIRTUAL_DEVICE
android.content.ContentResolver.registerContentObserver(Uri,boolean,ContentObserver,int)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.ContentResolver.getSyncAutomatically(Account,String)boolean :: android.permission.READ_SYNC_SETTINGS
android.content.ContentResolver.setSyncAutomatically(Account,String,boolean)void :: android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.addPeriodicSync(Account,String,Bundle,long)void :: android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.removePeriodicSync(Account,String,Bundle)void :: android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.cancelSync(SyncRequest)void :: android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.getPeriodicSyncs(Account,String)List<PeriodicSync> :: android.permission.READ_SYNC_SETTINGS
android.content.ContentResolver.getIsSyncable(Account,String)int :: android.permission.READ_SYNC_SETTINGS
android.content.ContentResolver.setIsSyncable(Account,String,int)void :: android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.getMasterSyncAutomatically()boolean :: android.permission.READ_SYNC_SETTINGS
android.content.ContentResolver.setMasterSyncAutomatically(boolean)void :: android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.isSyncActive(Account,String)boolean :: android.permission.READ_SYNC_STATS
android.content.ContentResolver.getCurrentSync()SyncInfo :: android.permission.READ_SYNC_STATS
android.content.ContentResolver.getCurrentSyncs()List<SyncInfo> :: android.permission.READ_SYNC_STATS
android.content.ContentResolver.isSyncPending(Account,String)boolean :: android.permission.READ_SYNC_STATS
android.content.Context.getAssets()AssetManager :: android.permission.START_ACTIVITIES_FROM_BACKGROUND
android.content.Context.getExternalFilesDir(String)File :: android.permission.READ_EXTERNAL_STORAGE,android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.getExternalFilesDirs(String)File[] :: android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.getObbDir()File :: android.permission.READ_EXTERNAL_STORAGE,android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.getObbDirs()File[] :: android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.getExternalCacheDir()File :: android.permission.READ_EXTERNAL_STORAGE,android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.getExternalCacheDirs()File[] :: android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.getExternalMediaDirs()File[] :: android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.setWallpaper(Bitmap)void :: android.permission.SET_WALLPAPER
android.content.Context.setWallpaper(InputStream)void :: android.permission.SET_WALLPAPER
android.content.Context.clearWallpaper()void :: android.permission.SET_WALLPAPER
android.content.Context.registerReceiver(BroadcastReceiver,IntentFilter)Intent :: android.permission.BROADCAST_STICKY
android.content.Intent.isAccessUriMode(int)boolean :: android.permission.RECEIVE_BOOT_COMPLETED,android.permission.SEND_SHOW_SUSPENDED_APP_DETAILS,android.permission.INTERACT_ACROSS_USERS,android.permission.MANAGE_USERS,android.permission.PROCESS_OUTGOING_CALLS,android.permission.REQUEST_INSTALL_PACKAGES,android.permission.BATTERY_STATS,android.permission.RECEIVE_MEDIA_RESOURCE_USAGE,android.permission.SUSPEND_APPS,android.permission.START_VIEW_PERMISSION_USAGE,android.permission.INSTALL_PACKAGES,android.permission.REQUEST_DELETE_PACKAGES,android.permission.CALL_PHONE,android.permission.START_VIEW_APP_FEATURES,android.permission.MASTER_CLEAR,android.permission.GRANT_RUNTIME_PERMISSIONS
android.content.RestrictionsManager.RestrictionsManager(Context,IRestrictionsManager)RestrictionsManager(Context :: android.permission.BIND_DEVICE_ADMIN
android.content.pm.ApplicationInfo.getCategoryTitle(Context,int)CharSequence :: android.permission.FACTORY_TEST
android.content.pm.CrossProfileApps.getTargetUserProfiles()List<UserHandle> :: android.permission.INTERACT_ACROSS_PROFILES,android.permission.START_CROSS_PROFILE_ACTIVITIES
android.content.pm.CrossProfileApps.canConfigureInteractAcrossProfiles(String)boolean :: android.permission.INTERACT_ACROSS_PROFILES,android.permission.INTERACT_ACROSS_USERS,android.permission.MANAGE_APP_OPS_MODES
android.content.pm.CrossProfileApps.canUserAttemptToConfigureInteractAcrossProfiles(String)boolean :: android.permission.INTERACT_ACROSS_PROFILES
android.content.pm.CrossProfileAppsInternal.setInteractAcrossProfilesAppOp(String,int,int)void :: android.permission.INTERACT_ACROSS_PROFILES
android.content.pm.PackageInfo.isOverlayPackage()boolean :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.content.pm.PackageInstaller.setRequireUserAction(int)void :: android.permission.REQUEST_INSTALL_PACKAGES,android.permission.UPDATE_PACKAGES_WITHOUT_USER_ACTION
android.content.pm.PackageManager.getInstallSourceInfo(String)InstallSourceInfo :: android.permission.DELETE_PACKAGES
android.content.pm.PackageManager.freeStorageAndNotify(long,IPackageDataObserver)void :: android.permission.INTERACT_ACROSS_USERS,android.permission.DELETE_CACHE_FILES
android.content.pm.PackageManager.getPackageSizeInfo(String,IPackageStatsObserver)void :: android.permission.GET_PACKAGE_SIZE
android.content.pm.PackageManager.setDistractingPackageRestrictions(String[],int)String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.canRequestPackageInstalls()boolean :: android.permission.REQUEST_INSTALL_PACKAGES
android.content.pm.PackageManagerInternal.getSuspendingPackage(String,int)String :: android.permission.SUSPEND_APPS,android.permission.MANAGE_USERS
android.content.pm.verify.domain.DomainVerificationManager.DomainVerificationManager(Context,IDomainVerificationManager)DomainVerificationManager(Context :: android.permission.UPDATE_DOMAIN_VERIFICATION_USER_SELECTION
android.hardware.Camera.getNumberOfCameras()int :: android.permission.CAMERA
android.hardware.Sensor.getHighestDirectReportRateLevel()int :: android.permission.HIGH_SAMPLING_RATE_SENSORS
android.hardware.Sensor.getMinDelay()int :: android.permission.HIGH_SAMPLING_RATE_SENSORS
android.hardware.SensorManager.SensorManager()SensorManager() :: android.permission.HIGH_SAMPLING_RATE_SENSORS
android.hardware.camera2.CameraCharacteristics.getKeysNeedingPermission()List<Key<?>> :: android.permission.CAMERA
android.hardware.camera2.CameraDevice.getId()String :: android.permission.CAMERA
android.hardware.camera2.CameraInjectionSession.close()void :: android.permission.CAMERA_INJECT_EXTERNAL_CAMERA
android.hardware.devicestate.DeviceStateManager.registerCallback(Executor,DeviceStateCallback)void :: android.permission.CONTROL_DEVICE_STATE
android.hardware.display.DisplayManager.startWifiDisplayScan()void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.hardware.display.DisplayManager.stopWifiDisplayScan()void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.hardware.display.DisplayManager.connectWifiDisplay(String)void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.hardware.display.DisplayManager.renameWifiDisplay(String,String)void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.hardware.display.DisplayManager.forgetWifiDisplay(String)void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.hardware.display.DisplayManager.setTemporaryBrightness(int,float)void :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.setTemporaryAutoBrightnessAdjustment(float)void :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManagerGlobal.setTemporaryBrightness(int,float)void :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManagerGlobal.setTemporaryAutoBrightnessAdjustment(float)void :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.hardware.hdmi.HdmiControlManager.HdmiControlManager(IHdmiControlService)HdmiControlManager(IHdmiControlService :: android.permission.HDMI_CEC
android.hardware.location.GeofenceHardware.getMonitoringTypes()int[] :: android.permission.LOCATION_HARDWARE
android.hardware.location.GeofenceHardware.addGeofence(int,int,GeofenceHardwareRequest,GeofenceHardwareCallback)boolean :: android.permission.ACCESS_FINE_LOCATION,android.permission.LOCATION_HARDWARE
android.hardware.location.GeofenceHardware.removeGeofence(int,int)boolean :: android.permission.ACCESS_FINE_LOCATION,android.permission.LOCATION_HARDWARE
android.hardware.location.GeofenceHardware.pauseGeofence(int,int)boolean :: android.permission.ACCESS_FINE_LOCATION,android.permission.LOCATION_HARDWARE
android.hardware.location.GeofenceHardware.resumeGeofence(int,int,int)boolean :: android.permission.ACCESS_FINE_LOCATION,android.permission.LOCATION_HARDWARE
android.hardware.location.GeofenceHardware.registerForMonitorStateChangeCallback(int,GeofenceHardwareMonitorCallback)boolean :: android.permission.ACCESS_FINE_LOCATION,android.permission.LOCATION_HARDWARE
android.hardware.location.GeofenceHardware.unregisterForMonitorStateChangeCallback(int,GeofenceHardwareMonitorCallback)boolean :: android.permission.ACCESS_FINE_LOCATION,android.permission.LOCATION_HARDWARE
android.hardware.usb.UsbManager.hasPermission(UsbDevice)boolean :: android.permission.CAMERA
android.hardware.usb.UsbManager.requestPermission(UsbDevice,PendingIntent)void :: android.permission.CAMERA
android.location.LocationManager.LocationManager(Context,ILocationManager)LocationManager(@NonNull :: android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.removeProximityAlert(PendingIntent)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.media.AudioDeviceInfo.enforceValidAudioDeviceTypeOut(int)void :: android.permission.CAPTURE_AUDIO_OUTPUT
android.media.AudioManager.startBluetoothSco()void :: android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioManager.setBluetoothScoOn(boolean)void :: android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioManager.registerAudioPolicy(AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setCommunicationDevice(AudioDeviceInfo)boolean :: android.permission.MODIFY_PHONE_STATE
android.media.AudioRecord.AudioRecord(int,int,int,int,int)AudioRecord(int :: android.permission.RECORD_AUDIO
android.media.MediaExtractor.MediaExtractor()class :: android.permission.INTERNET
android.media.MediaExtractor.setDataSource(Context,Uri,Map<String,String>)void :: android.permission.INTERNET
android.media.MediaExtractor.setDataSource(String,Map<String,String>)void :: android.permission.INTERNET
android.media.MediaExtractor.setDataSource(String)void :: android.permission.INTERNET
android.media.MediaPlayer.MediaPlayer()MediaPlayer() :: android.permission.INTERNET
android.media.MediaPlayer.setWakeMode(Context,int)void :: android.permission.WAKE_LOCK
android.media.MediaRecorder.isSystemOnlyAudioSource(int)boolean :: android.permission.CAPTURE_AUDIO_OUTPUT
android.media.MediaRouter.setRouterGroupId(String)void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.media.MediaRouter2Manager.getInstance(Context)MediaRouter2Manager :: android.permission.MEDIA_CONTENT_CONTROL
android.media.RingtoneManager.getCursor()Cursor :: android.permission.READ_EXTERNAL_STORAGE
android.media.RingtoneManager.getValidRingtoneUri(Context)Uri :: android.permission.READ_EXTERNAL_STORAGE
android.media.RingtoneManager.openRingtone(Context,Uri)InputStream :: android.permission.READ_EXTERNAL_STORAGE
android.media.audiofx.EnvironmentalReverb.EnvironmentalReverb(int,int)EnvironmentalReverb(int :: android.permission.MODIFY_AUDIO_SETTINGS
android.media.audiofx.PresetReverb.PresetReverb(int,int)PresetReverb(int :: android.permission.MODIFY_AUDIO_SETTINGS
android.media.audiofx.Visualizer.System.loadLibrary(audioeffect_jni)class :: android.permission.MODIFY_AUDIO_SETTINGS
android.media.projection.MediaProjectionManager.getMediaProjection(int,Intent)MediaProjection :: android.permission.SYSTEM_ALERT_WINDOW
android.media.session.MediaSessionManager.getActiveSessions(ComponentName)List<MediaController> :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.getMediaKeyEventSession()MediaSession.Token :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.getMediaKeyEventSessionPackageName()String :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.getSession2Tokens()List<Session2Token> :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.addOnActiveSessionsChangedListener(OnActiveSessionsChangedListener,ComponentName)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.addOnActiveSessionsChangedListener(OnActiveSessionsChangedListener,ComponentName,Handler)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.removeOnActiveSessionsChangedListener(OnActiveSessionsChangedListener)void :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.removeOnSession2TokensChangedListener(OnSession2TokensChangedListener)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.media.session.MediaSessionManager.isTrustedForMediaControl(RemoteUserInfo)boolean :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.addOnMediaKeyEventSessionChangedListener(Executor,OnMediaKeyEventSessionChangedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.soundtrigger.SoundTriggerDetector.getCaptureAudioFormat()AudioFormat :: android.permission.SOUND_TRIGGER_RUN_IN_BATTERY_SAVER
android.media.tv.TvInputService.createExtension()IBinder :: android.permission.BIND_TV_INPUT
android.media.tv.interactive.TvInteractiveAppService.onRegisterAppLinkInfo(AppLinkInfo)void :: android.permission.BIND_TV_INTERACTIVE_APP
android.net.VpnService.getService()IVpnManager :: android.permission.BIND_VPN_SERVICE
android.net.VpnService.prepareAndAuthorize(Context)void :: android.permission.CONTROL_VPN
android.net.rtp.AudioGroup.AudioGroup()AudioGroup() :: android.permission.RECORD_AUDIO
android.net.rtp.AudioStream.AudioStream(InetAddress)AudioStream(InetAddress :: android.permission.INTERNET
android.net.rtp.RtpStream.getLocalAddress()InetAddress :: android.permission.INTERNET
android.net.sip.SipAudioCall.onReadyToCall(SipAudioCall)void :: android.permission.ACCESS_WIFI_STATE,android.permission.MODIFY_AUDIO_SETTINGS,android.permission.WAKE_LOCK,android.permission.INTERNET,android.permission.USE_SIP,android.permission.RECORD_AUDIO
android.net.sip.SipAudioCall.setSpeakerMode(boolean)void :: android.permission.MODIFY_AUDIO_SETTINGS
android.net.sip.SipAudioCall.startAudio()void :: android.permission.RECORD_AUDIO,android.permission.ACCESS_WIFI_STATE,android.permission.WAKE_LOCK
android.net.sip.SipManager.newInstance(Context)SipManager :: android.permission.USE_SIP
android.nfc.NfcAdapter.onTagDiscovered(Tag)interface :: android.permission.NFC_PREFERRED_PAYMENT_INFO,android.permission.NFC_TRANSACTION_EVENT
android.nfc.NfcAdapter.setBeamPushUris(Uri[],Activity)void :: android.permission.NFC
android.nfc.NfcAdapter.setBeamPushUrisCallback(CreateBeamUrisCallback,Activity)void :: android.permission.NFC
android.nfc.NfcAdapter.setNdefPushMessage(NdefMessage,Activity,Activity)void :: android.permission.NFC
android.nfc.NfcAdapter.setNdefPushMessageCallback(CreateNdefMessageCallback,Activity,Activity)void :: android.permission.NFC
android.nfc.NfcAdapter.setOnNdefPushCompleteCallback(OnNdefPushCompleteCallback,Activity,Activity)void :: android.permission.NFC
android.nfc.NfcAdapter.enableForegroundDispatch(Activity,PendingIntent,IntentFilter[],String[][])void :: android.permission.NFC
android.nfc.NfcAdapter.disableForegroundDispatch(Activity)void :: android.permission.NFC
android.nfc.NfcAdapter.enableForegroundNdefPush(Activity,NdefMessage)void :: android.permission.NFC
android.nfc.NfcAdapter.disableForegroundNdefPush(Activity)void :: android.permission.NFC
android.nfc.NfcAdapter.dispatch(Tag)void :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.cardemulation.CardEmulation.isDefaultServiceForCategory(ComponentName,String)boolean :: android.permission.NFC
android.nfc.cardemulation.CardEmulation.isDefaultServiceForAid(ComponentName,String)boolean :: android.permission.NFC
android.nfc.cardemulation.HostNfcFService.sendResponsePacket(byte[])void :: android.permission.BIND_NFC_SERVICE
android.nfc.tech.IsoDep.get(Tag)IsoDep :: android.permission.NFC
android.nfc.tech.IsoDep.setTimeout(int)void :: android.permission.NFC
android.nfc.tech.IsoDep.getTimeout()int :: android.permission.NFC
android.nfc.tech.IsoDep.transceive(byte[])byte[] :: android.permission.NFC
android.nfc.tech.MifareClassic.get(Tag)MifareClassic :: android.permission.NFC
android.nfc.tech.MifareClassic.authenticateSectorWithKeyA(int,byte[])boolean :: android.permission.NFC
android.nfc.tech.MifareClassic.authenticateSectorWithKeyB(int,byte[])boolean :: android.permission.NFC
android.nfc.tech.MifareClassic.readBlock(int)byte[] :: android.permission.NFC
android.nfc.tech.MifareClassic.writeBlock(int,byte[])void :: android.permission.NFC
android.nfc.tech.MifareClassic.increment(int,int)void :: android.permission.NFC
android.nfc.tech.MifareClassic.decrement(int,int)void :: android.permission.NFC
android.nfc.tech.MifareClassic.transfer(int)void :: android.permission.NFC
android.nfc.tech.MifareClassic.restore(int)void :: android.permission.NFC
android.nfc.tech.MifareClassic.transceive(byte[])byte[] :: android.permission.NFC
android.nfc.tech.MifareClassic.setTimeout(int)void :: android.permission.NFC
android.nfc.tech.MifareClassic.getTimeout()int :: android.permission.NFC
android.nfc.tech.MifareUltralight.get(Tag)MifareUltralight :: android.permission.NFC
android.nfc.tech.MifareUltralight.readPages(int)byte[] :: android.permission.NFC
android.nfc.tech.MifareUltralight.writePage(int,byte[])void :: android.permission.NFC
android.nfc.tech.MifareUltralight.transceive(byte[])byte[] :: android.permission.NFC
android.nfc.tech.MifareUltralight.setTimeout(int)void :: android.permission.NFC
android.nfc.tech.MifareUltralight.getTimeout()int :: android.permission.NFC
android.nfc.tech.Ndef.get(Tag)Ndef :: android.permission.NFC
android.nfc.tech.Ndef.isWritable()boolean :: android.permission.NFC
android.nfc.tech.Ndef.getNdefMessage()NdefMessage :: android.permission.NFC
android.nfc.tech.Ndef.writeNdefMessage(NdefMessage)void :: android.permission.NFC
android.nfc.tech.Ndef.makeReadOnly()boolean :: android.permission.NFC
android.nfc.tech.NdefFormatable.get(Tag)NdefFormatable :: android.permission.NFC
android.nfc.tech.NdefFormatable.format(NdefMessage)void :: android.permission.NFC
android.nfc.tech.NdefFormatable.formatReadOnly(NdefMessage)void :: android.permission.NFC
android.nfc.tech.NfcA.get(Tag)NfcA :: android.permission.NFC
android.nfc.tech.NfcA.transceive(byte[])byte[] :: android.permission.NFC
android.nfc.tech.NfcA.setTimeout(int)void :: android.permission.NFC
android.nfc.tech.NfcA.getTimeout()int :: android.permission.NFC
android.nfc.tech.NfcB.get(Tag)NfcB :: android.permission.NFC
android.nfc.tech.NfcB.transceive(byte[])byte[] :: android.permission.NFC
android.nfc.tech.NfcF.get(Tag)NfcF :: android.permission.NFC
android.nfc.tech.NfcF.transceive(byte[])byte[] :: android.permission.NFC
android.nfc.tech.NfcF.setTimeout(int)void :: android.permission.NFC
android.nfc.tech.NfcF.getTimeout()int :: android.permission.NFC
android.nfc.tech.NfcV.get(Tag)NfcV :: android.permission.NFC
android.nfc.tech.NfcV.transceive(byte[])byte[] :: android.permission.NFC
android.nfc.tech.TagTechnology.getTag()Tag :: android.permission.NFC
android.nfc.tech.TagTechnology.connect()void :: android.permission.NFC
android.nfc.tech.TagTechnology.reconnect()void :: android.permission.NFC
android.nfc.tech.TagTechnology.close()void :: android.permission.NFC
android.os.BugreportManager.requestBugreport(BugreportParams,CharSequence,CharSequence)void :: android.permission.DUMP
android.os.Build.deriveFingerprint()String :: android.permission.BIND_DREAM_SERVICE,android.permission.READ_CALL_LOG,android.permission.READ_EXTERNAL_STORAGE,android.permission.FOREGROUND_SERVICE,android.permission.WRITE_CONTACTS,android.permission.BIND_ACCESSIBILITY_SERVICE,android.permission.READ_PHONE_STATE,android.permission.WRITE_CALL_LOG,android.permission.READ_CONTACTS,android.permission.WRITE_EXTERNAL_STORAGE
android.os.DropBoxManager.Entry(String,long)Entry(@NonNull :: android.permission.READ_LOGS
android.os.Environment.getExternalStorageDirectory()File :: android.permission.READ_EXTERNAL_STORAGE,android.permission.WRITE_EXTERNAL_STORAGE
android.os.Environment.isExternalStorageManager()boolean :: android.permission.MANAGE_EXTERNAL_STORAGE
android.os.Environment.isExternalStorageManager(File)boolean :: android.permission.MANAGE_EXTERNAL_STORAGE
android.os.Environment.maybeTranslateEmulatedPathToInternal(File)File :: android.permission.WRITE_MEDIA_STORAGE
android.os.FileUriExposedException.FileUriExposedException(String)class :: android.permission.READ_EXTERNAL_STORAGE
android.os.PowerManager.sleepReasonToString(int)String :: android.permission.DEVICE_POWER
android.os.PowerManager.locationPowerSaveModeToString(int)String :: android.permission.RECOVERY,android.permission.REBOOT
android.os.PowerManager.newWakeLock(int,String)WakeLock :: android.permission.WAKE_LOCK
android.os.PowerManager.userActivity(long,boolean)void :: android.permission.DEVICE_POWER
android.os.PowerManager.goToSleep(long)void :: android.permission.USER_ACTIVITY,android.permission.DEVICE_POWER
android.os.PowerManager.goToSleep(long,int,int)void :: android.permission.DEVICE_POWER
android.os.PowerManager.wakeUp(long)void :: android.permission.DEVICE_POWER
android.os.PowerManager.wakeUp(long,String)void :: android.permission.DEVICE_POWER
android.os.PowerManager.wakeUp(long,int,String)void :: android.permission.DEVICE_POWER
android.os.PowerManager.nap(long)void :: android.permission.DEVICE_POWER
android.os.PowerManager.boostScreenBrightness(long)void :: android.permission.READ_DREAM_STATE,android.permission.WRITE_DREAM_STATE,android.permission.DEVICE_POWER
android.os.PowerManager.reboot(String)void :: android.permission.REBOOT
android.os.PowerManager.rebootSafeMode()void :: android.permission.REBOOT
android.os.PowerManager.setDynamicPowerSaveHint(boolean,int)boolean :: android.permission.POWER_SAVER
android.os.PowerManager.getPowerSaveModeTrigger()int :: android.permission.POWER_SAVER
android.os.PowerManager.getBatteryDischargePrediction()Duration :: android.permission.BATTERY_PREDICTION,android.permission.DEVICE_POWER
android.os.PowerManager.getLastShutdownReason()int :: android.permission.DEVICE_POWER
android.os.PowerManager.forceSuspend()boolean :: android.permission.DEVICE_POWER
android.os.RecoverySystem.installPackage(Context,File)void :: android.permission.REBOOT
android.os.RecoverySystem.rebootWipeUserData(Context)void :: android.permission.REBOOT
android.os.RecoverySystem.rebootWipeUserData(Context,boolean,String,boolean,boolean)void :: android.permission.REBOOT
android.os.SystemUpdateManager.updateSystemUpdateInfo(PersistableBundle)void :: android.permission.RECOVERY,android.permission.READ_SYSTEM_UPDATE_INFO
android.os.UserManager.isUserForeground()boolean :: android.permission.INTERACT_ACROSS_USERS,android.permission.QUERY_USERS,android.permission.MANAGE_USERS
android.os.UserManager.createUser(String,int)UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.findCurrentGuestUser()UserInfo :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.convertUserIdsToUserHandles(int[])List<UserHandle> :: android.permission.QUERY_USERS,android.permission.CREATE_USERS,android.permission.MANAGE_USERS
android.os.UserManager.requestQuietModeEnabled(boolean,UserHandle,IntentSender)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.requestQuietModeEnabled(boolean,UserHandle,IntentSender,int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.getBadgedLabelForUser(CharSequence,UserHandle)CharSequence :: android.permission.INTERACT_ACROSS_USERS,android.permission.MANAGE_USERS
android.os.UserManager.isRemoveResultSuccessful(int)boolean :: android.permission.INTERACT_ACROSS_USERS,android.permission.MANAGE_USERS
android.os.health.SystemHealthManager.takeUidSnapshot(int)HealthStats :: android.permission.BATTERY_STATS
android.os.health.SystemHealthManager.takeUidSnapshots(int[])HealthStats[] :: android.permission.BATTERY_STATS
android.os.storage.StorageManager.getManageSpaceActivityIntent(String,int)PendingIntent :: android.permission.MANAGE_EXTERNAL_STORAGE
android.os.storage.StorageManager.getAllocatableBytes(UUID)long :: android.permission.ALLOCATE_AGGRESSIVE
android.os.storage.StorageManager.isAppIoBlocked(UUID,int,int,int)boolean :: android.permission.WRITE_MEDIA_STORAGE
android.os.storage.StorageVolume.StorageVolume(String,File,File,String,boolean,boolean,boolean,boolean,boolean,long,UserHandle,UUID,String,String)StorageVolume(String :: android.permission.READ_EXTERNAL_STORAGE,android.permission.WRITE_EXTERNAL_STORAGE
android.os.storage.StorageVolume.createAccessIntent(String)Intent :: android.permission.READ_EXTERNAL_STORAGE,android.permission.WRITE_EXTERNAL_STORAGE
android.os.storage.VolumeInfo.getInternalPathForUser(int)File :: android.permission.WRITE_MEDIA_STORAGE
android.permission.PermissionManager.PermissionManager(Context)PermissionManager(@NonNull :: android.permission.START_REVIEW_PERMISSION_DECISIONS
android.printservice.PrintService.onConnected()void :: android.permission.BIND_PRINT_SERVICE
android.provider.BlockedNumberContract.notifyEmergencyContact(Context)void :: android.permission.READ_BLOCKED_NUMBERS,android.permission.WRITE_BLOCKED_NUMBERS
android.provider.DocumentsProvider.attachInfo(Context,ProviderInfo)void :: android.permission.MANAGE_DOCUMENTS
android.provider.SearchIndexablesProvider.attachInfo(Context,ProviderInfo)void :: android.permission.READ_SEARCH_INDEXABLES
android.provider.Settings.setInSystemServer()void :: android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS,android.permission.PACKAGE_USAGE_STATS
android.provider.Settings.canDrawOverlays(Context)boolean :: android.permission.SYSTEM_ALERT_WINDOW
android.provider.Settings.canWrite(Context)boolean :: android.permission.WRITE_SETTINGS
android.provider.SimPhonebookContract.getEfUriPath(int)String :: android.permission.READ_CONTACTS,android.permission.WRITE_CONTACTS
android.provider.SimPhonebookContract.getContentUri(int,int)Uri :: android.permission.MODIFY_PHONE_STATE
android.provider.Telephony.Telephony()Telephony() :: android.permission.BROADCAST_SMS
android.provider.Telephony.getMessagesFromIntent(Intent)SmsMessage[] :: android.permission.RECEIVE_EMERGENCY_BROADCAST,android.permission.RECEIVE_WAP_PUSH,android.permission.RECEIVE_SMS,android.permission.BROADCAST_SMS,android.permission.BROADCAST_WAP_PUSH,android.permission.RECEIVE_MMS,android.permission.READ_PRIVILEGED_PHONE_STATE
android.provider.Telephony.CellBroadcasts()CellBroadcasts() :: android.permission.WRITE_APN_SETTINGS
android.provider.VoicemailContract.VoicemailContract()VoicemailContract() :: android.permission.ADD_VOICEMAIL
android.security.attestationverification.AttestationVerificationService.onVerifyPeerDeviceAttestation(Bundle,byte[])int :: android.permission.BIND_ATTESTATION_VERIFICATION_SERVICE
android.service.ambientcontext.AmbientContextDetectionService.startDetection(AmbientContextEventRequest,String,RemoteCallback,RemoteCallback)void :: android.permission.BIND_AMBIENT_CONTEXT_DETECTION_SERVICE
android.service.attention.AttentionService.checkAttention(IAttentionCallback)void :: android.permission.BIND_ATTENTION_SERVICE
android.service.autofill.AutofillService.onConnected()void :: android.permission.BIND_AUTOFILL_SERVICE
android.service.autofill.InlineSuggestionRenderService.measuredSize(View,int,int,Size,Size)Size :: android.permission.BIND_INLINE_SUGGESTION_RENDER_SERVICE
android.service.autofill.augmented.AugmentedAutofillService.onBind(Intent)IBinder :: android.permission.BIND_AUGMENTED_AUTOFILL_SERVICE
android.service.carrier.CarrierMessagingService.onFilterSms(MessagePdu,String,int,int,ResultCallback<Boolean>)void :: android.permission.BIND_CARRIER_SERVICES
android.service.carrier.CarrierService.onLoadConfig(CarrierIdentifier)PersistableBundle :: android.permission.BIND_CARRIER_SERVICES
android.service.chooser.ChooserTargetService.onGetChooserTargets(ComponentName,IntentFilter)List<ChooserTarget> :: android.permission.BIND_CHOOSER_TARGET_SERVICE
android.service.cloudsearch.CloudSearchService.onSearch(SearchRequest)void :: android.permission.MANAGE_CLOUDSEARCH
android.service.contentcapture.ContentCaptureService.onBind(Intent)IBinder :: android.permission.BIND_CONTENT_CAPTURE_SERVICE
android.service.contentsuggestions.ContentSuggestionsService.onBind(Intent)IBinder :: android.permission.BIND_CONTENT_SUGGESTIONS_SERVICE
android.service.dreams.DreamService.setDebug(boolean)void :: android.permission.BIND_DREAM_SERVICE
android.service.euicc.EuiccService.encodeSmdxSubjectAndReasonCode(String,String)int :: android.permission.BIND_EUICC_SERVICE
android.service.games.GameService.onConnected()void :: android.permission.BIND_GAME_SERVICE
android.service.games.GameSessionService.onNewSession(CreateGameSessionRequest)GameSession :: android.permission.BIND_GAME_SERVICE
android.service.notification.ConditionProviderService.requestRebind(ComponentName)void :: android.permission.ACCESS_NOTIFICATION_POLICY,android.permission.BIND_CONDITION_PROVIDER_SERVICE
android.service.notification.NotificationListenerService.onNotificationPosted(StatusBarNotification)void :: android.permission.BIND_NOTIFICATION_LISTENER_SERVICE
android.service.quickaccesswallet.QuickAccessWalletService.onWalletCardsRequested(GetWalletCardsRequest,GetWalletCardsCallback)void :: android.permission.BIND_QUICK_ACCESS_WALLET_SERVICE
android.service.resolver.ResolverRankerService.onPredictSharingProbabilities(List<ResolverTarget>)void :: android.permission.BIND_RESOLVER_RANKER_SERVICE
android.service.resumeonreboot.ResumeOnRebootService.onWrap(byte[],long)byte[] :: android.permission.BIND_RESUME_ON_REBOOT_SERVICE
android.service.rotationresolver.RotationResolverService.resolveRotation(IRotationResolverCallback,RotationResolutionRequest)void :: android.permission.BIND_ROTATION_RESOLVER_SERVICE
android.service.selectiontoolbar.SelectionToolbarRenderService.onShow(int,ShowInfo,RemoteCallbackWrapper)void :: android.permission.BIND_SELECTION_TOOLBAR_RENDER_SERVICE
android.service.storage.ExternalStorageService.onStartSession(String,int,ParcelFileDescriptor,File,File)void :: android.permission.BIND_EXTERNAL_STORAGE_SERVICE
android.service.textclassifier.TextClassifierService.onConnected()void :: android.permission.BIND_TEXTCLASSIFIER_SERVICE
android.service.timezone.TimeZoneProviderService.reportSuggestion(TimeZoneProviderSuggestion)void :: android.permission.BIND_TIME_ZONE_PROVIDER_SERVICE
android.service.translation.TranslationService.onConnected()void :: android.permission.BIND_TRANSLATION_SERVICE
android.service.trust.TrustAgentService.onUnlockAttempt(boolean)void :: android.permission.BIND_TRUST_AGENT
android.service.voice.AlwaysOnHotwordDetector.getStart()int :: android.permission.SOUND_TRIGGER_RUN_IN_BATTERY_SAVER
android.service.voice.HotwordDetectionService.getMaxCustomInitializationStatus()int :: android.permission.BIND_HOTWORD_DETECTION_SERVICE
android.service.voice.VoiceInteractionService.onLaunchVoiceAssistFromKeyguard()void :: android.permission.BIND_VOICE_INTERACTION
android.service.vr.VrListenerService.onCurrentVrActivityChanged(ComponentName)void :: android.permission.BIND_VR_LISTENER_SERVICE
android.service.wallpaper.WallpaperService.Engine()Engine() :: android.permission.BIND_WALLPAPER
android.service.wallpapereffectsgeneration.WallpaperEffectsGenerationService.onGenerateCinematicEffect(CinematicEffectRequest)void :: android.permission.BIND_WALLPAPER_EFFECTS_GENERATION
android.service.watchdog.ExplicitHealthCheckService.onRequestHealthCheck(String)void :: android.permission.BIND_EXPLICIT_HEALTH_CHECK_SERVICE
android.speech.SpeechRecognizer.SpeechRecognizer(Context,ComponentName)SpeechRecognizer(final :: android.permission.RECORD_AUDIO
android.telecom.Call.getContactDisplayName()String :: android.permission.READ_CONTACTS
android.telecom.Connection.VideoProviderHandler()class :: android.permission.CAMERA
android.telecom.TelecomManager.getSelfManagedPhoneAccounts()List<PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getOwnSelfManagedPhoneAccounts()List<PhoneAccountHandle> :: android.permission.MANAGE_OWN_CALLS
android.telecom.TelecomManager.getPhoneAccount(PhoneAccountHandle)PhoneAccount :: android.permission.READ_PHONE_NUMBERS
android.telecom.TelecomManager.isInCall()boolean :: android.permission.READ_SMS,android.permission.READ_PHONE_STATE,android.permission.READ_PHONE_NUMBERS
android.telecom.TelecomManager.hasManageOngoingCallsPermission()boolean :: android.permission.MANAGE_ONGOING_CALLS
android.telecom.TelecomManager.endCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.silenceRinger()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.addNewIncomingCall(PhoneAccountHandle,Bundle)void :: android.permission.MANAGE_OWN_CALLS
android.telecom.TelecomManager.addNewIncomingConference(PhoneAccountHandle,Bundle)void :: android.permission.MANAGE_OWN_CALLS
android.telecom.TelecomManager.showInCallScreen(boolean)void :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.startConference(List<Uri>,Bundle)void :: android.permission.CALL_PHONE,android.permission.MANAGE_OWN_CALLS
android.telecom.TelecomManager.acceptHandover(Uri,int,PhoneAccountHandle)void :: android.permission.MANAGE_OWN_CALLS
android.telephony.CarrierConfigManager.overrideConfig(int,PersistableBundle)void :: android.permission.READ_PHONE_STATE
android.telephony.CarrierConfigManager.isConfigForIdentifiedCarrier(PersistableBundle)boolean :: android.permission.READ_PHONE_STATE
android.telephony.CarrierConfigManager.updateConfigForPhoneId(int,String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.CellBroadcastService.onGsmCellBroadcastSms(int,byte[])void :: android.permission.BIND_CELL_BROADCAST_SERVICE
android.telephony.CellLocation.requestLocationUpdate()void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.telephony.NetworkRegistrationInfo.getCellIdentity()CellIdentity :: android.permission.ACCESS_FINE_LOCATION
android.telephony.PhoneStateListener.PhoneStateListener()PhoneStateListener() :: android.permission.ACCESS_FINE_LOCATION,android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onServiceStateChanged(ServiceState)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.telephony.PhoneStateListener.onDataConnectionStateChanged(int)void :: android.permission.READ_CALL_LOG,android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onPreciseDataConnectionStateChanged(PreciseDataConnectionState)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onDisplayInfoChanged(TelephonyDisplayInfo)void :: android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onRadioPowerStateChanged(int)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ServiceState.getIsManualSelection()boolean :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.telephony.ServiceState.isGsm(int)boolean :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.telephony.SignalStrengthUpdateRequest.setSystemThresholdReportingRequestedWhileIdle(boolean)Builder :: android.permission.LISTEN_ALWAYS_REPORTED_SIGNAL_STRENGTH
android.telephony.SmsManager.sendTextMessage(String,String,String,PendingIntent,PendingIntent)void :: android.permission.SEND_SMS
android.telephony.SmsManager.injectSmsPdu(byte[],String,PendingIntent)void :: android.permission.SEND_SMS,android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.sendMultipartTextMessage(String,String,ArrayList<String>,ArrayList<PendingIntent>,ArrayList<PendingIntent>)void :: android.permission.SEND_SMS
android.telephony.SmsManager.sendMultipartTextMessageWithoutPersisting(String,String,List<String>,List<PendingIntent>,List<PendingIntent>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.sendMultipartTextMessage(String,String,ArrayList<String>,ArrayList<PendingIntent>,ArrayList<PendingIntent>,int,boolean,int)void :: android.permission.SEND_SMS
android.telephony.SmsManager.sendDataMessage(String,String,short,byte[],PendingIntent,PendingIntent)void :: android.permission.SEND_SMS
android.telephony.SmsManager.enableCellBroadcastRange(int,int,int)boolean :: android.permission.RECEIVE_EMERGENCY_BROADCAST
android.telephony.SmsManager.disableCellBroadcastRange(int,int,int)boolean :: android.permission.RECEIVE_EMERGENCY_BROADCAST
android.telephony.SmsManager.getPremiumSmsConsent(String)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoForIcc(String)SubscriptionInfo :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getAllSubscriptionInfoList()List<SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getCompleteActiveSubscriptionInfoList()List<SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.requestEmbeddedSubscriptionInfoListRefresh()void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.SubscriptionManager.requestEmbeddedSubscriptionInfoListRefresh(int)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.SubscriptionManager.getActiveSubscriptionInfoCountMax()int :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getResourcesForSubId(Context,int)Resources :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.switchToSubscription(int,PendingIntent)void :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.isSubscriptionVisible(SubscriptionInfo)boolean :: android.permission.READ_PHONE_STATE,android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyCallback.init(Executor)void :: android.permission.READ_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyManager.getDeviceSoftwareVersion(int)String :: android.permission.SEND_RESPOND_VIA_MESSAGE,android.permission.READ_CALL_LOG,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isNetworkRoaming()boolean :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getNetworkTypeName()String :: android.permission.READ_BASIC_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setCarrierInfoForImsiEncryption(ImsiEncryptionInfo)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getGroupIdLevel1(int)String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setLine1NumberForDisplay(String,String)boolean :: android.permission.READ_SMS,android.permission.READ_PHONE_STATE,android.permission.READ_PHONE_NUMBERS
android.telephony.TelephonyManager.getVoiceMailNumber(int)String :: android.permission.READ_SMS,android.permission.READ_PHONE_STATE,android.permission.READ_PHONE_NUMBERS
android.telephony.TelephonyManager.setVisualVoicemailSmsFilterSettings(VisualVoicemailSmsFilterSettings)void :: android.permission.READ_PHONE_STATE,android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.sendVisualVoicemailSms(String,int,String,PendingIntent)void :: android.permission.SEND_SMS
android.telephony.TelephonyManager.setVoiceActivationState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setVoiceActivationState(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataActivationState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataActivationState(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getVoiceActivationState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getVoiceActivationState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDataActivationState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDataActivationState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailAlphaTag(int)String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getIsimDomain()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCallStateForSubscription()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getSubscriberInfo()IPhoneSubInfo :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDataActivity()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.iccOpenLogicalChannel(String)IccOpenLogicalChannelResponse :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccOpenLogicalChannelBySlot(int,String,int)IccOpenLogicalChannelResponse :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccOpenLogicalChannel(String,int)IccOpenLogicalChannelResponse :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccOpenLogicalChannel(int,String,int)IccOpenLogicalChannelResponse :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccCloseLogicalChannelBySlot(int,int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccCloseLogicalChannel(int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccCloseLogicalChannel(int,int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduLogicalChannelBySlot(int,int,int,int,int,int,int,String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduLogicalChannel(int,int,int,int,int,int,String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduLogicalChannel(int,int,int,int,int,int,int,String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduBasicChannelBySlot(int,int,int,int,int,int,String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduBasicChannel(int,int,int,int,int,String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduBasicChannel(int,int,int,int,int,int,String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccExchangeSimIO(int,int,int,int,int,String)byte[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccExchangeSimIO(int,int,int,int,int,int,String)byte[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.sendEnvelopeWithStatus(String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.sendEnvelopeWithStatus(int,String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.nvReadItem(int)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.nvWriteItem(int,String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.nvWriteCdmaPrl(byte[])boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.resetRadioConfig()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.rebootRadio()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.rebootModem()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getForbiddenPlmns(int,int)String[] :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.resetIms(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getPreferredNetworkTypeBitmask()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getAllowedNetworkTypesBitmask()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getAllowedNetworkTypes()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeManual(String,boolean,int)boolean :: android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION,android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeManual(OperatorInfo,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isInEmergencySmsMode()boolean :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyManager.setPreferredNetworkTypeBitmask(long)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyIccLockPin(String)PinResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyIccLockPuk(String,String)PinResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.sendUssdRequest(String,UssdResponseCallback,Handler)void :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.updateServiceLocation()void :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMobileProvisioningUrl()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaRoamingMode()int :: android.permission.ACCESS_NETWORK_STATE,android.permission.MODIFY_PHONE_STATE,android.permission.READ_BASIC_PHONE_STATE,android.permission.READ_PHONE_STATE,android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCdmaRoamingMode(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaSubscriptionMode()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCdmaSubscriptionMode(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataRoamingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerStateForSlot(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerState(int,Executor,Consumer<Integer>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerStateForSlot(int,int,Executor,Consumer<Integer>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getSimLocale()Locale :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getServiceStateForSubscriber(int,boolean,boolean)ServiceState :: android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setVoicemailRingtoneUri(PhoneAccountHandle,Uri)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setVoicemailVibrationEnabled(PhoneAccountHandle,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAidForAppType(int)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getTelephonyHistograms()List<TelephonyHistogram> :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAllowedCarriers(int,List<CarrierIdentifier>)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setCarrierRestrictionRules(CarrierRestrictionRules)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setCarrierDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadioEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setVoNrEnabled(boolean)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.reportDefaultNetworkStatus(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.resetAllCarrierActions()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabledForReason(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getClientRequestStats(int)List<ClientRequestStats> :: android.permission.ACCESS_NETWORK_STATE,android.permission.READ_BASIC_PHONE_STATE,android.permission.READ_PHONE_STATE,android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getSignalStrength()SignalStrength :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyManager.setCarrierTestOverride(String,String,String,String,String,String,String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setCarrierTestOverride(String,String,String,String,String,String,String,String,String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCarrierIdListVersion()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setOpportunisticNetworkState(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isOpportunisticNetworkEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.notifyOtaEmergencyNumberDbInstalled()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.updateOtaEmergencyNumberDbFilePath(ParcelFileDescriptor)void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.TelephonyManager.resetOtaEmergencyNumberDbFilePath()void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.TelephonyManager.getEmergencyNumberList()Map<Integer, :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyNumberList(int)Map<Integer, :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isPotentialEmergencyNumber(String)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyNumberDbVersion()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setPreferredOpportunisticDataSubscription(int,boolean,Executor,Consumer<Integer>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.enableModemForSlot(int,boolean)boolean :: android.permission.READ_PHONE_STATE,android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setMultiSimCarrierRestriction(boolean)void :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.doesSwitchMultiSimConfigTriggerReboot()boolean :: android.permission.READ_PHONE_STATE,android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getSystemSelectionChannels()List<RadioAccessSpecifier> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isIccLockEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setIccLockEnabled(boolean,String)PinResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.changeIccLockPin(String,String)PinResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getEquivalentHomePlmns()List<String> :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.registerTelephonyCallback(int,Executor,TelephonyCallback)void :: android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.isNetworkTypeValid(int)boolean :: android.permission.PERFORM_IMS_SINGLE_REGISTRATION,android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getPhoneCapability()PhoneCapability :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.prepareForUnattendedReboot()int :: android.permission.REBOOT
android.telephony.TelephonyManager.onCarrierServiceChanged(String,int)void :: android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyScanManager.requestNetworkScan(int,boolean,NetworkScanRequest,Executor,NetworkScanCallback,String,String)NetworkScan :: android.permission.ACCESS_FINE_LOCATION,android.permission.MODIFY_PHONE_STATE
android.telephony.VisualVoicemailService.finish()void :: android.permission.BIND_VISUAL_VOICEMAIL_SERVICE
android.telephony.VisualVoicemailService.setSmsFilterSettings(Context,PhoneAccountHandle,VisualVoicemailSmsFilterSettings)void :: android.permission.READ_PHONE_STATE
android.telephony.VisualVoicemailService.sendVisualVoicemailSms(Context,PhoneAccountHandle,String,short,String,PendingIntent)void :: android.permission.SEND_SMS
android.telephony.euicc.EuiccManager.EuiccManager(Context)EuiccManager(Context :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getOtaStatus()int :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.continueOperation(Intent,Bundle)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getDownloadableSubscriptionMetadata(DownloadableSubscription,PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getDefaultDownloadableSubscriptionList(PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.retainSubscriptionsForFactoryReset(PendingIntent)void :: android.permission.MASTER_CLEAR
android.telephony.gba.GbaService.GbaService()GbaService() :: android.permission.BIND_GBA_SERVICE
android.telephony.ims.ImsMmTelManager.ImsMmTelManager(int,BinderCacheManager<ITelephony>)ImsMmTelManager(int :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.unregisterImsRegistrationCallback(RegistrationCallback)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getRegistrationState(Executor,Consumer<Integer>)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setAdvancedCallingSettingEnabled(boolean)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.unregisterImsStateCallback(ImsStateCallback)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsRcsManager.registerImsRegistrationCallback(Executor,RegistrationManager.RegistrationCallback)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsRcsManager.unregisterImsRegistrationCallback(RegistrationManager.RegistrationCallback)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsRcsManager.getRegistrationState(Executor,Consumer<Integer>)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsRcsManager.getRegistrationTransportType(Executor,Consumer<Integer>)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsRcsManager.unregisterImsStateCallback(ImsStateCallback)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ProvisioningManager.registerProvisioningChangedCallback(Executor,Callback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.unregisterProvisioningChangedCallback(Callback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.registerFeatureProvisioningChangedCallback(Executor,FeatureProvisioningCallback)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ProvisioningManager.setProvisioningStatusForCapability(int,int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.getProvisioningStatusForCapability(int,int)boolean :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ProvisioningManager.getRcsProvisioningStatusForCapability(int,int)boolean :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ProvisioningManager.setRcsProvisioningStatusForCapability(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.setRcsProvisioningStatusForCapability(int,int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.isProvisioningRequiredForCapability(int,int)boolean :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ProvisioningManager.isRcsProvisioningRequiredForCapability(int,int)boolean :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ProvisioningManager.triggerRcsReconfiguration()void :: android.permission.PERFORM_IMS_SINGLE_REGISTRATION,android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.SipDelegateManager.unregisterImsStateCallback(ImsStateCallback)void :: android.permission.READ_PRECISE_PHONE_STATE
android.view.View.View(Context)View(Context :: android.permission.START_TASKS_FROM_RECENTS
android.view.WindowManager.isSystemAlertWindowType(int)boolean :: android.permission.SYSTEM_ALERT_WINDOW
android.view.WindowManager.setTrustedOverlay()void :: android.permission.INTERNAL_SYSTEM_WINDOW
android.view.WindowManager.isSystemApplicationOverlay()boolean :: android.permission.SYSTEM_APPLICATION_OVERLAY
android.view.inputmethod.InputMethod.initializeInternal(IBinder,IInputMethodPrivilegedOperations,int,boolean,int)void :: android.permission.BIND_INPUT_METHOD
android.view.inputmethod.InputMethodManager.ensureDefaultInstanceForDefaultDisplayIfNecessary()void :: android.permission.BIND_INPUT_METHOD
android.view.inputmethod.InputMethodManager.setInputMethod(IBinder,String)void :: android.permission.WRITE_SECURE_SETTINGS
android.view.inputmethod.InputMethodManager.setInputMethodAndSubtype(IBinder,String,InputMethodSubtype)void :: android.permission.WRITE_SECURE_SETTINGS
android.view.inputmethod.InputMethodManager.setCurrentInputMethodSubtype(InputMethodSubtype)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.view.textservice.SpellCheckerSession.SpellCheckerSession(SpellCheckerInfo,TextServicesManager,SpellCheckerSessionListener,Executor)SpellCheckerSession( :: android.permission.BIND_TEXT_SERVICE
android.webkit.WebSettings.setBlockNetworkLoads(boolean)void :: android.permission.INTERNET
android.webkit.WebSettings.setGeolocationEnabled(boolean)void :: android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.window.WindowContainerTransaction.merge(WindowContainerTransaction,boolean)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.WindowOrganizer.startTransition(int,IBinder,WindowContainerTransaction)IBinder :: android.permission.MANAGE_ACTIVITY_TASKS
com.android.internal.inputmethod.InputBindResult.getVirtualDisplayToScreenMatrix()Matrix :: android.permission.INTERACT_ACROSS_USERS_FULL
com.android.internal.telephony.SmsPermissions.checkCallingOrSelfCanGetSmscAddress(String,String)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.SmsPermissions.checkCallingOrSelfCanSetSmscAddress(String,String)boolean :: android.permission.MODIFY_PHONE_STATE
com.android.internal.telephony.SubscriptionController.createSubscriptionGroup(int[],String)ParcelUuid :: android.permission.MODIFY_PHONE_STATE
com.android.internal.telephony.SubscriptionController.removeSubscriptionsFromGroup(int[],ParcelUuid,String)void :: android.permission.MODIFY_PHONE_STATE
com.android.internal.telephony.SubscriptionController.getSubscriptionsInGroup(ParcelUuid,String,String)List<SubscriptionInfo> :: android.permission.READ_PHONE_STATE
com.android.internal.telephony.TelephonyPermissions.enforceCallingOrSelfReadPhoneStatePermissionOrCarrierPrivilege(Context,int,String)void :: android.permission.READ_PHONE_STATE
com.android.internal.telephony.TelephonyPermissions.enforceCallingOrSelfReadPrivilegedPhoneStatePermissionOrCarrierPrivilege(Context,int,String)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.TelephonyPermissions.enforceCallingOrSelfReadPrecisePhoneStatePermissionOrCarrierPrivilege(Context,int,String)void :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
com.android.internal.telephony.util.TelephonyUtils.checkDumpPermission(Context,String,PrintWriter)boolean :: android.permission.DUMP
com.android.internal.util.DumpUtils.checkDumpPermission(Context,String,PrintWriter)boolean :: android.permission.DUMP
com.android.internal.util.DumpUtils.checkUsageStatsPermission(Context,String,PrintWriter)boolean :: android.permission.PACKAGE_USAGE_STATS
com.android.internal.util.DumpUtils.checkDumpAndUsageStatsPermission(Context,String,PrintWriter)boolean :: android.permission.DUMP,android.permission.PACKAGE_USAGE_STATS
com.android.internal.widget.LockPatternUtils.requireCredentialEntry(int)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.internal.widget.LockPatternUtils.requireStrongAuth(int,int)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.media.tv.remoteprovider.TvRemoteProvider.TvRemoteProvider(Context)TvRemoteProvider(Context :: android.permission.BIND_TV_REMOTE_SERVICE
com.android.nfc_extras.NfcAdapterExtras.initService(NfcAdapter)void :: android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcAdapterExtras.get(NfcAdapter)NfcAdapterExtras :: android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcAdapterExtras.getCardEmulationRoute()CardEmulationRoute :: android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcAdapterExtras.setCardEmulationRoute(CardEmulationRoute)void :: android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcAdapterExtras.getEmbeddedExecutionEnvironment()NfcExecutionEnvironment :: android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcExecutionEnvironment.open()void :: android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcExecutionEnvironment.close()void :: android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcExecutionEnvironment.transceive(byte[])byte[] :: android.permission.WRITE_SECURE_SETTINGS
com.android.server.TelephonyRegistry.isActiveDataSubIdReadPhoneStateEnforcedInPlatformCompat(String,UserHandle)boolean :: android.permission.READ_PHONE_STATE
com.android.server.TelephonyRegistry.isCellInfoReadPhoneStateEnforcedInPlatformCompat(String,UserHandle)boolean :: android.permission.READ_PHONE_STATE
com.android.server.TelephonyRegistry.isDisplayInfoReadPhoneStateEnforcedInPlatformCompat(String,UserHandle)boolean :: android.permission.READ_PHONE_STATE
com.android.server.TelephonyRegistry.notifyDisplayInfoChanged(int,int,TelephonyDisplayInfo)void :: android.permission.READ_PHONE_STATE
com.android.server.am.UserController.stopGuestOrEphemeralUserIfBackground(int)void :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.MANAGE_USERS
com.android.server.am.UserController.maybeUnlockUser(int)boolean :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.MANAGE_USERS
com.android.server.app.GameManagerService.getAvailableGameModes(String)int[] :: android.permission.MANAGE_GAME_MODE
com.android.server.app.GameManagerService.getGameMode(String,int)int :: android.permission.MANAGE_GAME_MODE
com.android.server.app.GameManagerService.getGameModeInfo(String,int)GameModeInfo :: android.permission.MANAGE_GAME_MODE
com.android.server.app.GameManagerService.setGameMode(String,int,int)void :: android.permission.MANAGE_GAME_MODE
com.android.server.app.GameManagerService.isAngleEnabled(String,int)boolean :: android.permission.MANAGE_GAME_MODE
com.android.server.app.GameManagerService.setGameServiceProvider(String)void :: android.permission.SET_GAME_SERVICE
com.android.server.backup.BackupPasswordManager.usePbkdf2Fallback()boolean :: android.permission.BACKUP
com.android.server.camera.CameraServiceProxy.setDeviceStateFlags(int)void :: android.permission.CAMERA_SEND_SYSTEM_EVENTS
com.android.server.camera.CameraServiceProxy.clearDeviceStateFlags(int)void :: android.permission.CAMERA_SEND_SYSTEM_EVENTS
com.android.server.job.controllers.QuotaController.clearAppStatsLocked(int,String)void :: android.permission.INSTALL_PACKAGES
com.android.server.locales.LocaleManagerService.notifyRegisteredReceivers(String,int,LocaleList)void :: android.permission.READ_APP_SPECIFIC_LOCALES
com.android.server.media.MediaServerUtils.checkDumpPermission(Context,String,PrintWriter)boolean :: android.permission.DUMP
com.android.server.pm.BroadcastHelper.doSendBroadcast(String,String,Bundle,int,String,IIntentReceiver,int[],boolean,SparseArray<int[]>,Bundle)void :: android.permission.ACCESS_INSTANT_APPS
com.android.server.pm.ComputerEngine.canViewInstantApps(int,int)boolean :: android.permission.ACCESS_INSTANT_APPS
com.android.server.pm.UserManagerInternal.removeUserEvenWhenDisallowed(int)boolean :: android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(int,String)void :: android.permission.INTERACT_ACROSS_USERS,android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.checkQueryOrInteractPermissionIfCallerInOtherProfileGroup(int,String)void :: android.permission.INTERACT_ACROSS_USERS,android.permission.QUERY_USERS,android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.getUserRestrictionSource(String,int)int :: android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.checkManageUserAndAcrossUsersFullPermission(String)void :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.checkManageUsersPermission(String)void :: android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.checkCreateUsersPermission(String)void :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.checkQueryUsersPermission(String)void :: android.permission.QUERY_USERS,android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.checkQueryOrCreateUsersPermission(String)void :: android.permission.QUERY_USERS,android.permission.CREATE_USERS,android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.checkCreateUsersPermission(int)void :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.hasManageUsersPermission()boolean :: android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.hasManageUsersPermission(int)boolean :: android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.hasManageUsersOrPermission(String)boolean :: android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.hasCreateUsersPermission()boolean :: android.permission.CREATE_USERS,android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.hasQueryUsersPermission()boolean :: android.permission.QUERY_USERS,android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.hasQueryOrCreateUsersPermission()boolean :: android.permission.QUERY_USERS,android.permission.CREATE_USERS,android.permission.MANAGE_USERS
com.android.server.pm.dex.ArtManagerService.checkShellPermissions(int,String,int)boolean :: android.permission.READ_RUNTIME_PROFILES
com.android.server.policy.PhoneWindowManager.adjustConfigurationLw(Configuration,int,int)void :: android.permission.INTERNAL_SYSTEM_WINDOW
com.android.server.usage.StorageStatsService.enforceCratesPermission(int,String)void :: android.permission.MANAGE_CRATES
com.android.server.usage.UsageStatsService.shouldObfuscateNotificationEvents(int,int)boolean :: android.permission.MANAGE_NOTIFICATIONS
com.android.server.vibrator.VibratorManagerService.enforceUpdateAppOpsStatsPermission(int)void :: android.permission.UPDATE_APP_OPS_STATS
com.android.server.vr.Vr2dDisplay.setVirtualDisplayProperties(Vr2dDisplayProperties)void :: android.permission.ACCESS_VR_MANAGER
com.android.server.vr.VrManagerInternal.setVr2dDisplayProperties(Vr2dDisplayProperties)void :: android.permission.ACCESS_VR_MANAGER
com.android.server.wm.ActivityClientController.invalidateHomeTaskSnapshot(IBinder)void :: android.permission.MANAGE_ACTIVITY_TASKS
com.android.server.wm.WindowManagerService.requestAssistScreenshot(IAssistDataReceiver)boolean :: android.permission.MODIFY_TOUCH_MODE_STATE
com.android.server.wm.WindowState.getRequestedVisibility(int)boolean :: android.permission.INTERNAL_SYSTEM_WINDOW
com.android.server.wm.WindowToken.isFirstChildWindowGreaterThanSecond(WindowState,WindowState)boolean :: android.permission.MANAGE_APP_TOKENS
com.android.settingslib.bluetooth.BluetoothEventManager.registerCallback(BluetoothCallback)void :: android.permission.INTERACT_ACROSS_USERS_FULL
com.android.settingslib.bluetooth.LocalBluetoothManager.create(Context,Handler,UserHandle)LocalBluetoothManager :: android.permission.INTERACT_ACROSS_USERS_FULL
com.android.systemui.shared.system.ActivityManagerWrapper.invalidateHomeTaskSnapshot(Activity)void :: android.permission.MANAGE_ACTIVITY_TASKS
com.android.systemui.statusbar.tv.notifications.TvNotificationPanel.startNotificationHandlerActivity(Intent)void :: android.permission.STATUS_BAR_SERVICE
com.android.wm.shell.pip.PipBoundsState.onConfigurationChanged()void :: android.permission.SET_UNRESTRICTED_KEEP_CLEAR_AREAS
