android.accessibilityservice.AccessibilityService.getFingerprintGestureController()FingerprintGestureController :: android.permission.USE_FINGERPRINT
android.accounts.AccountManager.finishSessionAsUser(Bundle,Activity,UserHandle,AccountManagerCallback<Bundle>,Handler)AccountManagerFuture<Bundle> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.Activity.registerRemoteAnimations(RemoteAnimationDefinition)void :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.Activity.unregisterRemoteAnimations()void :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.ActivityManager.moveTaskToFront(int,int)void :: android.permission.REORDER_TASKS
android.app.ActivityManager.moveTaskToFront(int,int,Bundle)void :: android.permission.REORDER_TASKS
android.app.ActivityManager.clearApplicationUserData(String,IPackageDataObserver)boolean :: android.permission.CLEAR_APP_USER_DATA,android.permission.ACCESS_INSTANT_APPS
android.app.ActivityManager.getPackageImportance(String)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.getUidImportance(int)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.addOnUidImportanceListener(OnUidImportanceListener,int)void :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.removeOnUidImportanceListener(OnUidImportanceListener)void :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.killBackgroundProcesses(String)void :: android.permission.KILL_BACKGROUND_PROCESSES
android.app.ActivityManager.killUid(int,String)void :: android.permission.KILL_UID
android.app.ActivityManager.forceStopPackage(String)void :: android.permission.FORCE_STOP_PACKAGES
android.app.ActivityManager.getCurrentUser()int :: android.permission.INTERACT_ACROSS_USERS,android.permission.INTERACT_ACROSS_USERS_FULL
android.app.ActivityManager.switchUser(UserHandle)boolean :: android.permission.MANAGE_USERS
android.app.ActivityManager.updateMccMncConfiguration(String,String)boolean :: android.permission.CHANGE_CONFIGURATION
android.app.ActivityManager.dumpPackageState(FileDescriptor,String)void :: android.permission.DUMP
android.app.ActivityManager.setPersistentVrThread(int)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.ActivityManager.scheduleApplicationInfoChanged(List<String>,int)void :: android.permission.CHANGE_CONFIGURATION
android.app.ActivityManager.isProfileForeground(UserHandle)boolean :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.app.ActivityManager.killProcessesWhenImperceptible(int[],String)void :: android.permission.FORCE_STOP_PACKAGES
android.app.ActivityOptions.makeRemoteAnimation(RemoteAnimationAdapter)ActivityOptions :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.ActivityTaskManager.setTaskWindowingMode(int,int,boolean)boolean :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.setTaskWindowingModeSplitScreenPrimary(int,int,boolean,boolean,Rect,boolean)boolean :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.removeStacksInWindowingModes(int[])void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.removeStacksWithActivityTypes(int[])void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.removeAllVisibleRecentTasks()void :: android.permission.REMOVE_TASKS
android.app.ActivityTaskManager.moveTopActivityToPinnedStack(int,Rect)boolean :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.startSystemLockTaskMode(int)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.stopSystemLockTaskMode()void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.moveTaskToStack(int,int,boolean)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.resizeTask(int,Rect)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.resizeDockedStack(Rect,Rect)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.listAllStacks()String :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.clearLaunchParamsForPackages(List<String>)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.setDisplayToSingleTaskInstance(int)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.requestPictureInPictureMode(IBinder)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.AlarmManager.set(int,long,long,long,PendingIntent,WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.app.AlarmManager.set(int,long,long,long,OnAlarmListener,Handler,WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.app.AlarmManager.setTime(long)void :: android.permission.SET_TIME
android.app.AlarmManager.setTimeZone(String)void :: android.permission.SET_TIME_ZONE
android.app.AppOpsManager.getPackagesForOps(String[])List<AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getPackagesForOps(int[])List<AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getOpsForPackage(int,String,int[])List<PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getOpsForPackage(int,String,String...)List<AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getHistoricalOps(HistoricalOpsRequest,Executor,Consumer<HistoricalOps>)void :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getHistoricalOpsFromDiskRaw(HistoricalOpsRequest,Executor,Consumer<HistoricalOps>)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.reloadNonHistoricalState()void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.setUidMode(int,int,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setUidMode(String,int,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setMode(int,int,String,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setMode(String,int,String,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setRestriction(int,int,int,String[])void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.resetAllModes()void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.startWatchingMode(int,String,OnOpChangedListener)void :: android.permission. conditional=true,android.permission.WATCH_APPOPS
android.app.AppOpsManager.startWatchingMode(int,String,int,OnOpChangedListener)void :: android.permission. conditional=true,android.permission.WATCH_APPOPS
android.app.AppOpsManager.startWatchingActive(String[],Executor,OnOpActiveChangedListener)void :: android.permission. conditional=true,android.permission.WATCH_APPOPS
android.app.AppOpsManager.startWatchingStarted(int[],OnOpStartedListener)void :: android.permission. conditional=true,android.permission.WATCH_APPOPS
android.app.AppOpsManager.startWatchingNoted(int[],OnOpNotedListener)void :: android.permission. conditional=true,android.permission.WATCH_APPOPS
android.app.AppOpsManager.isOperationActive(int,int,String)boolean :: android.permission. conditional=true,android.permission.WATCH_APPOPS
android.app.AppOpsManager.setHistoryParameters(int,long,int)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.offsetHistory(long)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.addHistoricalOps(HistoricalOps)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.resetHistoryParameters()void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.clearHistory()void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.rebootHistory(long)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.collectRuntimeAppOpAccessMessage()RuntimeAppOpAccessMessage :: android.permission.GET_APP_OPS_STATS
android.app.BroadcastOptions.setTemporaryAppWhitelistDuration(long)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.app.BroadcastOptions.setBackgroundActivityStartsAllowed(boolean)void :: android.permission.START_ACTIVITIES_FROM_BACKGROUND
android.app.DownloadManager.onMediaStoreDownloadsDeleted(LongSparseArray<String>)void :: android.permission.WRITE_MEDIA_STORAGE
android.app.DreamManager.startDream(ComponentName)void :: android.permission.WRITE_DREAM_STATE
android.app.DreamManager.stopDream()void :: android.permission.WRITE_DREAM_STATE
android.app.DreamManager.setActiveDream(ComponentName)void :: android.permission.WRITE_DREAM_STATE
android.app.DreamManager.isDreaming()boolean :: android.permission.READ_DREAM_STATE
android.app.KeyguardManager.setPrivateNotificationsAllowed(boolean)void :: android.permission.CONTROL_KEYGUARD_SECURE_NOTIFICATIONS
android.app.KeyguardManager.getPrivateNotificationsAllowed()boolean :: android.permission.CONTROL_KEYGUARD_SECURE_NOTIFICATIONS
android.app.KeyguardManager.disableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.reenableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.requestDismissKeyguard(Activity,CharSequence,KeyguardDismissCallback)void :: android.permission.SHOW_KEYGUARD_MESSAGE
android.app.KeyguardManager.exitKeyguardSecurely(OnKeyguardExitResult)void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.isValidLockPasswordComplexity(int,byte[],int)boolean :: android.permission.SET_INITIAL_LOCK
android.app.KeyguardManager.getMinLockLength(boolean,int)int :: android.permission.SET_INITIAL_LOCK
android.app.KeyguardManager.setLock(int,byte[],int)boolean :: android.permission.SET_INITIAL_LOCK
android.app.StatsManager.addConfig(long,byte[])void :: android.permission.PACKAGE_USAGE_STATS,android.permission.DUMP
android.app.StatsManager.addConfiguration(long,byte[])boolean :: android.permission.PACKAGE_USAGE_STATS,android.permission.DUMP
android.app.StatsManager.removeConfig(long)void :: android.permission.PACKAGE_USAGE_STATS,android.permission.DUMP
android.app.StatsManager.removeConfiguration(long)boolean :: android.permission.PACKAGE_USAGE_STATS,android.permission.DUMP
android.app.StatsManager.setBroadcastSubscriber(PendingIntent,long,long)void :: android.permission.PACKAGE_USAGE_STATS,android.permission.DUMP
android.app.StatsManager.setBroadcastSubscriber(long,long,PendingIntent)boolean :: android.permission.PACKAGE_USAGE_STATS,android.permission.DUMP
android.app.StatsManager.setFetchReportsOperation(PendingIntent,long)void :: android.permission.PACKAGE_USAGE_STATS,android.permission.DUMP
android.app.StatsManager.setActiveConfigsChangedOperation(PendingIntent)long[] :: android.permission.PACKAGE_USAGE_STATS,android.permission.DUMP
android.app.StatsManager.setDataFetchOperation(long,PendingIntent)boolean :: android.permission.PACKAGE_USAGE_STATS,android.permission.DUMP
android.app.StatsManager.getReports(long)byte[] :: android.permission.PACKAGE_USAGE_STATS,android.permission.DUMP
android.app.StatsManager.getData(long)byte[] :: android.permission.PACKAGE_USAGE_STATS,android.permission.DUMP
android.app.StatsManager.getStatsMetadata()byte[] :: android.permission.PACKAGE_USAGE_STATS,android.permission.DUMP
android.app.StatsManager.getMetadata()byte[] :: android.permission.PACKAGE_USAGE_STATS,android.permission.DUMP
android.app.StatsManager.getRegisteredExperimentIds()long[] :: android.permission.PACKAGE_USAGE_STATS,android.permission.DUMP
android.app.StatsManager.setPullAtomCallback(int,PullAtomMetadata,Executor,StatsPullAtomCallback)void :: android.permission.REGISTER_STATS_PULL_ATOM
android.app.StatsManager.clearPullAtomCallback(int)void :: android.permission.REGISTER_STATS_PULL_ATOM
android.app.StatusBarManager.setDisabledForSetup(boolean)void :: android.permission.STATUS_BAR
android.app.StatusBarManager.setDisabledForSimNetworkLock(boolean)void :: android.permission.STATUS_BAR
android.app.StatusBarManager.getDisableInfo()DisableInfo :: android.permission.STATUS_BAR
android.app.UiModeManager.e.rethrowFromSystemServer(){ :: android.permission.enableCarMode(flags,android.permission.getOpPackageName());,android.permission.priority
android.app.VrManager.registerVrStateCallback(Executor,VrStateCallback)void :: android.permission.ACCESS_VR_STATE,android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.unregisterVrStateCallback(VrStateCallback)void :: android.permission.ACCESS_VR_STATE,android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.isVrModeEnabled()boolean :: android.permission.ACCESS_VR_STATE,android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.isPersistentVrModeEnabled()boolean :: android.permission.ACCESS_VR_STATE,android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setPersistentVrModeEnabled(boolean)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setVr2dDisplayProperties(Vr2dDisplayProperties)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setAndBindVrCompositor(ComponentName)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setStandbyEnabled(boolean)void :: android.permission.ACCESS_VR_MANAGER
android.app.VrManager.setVrInputMethod(ComponentName)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.getVr2dDisplayId()int :: android.permission.RESTRICTED_VR_ACCESS
android.app.WallpaperManager.getFastDrawable()Drawable :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.peekFastDrawable()Drawable :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.wallpaperSupportsWcg(int)boolean :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.getWallpaperFile(int)ParcelFileDescriptor :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.setResource(int)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setResource(int,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(Bitmap)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(Bitmap,Rect,boolean)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(Bitmap,Rect,boolean,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(InputStream)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(InputStream,Rect,boolean)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(InputStream,Rect,boolean,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setDisplayPadding(Rect)void :: android.permission.SET_WALLPAPER_HINTS
android.app.WallpaperManager.clearWallpaper()void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.clearWallpaper(int,int)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.WallpaperManager.setWallpaperComponent(ComponentName)boolean :: android.permission.SET_WALLPAPER_COMPONENT
android.app.WallpaperManager.setWallpaperComponent(ComponentName,int)boolean :: android.permission.SET_WALLPAPER_COMPONENT
android.app.WallpaperManager.clear()void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.clear(int)void :: android.permission.SET_WALLPAPER
android.app.admin.DevicePolicyManager.packageHasActiveAdmins(String)boolean :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.admin.DevicePolicyManager.getPasswordComplexity()int :: android.permission.REQUEST_PASSWORD_COMPLEXITY
android.app.admin.DevicePolicyManager.getDeviceOwnerComponentOnAnyUser()ComponentName :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwnerUser()UserHandle :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwner()String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwnerNameOnAnyUser()String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setActiveProfileOwner(ComponentName,String)boolean :: android.permission.MANAGE_DEVICE_ADMINS
android.app.admin.DevicePolicyManager.getProfileOwnerAsUser(UserHandle)ComponentName :: android.permission.INTERACT_ACROSS_USERS,android.permission.
            conditional = true
android.app.admin.DevicePolicyManager.getProfileOwnerNameAsUser(int)String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getBluetoothContactSharingDisabled(UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.app.admin.DevicePolicyManager.getPermittedAccessibilityServices(int)List<String> :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getPermittedInputMethodsForCurrentUser()List<String> :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long)void :: android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long,boolean)void :: android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManager.getUserProvisioningState()int :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isDeviceProvisioned()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setDeviceProvisioningConfigApplied()void :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isDeviceProvisioningConfigApplied()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setProfileOwnerCanAccessDeviceIds(ComponentName)void :: android.permission.
            conditional = true,android.permission.GRANT_PROFILE_OWNER_DEVICE_IDS_ACCESS
android.app.admin.DevicePolicyManager.markProfileOwnerOnOrganizationOwnedDevice(ComponentName)void :: android.permission.MARK_DEVICE_ORGANIZATION_OWNED,android.permission.
            conditional = true
android.app.admin.DevicePolicyManager.getAllCrossProfilePackages()Set<String> :: android.permission.INTERACT_ACROSS_USERS,android.permission.INTERACT_ACROSS_PROFILES,android.permission.INTERACT_ACROSS_USERS_FULL
android.app.admin.DevicePolicyManager.isManagedKiosk()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isUnattendedManagedKiosk()boolean :: android.permission.MANAGE_USERS
android.app.backup.BackupManager.beginRestoreSession()RestoreSession :: android.permission.BACKUP
android.app.backup.BackupManager.setBackupEnabled(boolean)void :: android.permission.BACKUP
android.app.backup.BackupManager.isBackupEnabled()boolean :: android.permission.BACKUP
android.app.backup.BackupManager.isBackupServiceActive(UserHandle)boolean :: android.permission.BACKUP
android.app.backup.BackupManager.setAutoRestore(boolean)void :: android.permission.BACKUP
android.app.backup.BackupManager.getCurrentTransport()String :: android.permission.BACKUP
android.app.backup.BackupManager.getCurrentTransportComponent()ComponentName :: android.permission.BACKUP
android.app.backup.BackupManager.listAllTransports()String[] :: android.permission.BACKUP
android.app.backup.BackupManager.updateTransportAttributes(ComponentName,String,Intent,String,Intent,String)void :: android.permission.BACKUP
android.app.backup.BackupManager.updateTransportAttributes(ComponentName,String,Intent,String,Intent,CharSequence)void :: android.permission.BACKUP
android.app.backup.BackupManager.selectBackupTransport(String)String :: android.permission.BACKUP
android.app.backup.BackupManager.selectBackupTransport(ComponentName,SelectBackupTransportCallback)void :: android.permission.BACKUP
android.app.backup.BackupManager.backupNow()void :: android.permission.BACKUP
android.app.backup.BackupManager.getAvailableRestoreToken(String)long :: android.permission.BACKUP
android.app.backup.BackupManager.isAppEligibleForBackup(String)boolean :: android.permission.BACKUP
android.app.backup.BackupManager.requestBackup(String[],BackupObserver)int :: android.permission.BACKUP
android.app.backup.BackupManager.requestBackup(String[],BackupObserver,BackupManagerMonitor,int)int :: android.permission.BACKUP
android.app.backup.BackupManager.cancelBackups()void :: android.permission.BACKUP
android.app.backup.BackupManager.setAncestralSerialNumber(long)void :: android.permission.BACKUP
android.app.backup.BackupManager.getConfigurationIntent(String)Intent :: android.permission.BACKUP
android.app.backup.BackupManager.getDestinationString(String)String :: android.permission.BACKUP
android.app.backup.BackupManager.getDataManagementIntent(String)Intent :: android.permission.BACKUP
android.app.backup.BackupManager.getDataManagementLabel(String)String :: android.permission.BACKUP
android.app.backup.BackupManager.getDataManagementIntentLabel(String)CharSequence :: android.permission.BACKUP
android.app.backup.BackupManager.excludeKeysFromRestore(String,List<String>)void :: android.permission.BACKUP
android.app.compat.CompatChanges.isChangeEnabled(long,String,UserHandle)boolean :: android.permission.READ_COMPAT_CHANGE_CONFIG,android.permission.LOG_COMPAT_CHANGE
android.app.compat.CompatChanges.isChangeEnabled(long,int)boolean :: android.permission.READ_COMPAT_CHANGE_CONFIG,android.permission.LOG_COMPAT_CHANGE
android.app.job.JobInfo.setPersisted(boolean)Builder :: android.permission.RECEIVE_BOOT_COMPLETED
android.app.job.JobScheduler.scheduleAsPackage(JobInfo,String,int,String)int :: android.permission.UPDATE_DEVICE_STATS
android.app.role.RoleControllerManager.isApplicationQualifiedForRole(String,String,Executor,Consumer<Boolean>)void :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleControllerManager.isApplicationVisibleForRole(String,String,Executor,Consumer<Boolean>)void :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleControllerManager.isRoleVisible(String,Executor,Consumer<Boolean>)void :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleManager.getRoleHolders(String)List<String> :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleManager.getRoleHoldersAsUser(String,UserHandle)List<String> :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleManager.addRoleHolderAsUser(String,String,int,UserHandle,Executor,Consumer<Boolean>)void :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleManager.removeRoleHolderAsUser(String,String,int,UserHandle,Executor,Consumer<Boolean>)void :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleManager.clearRoleHoldersAsUser(String,int,UserHandle,Executor,Consumer<Boolean>)void :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleManager.addOnRoleHoldersChangedListenerAsUser(Executor,OnRoleHoldersChangedListener,UserHandle)void :: android.permission.OBSERVE_ROLE_HOLDERS
android.app.role.RoleManager.removeOnRoleHoldersChangedListenerAsUser(OnRoleHoldersChangedListener,UserHandle)void :: android.permission.OBSERVE_ROLE_HOLDERS
android.app.role.RoleManager.setRoleNamesFromController(List<String>)void :: android.permission.PERMISSION_MANAGE_ROLES_FROM_CONTROLLER
android.app.role.RoleManager.addRoleHolderFromController(String,String)boolean :: android.permission.PERMISSION_MANAGE_ROLES_FROM_CONTROLLER
android.app.role.RoleManager.removeRoleHolderFromController(String,String)boolean :: android.permission.PERMISSION_MANAGE_ROLES_FROM_CONTROLLER
android.app.role.RoleManager.getHeldRolesFromController(String)List<String> :: android.permission.PERMISSION_MANAGE_ROLES_FROM_CONTROLLER
android.app.timedetector.TimeDetector.suggestTelephonyTime(TelephonyTimeSuggestion)void :: android.permission.SUGGEST_TELEPHONY_TIME_AND_ZONE
android.app.timedetector.TimeDetector.suggestManualTime(ManualTimeSuggestion)void :: android.permission.SUGGEST_MANUAL_TIME_AND_ZONE
android.app.timedetector.TimeDetector.suggestNetworkTime(NetworkTimeSuggestion)void :: android.permission.SET_TIME
android.app.timezonedetector.TimeZoneDetector.suggestManualTimeZone(ManualTimeZoneSuggestion)void :: android.permission.SUGGEST_MANUAL_TIME_AND_ZONE
android.app.timezonedetector.TimeZoneDetector.suggestTelephonyTimeZone(TelephonyTimeZoneSuggestion)void :: android.permission.SUGGEST_TELEPHONY_TIME_AND_ZONE
android.app.trust.TrustManager.setDeviceLockedForUser(int,boolean)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.isTrustUsuallyManaged(int)boolean :: android.permission.TRUST_LISTENER
android.app.trust.TrustManager.unlockedByBiometricForUser(int,BiometricSourceType)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.clearAllBiometricRecognized(BiometricSourceType)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.usage.NetworkStatsManager.registerNetworkStatsProvider(String,NetworkStatsProvider)void :: android.permission.PERMISSION_MAINLINE_NETWORK_STACK,android.permission.NETWORK_STATS_PROVIDER
android.app.usage.NetworkStatsManager.unregisterNetworkStatsProvider(NetworkStatsProvider)void :: android.permission.PERMISSION_MAINLINE_NETWORK_STACK,android.permission.NETWORK_STATS_PROVIDER
android.app.usage.StorageStatsManager.queryCratesForUser(UUID,UserHandle)Collection<CrateInfo> :: android.permission.MANAGE_CRATES
android.app.usage.UsageStatsManager.getAppStandbyBucket(String)int :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.setAppStandbyBucket(String,int)void :: android.permission.CHANGE_APP_IDLE_STATE
android.app.usage.UsageStatsManager.getAppStandbyBuckets()Map<String, :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.setAppStandbyBuckets(Map<String,Integer>)void :: android.permission.CHANGE_APP_IDLE_STATE
android.app.usage.UsageStatsManager.registerAppUsageObserver(int,String[],long,TimeUnit,PendingIntent)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.unregisterAppUsageObserver(int)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.registerUsageSessionObserver(int,String[],Duration,Duration,PendingIntent,PendingIntent)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.unregisterUsageSessionObserver(int)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.registerAppUsageLimitObserver(int,String[],Duration,Duration,PendingIntent)void :: android.permission.OBSERVE_APP_USAGE,android.permission.SUSPEND_APPS
android.app.usage.UsageStatsManager.unregisterAppUsageLimitObserver(int)void :: android.permission.OBSERVE_APP_USAGE,android.permission.SUSPEND_APPS
android.app.usage.UsageStatsManager.whitelistAppTemporarily(String,long,UserHandle)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.app.usage.UsageStatsManager.onCarrierPrivilegedAppsChanged()void :: android.permission.BIND_CARRIER_SERVICES
android.bluetooth.BluetoothA2dp.connect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dp.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dp.setActiveDevice(BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dp.getActiveDevice()BluetoothDevice :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.setPriority(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dp.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dp.getPriority(BluetoothDevice)int :: android.permission.P,android.permission. trackingBug = 115609023
android.bluetooth.BluetoothA2dp.getConnectionPolicy(BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dp.getCodecStatus(BluetoothDevice)BluetoothCodecStatus :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.setCodecConfigPreference(BluetoothDevice,BluetoothCodecConfig)void :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.enableOptionalCodecs(BluetoothDevice)void :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.disableOptionalCodecs(BluetoothDevice)void :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.isOptionalCodecsSupported(BluetoothDevice)int :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dp.isOptionalCodecsEnabled(BluetoothDevice)int :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dp.setOptionalCodecsEnabled(BluetoothDevice,int)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dpSink.getServiceInterface(IBinder)) :: android.permission.getName(,android.permission.A2DP_SINK,android.permission.CONNECTION_STATE_CHANGED";

    private BluetoothAdapter mAdapter;
    private final BluetoothProfileConnector<IBluetoothA2dpSink> mProfileConnector =
            new BluetoothProfileConnector(this,android.permission.
                    "BluetoothA2dpSink"
android.bluetooth.BluetoothA2dpSink.connect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dpSink.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dpSink.setPriority(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dpSink.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dpSink.getPriority(BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dpSink.getConnectionPolicy(BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dpSink.isAudioPlaying(BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.isEnabled()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getLeState()} :: android.permission.BLUETOOTH)
    @AdapterState
    @UnsupportedAppUsage(publicAlternatives = "Use {@link #getState(
android.bluetooth.BluetoothAdapter.enable()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.disable()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getAddress()String :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.factoryReset()boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.getUuids()ParcelUuid[] :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.setName(String)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getBluetoothClass()BluetoothClass :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.setBluetoothClass(BluetoothClass)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.getIoCapability()int :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.setIoCapability(int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.getLeIoCapability()int :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.setLeIoCapability(int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.getScanMode()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.setScanMode(int,long)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.setScanMode(int)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getDiscoveryEndMillis()long :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.startDiscovery()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.cancelDiscovery()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.isDiscovering()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.removeActiveDevice(int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.setActiveDevice(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.connectAllEnabledProfiles(BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.disconnectAllEnabledProfiles(BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.getMaxConnectedAudioDevices()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getMostRecentlyConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getBondedDevices()Set<BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getProfileConnectionState(int)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(String,UUID)BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(String,UUID)BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.enableNoAutoConnect()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.startLeScan(LeScanCallback)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.startLeScan(UUID[],LeScanCallback)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.stopLeScan(LeScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.listenUsingL2capChannel()BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingInsecureL2capChannel()BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.addOnMetadataChangedListener(BluetoothDevice,Executor,OnMetadataChangedListener)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.removeOnMetadataChangedListener(BluetoothDevice,OnMetadataChangedListener)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.getName()String :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getType()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getAlias()String :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setAlias(String)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getBatteryLevel()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createBond()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.isBondingInitiatedLocally()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.cancelBondProcess()boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.removeBond()boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.getBondState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.isConnected()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.isEncrypted()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getBluetoothClass()BluetoothClass :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getUuids()ParcelUuid[] :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.fetchUuidsWithSdp()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setPin(String)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.setPairingConfirmation(boolean)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.cancelPairing()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.getPhonebookAccessPermission()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setSilenceMode(boolean)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.isInSilenceMode()boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.setPhonebookAccessPermission(int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.getMessageAccessPermission()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setMessageAccessPermission(int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.getSimAccessPermission()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setSimAccessPermission(int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.createRfcommSocketToServiceRecord(UUID)BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createInsecureRfcommSocketToServiceRecord(UUID)BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createL2capChannel(int)BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createInsecureL2capChannel(int)BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setMetadata(int,byte[])boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.getMetadata(int)byte[] :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHeadset.connect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.setPriority(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHeadset.getPriority(BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadset.getConnectionPolicy(BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHeadset.startScoUsingVirtualVoiceCall()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.stopScoUsingVirtualVoiceCall()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.setActiveDevice(BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.getActiveDevice()BluetoothDevice :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadset.isInbandRingingEnabled()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadsetClient.setPriority(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHeadsetClient.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHeadsetClient.getPriority(BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadsetClient.getConnectionPolicy(BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHearingAid.connect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHearingAid.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHearingAid.getActiveDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHearingAid.setPriority(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHearingAid.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHearingAid.getPriority(BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHearingAid.getConnectionPolicy(BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHearingAid.getHiSyncId(BluetoothDevice)long :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHearingAid.getDeviceSide(BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHearingAid.getDeviceMode(BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHidDevice.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHidHost.connect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHidHost.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHidHost.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHidHost.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHidHost.setPriority(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHidHost.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHidHost.getPriority(BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHidHost.getConnectionPolicy(BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothManager.getConnectionState(BluetoothDevice,int)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.getConnectedDevices(int)List<BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.getDevicesMatchingConnectionStates(int,int[])List<BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothMap.finalize()void :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.close()void :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.setPriority(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.getPriority(BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.getConnectionPolicy(BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMapClient.connect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMapClient.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMapClient.setPriority(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMapClient.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMapClient.getPriority(BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMapClient.getConnectionPolicy(BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPan.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPan.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPan.getDevicesMatchingConnectionStates(int[])List<BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothPan.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPan.setBluetoothTethering(boolean)void :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPan.isTetheringOn()boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbap.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbap.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbapClient.connect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbapClient.disconnect(BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbapClient.setPriority(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbapClient.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbapClient.getPriority(BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbapClient.getConnectionPolicy(BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothProfile.getConnectedDevices()List<BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getDevicesMatchingConnectionStates(int[])List<BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getConnectionState(BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothSap.setPriority(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothSap.setConnectionPolicy(BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothSap.getPriority(BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothSap.getConnectionPolicy(BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.le.BluetoothLeScanner.startScan(ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScan(List<ScanFilter>,ScanSettings,ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScan(List<ScanFilter>,ScanSettings,PendingIntent)int :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(WorkSource,ScanCallback)void :: android.permission.UPDATE_DEVICE_STATS,android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(List<ScanFilter>,ScanSettings,WorkSource,ScanCallback)void :: android.permission.UPDATE_DEVICE_STATS,android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.stopScan(ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.stopScan(PendingIntent)void :: android.permission.BLUETOOTH_ADMIN
android.companion.CompanionDeviceManager.isDeviceAssociatedForWifiConnection(String,MacAddress,UserHandle)boolean :: android.permission.MANAGE_COMPANION_DEVICES
android.content.ContentProviderClient.setDetectNotResponding(long)void :: android.permission.REMOVE_TASKS
android.content.ContentResolver.putCache(Uri,Bundle)void :: android.permission.CACHE_CONTENT
android.content.ContentResolver.getCache(Uri)Bundle :: android.permission.CACHE_CONTENT
android.content.Context.startActivityAsUser(Intent,UserHandle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.startActivityAsUser(Intent,Bundle,UserHandle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.startActivitiesAsUser(Intent[],Bundle,UserHandle)int :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(Intent,UserHandle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(Intent,UserHandle,String)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(Intent,UserHandle,String,Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(Intent,UserHandle,String,int)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(Intent,UserHandle,String,BroadcastReceiver,Handler,int,String,Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(Intent,UserHandle,String,int,BroadcastReceiver,Handler,int,String,Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(Intent,UserHandle,String,int,Bundle,BroadcastReceiver,Handler,int,String,Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendStickyBroadcast(Intent)void :: android.permission.BROADCAST_STICKY
android.content.Context.sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)void :: android.permission.BROADCAST_STICKY
android.content.Context.removeStickyBroadcast(Intent)void :: android.permission.BROADCAST_STICKY
android.content.Context.sendStickyBroadcastAsUser(Intent,UserHandle)void :: android.permission.INTERACT_ACROSS_USERS,android.permission.BROADCAST_STICKY
android.content.Context.sendStickyBroadcastAsUser(Intent,UserHandle,Bundle)void :: android.permission.INTERACT_ACROSS_USERS,android.permission.BROADCAST_STICKY
android.content.Context.sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)void :: android.permission.INTERACT_ACROSS_USERS,android.permission.BROADCAST_STICKY
android.content.Context.removeStickyBroadcastAsUser(Intent,UserHandle)void :: android.permission.INTERACT_ACROSS_USERS,android.permission.BROADCAST_STICKY
android.content.Context.registerReceiverForAllUsers(BroadcastReceiver,IntentFilter,String,Handler)Intent :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.registerReceiverAsUser(BroadcastReceiver,UserHandle,IntentFilter,String,Handler)Intent :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startForegroundServiceAsUser(Intent,UserHandle)ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.startServiceAsUser(Intent,UserHandle)ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.stopServiceAsUser(Intent,UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.bindServiceAsUser(Intent,ServiceConnection,int,UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS,android.permission.INTERACT_ACROSS_PROFILES
android.content.Context.bindServiceAsUser(Intent,ServiceConnection,int,Handler,UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS)
    @UnsupportedAppUsage(trackingBug = 136728678
android.content.om.OverlayManager.setEnabledExclusiveInCategory(String,UserHandle)void :: android.permission.INTERACT_ACROSS_USERS,android.permission.INTERACT_ACROSS_USERS_FULL
android.content.om.OverlayManager.setEnabled(String,boolean,UserHandle)void :: android.permission.INTERACT_ACROSS_USERS,android.permission.INTERACT_ACROSS_USERS_FULL
android.content.om.OverlayManager.getOverlayInfosForTarget(String,UserHandle)List<OverlayInfo> :: android.permission.INTERACT_ACROSS_USERS,android.permission.INTERACT_ACROSS_USERS_FULL
android.content.om.OverlayManager.invalidateCachesForOverlay(String,UserHandle)void :: android.permission.INTERACT_ACROSS_USERS,android.permission.
android.content.pm.CrossProfileApps.startActivity(Intent,UserHandle,Activity)void :: android.permission.INTERACT_ACROSS_USERS,android.permission.INTERACT_ACROSS_PROFILES
android.content.pm.CrossProfileApps.startActivity(Intent,UserHandle,Activity,Bundle)void :: android.permission.INTERACT_ACROSS_USERS,android.permission.INTERACT_ACROSS_PROFILES
android.content.pm.CrossProfileApps.startActivity(ComponentName,UserHandle)void :: android.permission.INTERACT_ACROSS_PROFILES
android.content.pm.CrossProfileApps.setInteractAcrossProfilesAppOp(String,int)void :: android.permission.INTERACT_ACROSS_USERS,android.permission.CONFIGURE_INTERACT_ACROSS_PROFILES
android.content.pm.CrossProfileApps.resetInteractAcrossProfilesAppOps(Collection<String>,Set<String>)void :: android.permission.INTERACT_ACROSS_USERS,android.permission.CONFIGURE_INTERACT_ACROSS_PROFILES
android.content.pm.CrossProfileApps.clearInteractAcrossProfilesAppOps()void :: android.permission.INTERACT_ACROSS_USERS,android.permission.CONFIGURE_INTERACT_ACROSS_PROFILES
android.content.pm.LauncherApps.cacheShortcuts(String,List<String>,UserHandle,int)void :: android.permission.ACCESS_SHORTCUTS
android.content.pm.LauncherApps.uncacheShortcuts(String,List<String>,UserHandle,int)void :: android.permission.ACCESS_SHORTCUTS
android.content.pm.PackageInstaller.uninstall(String,IntentSender)void :: android.permission.DELETE_PACKAGES,android.permission.REQUEST_DELETE_PACKAGES
android.content.pm.PackageInstaller.uninstall(VersionedPackage,IntentSender)void :: android.permission.DELETE_PACKAGES,android.permission.REQUEST_DELETE_PACKAGES
android.content.pm.PackageInstaller.uninstall(VersionedPackage,int,IntentSender)void :: android.permission.DELETE_PACKAGES,android.permission.REQUEST_DELETE_PACKAGES
android.content.pm.PackageInstaller.installExistingPackage(String,int,IntentSender)void :: android.permission.INSTALL_PACKAGES,android.permission.INSTALL_EXISTING_PACKAGES
android.content.pm.PackageInstaller.uninstallExistingPackage(String,IntentSender)void :: android.permission.DELETE_PACKAGES
android.content.pm.PackageInstaller.setPermissionsResult(int,boolean)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller.getDataLoaderParams()DataLoaderParams :: android.permission.USE_INSTALLER_V2
android.content.pm.PackageInstaller.addFile(int,String,long,byte[],byte[])void :: android.permission.USE_INSTALLER_V2
android.content.pm.PackageInstaller.removeFile(int,String)void :: android.permission.USE_INSTALLER_V2
android.content.pm.PackageInstaller.commitTransferred(IntentSender)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller.setGrantedRuntimePermissions(String[])void :: android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageInstaller.setAllocateAggressive(boolean)void :: android.permission.ALLOCATE_AGGRESSIVE
android.content.pm.PackageInstaller.setStaged()void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller.setInstallAsApex()void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller.setDataLoaderParams(DataLoaderParams)void :: android.permission.USE_INSTALLER_V2,android.permission.INSTALL_PACKAGES
android.content.pm.PackageManager.getPackageInfoAsUser(String,int,int)PackageInfo :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.getApplicationInfoAsUser(String,int,UserHandle)ApplicationInfo :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.getInstalledPackagesAsUser(int,int)List<PackageInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.grantRuntimePermission(String,String,UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.revokeRuntimePermission(String,String,UserHandle)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.revokeRuntimePermission(String,String,UserHandle,String)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.getPermissionFlags(String,String,UserHandle)int :: android.permission.GRANT_RUNTIME_PERMISSIONS,android.permission.REVOKE_RUNTIME_PERMISSIONS,android.permission.GET_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.updatePermissionFlags(String,String,int,int,UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS,android.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.getWhitelistedRestrictedPermissions(String,int)Set<String> :: android.permission.
            conditional = true,android.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.content.pm.PackageManager.addWhitelistedRestrictedPermission(String,String,int)boolean :: android.permission.
            conditional = true,android.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.content.pm.PackageManager.removeWhitelistedRestrictedPermission(String,String,int)boolean :: android.permission.
        conditional = true,android.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.content.pm.PackageManager.setAutoRevokeWhitelisted(String,boolean)boolean :: android.permission.
            conditional = true,android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONS
android.content.pm.PackageManager.isAutoRevokeWhitelisted(String)boolean :: android.permission.
            conditional = true,android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONS
android.content.pm.PackageManager.getInstantApps()List<InstantAppInfo> :: android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManager.getInstantAppIcon(String)Drawable :: android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManager.getDeclaredSharedLibraries(String,int)List<SharedLibraryInfo> :: android.permission.ACCESS_SHARED_LIBRARIES
android.content.pm.PackageManager.queryIntentActivitiesAsUser(Intent,int,UserHandle)List<ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.queryBroadcastReceiversAsUser(Intent,int,UserHandle)List<ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.queryIntentServicesAsUser(Intent,int,UserHandle)List<ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.queryIntentContentProvidersAsUser(Intent,int,UserHandle)List<ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.installExistingPackageAsUser(String,int)int :: android.permission.INSTALL_PACKAGES,android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.INSTALL_EXISTING_PACKAGES
android.content.pm.PackageManager.verifyIntentFilter(int,int,List<String>)void :: android.permission.INTENT_FILTER_VERIFICATION_AGENT
android.content.pm.PackageManager.getIntentVerificationStatusAsUser(String,int)int :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.updateIntentVerificationStatusAsUser(String,int,int)boolean :: android.permission.SET_PREFERRED_APPLICATIONS
android.content.pm.PackageManager.getDefaultBrowserPackageNameAsUser(int)String :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.setDefaultBrowserPackageNameAsUser(String,int)boolean :: android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.SET_PREFERRED_APPLICATIONS
android.content.pm.PackageManager.setUpdateAvailable(String,boolean)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageManager.deletePackage(String,IPackageDeleteObserver,int)void :: android.permission.DELETE_PACKAGES
android.content.pm.PackageManager.deletePackageAsUser(String,IPackageDeleteObserver,int,int)void :: android.permission.DELETE_PACKAGES,android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.setComponentEnabledSetting(ComponentName,int,int)void :: android.permission.
            conditional = true,android.permission.CHANGE_COMPONENT_ENABLED_STATE
android.content.pm.PackageManager.setSyntheticAppDetailsActivityEnabled(String,boolean)void :: android.permission.
            conditional = true,android.permission.CHANGE_COMPONENT_ENABLED_STATE
android.content.pm.PackageManager.setApplicationEnabledSetting(String,int,int)void :: android.permission.
            conditional = true,android.permission.CHANGE_COMPONENT_ENABLED_STATE
android.content.pm.PackageManager.addOnPermissionsChangeListener(OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageManager.removeOnPermissionsChangeListener(OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageManager.setDistractingPackageRestrictions(String[],int)String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.setPackagesSuspended(String[],boolean,PersistableBundle,PersistableBundle,String)String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.setPackagesSuspended(String[],boolean,PersistableBundle,PersistableBundle,SuspendDialogInfo)String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.getUnsuspendablePackages(String[])String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.setHarmfulAppWarning(String,CharSequence)void :: android.permission.SET_HARMFUL_APP_WARNINGS
android.content.pm.PackageManager.getHarmfulAppWarning(String)CharSequence :: android.permission.SET_HARMFUL_APP_WARNINGS
android.content.pm.ShortcutManager.getShareTargets(IntentFilter)List<ShareShortcutInfo> :: android.permission.MANAGE_APP_PREDICTIONS
android.content.pm.dex.ArtManager.snapshotRuntimeProfile(int,String,String,Executor,SnapshotRuntimeProfileCallback)void :: android.permission.READ_RUNTIME_PROFILES,android.permission.PACKAGE_USAGE_STATS
android.content.pm.dex.ArtManager.isRuntimeProfilingEnabled(int)boolean :: android.permission.READ_RUNTIME_PROFILES,android.permission.PACKAGE_USAGE_STATS
android.content.rollback.RollbackManager.getAvailableRollbacks()List<RollbackInfo> :: android.permission.MANAGE_ROLLBACKS,android.permission.TEST_MANAGE_ROLLBACKS
android.content.rollback.RollbackManager.getRecentlyCommittedRollbacks()List<RollbackInfo> :: android.permission.MANAGE_ROLLBACKS,android.permission.TEST_MANAGE_ROLLBACKS
android.content.rollback.RollbackManager.commitRollback(int,List<VersionedPackage>,IntentSender)void :: android.permission.MANAGE_ROLLBACKS,android.permission.TEST_MANAGE_ROLLBACKS
android.content.rollback.RollbackManager.reloadPersistedData()void :: android.permission.TEST_MANAGE_ROLLBACKS
android.content.rollback.RollbackManager.expireRollbackForPackage(String)void :: android.permission.TEST_MANAGE_ROLLBACKS
android.content.rollback.RollbackManager.blockRollbackManager(long)void :: android.permission.TEST_MANAGE_ROLLBACKS
android.debug.AdbManager.isAdbWifiSupported()boolean :: android.permission.MANAGE_DEBUGGING
android.debug.AdbManager.isAdbWifiQrSupported()boolean :: android.permission.MANAGE_DEBUGGING
android.hardware.SensorPrivacyManager.setSensorPrivacy(boolean)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.biometrics.BiometricManager.canAuthenticate()int :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager.canAuthenticate(int)int :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager.canAuthenticate(int,int)int :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.hasEnrolledBiometrics(int)boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.registerEnabledOnKeyguardCallback(IBiometricEnabledOnKeyguardCallback)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.setActiveUser(int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.resetLockout(byte[])void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.getAuthenticatorIds()long[] :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.setUseDefaultTitle()Builder :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.setTextForDeviceCredential(CharSequence,CharSequence,CharSequence)Builder :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.shouldUseDefaultTitle()boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.authenticateUser(CancellationSignal,Executor,AuthenticationCallback,int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.authenticate(CryptoObject,CancellationSignal,Executor,AuthenticationCallback)void :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricPrompt.authenticate(CancellationSignal,Executor,AuthenticationCallback)void :: android.permission.USE_BIOMETRIC
android.hardware.camera2.CameraManager.isConcurrentSessionConfigurationSupported(Map<String,SessionConfiguration>)boolean :: android.permission.CAMERA
android.hardware.camera2.CameraManager.openCamera(String,CameraDevice.StateCallback,Handler)void :: android.permission.CAMERA
android.hardware.camera2.CameraManager.openCamera(String,Executor,CameraDevice.StateCallback)void :: android.permission.CAMERA
android.hardware.display.ColorDisplayManager.setNightDisplayActivated(boolean)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayColorTemperature(int)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.getNightDisplayAutoMode()int :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayAutoMode(int)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayCustomStartTime(LocalTime)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayCustomEndTime(LocalTime)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.isDeviceColorManaged()boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.mManager.setSaturationLevel(saturationLevel)int :: android.permission. to = 100,android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)
    public boolean setSaturationLevel(@IntRange(from = 0
android.hardware.display.ColorDisplayManager.isSaturationActivated()boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.mManager.setAppSaturationLevel(packageName,saturationLevel)int :: android.permission. to = 100,android.permission.
            @IntRange(from = 0,android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)
    public boolean setAppSaturationLevel(@NonNull String packageName
android.hardware.display.ColorDisplayManager.setDisplayWhiteBalanceEnabled(boolean)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.getTransformCapabilities()int :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.DisplayManager.setSaturationLevel(float)void :: android.permission.CONTROL_DISPLAY_SATURATION
android.hardware.display.DisplayManager.getBrightnessEvents()List<BrightnessChangeEvent> :: android.permission.BRIGHTNESS_SLIDER_USAGE
android.hardware.display.DisplayManager.getAmbientBrightnessStats()List<AmbientBrightnessDayStats> :: android.permission.ACCESS_AMBIENT_LIGHT_STATS
android.hardware.display.DisplayManager.setBrightnessConfiguration(BrightnessConfiguration)void :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.getBrightnessConfiguration()BrightnessConfiguration :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.getDefaultBrightnessConfiguration()BrightnessConfiguration :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.face.FaceManager.authenticate(CryptoObject,CancellationSignal,int,AuthenticationCallback,Handler)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.enroll(int,byte[],CancellationSignal,EnrollmentCallback,int[])void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.generateChallenge()long :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.revokeChallenge()int :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.setFeature(int,int,boolean,byte[],SetFeatureCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.getFeature(int,int,GetFeatureCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.userActivity()void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.setActiveUser(int)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.remove(Face,int,RemovalCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.getEnrolledFaces(int)List<Face> :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.getEnrolledFaces()List<Face> :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.hasEnrolledTemplates()boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.hasEnrolledTemplates(int)boolean :: android.permission.INTERACT_ACROSS_USERS,android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.isHardwareDetected()boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.addLockoutResetCallback(LockoutResetCallback)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.authenticate(CryptoObject,CancellationSignal,int,AuthenticationCallback,Handler)void :: android.permission.USE_FINGERPRINT,android.permission.USE_BIOMETRIC
android.hardware.fingerprint.FingerprintManager.authenticate(CryptoObject,CancellationSignal,int,AuthenticationCallback,Handler,int)void :: android.permission.USE_FINGERPRINT,android.permission.USE_BIOMETRIC
android.hardware.fingerprint.FingerprintManager.enroll(byte,CancellationSignal,int,int,EnrollmentCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.preEnroll()long :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.postEnroll()int :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.setActiveUser(int)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.remove(Fingerprint,int,RemovalCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.enumerate(int,EnumerateCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.rename(int,int,String)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints(int)List<Fingerprint> :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints()List<Fingerprint> :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints()boolean :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints(int)boolean :: android.permission.INTERACT_ACROSS_USERS,android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.isHardwareDetected()boolean :: android.permission.USE_FINGERPRINT
android.hardware.hdmi.HdmiControlManager.setStandbyMode(boolean)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setHdmiCecVolumeControlEnabled(boolean)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.isHdmiCecVolumeControlEnabled()boolean :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHotplugEventListener(HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHotplugEventListener(HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHdmiControlStatusChangeListener(HdmiControlStatusChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHdmiControlStatusChangeListener(HdmiControlStatusChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHdmiCecVolumeControlFeatureListener(Executor,HdmiCecVolumeControlFeatureListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHdmiCecVolumeControlFeatureListener(HdmiCecVolumeControlFeatureListener)void :: android.permission.HDMI_CEC
android.hardware.lights.LightsManager.getLights()List<Light> :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.LightsManager.getLightState(Light)LightState :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.LightsManager.openSession()LightsSession :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.LightsManager.LightsSession()LightsSession() :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.LightsManager.requestLights(LightsRequest)void :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.LightsManager.close()void :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.location.ContextHubClient.sendMessageToNanoApp(NanoAppMessage)int :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.getContextHubHandles()int[] :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.getContextHubInfo(int)ContextHubInfo :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.loadNanoApp(int,NanoApp)int :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.unloadNanoApp(int)int :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.getNanoAppInstanceInfo(int)NanoAppInstanceInfo :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.findNanoAppOnHub(int,NanoAppFilter)int[] :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.sendMessage(int,int,ContextHubMessage)int :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.getContextHubs()List<ContextHubInfo> :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.loadNanoApp(ContextHubInfo,NanoAppBinary)ContextHubTransaction<Void> :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.unloadNanoApp(ContextHubInfo,long)ContextHubTransaction<Void> :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.enableNanoApp(ContextHubInfo,long)ContextHubTransaction<Void> :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.disableNanoApp(ContextHubInfo,long)ContextHubTransaction<Void> :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.queryNanoApps(ContextHubInfo)ContextHubTransaction<List<NanoAppState>> :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.createClient(ContextHubInfo,ContextHubClientCallback,Executor)ContextHubClient :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.createClient(ContextHubInfo,ContextHubClientCallback)ContextHubClient :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.location.ContextHubManager.createClient(ContextHubInfo,PendingIntent,long)ContextHubClient :: android.permission.LOCATION_HARDWARE,android.permission.ACCESS_CONTEXT_HUB
android.hardware.radio.RadioManager.listModules(List<ModuleProperties>)int :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.openTuner(int,BandConfig,boolean,RadioTuner.Callback,Handler)RadioTuner :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.addAnnouncementListener(Set<Integer>,Announcement.OnListUpdatedListener)void :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.addAnnouncementListener(Executor,Set<Integer>,Announcement.OnListUpdatedListener)void :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.removeAnnouncementListener(Announcement.OnListUpdatedListener)void :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.usb.UsbManager.grantPermission(UsbDevice,String)void :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.setCurrentFunctions(long)void :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.getCurrentFunctions()long :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.resetUsbGadget()void :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.getPorts()List<UsbPort> :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.enableContaminantDetection(UsbPort,boolean)void :: android.permission.MANAGE_USB
android.hardware.usb.UsbPort.getStatus()UsbPortStatus :: android.permission.MANAGE_USB
android.hardware.usb.UsbPort.setRoles(int,int)void :: android.permission.MANAGE_USB
android.location.LocationManager.setExtraLocationControllerPackage(String)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setExtraLocationControllerPackageEnabled(boolean)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setLocationControllerExtraPackage(String)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setLocationControllerExtraPackageEnabled(boolean)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setLocationEnabledForUser(boolean,UserHandle)void :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationManager.setProviderEnabledForUser(String,boolean,UserHandle)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationManager.getLastLocation()Location :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.getLastKnownLocation(String)Location :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.getCurrentLocation(String,CancellationSignal,Executor,Consumer<Location>)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.getCurrentLocation(LocationRequest,CancellationSignal,Executor,Consumer<Location>)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestSingleUpdate(String,LocationListener,Looper)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestSingleUpdate(Criteria,LocationListener,Looper)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestSingleUpdate(String,PendingIntent)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestSingleUpdate(Criteria,PendingIntent)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(String,long,float,LocationListener)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(String,long,float,LocationListener,Looper)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(String,long,float,Executor,LocationListener)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(long,float,Criteria,LocationListener,Looper)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(long,float,Criteria,Executor,LocationListener)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(String,long,float,PendingIntent)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(long,float,Criteria,PendingIntent)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(LocationRequest,LocationListener,Looper)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(LocationRequest,Executor,LocationListener)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(LocationRequest,PendingIntent)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.injectLocation(Location)boolean :: android.permission.ACCESS_FINE_LOCATION,android.permission.LOCATION_HARDWARE
android.location.LocationManager.isProviderPackage(String)boolean :: android.permission.READ_DEVICE_CONFIG
android.location.LocationManager.getProviderPackages(String)List<String> :: android.permission.READ_DEVICE_CONFIG
android.location.LocationManager.addProximityAlert(double,double,float,long,PendingIntent)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.addGeofence(LocationRequest,Geofence,PendingIntent)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.getGpsStatus(GpsStatus)GpsStatus :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addGpsStatusListener(GpsStatus.Listener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(GnssStatus.Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(GnssStatus.Callback,Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(Executor,GnssStatus.Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(GpsStatus.NmeaListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(OnNmeaMessageListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(OnNmeaMessageListener,Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(Executor,OnNmeaMessageListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback,Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(Executor,GnssMeasurementsEvent.Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(GnssRequest,Executor,GnssMeasurementsEvent.Callback)boolean :: android.permission.ACCESS_FINE_LOCATION,android.permission.LOCATION_HARDWARE
android.location.LocationManager.injectGnssMeasurementCorrections(GnssMeasurementCorrections)void :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerAntennaInfoListener(Executor,GnssAntennaInfo.Listener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssNavigationMessageCallback(GnssNavigationMessage.Callback,Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssNavigationMessageCallback(Executor,GnssNavigationMessage.Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.getGnssBatchSize()int :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.registerGnssBatchedLocationCallback(long,boolean,BatchedLocationCallback,Handler)boolean :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.flushGnssBatch()void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.unregisterGnssBatchedLocationCallback(BatchedLocationCallback)boolean :: android.permission.LOCATION_HARDWARE
android.location.LocationRequest.setLocationSettingsIgnored(boolean)LocationRequest :: android.permission.WRITE_SECURE_SETTINGS
android.media.AudioAttributes.setSystemUsage(int)Builder :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setMasterMute(boolean,int)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setVolumeIndexForAttributes(AudioAttributes,int,int)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getVolumeIndexForAttributes(AudioAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getMaxVolumeIndexForAttributes(AudioAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getMinVolumeIndexForAttributes(AudioAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setSupportedSystemUsages(int[])void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getSupportedSystemUsages()int[] :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.forceVolumeControlStream(int)void :: android.permission.MODIFY_PHONE_STATE
android.media.AudioManager.setPreferredDeviceForStrategy(AudioProductStrategy,AudioDeviceAttributes)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.removePreferredDeviceForStrategy(AudioProductStrategy)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getPreferredDeviceForStrategy(AudioProductStrategy)AudioDeviceAttributes :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.addOnPreferredDeviceForStrategyChangedListener(Executor,OnPreferredDeviceForStrategyChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.removeOnPreferredDeviceForStrategyChangedListener(OnPreferredDeviceForStrategyChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.requestAudioFocus(OnAudioFocusChangeListener,AudioAttributes,int,int)int :: android.permission.MODIFY_PHONE_STATE
android.media.AudioManager.requestAudioFocus(OnAudioFocusChangeListener,AudioAttributes,int,int,AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING,android.permission.MODIFY_PHONE_STATE
android.media.AudioManager.requestAudioFocus(AudioFocusRequest,AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setFocusRequestResult(AudioFocusInfo,int,AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.dispatchAudioFocusChange(AudioFocusInfo,int,AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.registerAudioPolicy(AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.unregisterAudioPolicyAsync(AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.unregisterAudioPolicy(AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getDevicesForAttributes(AudioAttributes)List<AudioDeviceAttributes> :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setDeviceVolumeBehavior(int,String,int)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setDeviceVolumeBehavior(AudioDeviceAttributes,int)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getDeviceVolumeBehavior(int,String)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getDeviceVolumeBehavior(AudioDeviceAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setWiredDeviceConnectionState(int,int,String,String)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.Objects.requireNonNull(device)long :: android.permission. @IntRange(from = 0,android.permission.MODIFY_AUDIO_ROUTING)
    public boolean setAdditionalOutputDeviceDelay(
            @NonNull AudioDeviceInfo device
android.media.AudioManager.getAudioProductStrategies()List<AudioProductStrategy> :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getAudioVolumeGroups()List<AudioVolumeGroup> :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setMultiAudioFocusEnabled(boolean)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioRecordingConfiguration.getClientUid()int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioTrack.if(contentId)int :: android.permission. @IntRange(from = 1,android.permission.MODIFY_AUDIO_ROUTING)
        public TunerConfiguration(
                @IntRange(from = 1) int contentId
android.media.AudioTrack.getContentId()int :: android.permission.MODIFY_AUDIO_ROUTING)
        public @IntRange(from = 1
android.media.AudioTrack.getSyncId()int :: android.permission.MODIFY_AUDIO_ROUTING)
        public @IntRange(from = 1
android.media.AudioTrack.setTunerConfiguration(TunerConfiguration)Builder :: android.permission.MODIFY_AUDIO_ROUTING
android.media.RingtoneManager.enableSyncFromParent(Context)void :: android.permission.WRITE_SECURE_SETTINGS
android.media.RingtoneManager.ensureDefaultRingtones(Context)void :: android.permission.WRITE_SETTINGS
android.media.audiofx.AudioEffect.AudioEffect(UUID,AudioDeviceAttributes)AudioEffect(@NonNull :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.audiofx.AudioEffect.isEffectSupportedForDevice(UUID,AudioDeviceAttributes)boolean :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.audiofx.SourceDefaultEffect.uuid.toString(), :: android.permission. int priority,android.permission.toString(,android.permission. UUID uuid,android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS,android.permission.
    public SourceDefaultEffect(UUID type
android.media.audiofx.StreamDefaultEffect.uuid.toString(), :: android.permission. int priority,android.permission.toString(,android.permission. UUID uuid,android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS,android.permission.
    public StreamDefaultEffect(UUID type
android.media.session.MediaSessionManager.setOnVolumeKeyLongPressListener(OnVolumeKeyLongPressListener,Handler)void :: android.permission.SET_VOLUME_KEY_LONG_PRESS_LISTENER
android.media.session.MediaSessionManager.setOnMediaKeyListener(OnMediaKeyListener,Handler)void :: android.permission.SET_MEDIA_KEY_LISTENER
android.media.session.MediaSessionManager.addOnMediaKeyEventDispatchedListener(Executor,OnMediaKeyEventDispatchedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.removeOnMediaKeyEventDispatchedListener(OnMediaKeyEventDispatchedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.addOnMediaKeyEventSessionChangedListener(Executor,OnMediaKeyEventSessionChangedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.removeOnMediaKeyEventSessionChangedListener(OnMediaKeyEventSessionChangedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.soundtrigger.SoundTriggerDetector.startRecognition(int)boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerDetector.stopRecognition()boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.updateModel(Model)void :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getModel(UUID)Model :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.deleteModel(UUID)void :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.createSoundTriggerDetector(UUID,SoundTriggerDetector.Callback,Handler)SoundTriggerDetector :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.loadSoundModel(SoundModel)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.startRecognition(UUID,Bundle,ComponentName,RecognitionConfig)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.stopRecognition(UUID)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.unloadSoundModel(UUID)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.isRecognitionActive(UUID)boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getModelState(UUID)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getModuleProperties()SoundTrigger.ModuleProperties :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.setParameter(UUID,int,int)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getParameter(UUID,int)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.queryParameter(UUID,int)ModelParamRange :: android.permission.MANAGE_SOUND_TRIGGER
android.media.tv.TvInputManager.setParentalControlsEnabled(boolean)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.addBlockedRating(TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.removeBlockedRating(TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.getTvContentRatingSystemList()List<TvContentRatingSystemInfo> :: android.permission.READ_CONTENT_RATING_SYSTEMS
android.media.tv.TvInputManager.notifyPreviewProgramBrowsableDisabled(String,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.notifyWatchNextProgramBrowsableDisabled(String,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.notifyPreviewProgramAddedToWatchNext(String,long,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.getClientPid(String)int :: android.permission.TUNER_RESOURCE_ACCESS
android.media.tv.TvInputManager.getAvailableTvStreamConfigList(String)List<TvStreamConfig> :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.captureFrame(String,Surface,TvStreamConfig)boolean :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.isSingleSessionActive()boolean :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.getHardwareList()List<TvInputHardwareInfo> :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,HardwareCallback,TvInputInfo)Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,TvInputInfo,HardwareCallback)Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,TvInputInfo,String,int,Executor,HardwareCallback)Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.releaseTvInputHardware(int,Hardware)void :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.getDvbDeviceList()List<DvbDeviceInfo> :: android.permission.DVB_DEVICE
android.media.tv.TvInputManager.openDvbDevice(DvbDeviceInfo,int)ParcelFileDescriptor :: android.permission.DVB_DEVICE
android.media.tv.TvView.setMain()void :: android.permission.CHANGE_HDMI_CEC_ACTIVE_SOURCE
android.media.tv.TvView.unblockContent(TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.tuner.Tuner.Tuner(Context,String,int)Tuner(@NonNull :: android.permission.ACCESS_TV_TUNER
android.media.tv.tuner.Tuner.openDescrambler()Descrambler :: android.permission.ACCESS_TV_DESCRAMBLER
android.media.voice.KeyphraseModelManager.getKeyphraseSoundModel(int,Locale)SoundTrigger.KeyphraseSoundModel :: android.permission.MANAGE_VOICE_KEYPHRASES
android.media.voice.KeyphraseModelManager.updateKeyphraseSoundModel(SoundTrigger.KeyphraseSoundModel)void :: android.permission.MANAGE_VOICE_KEYPHRASES
android.media.voice.KeyphraseModelManager.deleteKeyphraseSoundModel(int,Locale)void :: android.permission.MANAGE_VOICE_KEYPHRASES
android.net.CaptivePortal.reevaluateNetwork()void :: android.permission.NETWORK_STACK
android.net.ConnectivityManager.getNetworkPreference()int :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetworkInfo()NetworkInfo :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetwork()Network :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetworkForUid(int)Network :: android.permission.NETWORK_STACK
android.net.ConnectivityManager.setAlwaysOnVpnPackageForUser(int,String,boolean,List<String>)boolean :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.ConnectivityManager.getAlwaysOnVpnPackageForUser(int)String :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.ConnectivityManager.isVpnLockdownEnabled(int)boolean :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.ConnectivityManager.getVpnLockdownWhitelist(int)List<String> :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.ConnectivityManager.getActiveNetworkInfoForUid(int)NetworkInfo :: android.permission.NETWORK_STACK
android.net.ConnectivityManager.getNetworkInfo(int)NetworkInfo :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkInfo(Network)NetworkInfo :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getAllNetworkInfo()NetworkInfo[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkForType(int)Network :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getAllNetworks()Network[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveLinkProperties()LinkProperties :: android.permission.P,android.permission. trackingBug = 109783091
android.net.ConnectivityManager.getLinkProperties(int)LinkProperties :: android.permission.P,android.permission. trackingBug = 130143562
android.net.ConnectivityManager.getLinkProperties(Network)LinkProperties :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkCapabilities(Network)NetworkCapabilities :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getCaptivePortalServerUrl()String :: android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.createNattKeepalive(Network,ParcelFileDescriptor,InetAddress,InetAddress,Executor,Callback)SocketKeepalive :: android.permission.PACKET_KEEPALIVE_OFFLOAD
android.net.ConnectivityManager.createSocketKeepalive(Network,Socket,Executor,Callback)SocketKeepalive :: android.permission.PACKET_KEEPALIVE_OFFLOAD
android.net.ConnectivityManager.getTetherableIfaces()String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetheredIfaces()String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetheringErroredIfaces()String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetheredDhcpRanges()String[] :: android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.isTetheringSupported()boolean :: android.permission.TETHER_PRIVILEGED,android.permission.WRITE_SETTINGS
android.net.ConnectivityManager.startTethering(int,boolean,OnStartTetheringCallback)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.startTethering(int,boolean,OnStartTetheringCallback,Handler)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.stopTethering(int)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.registerTetheringEventCallback(Executor,OnTetheringEventCallback)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.unregisterTetheringEventCallback(OnTetheringEventCallback)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.getTetherableUsbRegexs()String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetherableWifiRegexs()String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetherableBluetoothRegexs()String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getLastTetherError(String)int :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getLatestTetheringEntitlementResult(int,boolean,Executor,OnTetheringEntitlementResultListener)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.setGlobalProxy(ProxyInfo)void :: android.permission.NETWORK_STACK
android.net.ConnectivityManager.isNetworkSupported(int)boolean :: android.permission.P,android.permission. trackingBug = 130143562
android.net.ConnectivityManager.isActiveNetworkMetered()boolean :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getMobileProvisioningUrl()String :: android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.setAirplaneMode(boolean)void :: android.permission.NETWORK_SETUP_WIZARD,android.permission.NETWORK_STACK,android.permission.NETWORK_AIRPLANE_MODE,android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.registerNetworkFactory(Messenger,String)int :: android.permission.PERMISSION_MAINLINE_NETWORK_STACK,android.permission.NETWORK_FACTORY
android.net.ConnectivityManager.unregisterNetworkFactory(Messenger)void :: android.permission.PERMISSION_MAINLINE_NETWORK_STACK,android.permission.NETWORK_FACTORY
android.net.ConnectivityManager.registerNetworkProvider(NetworkProvider)int :: android.permission.PERMISSION_MAINLINE_NETWORK_STACK,android.permission.NETWORK_FACTORY
android.net.ConnectivityManager.unregisterNetworkProvider(NetworkProvider)void :: android.permission.PERMISSION_MAINLINE_NETWORK_STACK,android.permission.NETWORK_FACTORY
android.net.ConnectivityManager.declareNetworkRequestUnfulfillable(NetworkRequest)void :: android.permission.PERMISSION_MAINLINE_NETWORK_STACK,android.permission.NETWORK_FACTORY
android.net.ConnectivityManager.registerNetworkAgent(Messenger,NetworkInfo,LinkProperties,NetworkCapabilities,int,NetworkAgentConfig)Network :: android.permission.PERMISSION_MAINLINE_NETWORK_STACK,android.permission.NETWORK_FACTORY
android.net.ConnectivityManager.registerNetworkAgent(Messenger,NetworkInfo,LinkProperties,NetworkCapabilities,int,NetworkAgentConfig,int)Network :: android.permission.PERMISSION_MAINLINE_NETWORK_STACK,android.permission.NETWORK_FACTORY
android.net.ConnectivityManager.requestNetwork(NetworkRequest,int,int,Handler,NetworkCallback)void :: android.permission.PERMISSION_MAINLINE_NETWORK_STACK
android.net.ConnectivityManager.registerNetworkCallback(NetworkRequest,NetworkCallback)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerNetworkCallback(NetworkRequest,NetworkCallback,Handler)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerNetworkCallback(NetworkRequest,PendingIntent)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerDefaultNetworkCallback(NetworkCallback)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerDefaultNetworkCallback(NetworkCallback,Handler)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.setAcceptUnvalidated(Network,boolean,boolean)void :: android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.setAcceptPartialConnectivity(Network,boolean,boolean)void :: android.permission.NETWORK_STACK
android.net.ConnectivityManager.setAvoidUnvalidated(Network)void :: android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.startCaptivePortalApp(Network)void :: android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.startCaptivePortalApp(Network,Bundle)void :: android.permission.PERMISSION_MAINLINE_NETWORK_STACK
android.net.ConnectivityManager.shouldAvoidBadWifi()boolean :: android.permission.PERMISSION_MAINLINE_NETWORK_STACK,android.permission.NETWORK_STACK
android.net.ConnectivityManager.getMultipathPreference(Network)int :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.factoryReset()void :: android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.simulateDataStall(int,long,Network,PersistableBundle)void :: android.permission.NETWORK_STACK,android.permission.MANAGE_TEST_NETWORKS
android.net.EthernetManager.requestTetheredInterface(Executor,TetheredInterfaceCallback)TetheredInterfaceRequest :: android.permission.PERMISSION_MAINLINE_NETWORK_STACK,android.permission.NETWORK_STACK
android.net.IpSecManager.addAddress(InetAddress,int)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager.removeAddress(InetAddress,int)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager.createIpSecTunnelInterface(InetAddress,InetAddress,Network)IpSecTunnelInterface :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager.applyTunnelModeTransform(IpSecTunnelInterface,int,IpSecTransform)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecTransform.startNattKeepalive(NattKeepaliveCallback,int,Handler)void :: android.permission.MANAGE_IPSEC_TUNNELS,android.permission.PACKET_KEEPALIVE_OFFLOAD
android.net.IpSecTransform.stopNattKeepalive()void :: android.permission.MANAGE_IPSEC_TUNNELS,android.permission.PACKET_KEEPALIVE_OFFLOAD
android.net.IpSecTransform.buildTunnelModeTransform(InetAddress,IpSecManager.SecurityParameterIndex)IpSecTransform :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.NetworkCapabilities.setOwnerUid(int)Builder :: android.permission.NETWORK_FACTORY
android.net.NetworkCapabilities.setAdministratorUids(int[])Builder :: android.permission.NETWORK_FACTORY
android.net.NetworkCapabilities.setSignalStrength(int)Builder :: android.permission.NETWORK_SIGNAL_STRENGTH_WAKEUP
android.net.NetworkCapabilities.setSsid(String)Builder :: android.permission.NETWORK_FACTORY
android.net.NetworkCapabilities.setRequestorUid(int)Builder :: android.permission.NETWORK_FACTORY
android.net.NetworkCapabilities.setRequestorPackageName(String)Builder :: android.permission.NETWORK_FACTORY
android.net.NetworkPolicyManager.registerSubscriptionCallback(SubscriptionCallback)void :: android.permission.OBSERVE_NETWORK_POLICY
android.net.NetworkPolicyManager.unregisterSubscriptionCallback(SubscriptionCallback)void :: android.permission.OBSERVE_NETWORK_POLICY
android.net.NetworkProvider.declareNetworkRequestUnfulfillable(NetworkRequest)void :: android.permission.NETWORK_FACTORY
android.net.NetworkRequest.setSignalStrength(int)Builder :: android.permission.NETWORK_SIGNAL_STRENGTH_WAKEUP
android.net.NetworkScoreManager.getActiveScorerPackage()String :: android.permission.SCORE_NETWORKS,android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.getActiveScorer()NetworkScorerAppData :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.getAllValidScorers()List<NetworkScorerAppData> :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.updateScores(ScoredNetwork[])boolean :: android.permission.SCORE_NETWORKS
android.net.NetworkScoreManager.clearScores()boolean :: android.permission.SCORE_NETWORKS,android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.setActiveScorer(String)boolean :: android.permission.SCORE_NETWORKS,android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.disableScoring()void :: android.permission.SCORE_NETWORKS,android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.requestScores(NetworkKey[])boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.requestScores(Collection<NetworkKey>)boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.registerNetworkScoreCache(int,INetworkScoreCache)void :: android.permission. INetworkScoreCache,android.permission. int,android.permission.REQUEST_NETWORK_SCORES)
    @Deprecated // migrate to registerNetworkScoreCache(int
android.net.NetworkScoreManager.registerNetworkScoreCache(int,INetworkScoreCache,int)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.unregisterNetworkScoreCache(int,INetworkScoreCache)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.registerNetworkScoreCallback(int,int,Executor,NetworkScoreCallback)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.isCallerActiveScorer(int)boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.TetheringManager.setStaticIpv4Addresses(LinkAddress,LinkAddress)Builder :: android.permission.TETHER_PRIVILEGED
android.net.TetheringManager.setExemptFromEntitlementCheck(boolean)Builder :: android.permission.TETHER_PRIVILEGED
android.net.TetheringManager.setShouldShowEntitlementUi(boolean)Builder :: android.permission.TETHER_PRIVILEGED
android.net.TetheringManager.startTethering(TetheringRequest,Executor,StartTetheringCallback)void :: android.permission.TETHER_PRIVILEGED,android.permission.WRITE_SETTINGS
android.net.TetheringManager.startTethering(int,Executor,StartTetheringCallback)void :: android.permission.TETHER_PRIVILEGED,android.permission.WRITE_SETTINGS
android.net.TetheringManager.stopTethering(int)void :: android.permission.TETHER_PRIVILEGED,android.permission.WRITE_SETTINGS
android.net.TetheringManager.requestLatestTetheringEntitlementResult(int,boolean,Executor,OnTetheringEntitlementResultListener)void :: android.permission.TETHER_PRIVILEGED,android.permission.WRITE_SETTINGS
android.net.TetheringManager.registerTetheringEventCallback(Executor,TetheringEventCallback)void :: android.permission.ACCESS_NETWORK_STATE
android.net.TetheringManager.unregisterTetheringEventCallback(TetheringEventCallback)void :: android.permission.TETHER_PRIVILEGED,android.permission.ACCESS_NETWORK_STATE
android.net.TetheringManager.stopAllTethering()void :: android.permission.TETHER_PRIVILEGED,android.permission.WRITE_SETTINGS
android.net.VpnService.prepareAndAuthorize(Context)void :: android.permission.CONTROL_VPN
android.net.wifi.RttManager.getRttCapabilities()RttCapabilities :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.startRanging(RttParams[],RttListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.stopRanging(RttListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.enableResponder(ResponderCallback)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.disableResponder(ResponderCallback)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiManager.getConfiguredNetworks()List<WifiConfiguration> :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.getPrivilegedConfiguredNetworks()List<WifiConfiguration> :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_WIFI_STATE,android.permission.READ_WIFI_CREDENTIAL
android.net.wifi.WifiManager.getAllMatchingWifiConfigs(List<ScanResult>)List<Pair<WifiConfiguration, :: android.permission.NETWORK_SETUP_WIZARD,android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.getWifiConfigForMatchedNetworkSuggestionsSharedWithUser(List<ScanResult>)List<WifiConfiguration> :: android.permission.NETWORK_SETUP_WIZARD,android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.getMatchingOsuProviders(List<ScanResult>)Map<OsuProvider, :: android.permission.NETWORK_SETUP_WIZARD,android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.getMatchingPasspointConfigsForOsuProviders(Set<OsuProvider>)Map<OsuProvider, :: android.permission.NETWORK_SETUP_WIZARD,android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.registerNetworkRequestMatchCallback(Executor,NetworkRequestMatchCallback)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.unregisterNetworkRequestMatchCallback(NetworkRequestMatchCallback)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.addNetworkSuggestions(List<WifiNetworkSuggestion>)int :: android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.removeNetworkSuggestions(List<WifiNetworkSuggestion>)int :: android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.getNetworkSuggestions()List<WifiNetworkSuggestion> :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.removePasspointConfiguration(String)void :: android.permission.NETWORK_SETTINGS,android.permission.NETWORK_CARRIER_PROVISIONING
android.net.wifi.WifiManager.getPasspointConfigurations()List<PasspointConfiguration> :: android.permission.NETWORK_SETUP_WIZARD,android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.getWifiActivityEnergyInfoAsync(Executor,OnWifiActivityEnergyInfoListener)void :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.startScan(WorkSource)boolean :: android.permission.UPDATE_DEVICE_STATS
android.net.wifi.WifiManager.getMatchingScanResults(List<WifiNetworkSuggestion>,List<ScanResult>)Map<WifiNetworkSuggestion, :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.setScanAlwaysAvailable(boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.getCountryCode()String :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.updateInterfaceIpState(String,int)void :: android.permission.PERMISSION_MAINLINE_NETWORK_STACK,android.permission.NETWORK_STACK
android.net.wifi.WifiManager.startSoftAp(WifiConfiguration)boolean :: android.permission.PERMISSION_MAINLINE_NETWORK_STACK,android.permission.NETWORK_STACK
android.net.wifi.WifiManager.startTetheredHotspot(SoftApConfiguration)boolean :: android.permission.PERMISSION_MAINLINE_NETWORK_STACK,android.permission.NETWORK_STACK
android.net.wifi.WifiManager.stopSoftAp()boolean :: android.permission.PERMISSION_MAINLINE_NETWORK_STACK,android.permission.NETWORK_STACK
android.net.wifi.WifiManager.startLocalOnlyHotspot(LocalOnlyHotspotCallback,Handler)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.startLocalOnlyHotspot(SoftApConfiguration,Executor,LocalOnlyHotspotCallback)void :: android.permission.NETWORK_SETUP_WIZARD,android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.getWifiApState()int :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.isWifiApEnabled()boolean :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.getWifiApConfiguration()WifiConfiguration :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.getSoftApConfiguration()SoftApConfiguration :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.setWifiApConfiguration(WifiConfiguration)boolean :: android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.setSoftApConfiguration(SoftApConfiguration)boolean :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.registerSoftApCallback(Executor,SoftApCallback)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.unregisterSoftApCallback(SoftApCallback)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.connect(WifiConfiguration,ActionListener)void :: android.permission.NETWORK_SETUP_WIZARD,android.permission.NETWORK_STACK,android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.connect(int,ActionListener)void :: android.permission.NETWORK_SETUP_WIZARD,android.permission.NETWORK_STACK,android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.save(WifiConfiguration,ActionListener)void :: android.permission.NETWORK_SETUP_WIZARD,android.permission.NETWORK_STACK,android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.forget(int,ActionListener)void :: android.permission.NETWORK_SETUP_WIZARD,android.permission.NETWORK_STACK,android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.disable(int,ActionListener)void :: android.permission.NETWORK_SETUP_WIZARD,android.permission.NETWORK_STACK,android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.allowAutojoinGlobal(boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.allowAutojoin(int,boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.allowAutojoinPasspoint(String,boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.setMacRandomizationSettingPasspointEnabled(String,boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.setPasspointMeteredOverride(String,int)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.disableEphemeralNetwork(String)void :: android.permission.NETWORK_STACK,android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.setVerboseLoggingEnabled(boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.enableVerboseLogging(int)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.factoryReset()void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.getCurrentNetwork()Network :: android.permission.NETWORK_SETUP_WIZARD,android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.retrieveBackupData()byte[] :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.restoreBackupData(byte[])void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.retrieveSoftApBackupData()byte[] :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.restoreSoftApBackupData(byte[])SoftApConfiguration :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.restoreSupplicantBackupData(byte[],byte[])void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.startSubscriptionProvisioning(OsuProvider,Executor,ProvisioningCallback)void :: android.permission.NETWORK_SETUP_WIZARD,android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.registerTrafficStateCallback(Executor,TrafficStateCallback)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.unregisterTrafficStateCallback(TrafficStateCallback)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.getFactoryMacAddresses()String[] :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.setDeviceMobilityState(int)void :: android.permission.WIFI_SET_DEVICE_MOBILITY_STATE
android.net.wifi.WifiManager.startEasyConnectAsConfiguratorInitiator(String,int,int,Executor,EasyConnectStatusCallback)void :: android.permission.NETWORK_SETUP_WIZARD,android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.startEasyConnectAsEnrolleeInitiator(String,Executor,EasyConnectStatusCallback)void :: android.permission.NETWORK_SETUP_WIZARD,android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.stopEasyConnectSession()void :: android.permission.NETWORK_SETUP_WIZARD,android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.addOnWifiUsabilityStatsListener(Executor,OnWifiUsabilityStatsListener)void :: android.permission.WIFI_UPDATE_USABILITY_STATS_SCORE
android.net.wifi.WifiManager.removeOnWifiUsabilityStatsListener(OnWifiUsabilityStatsListener)void :: android.permission.WIFI_UPDATE_USABILITY_STATS_SCORE
android.net.wifi.WifiManager.updateWifiUsabilityScore(int,int,int)void :: android.permission.WIFI_UPDATE_USABILITY_STATS_SCORE
android.net.wifi.WifiManager.registerScanResultsCallback(Executor,ScanResultsCallback)void :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.unregisterScanResultsCallback(ScanResultsCallback)void :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.addSuggestionConnectionStatusListener(Executor,SuggestionConnectionStatusListener)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.removeSuggestionConnectionStatusListener(SuggestionConnectionStatusListener)void :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.setWifiConnectedNetworkScorer(Executor,WifiConnectedNetworkScorer)boolean :: android.permission.WIFI_UPDATE_USABILITY_STATS_SCORE
android.net.wifi.WifiManager.clearWifiConnectedNetworkScorer()void :: android.permission.WIFI_UPDATE_USABILITY_STATS_SCORE
android.net.wifi.WifiManager.setScanThrottleEnabled(boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.isScanThrottleEnabled()boolean :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.setAutoWakeupEnabled(boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.isAutoWakeupEnabled()boolean :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiNetworkSuggestion.setCarrierId(int)Builder :: android.permission.NETWORK_CARRIER_PROVISIONING
android.net.wifi.WifiScanner.getAvailableChannels(int)List<Integer> :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.setScanningEnabled(boolean)void :: android.permission.NETWORK_STACK
android.net.wifi.WifiScanner.registerScanListener(Executor,ScanListener)void :: android.permission.NETWORK_STACK
android.net.wifi.WifiScanner.registerScanListener(ScanListener)void :: android.permission.NETWORK_STACK
android.net.wifi.WifiScanner.startBackgroundScan(ScanSettings,ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startBackgroundScan(ScanSettings,ScanListener,WorkSource)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.stopBackgroundScan(ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.getScanResults()boolean :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startScan(ScanSettings,ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startScan(ScanSettings,ScanListener,WorkSource)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startScan(ScanSettings,Executor,ScanListener,WorkSource)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.stopScan(ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.getSingleScanResults()List<ScanResult> :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startDisconnectedPnoScan(ScanSettings,PnoSettings,Executor,PnoScanListener)void :: android.permission.NETWORK_STACK
android.net.wifi.WifiScanner.stopPnoScan(ScanListener)void :: android.permission.NETWORK_STACK
android.net.wifi.aware.WifiAwareManager.requestMacAddresses(int,List<Integer>,IWifiAwareMacAddressProvider)void :: android.permission.NETWORK_STACK
android.net.wifi.p2p.WifiP2pManager.discoverPeers(Channel,ActionListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.connect(Channel,WifiP2pConfig,ActionListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.createGroup(Channel,ActionListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.createGroup(Channel,WifiP2pConfig,ActionListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.startListening(Channel,ActionListener)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.p2p.WifiP2pManager.stopListening(Channel,ActionListener)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.p2p.WifiP2pManager.setWifiP2pChannels(Channel,int,int,ActionListener)void :: android.permission.NETWORK_STACK,android.permission.NETWORK_SETTINGS,android.permission.OVERRIDE_WIFI_CONFIG
android.net.wifi.p2p.WifiP2pManager.addLocalService(Channel,WifiP2pServiceInfo,ActionListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.discoverServices(Channel,ActionListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.requestPeers(Channel,PeerListListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.requestGroupInfo(Channel,GroupInfoListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.setDeviceName(Channel,String,ActionListener)void :: android.permission.NETWORK_STACK,android.permission.NETWORK_SETTINGS,android.permission.OVERRIDE_WIFI_CONFIG
android.net.wifi.p2p.WifiP2pManager.setWfdInfo(Channel,WifiP2pWfdInfo,ActionListener)void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.net.wifi.p2p.WifiP2pManager.setWFDInfo(Channel,WifiP2pWfdInfo,ActionListener)void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.net.wifi.p2p.WifiP2pManager.deletePersistentGroup(Channel,int,ActionListener)void :: android.permission.NETWORK_STACK,android.permission.NETWORK_SETTINGS,android.permission.OVERRIDE_WIFI_CONFIG
android.net.wifi.p2p.WifiP2pManager.requestPersistentGroupInfo(Channel,PersistentGroupInfoListener)void :: android.permission.NETWORK_STACK,android.permission.READ_WIFI_CREDENTIAL,android.permission.NETWORK_SETTINGS
android.net.wifi.p2p.WifiP2pManager.setMiracastMode(int)void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.net.wifi.p2p.WifiP2pManager.factoryReset(Channel,ActionListener)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.p2p.WifiP2pManager.requestOngoingPeerConfig(Channel,OngoingPeerInfoListener)void :: android.permission.NETWORK_STACK
android.net.wifi.p2p.WifiP2pManager.setOngoingPeerConfig(Channel,WifiP2pConfig,ActionListener)void :: android.permission.NETWORK_STACK
android.net.wifi.p2p.WifiP2pManager.requestDeviceInfo(Channel,DeviceInfoListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.rtt.WifiRttManager.startRanging(RangingRequest,Executor,RangingResultCallback)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.ACCESS_WIFI_STATE,android.permission.CHANGE_WIFI_STATE
android.net.wifi.rtt.WifiRttManager.startRanging(WorkSource,RangingRequest,Executor,RangingResultCallback)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.LOCATION_HARDWARE,android.permission.ACCESS_WIFI_STATE,android.permission.CHANGE_WIFI_STATE
android.net.wifi.rtt.WifiRttManager.cancelRanging(WorkSource)void :: android.permission.LOCATION_HARDWARE
android.nfc.NfcAdapter.enable()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disable()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disable(boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.enableSecureNfc(boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.enableNdefPush()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disableNdefPush()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.addNfcUnlockHandler(NfcUnlockHandler,String[])boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.removeNfcUnlockHandler(NfcUnlockHandler)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.cardemulation.CardEmulation.unsetOffHostForService(ComponentName)boolean :: android.permission.NFC
android.nfc.cardemulation.CardEmulation.setOffHostForService(ComponentName,String)boolean :: android.permission.NFC
android.nfc.cardemulation.CardEmulation.getAidsForPreferredPaymentService()List<String> :: android.permission.NFC_PREFERRED_PAYMENT_INFO
android.nfc.cardemulation.CardEmulation.getRouteDestinationForPreferredPaymentService()String :: android.permission.NFC_PREFERRED_PAYMENT_INFO
android.nfc.cardemulation.CardEmulation.getDescriptionForPreferredPaymentService()CharSequence :: android.permission.NFC_PREFERRED_PAYMENT_INFO
android.os.BatteryManager.setChargingStateUpdateDelayMillis(int)boolean :: android.permission.POWER_SAVER
android.os.BatteryStatsManager.mBatteryStats.noteWifiRssiChanged(newRssi)int :: android.permission. to = 0,android.permission.UPDATE_DEVICE_STATS)
    public void reportWifiRssiChanged(@IntRange(from = -127
android.os.BatteryStatsManager.reportWifiOn()void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiOff()void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiState(int,String)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiScanStartedFromSource(WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiScanStoppedFromSource(WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.mBatteryStats.noteWifiBatchedScanStartedFromSource(ws,csph)int :: android.permission.UPDATE_DEVICE_STATS)
    public void reportWifiBatchedScanStartedFromSource(@NonNull WorkSource ws,android.permission.
            @IntRange(from = 0
android.os.BatteryStatsManager.reportWifiBatchedScanStoppedFromSource(WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.getCellularBatteryStats()CellularBatteryStats :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.getWifiBatteryStats()WifiBatteryStats :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportFullWifiLockAcquiredFromSource(WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportFullWifiLockReleasedFromSource(WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiSupplicantStateChanged(int,boolean)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiMulticastEnabled(WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiMulticastDisabled(WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BugreportManager.startBugreport(ParcelFileDescriptor,ParcelFileDescriptor,BugreportParams,Executor,BugreportCallback)void :: android.permission.DUMP
android.os.BugreportManager.cancelBugreport()void :: android.permission.DUMP
android.os.BugreportManager.requestBugreport(BugreportParams,CharSequence,CharSequence)void :: android.permission.DUMP
android.os.Build.getSerial()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.os.DropBoxManager.getNextEntry(String,long)Entry :: android.permission.READ_LOGS,android.permission.PACKAGE_USAGE_STATS
android.os.IncidentManager.reportIncident(IncidentReportArgs)void :: android.permission.PACKAGE_USAGE_STATS,android.permission.DUMP
android.os.IncidentManager.requestAuthorization(int,String,int,AuthListener)void :: android.permission.REQUEST_INCIDENT_REPORT_APPROVAL
android.os.IncidentManager.requestAuthorization(int,String,int,Executor,AuthListener)void :: android.permission.REQUEST_INCIDENT_REPORT_APPROVAL
android.os.IncidentManager.cancelAuthorization(AuthListener)void :: android.permission.REQUEST_INCIDENT_REPORT_APPROVAL
android.os.IncidentManager.getPendingReports()List<PendingReport> :: android.permission.APPROVE_INCIDENT_REPORTS
android.os.IncidentManager.approveReport(Uri)void :: android.permission.APPROVE_INCIDENT_REPORTS
android.os.IncidentManager.denyReport(Uri)void :: android.permission.APPROVE_INCIDENT_REPORTS
android.os.IncidentManager.getIncidentReportList(String)List<Uri> :: android.permission.PACKAGE_USAGE_STATS,android.permission.DUMP
android.os.IncidentManager.getIncidentReport(Uri)IncidentReport :: android.permission.PACKAGE_USAGE_STATS,android.permission.DUMP
android.os.IncidentManager.deleteIncidentReports(Uri)void :: android.permission.PACKAGE_USAGE_STATS,android.permission.DUMP
android.os.PowerManager.userActivity(long,int,int)void :: android.permission.DEVICE_POWER,android.permission.USER_ACTIVITY
android.os.PowerManager.dream(long)void :: android.permission.READ_DREAM_STATE,android.permission.WRITE_DREAM_STATE
android.os.PowerManager.reboot(String)void :: android.permission.REBOOT
android.os.PowerManager.rebootSafeMode()void :: android.permission.REBOOT
android.os.PowerManager.setPowerSaveModeEnabled(boolean)boolean :: android.permission.DEVICE_POWER,android.permission.POWER_SAVER
android.os.PowerManager.setDynamicPowerSaveHint(boolean,int)boolean :: android.permission.POWER_SAVER
android.os.PowerManager.setAdaptivePowerSavePolicy(BatterySaverPolicyConfig)boolean :: android.permission.DEVICE_POWER,android.permission.POWER_SAVER
android.os.PowerManager.setAdaptivePowerSaveEnabled(boolean)boolean :: android.permission.DEVICE_POWER,android.permission.POWER_SAVER
android.os.PowerManager.getPowerSaveModeTrigger()int :: android.permission.POWER_SAVER
android.os.PowerManager.isAmbientDisplayAvailable()boolean :: android.permission.READ_DREAM_STATE
android.os.PowerManager.suppressAmbientDisplay(String,boolean)void :: android.permission.WRITE_DREAM_STATE
android.os.PowerManager.isAmbientDisplaySuppressedForToken(String)boolean :: android.permission.READ_DREAM_STATE
android.os.PowerManager.isAmbientDisplaySuppressed()boolean :: android.permission.READ_DREAM_STATE
android.os.PowerManager.forceSuspend()boolean :: android.permission.DEVICE_POWER
android.os.PowerWhitelistManager.addToWhitelist(String)void :: android.permission.DEVICE_POWER
android.os.PowerWhitelistManager.addToWhitelist(List<String>)void :: android.permission.DEVICE_POWER
android.os.PowerWhitelistManager.whitelistAppTemporarily(String,long)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.os.PowerWhitelistManager.whitelistAppTemporarilyForEvent(String,int,String)long :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.os.RecoverySystem.processPackage(Context,File,ProgressListener,Handler)void :: android.permission.RECOVERY
android.os.RecoverySystem.processPackage(Context,File,ProgressListener)void :: android.permission.RECOVERY
android.os.RecoverySystem.installPackage(Context,File)void :: android.permission.RECOVERY
android.os.RecoverySystem.installPackage(Context,File,boolean)void :: android.permission.RECOVERY
android.os.RecoverySystem.prepareForUnattendedUpdate(Context,String,IntentSender)void :: android.permission.RECOVERY
android.os.RecoverySystem.clearPrepareForUnattendedUpdate(Context)void :: android.permission.RECOVERY
android.os.RecoverySystem.rebootAndApply(Context,String,String)void :: android.permission.RECOVERY
android.os.RecoverySystem.scheduleUpdateOnBoot(Context,File)void :: android.permission.RECOVERY
android.os.RecoverySystem.cancelScheduledUpdate(Context)void :: android.permission.RECOVERY
android.os.RecoverySystem.rebootWipeAb(Context,File,String)void :: android.permission.RECOVERY,android.permission.REBOOT
android.os.SystemConfigManager.getDisabledUntilUsedPreinstalledCarrierApps()Set<String> :: android.permission.READ_CARRIER_APP_INFO
android.os.SystemConfigManager.getDisabledUntilUsedPreinstalledCarrierAssociatedApps()Map<String, :: android.permission.READ_CARRIER_APP_INFO
android.os.SystemConfigManager.getDisabledUntilUsedPreinstalledCarrierAssociatedAppEntries()Map<String, :: android.permission.READ_CARRIER_APP_INFO
android.os.SystemUpdateManager.retrieveSystemUpdateInfo()Bundle :: android.permission.,android.permission.READ_SYSTEM_UPDATE_INFO,android.permission.RECOVERY
android.os.SystemUpdateManager.updateSystemUpdateInfo(PersistableBundle)void :: android.permission.RECOVERY
android.os.UserManager.getUserSwitchability()int :: android.permission.INTERACT_ACROSS_USERS,android.permission.MANAGE_USERS,android.permission.READ_PHONE_STATE
android.os.UserManager.getUserSwitchability(UserHandle)int :: android.permission.INTERACT_ACROSS_USERS,android.permission.MANAGE_USERS,android.permission.READ_PHONE_STATE
android.os.UserManager.getUserName()String :: android.permission.MANAGE_USERS,android.permission.GET_ACCOUNTS_PRIVILEGED
android.os.UserManager.isUserNameSet()boolean :: android.permission.MANAGE_USERS,android.permission.GET_ACCOUNTS_PRIVILEGED
android.os.UserManager.isPrimaryUser()boolean :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.isAdminUser()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isUserAdmin(int)boolean :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.isUserOfType(String)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isRestrictedProfile()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isRestrictedProfile(UserHandle)boolean :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.canHaveRestrictedProfile(int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.hasRestrictedProfiles()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isGuestUser(int)boolean :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.isGuestUser()boolean :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.isProfile()boolean :: android.permission.INTERACT_ACROSS_USERS,android.permission.MANAGE_USERS
android.os.UserManager.isManagedProfile(int)boolean :: android.permission.INTERACT_ACROSS_USERS,android.permission.MANAGE_USERS
android.os.UserManager.isEphemeralUser()boolean :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.isUserEphemeral(int)boolean :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.isUserRunning(UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS,android.permission.MANAGE_USERS
android.os.UserManager.isUserRunning(int)boolean :: android.permission.INTERACT_ACROSS_USERS,android.permission.MANAGE_USERS
android.os.UserManager.isUserRunningOrStopping(UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS,android.permission.MANAGE_USERS
android.os.UserManager.isUserUnlocked(UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS,android.permission.MANAGE_USERS
android.os.UserManager.isUserUnlocked(int)boolean :: android.permission.INTERACT_ACROSS_USERS,android.permission.MANAGE_USERS
android.os.UserManager.isUserUnlockingOrUnlocked(UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS,android.permission.MANAGE_USERS
android.os.UserManager.isUserUnlockingOrUnlocked(int)boolean :: android.permission.INTERACT_ACROSS_USERS,android.permission.MANAGE_USERS
android.os.UserManager.getUserInfo(int)UserInfo :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.getUserRestrictionSource(String,UserHandle)int :: android.permission.MANAGE_USERS
android.os.UserManager.getUserRestrictionSources(String,UserHandle)List<EnforcingUser> :: android.permission.MANAGE_USERS
android.os.UserManager.getUserRestrictions(UserHandle)Bundle :: android.permission.INTERACT_ACROSS_USERS,android.permission.MANAGE_USERS
android.os.UserManager.hasBaseUserRestriction(String,UserHandle)boolean :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.setUserRestriction(String,boolean)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserRestriction(String,boolean,UserHandle)void :: android.permission.MANAGE_USERS
android.os.UserManager.hasUserRestrictionForUser(String,UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS,android.permission.MANAGE_USERS
android.os.UserManager.createUser(String,String,int)UserInfo :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.preCreateUser(String)UserInfo :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.createGuest(Context,String)UserInfo :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.findCurrentGuestUser()UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.createProfile(String,String,Set<String>)UserHandle :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.createProfileForUser(String,int,int)UserInfo :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.createProfileForUser(String,String,int,int)UserInfo :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.createProfileForUser(String,String,int,int,String[])UserInfo :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.createProfileForUserEvenWhenDisallowed(String,String,int,int,String[])UserInfo :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.createRestrictedProfile(String)UserInfo :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.getSeedAccountName()String :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountType()String :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountOptions()PersistableBundle :: android.permission.MANAGE_USERS
android.os.UserManager.setSeedAccountData(int,String,String,PersistableBundle)void :: android.permission.MANAGE_USERS
android.os.UserManager.clearSeedAccountData()void :: android.permission.MANAGE_USERS
android.os.UserManager.markGuestForDeletion(int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.setUserEnabled(int)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserAdmin(int)void :: android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS_FULL
android.os.UserManager.evictCredentialEncryptionKey(int)void :: android.permission.MANAGE_USERS
android.os.UserManager.getUserCount()int :: android.permission.MANAGE_USERS
android.os.UserManager.getUsers()List<UserInfo> :: android.permission.MANAGE_USERS
android.os.UserManager.getUsers(boolean,boolean,boolean)List<UserInfo> :: android.permission.MANAGE_USERS
android.os.UserManager.getUserHandles(boolean)List<UserHandle> :: android.permission.MANAGE_USERS
android.os.UserManager.getSerialNumbersOfUsers(boolean)long[] :: android.permission.MANAGE_USERS
android.os.UserManager.getUserAccount(int)String :: android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS_FULL
android.os.UserManager.setUserAccount(int,String)void :: android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS_FULL
android.os.UserManager.getPrimaryUser()UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.canAddMoreUsers()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.canAddMoreManagedProfiles(int,boolean)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.canAddMoreProfilesToUser(String,int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.getProfiles(int)List<UserInfo> :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.isSameProfileGroup(UserHandle,UserHandle)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isSameProfileGroup(int,int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.getEnabledProfiles(int)List<UserInfo> :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.getEnabledProfiles()List<UserHandle> :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.getAllProfiles()List<UserHandle> :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.getProfiles(boolean)List<UserHandle> :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.getProfileIds(int,boolean)int[] :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.getProfileIdsWithDisabled(int)int[] :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.getEnabledProfileIds(int)int[] :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.getCredentialOwnerProfile(int)int :: android.permission.MANAGE_USERS
android.os.UserManager.getProfileParent(int)UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.getProfileParent(UserHandle)UserHandle :: android.permission.MANAGE_USERS
android.os.UserManager.requestQuietModeEnabled(boolean,UserHandle)boolean :: android.permission.MANAGE_USERS,android.permission.MODIFY_QUIET_MODE
android.os.UserManager.requestQuietModeEnabled(boolean,UserHandle,IntentSender)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.removeUser(int)boolean :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.removeUser(UserHandle)boolean :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.removeUserEvenWhenDisallowed(int)boolean :: android.permission.MANAGE_USERS,android.permission.CREATE_USERS
android.os.UserManager.setUserName(int,String)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserName(String)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserIcon(int,Bitmap)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserIcon(Bitmap)void :: android.permission.MANAGE_USERS
android.os.UserManager.getUserIcon(int)Bitmap :: android.permission.MANAGE_USERS,android.permission.GET_ACCOUNTS_PRIVILEGED
android.os.UserManager.getUserIcon()Bitmap :: android.permission.MANAGE_USERS,android.permission.GET_ACCOUNTS_PRIVILEGED
android.os.UserManager.setDefaultGuestRestrictions(Bundle)void :: android.permission.MANAGE_USERS
android.os.UserManager.getDefaultGuestRestrictions()Bundle :: android.permission.MANAGE_USERS
android.os.UserManager.someUserHasSeedAccount(String,String)boolean :: android.permission.MANAGE_USERS
android.os.Vibrator.setAlwaysOnEffect(int,VibrationEffect,AudioAttributes)boolean :: android.permission.VIBRATE_ALWAYS_ON
android.os.Vibrator.setAlwaysOnEffect(int,String,int,VibrationEffect,AudioAttributes)boolean :: android.permission.VIBRATE_ALWAYS_ON
android.os.Vibrator.vibrate(long)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long,AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long[],int)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long[],int,AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(VibrationEffect)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(VibrationEffect,AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(int,String,VibrationEffect,String,AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.cancel()void :: android.permission.VIBRATE
android.os.Vibrator.isVibrating()boolean :: android.permission.ACCESS_VIBRATOR_STATE
android.os.Vibrator.addVibratorStateListener(OnVibratorStateChangedListener)void :: android.permission.ACCESS_VIBRATOR_STATE
android.os.Vibrator.addVibratorStateListener(Executor,OnVibratorStateChangedListener)void :: android.permission.ACCESS_VIBRATOR_STATE
android.os.Vibrator.removeVibratorStateListener(OnVibratorStateChangedListener)void :: android.permission.ACCESS_VIBRATOR_STATE
android.os.image.DynamicSystemClient.bind()void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.image.DynamicSystemClient.unbind()void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.image.DynamicSystemClient.start(Uri,long)void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.image.DynamicSystemClient.start(Uri,long,long)void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.setAshmem(ParcelFileDescriptor,long)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.submitFromAshmem(int)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.getAvbPublicKey(AvbPublicKey)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.commit()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.startInstallation(String)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.createPartition(String,long,boolean)Session :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.finishInstallation()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.getInstallationProgress()GsiProgress :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.abort()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.isInUse()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.isInstalled()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.isEnabled()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.remove()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.setEnable(boolean,boolean)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.permission.PermissionControllerManager.revokeRuntimePermissions(Map<String,List<String>>,boolean,int,Executor,OnRevokeRuntimePermissionsCallback)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.setRuntimePermissionGrantStateByDeviceAdmin(String,String,String,int,Executor,Consumer<Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS,android.permission.REVOKE_RUNTIME_PERMISSIONS,android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.permission.PermissionControllerManager.getRuntimePermissionBackup(UserHandle,Executor,Consumer<byte[]>)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.stageAndApplyRuntimePermissionsBackup(byte[],UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS,android.permission.RESTORE_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.applyStagedRuntimePermissionBackup(String,UserHandle,Executor,Consumer<Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS,android.permission.RESTORE_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.getAppPermissions(String,OnGetAppPermissionResultCallback,Handler)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.revokeRuntimePermission(String,String)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.countPermissionApps(List<String>,int,OnCountPermissionAppsResultCallback,Handler)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.getPermissionUsages(boolean,long,Executor,OnPermissionUsageResultCallback)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.grantOrUpgradeDefaultRuntimePermissions(Executor,Consumer<Boolean>)void :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.permission.PermissionControllerManager.notifyOneTimePermissionSessionTimeout(String)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionManager.getRuntimePermissionsVersion()int :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY,android.permission.UPGRADE_RUNTIME_PERMISSIONS
android.permission.PermissionManager.mPackageManager.setRuntimePermissionsVersion(version,mContext.getUserId)int :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY,android.permission.UPGRADE_RUNTIME_PERMISSIONS
android.permission.PermissionManager.grantDefaultPermissionsToLuiApp(String,UserHandle,Executor,Consumer<Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.PermissionManager.revokeDefaultPermissionsFromLuiApps(String[],UserHandle,Executor,Consumer<Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.PermissionManager.grantDefaultPermissionsToEnabledImsServices(String[],UserHandle,Executor,Consumer<Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.PermissionManager.grantDefaultPermissionsToEnabledTelephonyDataServices(String[],UserHandle,Executor,Consumer<Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.PermissionManager.revokeDefaultPermissionsFromDisabledTelephonyDataServices(String[],UserHandle,Executor,Consumer<Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.PermissionManager.grantDefaultPermissionsToEnabledCarrierApps(String[],UserHandle,Executor,Consumer<Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.PermissionManager.getAutoRevokeExemptionRequestedPackages()Set<String> :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.permission.PermissionManager.getAutoRevokeExemptionGrantedPackages()Set<String> :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.permission.PermissionManager.startOneTimePermissionSession(String,long,int,int)void :: android.permission.MANAGE_ONE_TIME_PERMISSION_SESSIONS
android.permission.PermissionManager.stopOneTimePermissionSession(String)void :: android.permission.MANAGE_ONE_TIME_PERMISSION_SESSIONS
android.print.PrintManager.addPrintServicesChangeListener(PrintServicesChangeListener,Handler)void :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.removePrintServicesChangeListener(PrintServicesChangeListener)void :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.getPrintServices(int)List<PrintServiceInfo> :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.addPrintServiceRecommendationsChangeListener(PrintServiceRecommendationsChangeListener,Handler)void :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.print.PrintManager.removePrintServiceRecommendationsChangeListener(PrintServiceRecommendationsChangeListener)void :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.print.PrintManager.getPrintServiceRecommendations()List<RecommendationInfo> :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.provider.DeviceConfig.getProperty(String,String)String :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getProperties(String,String)Properties :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getString(String,String,String)String :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getBoolean(String,String,boolean)boolean :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getInt(String,String,int)int :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getLong(String,String,long)long :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getFloat(String,String,float)float :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.setProperty(String,String,String,boolean)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.setProperties(Properties)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.resetToDefaults(int,String)void :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.addOnPropertiesChangedListener(String,Executor,OnPropertiesChangedListener)void :: android.permission.READ_DEVICE_CONFIG
android.provider.Settings.putString(ContentResolver,String,String,boolean)boolean :: android.permission.MODIFY_SETTINGS_OVERRIDEABLE_BY_RESTORE
android.provider.Settings.putString(ContentResolver,String,String,String,boolean)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings.resetToDefaults(ContentResolver,String)void :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings.putString(ContentResolver,String,String,String,boolean,boolean)boolean :: android.permission.MODIFY_SETTINGS_OVERRIDEABLE_BY_RESTORE
android.provider.Settings.getString(ContentResolver,String)String :: android.permission.READ_DEVICE_CONFIG
android.provider.Settings.getStrings(ContentResolver,String,List<String>)Map<String, :: android.permission.READ_DEVICE_CONFIG
android.provider.Settings.setStrings(ContentResolver,String,Map<String,String>)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings.resetToDefaults(ContentResolver,int,String)void :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings.registerMonitorCallback(ContentResolver,RemoteCallback)void :: android.permission.MONITOR_DEVICE_CONFIG_ACCESS
android.se.omapi.Reader.reset()boolean :: android.permission.SECURE_ELEMENT_PRIVILEGED_OPERATION
android.security.FileIntegrityManager.isAppSourceCertificateTrusted(X509Certificate)boolean :: android.permission.REQUEST_INSTALL_PACKAGES,android.permission.INSTALL_PACKAGES
android.security.keystore.AttestationUtils.attestDeviceIds(Context,int[],byte[])X509Certificate[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.security.keystore.recovery.RecoveryController.getInstance(Context)RecoveryController :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.isRecoverableKeyStoreEnabled(Context)boolean :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.initRecoveryService(String,byte[],byte[])void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getKeyChainSnapshot()KeyChainSnapshot :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setSnapshotCreatedPendingIntent(PendingIntent)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setServerParams(byte[])void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getAliases()List<String> :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setRecoveryStatus(String,int)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRecoveryStatus(String)int :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setRecoverySecretTypes(int[])void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRecoverySecretTypes()int[] :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.generateKey(String)Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.generateKey(String,byte[])Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.importKey(String,byte[])Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.importKey(String,byte[],byte[])Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getKey(String)Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.removeKey(String)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.createRecoverySession()RecoverySession :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRootCertificates()Map<String, :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.newInstance(RecoveryController)RecoverySession :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.start(String,CertPath,byte[],byte[],List<KeyChainProtectionParams>)byte[] :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.recoverKeyChainSnapshot(byte[],List<WrappedApplicationKey>)Map<String, :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.close()void :: android.permission.RECOVER_KEYSTORE
android.service.dataloader.DataLoaderService.writeData(String,long,long,ParcelFileDescriptor)void :: android.permission.INSTALL_PACKAGES
android.service.oemlock.OemLockManager.getLockName()String :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.setOemUnlockAllowedByCarrier(boolean,byte[])void :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.isOemUnlockAllowedByCarrier()boolean :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.setOemUnlockAllowedByUser(boolean)void :: android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.isOemUnlockAllowedByUser()boolean :: android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.getDataBlockSize()int :: android.permission.ACCESS_PDB_STATE
android.service.persistentdata.PersistentDataBlockManager.wipe()void :: android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.setOemUnlockEnabled(boolean)void :: android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.getOemUnlockEnabled()boolean :: android.permission.READ_OEM_UNLOCK_STATE,android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.getFlashLockState()int :: android.permission.READ_OEM_UNLOCK_STATE,android.permission.OEM_UNLOCK_STATE
android.service.voice.VoiceInteractionService.createKeyphraseModelManager()KeyphraseModelManager :: android.permission.MANAGE_VOICE_KEYPHRASES
android.telecom.Conference.setConferenceState(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Conference.setCallDirection(int)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Conference.setAddress(Uri,int)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Connection.setConnectionStartElapsedRealtimeMillis(long)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.PhoneAccount.setGroupId(String)Builder :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.getDefaultOutgoingPhoneAccount(String)PhoneAccountHandle :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getUserSelectedOutgoingPhoneAccount()PhoneAccountHandle :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.setUserSelectedOutgoingPhoneAccount(PhoneAccountHandle)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.getPhoneAccountsSupportingScheme(String)List<PhoneAccountHandle> :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getCallCapablePhoneAccounts()List<PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getSelfManagedPhoneAccounts()List<PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getCallCapablePhoneAccounts(boolean)List<PhoneAccountHandle> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.getDefaultDialerPackage(UserHandle)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.setDefaultDialer(String)boolean :: android.permission.MODIFY_PHONE_STATE,android.permission.WRITE_SECURE_SETTINGS
android.telecom.TelecomManager.isVoiceMailNumber(PhoneAccountHandle,String)boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getVoiceMailNumber(PhoneAccountHandle)String :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getLine1Number(PhoneAccountHandle)String :: android.permission.READ_SMS,android.permission.READ_PHONE_NUMBERS,android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isInCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isInManagedCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isRinging()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.endCall()boolean :: android.permission.ANSWER_PHONE_CALLS
android.telecom.TelecomManager.acceptRingingCall()void :: android.permission.ANSWER_PHONE_CALLS,android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.acceptRingingCall(int)void :: android.permission.ANSWER_PHONE_CALLS,android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.silenceRinger()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.isTtySupported()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getCurrentTtyMode()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.handleMmi(String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.handleMmi(String,PhoneAccountHandle)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.getAdnUriForPhoneAccount(PhoneAccountHandle)Uri :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.cancelMissedCallsNotification()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.showInCallScreen(boolean)void :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.placeCall(Uri,Bundle)void :: android.permission.CALL_PHONE,android.permission.MANAGE_OWN_CALLS
android.telecom.TelecomManager.startConference(List<Uri>,Bundle)void :: android.permission.CALL_PHONE
android.telecom.TelecomManager.enablePhoneAccount(PhoneAccountHandle,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.dumpAnalytics()TelecomAnalytics :: android.permission.DUMP
android.telecom.TelecomManager.isInEmergencyCall()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.AnomalyReporter.initialize(Context)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.CarrierConfigManager.overrideConfig(int,PersistableBundle)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.CarrierConfigManager.overrideConfig(int,PersistableBundle,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.CarrierConfigManager.updateConfigForPhoneId(int,String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.CarrierConfigManager.getDefaultCarrierServicePackageName()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.PhoneStateListener.onPreciseCallStateChanged(PreciseCallState)) :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onCallDisconnectCauseChanged(int,int)) :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onImsCallDisconnectCauseChanged(ImsReasonInfo)) :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onPreciseDataConnectionStateChanged(PreciseDataConnectionState)) :: android.permission.MODIFY_PHONE_STATE
android.telephony.PhoneStateListener.onDisplayInfoChanged(TelephonyDisplayInfo)) :: android.permission.READ_PHONE_STATE
android.telephony.SmsManager.sendTextMessageWithoutPersisting(String,String,String,PendingIntent,PendingIntent)void :: android.permission.SEND_SMS,android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.sendMultipartTextMessageWithoutPersisting(String,String,List<String>,List<PendingIntent>,List<PendingIntent>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.copyMessageToIcc(byte[],byte[],int)boolean :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.deleteMessageFromIcc(int)boolean :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.updateMessageOnIcc(int,int,byte[])boolean :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.getMessagesFromIcc()List<SmsMessage> :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.getSmsCapacityOnIcc()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SmsManager.getSmsMessagesForFinancialApp(Bundle,Executor,FinancialSmsCallback)void :: android.permission.SMS_FINANCIAL_TRANSACTIONS
android.telephony.SmsManager.checkSmsShortCodeDestination(String,String)int :: android.permission.READ_PHONE_STATE
android.telephony.SmsManager.getSmscAddress()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SmsManager.setSmscAddress(String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.getPremiumSmsConsent(String)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SmsManager.setPremiumSmsConsent(String,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfo(int)SubscriptionInfo :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoForIcc(String)SubscriptionInfo :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoForSimSlotIndex(int)SubscriptionInfo :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoList()List<SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoCount()int :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.setIconTint(int,int)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDisplayName(String,int,int)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDefaultVoiceSubscriptionId(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDefaultSmsSubId(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDefaultDataSubId(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionIdList()int[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getCompleteActiveSubscriptionIdList()int[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.isActiveSubscriptionId(int)boolean :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.setPreferredDataSubscriptionId(int,boolean,Executor,Consumer<Integer>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getPreferredDataSubscriptionId()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getOpportunisticSubscriptions()List<SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.switchToSubscription(int,PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.SubscriptionManager.setOpportunistic(boolean,int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.createSubscriptionGroup(List<Integer>)ParcelUuid :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.addSubscriptionsIntoGroup(List<Integer>,ParcelUuid)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.removeSubscriptionsFromGroup(List<Integer>,ParcelUuid)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getSubscriptionsInGroup(ParcelUuid)List<SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.setSubscriptionEnabled(int,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setUiccApplicationsEnabled(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.canDisablePhysicalSubscription()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.isSubscriptionEnabled(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getEnabledSubscriptionId(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDeviceSoftwareVersion()String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDeviceSoftwareVersion(int)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDeviceId()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDeviceId(int)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getImei()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getImei(int)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getMeid()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getMeid(int)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getNai()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCellLocation()CellLocation :: android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.enableLocationUpdates()void :: android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManager.enableLocationUpdates(int)void :: android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManager.disableLocationUpdates()void :: android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManager.getNeighboringCellInfo()List<NeighboringCellInfo> :: android.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManager.getCarrierConfig()PersistableBundle :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getNetworkType(int)int :: android.permission.P
android.telephony.TelephonyManager.getDataNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDataNetworkType(int)int :: android.permission.P
android.telephony.TelephonyManager.getVoiceNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceNetworkType(int)int :: android.permission.P
android.telephony.TelephonyManager.getSimCardState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSimApplicationState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isApplicationOnUicc(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSimSerialNumber()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSimSerialNumber(int)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isLteCdmaEvdoGsmWcdmaEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getLteOnCdmaMode(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getUiccCardsInfo()List<UiccCardInfo> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getUiccSlotsInfo()UiccSlotInfo[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.refreshUiccProfile()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.switchSlots(int[])boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getLogicalToPhysicalSlotMapping()Map<Integer, :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSubscriberId()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSubscriberId(int)String :: android.permission.P
android.telephony.TelephonyManager.getCarrierInfoForImsiEncryption(int)ImsiEncryptionInfo :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.resetCarrierKeysForImsiEncryption()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getGroupIdLevel1()String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getGroupIdLevel1(int)String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLine1Number()String :: android.permission.READ_SMS,android.permission.READ_PHONE_NUMBERS,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLine1Number(int)String :: android.permission.READ_SMS,android.permission.READ_PHONE_NUMBERS,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLine1AlphaTag()String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLine1AlphaTag(int)String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMergedImsisFromGroup()String[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getMsisdn()String :: android.permission.READ_SMS,android.permission.READ_PHONE_NUMBERS,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMsisdn(int)String :: android.permission.READ_SMS,android.permission.READ_PHONE_NUMBERS,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailNumber()String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailNumber(int)String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVisualVoicemailPackageName()String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.sendVisualVoicemailSmsForSubscriber(int,String,int,String,PendingIntent)void :: android.permission.SEND_SMS
android.telephony.TelephonyManager.setVoiceActivationState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setVoiceActivationState(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataActivationState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataActivationState(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getVoiceActivationState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getVoiceActivationState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDataActivationState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDataActivationState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMessageCount()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMessageCount(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailAlphaTag()String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailAlphaTag(int)String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getIsimDomain()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getIsimImpu()String[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriInformation()CdmaEriInformation :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconIndex(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconMode(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriText()String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriText(int)String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getAllCellInfo()List<CellInfo> :: android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.requestCellInfoUpdate(Executor,CellInfoCallback)void :: android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.requestCellInfoUpdate(WorkSource,Executor,CellInfoCallback)void :: android.permission.ACCESS_FINE_LOCATION,android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccOpenLogicalChannelBySlot(int,String,int)IccOpenLogicalChannelResponse :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccCloseLogicalChannelBySlot(int,int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduLogicalChannelBySlot(int,int,int,int,int,int,int,String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduBasicChannelBySlot(int,int,int,int,int,int,String)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.resetRadioConfig()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.rebootRadio()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.requestNumberVerification(PhoneNumberRange,long,Executor,NumberVerificationCallback)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getIsimIst()String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getForbiddenPlmns()String[] :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getForbiddenPlmns(int,int)String[] :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setForbiddenPlmns(List<String>)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.resetIms(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getPreferredNetworkType(int)) :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getPreferredNetworkTypeBitmask()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getAllowedNetworkTypes()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeAutomatic()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAvailableNetworks()CellNetworkScanResult :: android.permission.ACCESS_COARSE_LOCATION,android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.requestNetworkScan(NetworkScanRequest,Executor,TelephonyScanManager.NetworkScanCallback)NetworkScan :: android.permission.ACCESS_FINE_LOCATION,android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.requestNetworkScan(NetworkScanRequest,TelephonyScanManager.NetworkScanCallback)NetworkScan :: android.permission.ACCESS_FINE_LOCATION,android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeManual(String,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeManual(String,boolean,int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeManual(OperatorInfo,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getNetworkSelectionMode()int :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyManager.getManualNetworkSelectionPlmn()String :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyManager.isInEmergencySmsMode()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setPreferredNetworkTypeBitmask(long)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAllowedNetworkTypes(long)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAllowedNetworkTypesForReason(int,long)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAllowedNetworkTypesForReason(int)long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getEffectiveAllowedNetworkTypes()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isTetheringApnRequired()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMdn()String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMdn(int)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMin()String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMin(int)String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCarrierPrivilegedPackagesForAllActiveSubscriptions()List<String> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.call(String,String)void :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.endCall()boolean :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.answerRingingCall()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isOffhook()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isRinging()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isIdle()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isRadioOn()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.supplyPin(String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPuk(String,String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPinReportResult(String)int[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPukReportResult(String,String)int[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPinReportPinResult(String)PinResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPukReportPinResult(String,String)PinResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.sendUssdRequest(String,UssdResponseCallback,Handler)void :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.handlePinMmi(String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.handlePinMmiForSubscriber(int,String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.toggleRadioOnOff()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadio(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadioPower(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.shutdownAllRadios()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isAnyRadioPoweredOn()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getRadioPowerState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.enableDataConnectivity()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.disableDataConnectivity()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isDataEnabled()boolean :: android.permission.MODIFY_PHONE_STATE,android.permission.ACCESS_NETWORK_STATE
android.telephony.TelephonyManager.isDataRoamingEnabled()boolean :: android.permission.READ_PHONE_STATE,android.permission.ACCESS_NETWORK_STATE
android.telephony.TelephonyManager.getCdmaRoamingMode()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCdmaRoamingMode(int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setCdmaSubscriptionMode(int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataRoamingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.enableVideoCalling(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isVideoCallingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerStateForSlot(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAndUpdateDefaultRespondViaMessageApplication()ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.telephony.TelephonyManager.getDefaultRespondViaMessageApplication()ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.telephony.TelephonyManager.getSubscriptionId(PhoneAccountHandle)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.resetSettings()void :: android.permission.CONNECTIVITY_INTERNAL
android.telephony.TelephonyManager.getSimLocale()Locale :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getServiceState()ServiceState :: android.permission.ACCESS_COARSE_LOCATION,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCarrierIdFromMccMnc(String)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCertsFromCarrierPrivilegeAccessRules()List<String> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getAidForAppType(int)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getTelephonyHistograms()List<TelephonyHistogram> :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAllowedCarriers(int,List<CarrierIdentifier>)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setCarrierRestrictionRules(CarrierRestrictionRules)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAllowedCarriers(int)List<CarrierIdentifier> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCarrierRestrictionRules()CarrierRestrictionRules :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCarrierDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadioEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.reportDefaultNetworkStatus(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.resetAllCarrierActions()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setPolicyDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyCallbackMode()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isManualNetworkSelectionAllowed()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyManager.setAlwaysReportSignalStrength(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isDataConnectionAllowed()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getNumberOfModemsWithSimultaneousDataConnections()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setOpportunisticNetworkState(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isOpportunisticNetworkEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSupportedRadioAccessFamily()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.notifyOtaEmergencyNumberDbInstalled()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.updateOtaEmergencyNumberDbFilePath(ParcelFileDescriptor)void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.TelephonyManager.resetOtaEmergencyNumberDbFilePath()void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.TelephonyManager.isEmergencyAssistanceEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyNumberList()Map<Integer, :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyNumberList(int)Map<Integer, :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isPotentialEmergencyNumber(String)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyNumberDbVersion()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getPreferredOpportunisticDataSubscription()int :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.enableModemForSlot(int,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isModemEnabledForSlot(int)boolean :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setMultiSimCarrierRestriction(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isMultiSimSupported()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.switchMultiSimConfig(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.doesSwitchMultiSimConfigTriggerReboot()boolean :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCarrierPrivilegeStatus(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isDataEnabledForApn(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isApnMetered(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setSystemSelectionChannels(List<RadioAccessSpecifier>,Executor,Consumer<Boolean>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSystemSelectionChannels(List<RadioAccessSpecifier>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.matchesCurrentSimOperator(String,int,String)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCallForwarding(int)CallForwardingInfo :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCallForwarding(CallForwardingInfo)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCallWaitingStatus()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCallWaitingStatus(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataAllowedDuringVoiceCall(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isDataAllowedInVoiceCall()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setAlwaysAllowMmsData(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isIccLockEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setIccLockEnabled(boolean,String)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.changeIccLockPassword(String,String)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.notifyUserActivity()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyRegistryManager.notifyCallStateChangedForAllSubscriptions(int,String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.euicc.EuiccManager.getOtaStatus()int :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.downloadSubscription(DownloadableSubscription,boolean,PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.continueOperation(Intent,Bundle)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getDownloadableSubscriptionMetadata(DownloadableSubscription,PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getDefaultDownloadableSubscriptionList(PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.deleteSubscription(int,PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.switchToSubscription(int,PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.updateSubscriptionNickname(int,String,PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.eraseSubscriptions(PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.eraseSubscriptions(int,PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.setSupportedCountries(List<String>)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.setUnsupportedCountries(List<String>)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getSupportedCountries()List<String> :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getUnsupportedCountries()List<String> :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.isSupportedCountry(String)boolean :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.ims.ImsMmTelManager.registerImsRegistrationCallback(Executor,RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.registerImsRegistrationCallback(Executor,RegistrationManager.RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.unregisterImsRegistrationCallback(RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.unregisterImsRegistrationCallback(RegistrationManager.RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getRegistrationState(Executor,Consumer<Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getRegistrationTransportType(Executor,Consumer<Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.registerMmTelCapabilityCallback(Executor,CapabilityCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.unregisterMmTelCapabilityCallback(CapabilityCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isAdvancedCallingSettingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setAdvancedCallingSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isCapable(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isAvailable(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isSupported(int,int,Executor,Consumer<Boolean>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isVtSettingEnabled(). :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVtSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isVoWiFiSettingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isVoWiFiRoamingSettingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiRoamingSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiNonPersistent(boolean,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getVoWiFiModeSetting()int :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiModeSetting(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getVoWiFiRoamingModeSetting()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiRoamingModeSetting(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setRttCapabilitySetting(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isTtyOverVolteEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE,android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getFeatureState(Executor,Consumer<Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.registerImsRegistrationCallback(Executor,RegistrationManager.RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.unregisterImsRegistrationCallback(RegistrationManager.RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.getRegistrationState(Executor,Consumer<Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.getRegistrationTransportType(Executor,Consumer<Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.registerRcsAvailabilityCallback(Executor,AvailabilityCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.unregisterRcsAvailabilityCallback(AvailabilityCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.isCapable(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.isAvailable(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.registerProvisioningChangedCallback(Executor,Callback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.unregisterProvisioningChangedCallback(Callback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.getProvisioningIntValue(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.getProvisioningStringValue(int)String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.setProvisioningIntValue(int,int)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.setProvisioningStringValue(int,String)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.setProvisioningStatusForCapability(int,int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.getProvisioningStatusForCapability(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.getRcsProvisioningStatusForCapability(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.setRcsProvisioningStatusForCapability(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.notifyRcsAutoConfigurationReceived(byte[],boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.RcsUceAdapter.requestCapabilities(Executor,List<Uri>,CapabilitiesCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RcsUceAdapter.getUcePublishState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RcsUceAdapter.isUceSettingEnabled()boolean :: android.permission.READ_PHONE_STATE
android.telephony.ims.RcsUceAdapter.setUceSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.RegistrationManager.registerImsRegistrationCallback(Executor,RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RegistrationManager.unregisterImsRegistrationCallback(RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RegistrationManager.getRegistrationState(Executor,Consumer<Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RegistrationManager.getRegistrationTransportType(Executor,Consumer<Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.util.StatsLog.logBinaryPushStateChanged(String,long,int,int,long[])boolean :: android.permission.PACKAGE_USAGE_STATS,android.permission.DUMP
android.view.Display.requestColorMode(int)void :: android.permission.CONFIGURE_DISPLAY_COLOR_MODE
android.view.InputDevice.enable()void :: android.permission.DISABLE_INPUT_DEVICE
android.view.InputDevice.disable()void :: android.permission.DISABLE_INPUT_DEVICE
android.view.WindowManager.getCurrentImeTouchRegion()Region :: android.permission.RESTRICTED_VR_ACCESS
android.view.inputmethod.InputMethodManager.getInputMethodListAsUser(int)List<InputMethodInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.view.inputmethod.InputMethodManager.getEnabledInputMethodListAsUser(int)List<InputMethodInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.view.inputmethod.InputMethodManager.showInputMethodPickerFromSystem(boolean,int)void :: android.permission.WRITE_SECURE_SETTINGS
android.view.inputmethod.InputMethodManager.setCurrentInputMethodSubtype(InputMethodSubtype)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.widget.TextView.setTextOperationUser(UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.window.DisplayAreaOrganizer.registerOrganizer(int)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.DisplayAreaOrganizer.unregisterOrganizer()void :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.registerOrganizer(int)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.unregisterOrganizer()void :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.createRootTask(int,int)ActivityManager.RunningTaskInfo :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.deleteRootTask(WindowContainerToken)boolean :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.getChildTasks(WindowContainerToken,int[])List<ActivityManager.RunningTaskInfo> :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.getRootTasks(int,int[])List<ActivityManager.RunningTaskInfo> :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.getImeTarget(int)WindowContainerToken :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.setLaunchRoot(int,WindowContainerToken)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.setInterceptBackPressedOnTaskRoot(boolean)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.WindowOrganizer.applyTransaction(WindowContainerTransaction)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.WindowOrganizer.applySyncTransaction(WindowContainerTransaction,WindowContainerTransactionCallback)int :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.WindowOrganizer.takeScreenshot(WindowContainerToken)SurfaceControl :: android.permission.READ_FRAME_BUFFER
android.window.WindowOrganizer.getWindowOrganizerController()IWindowOrganizerController :: android.permission.MANAGE_ACTIVITY_STACKS
com.android.libraries.tv.tvsystem.pm.TvPackageInstaller.uninstallExistingPackage(String,IntentSender)void :: android.permission.DELETE_PACKAGES
com.android.libraries.tv.tvsystem.wifi.TvWifiManager.startLocalOnlyHotspot(SoftApConfiguration,Executor,WifiManager.LocalOnlyHotspotCallback)void :: android.permission.NETWORK_SETUP_WIZARD,android.permission.NETWORK_SETTINGS
com.android.server.content.ContentService.putCache(String,Uri,Bundle,int)void :: android.permission.CACHE_CONTENT
com.android.server.content.ContentService.getCache(String,Uri,int)Bundle :: android.permission.CACHE_CONTENT
com.android.server.inputmethod.InputMethodManagerService.onCommand(String)int :: android.permission.,android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.WRITE_SECURE_SETTINGS,android.permission.DUMP
com.android.server.notification.NotificationManagerService.getHistoricalNotifications(String,int,boolean)StatusBarNotification[] :: android.permission.ACCESS_NOTIFICATIONS
com.android.server.notification.NotificationManagerService.getHistoricalNotificationsWithAttribution(String,String,int,boolean)StatusBarNotification[] :: android.permission.ACCESS_NOTIFICATIONS
com.android.server.notification.NotificationManagerService.getNotificationHistory(String,String)NotificationHistory :: android.permission.ACCESS_NOTIFICATIONS
com.android.server.os.BugreportManagerServiceImpl.startBugreport(int,String,FileDescriptor,FileDescriptor,int,IDumpstateListener,boolean)void :: android.permission.DUMP
com.android.server.os.BugreportManagerServiceImpl.cancelBugreport()void :: android.permission.DUMP
com.android.server.wm.WindowManagerService.showGlobalActions()void :: android.permission.INTERNAL_SYSTEM_WINDOW
com.android.settingslib.bluetooth.LocalBluetoothManager.create(Context,Handler,UserHandle)LocalBluetoothManager :: android.permission.INTERACT_ACROSS_USERS_FULL
com.android.setupwizardlib.util.SystemBarHelper.setBackButtonVisible(Window,boolean)void :: android.permission.STATUS_BAR"
com.android.shell.BugreportRequestedReceiver.onReceive(Context,Intent)void :: android.permission.TRIGGER_SHELL_BUGREPORT
