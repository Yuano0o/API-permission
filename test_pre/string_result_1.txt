android.accessibilityservice.AccessibilityServicegetFingerprintGestureController()FingerprintGestureController  ::  android.permission.USE_FINGERPRINT
android.accounts.AccountManagerfinishSessionAsUser(Bundle,Activity,UserHandle,AccountManagerCallback<Bundle>,Handler)AccountManagerFuture<Bundle>  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.app.ActivityManagermoveTaskToFront(int,int)void  ::  android.permission.REORDER_TASKS
android.app.ActivityManagermoveTaskToFront(int,int,Bundle)void  ::  android.permission.REORDER_TASKS
android.app.ActivityManagergetPackageImportance(String)int  ::  android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManagergetUidImportance(int)int  ::  android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManageraddOnUidImportanceListener(OnUidImportanceListener,int)void  ::  android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManagerremoveOnUidImportanceListener(OnUidImportanceListener)void  ::  android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManagerkillBackgroundProcesses(String)void  ::  android.permission.KILL_BACKGROUND_PROCESSES
android.app.ActivityManagerkillUid(int,String)void  ::  android.permission.KILL_UID
android.app.ActivityManagerforceStopPackage(String)void  ::  android.permission.FORCE_STOP_PACKAGES
android.app.ActivityManagergetCurrentUser()int  ::  android.permission.INTERACT_ACROSS_USERS,android.permission.INTERACT_ACROSS_USERS_FULL
android.app.ActivityManagerdumpPackageState(FileDescriptor,String)void  ::  android.permission.DUMP
android.app.ActivityManagersetPersistentVrThread(int)void  ::  android.permission.RESTRICTED_VR_ACCESS
android.app.AlarmManagerset(int,long,long,long,PendingIntent,WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
android.app.AlarmManagerset(int,long,long,long,OnAlarmListener,Handler,WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
android.app.AppOpsManagersetUidMode(String,int,int)void  ::  android.permission.UPDATE_APP_OPS_STATS
android.app.BroadcastOptionssetTemporaryAppWhitelistDuration(long)void  ::  android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.app.KeyguardManagerdisableKeyguard()void  ::  android.permission.DISABLE_KEYGUARD
android.app.KeyguardManagerreenableKeyguard()void  ::  android.permission.DISABLE_KEYGUARD
android.app.KeyguardManagerexitKeyguardSecurely(OnKeyguardExitResult)void  ::  android.permission.DISABLE_KEYGUARD
android.app.VrManagersetPersistentVrModeEnabled(boolean)void  ::  android.permission.RESTRICTED_VR_ACCESS
android.app.VrManagersetVr2dDisplayProperties(Vr2dDisplayProperties)void  ::  android.permission.RESTRICTED_VR_ACCESS
android.app.WallpaperManagersetDisplayPadding(Rect)void  ::  android.permission.SET_WALLPAPER_HINTS
android.app.WallpaperManagerclearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.app.WallpaperManagerclearWallpaper(int,int)void  ::  android.permission.SET_WALLPAPER
android.app.WallpaperManagersetWallpaperComponent(ComponentName)boolean  ::  android.permission.SET_WALLPAPER_COMPONENT
android.app.admin.DevicePolicyManagerpackageHasActiveAdmins(String)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.app.admin.DevicePolicyManagergetDeviceOwnerComponentOnAnyUser()ComponentName  ::  android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManagergetDeviceOwner()String  ::  android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManagergetDeviceOwnerNameOnAnyUser()String  ::  android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManagersetActiveProfileOwner(ComponentName,String)boolean  ::  android.permission.MANAGE_DEVICE_ADMINS
android.app.admin.DevicePolicyManagergetProfileOwnerNameAsUser(int)String  ::  android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManagernotifyPendingSystemUpdate(long)void  ::  android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManagernotifyPendingSystemUpdate(long,boolean)void  ::  android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManagersetDeviceProvisioningConfigApplied()void  ::  android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManagerisDeviceProvisioningConfigApplied()boolean  ::  android.permission.MANAGE_USERS
android.app.backup.BackupManagerbeginRestoreSession()RestoreSession  ::  android.permission.BACKUP
android.app.backup.BackupManagersetBackupEnabled(boolean)void  ::  android.permission.BACKUP
android.app.backup.BackupManagerisBackupEnabled()boolean  ::  android.permission.BACKUP
android.app.backup.BackupManagersetAutoRestore(boolean)void  ::  android.permission.BACKUP
android.app.backup.BackupManagergetCurrentTransport()String  ::  android.permission.BACKUP
android.app.backup.BackupManagerlistAllTransports()String[]  ::  android.permission.BACKUP
android.app.backup.BackupManagerselectBackupTransport(String)String  ::  android.permission.BACKUP
android.app.backup.BackupManagerselectBackupTransport(ComponentName,SelectBackupTransportCallback)void  ::  android.permission.BACKUP
android.app.backup.BackupManagerbackupNow()void  ::  android.permission.BACKUP
android.app.backup.BackupManagergetAvailableRestoreToken(String)long  ::  android.permission.BACKUP
android.app.backup.BackupManagerisAppEligibleForBackup(String)boolean  ::  android.permission.BACKUP
android.app.backup.BackupManagerrequestBackup(String[],BackupObserver)int  ::  android.permission.BACKUP
android.app.backup.BackupManagerrequestBackup(String[],BackupObserver,BackupManagerMonitor,int)int  ::  android.permission.BACKUP
android.app.backup.BackupManagercancelBackups()void  ::  android.permission.BACKUP
android.app.job.JobInfosetPersisted(boolean)Builder  ::  android.permission.RECEIVE_BOOT_COMPLETED
android.app.job.JobSchedulerscheduleAsPackage(JobInfo,String,int,String)int  ::  android.permission.UPDATE_DEVICE_STATS
android.app.trust.TrustManagersetDeviceLockedForUser(int,boolean)void  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManagerisTrustUsuallyManaged(int)boolean  ::  android.permission.TRUST_LISTENER
android.app.usage.UsageStatsManagerwhitelistAppTemporarily(String,long,UserHandle)void  ::  android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.bluetooth.BluetoothA2dpgetPriority(BluetoothDevice)int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapterisEnabled()boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdaptergetState()int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdaptergetLeState()int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapterenable()boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapterdisable()boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdaptergetAddress()String  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdaptersetName(String)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdaptergetScanMode()int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapterstartDiscovery()boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdaptercancelDiscovery()boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapterisDiscovering()boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdaptergetBondedDevices()Set<BluetoothDevice>  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdaptergetProfileConnectionState(int)int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapterlistenUsingRfcommWithServiceRecord(String,UUID)BluetoothServerSocket  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapterlistenUsingInsecureRfcommWithServiceRecord(String,UUID)BluetoothServerSocket  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapterstartLeScan(LeScanCallback)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapterstartLeScan(UUID[],LeScanCallback)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapterstopLeScan(LeScanCallback)void  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevicegetName()String  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevicegetType()int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevicecreateBond()boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevicegetBondState()int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevicegetBluetoothClass()BluetoothClass  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevicegetUuids()ParcelUuid[]  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevicefetchUuidsWithSdp()boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevicesetPairingConfirmation(boolean)boolean  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevicecreateRfcommSocketToServiceRecord(UUID)BluetoothSocket  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevicecreateInsecureRfcommSocketToServiceRecord(UUID)BluetoothSocket  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothManagergetConnectionState(BluetoothDevice,int)int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothManagergetConnectedDevices(int)List<BluetoothDevice>  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothManagergetDevicesMatchingConnectionStates(int,int[])List<BluetoothDevice>  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothProfilegetConnectedDevices()List<BluetoothDevice>  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothProfilegetDevicesMatchingConnectionStates(int[])List<BluetoothDevice>  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothProfilegetConnectionState(BluetoothDevice)int  ::  android.permission.BLUETOOTH
android.bluetooth.le.BluetoothLeScannerstartScan(ScanCallback)void  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScannerstartScan(List<ScanFilter>,ScanSettings,ScanCallback)void  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScannerstartScan(List<ScanFilter>,ScanSettings,PendingIntent)int  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScannerstartScanFromSource(WorkSource,ScanCallback)void  ::  android.permission.UPDATE_DEVICE_STATS,android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScannerstartScanFromSource(List<ScanFilter>,ScanSettings,WorkSource,ScanCallback)void  ::  android.permission.UPDATE_DEVICE_STATS,android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScannerstopScan(ScanCallback)void  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScannerstopScan(PendingIntent)void  ::  android.permission.BLUETOOTH_ADMIN
android.content.ContextstartActivityAsUser(Intent,UserHandle)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.content.ContextstartActivityAsUser(Intent,Bundle,UserHandle)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.content.ContextstartActivitiesAsUser(Intent[],Bundle,UserHandle)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.content.ContextsendBroadcastAsUser(Intent,UserHandle)void  ::  android.permission.INTERACT_ACROSS_USERS
android.content.ContextsendBroadcastAsUser(Intent,UserHandle,String)void  ::  android.permission.INTERACT_ACROSS_USERS
android.content.ContextsendBroadcastAsUser(Intent,UserHandle,String,Bundle)void  ::  android.permission.INTERACT_ACROSS_USERS
android.content.ContextsendBroadcastAsUser(Intent,UserHandle,String,int)void  ::  android.permission.INTERACT_ACROSS_USERS
android.content.ContextsendOrderedBroadcastAsUser(Intent,UserHandle,String,BroadcastReceiver,Handler,int,String,Bundle)void  ::  android.permission.INTERACT_ACROSS_USERS
android.content.ContextsendOrderedBroadcastAsUser(Intent,UserHandle,String,int,BroadcastReceiver,Handler,int,String,Bundle)void  ::  android.permission.INTERACT_ACROSS_USERS
android.content.ContextsendOrderedBroadcastAsUser(Intent,UserHandle,String,int,Bundle,BroadcastReceiver,Handler,int,String,Bundle)void  ::  android.permission.INTERACT_ACROSS_USERS
android.content.ContextsendStickyBroadcast(Intent)void  ::  android.permission.BROADCAST_STICKY
android.content.ContextsendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)void  ::  android.permission.BROADCAST_STICKY
android.content.ContextremoveStickyBroadcast(Intent)void  ::  android.permission.BROADCAST_STICKY
android.content.ContextsendStickyBroadcastAsUser(Intent,UserHandle)void  ::  android.permission.BROADCAST_STICKY,android.permission.INTERACT_ACROSS_USERS
android.content.ContextsendStickyBroadcastAsUser(Intent,UserHandle,Bundle)void  ::  android.permission.BROADCAST_STICKY,android.permission.INTERACT_ACROSS_USERS
android.content.ContextsendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)void  ::  android.permission.BROADCAST_STICKY,android.permission.INTERACT_ACROSS_USERS
android.content.ContextremoveStickyBroadcastAsUser(Intent,UserHandle)void  ::  android.permission.BROADCAST_STICKY,android.permission.INTERACT_ACROSS_USERS
android.content.ContextregisterReceiverAsUser(BroadcastReceiver,UserHandle,IntentFilter,String,Handler)Intent  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.content.ContextstartForegroundServiceAsUser(Intent,UserHandle)ComponentName  ::  android.permission.INTERACT_ACROSS_USERS
android.content.ContextstartServiceAsUser(Intent,UserHandle)ComponentName  ::  android.permission.INTERACT_ACROSS_USERS
android.content.ContextstopServiceAsUser(Intent,UserHandle)boolean  ::  android.permission.INTERACT_ACROSS_USERS
android.content.ContextbindServiceAsUser(Intent,ServiceConnection,int,UserHandle)boolean  ::  android.permission.INTERACT_ACROSS_USERS
android.content.ContextbindServiceAsUser(Intent,ServiceConnection,int,Handler,UserHandle)boolean  ::  android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageInstalleruninstall(VersionedPackage,IntentSender)void  ::  android.permission.REQUEST_DELETE_PACKAGES,android.permission.DELETE_PACKAGES
android.content.pm.PackageInstallersetPermissionsResult(int,boolean)void  ::  android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstallersetGrantedRuntimePermissions(String[])void  ::  android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageInstallersetAllocateAggressive(boolean)void  ::  android.permission.ALLOCATE_AGGRESSIVE
android.content.pm.PackageManagergetPackageInfoAsUser(String,int,int)PackageInfo  ::  android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManagergetInstalledPackagesAsUser(int,int)List<PackageInfo>  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManagergrantRuntimePermission(String,String,UserHandle)void  ::  android.permission.GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageManagerrevokeRuntimePermission(String,String,UserHandle)void  ::  android.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManagergetPermissionFlags(String,String,UserHandle)int  ::  android.permission.REVOKE_RUNTIME_PERMISSIONS,android.permission.GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageManagerupdatePermissionFlags(String,String,int,int,UserHandle)void  ::  android.permission.REVOKE_RUNTIME_PERMISSIONS,android.permission.GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageManagergetInstantApps()List<InstantAppInfo>  ::  android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManagergetInstantAppIcon(String)Drawable  ::  android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManagerinstallExistingPackageAsUser(String,int)int  ::  android.permission.INSTALL_PACKAGES,android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManagerverifyIntentFilter(int,int,List<String>)void  ::  android.permission.INTENT_FILTER_VERIFICATION_AGENT
android.content.pm.PackageManagerupdateIntentVerificationStatusAsUser(String,int,int)boolean  ::  android.permission.SET_PREFERRED_APPLICATIONS
android.content.pm.PackageManagersetDefaultBrowserPackageNameAsUser(String,int)boolean  ::  android.permission.SET_PREFERRED_APPLICATIONS
android.content.pm.PackageManagersetUpdateAvailable(String,boolean)void  ::  android.permission.INSTALL_PACKAGES
android.content.pm.PackageManagerdeletePackage(String,IPackageDeleteObserver,int)void  ::  android.permission.DELETE_PACKAGES
android.content.pm.PackageManagerdeletePackageAsUser(String,IPackageDeleteObserver,int,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL,android.permission.DELETE_PACKAGES
android.content.pm.PackageManageraddOnPermissionsChangeListener(OnPermissionsChangedListener)void  ::  android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageManagerremoveOnPermissionsChangeListener(OnPermissionsChangedListener)void  ::  android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.hardware.camera2.CameraManageropenCamera(String,final,Handler)void  ::  android.permission.CAMERA
android.hardware.fingerprint.FingerprintManagerauthenticate(CryptoObject,CancellationSignal,int,AuthenticationCallback,Handler)void  ::  android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManagerauthenticate(CryptoObject,CancellationSignal,int,AuthenticationCallback,Handler,int)void  ::  android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManagerenroll(byte,CancellationSignal,int,int,EnrollmentCallback)void  ::  android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManagerpreEnroll()long  ::  android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManagerpostEnroll()int  ::  android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManagersetActiveUser(int)void  ::  android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManagerremove(Fingerprint,int,RemovalCallback)void  ::  android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManagerenumerate(int,EnumerateCallback)void  ::  android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManagerrename(int,int,String)void  ::  android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManagergetEnrolledFingerprints(int)List<Fingerprint>  ::  android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManagergetEnrolledFingerprints()List<Fingerprint>  ::  android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManagerhasEnrolledFingerprints()boolean  ::  android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManagerhasEnrolledFingerprints(int)boolean  ::  android.permission.USE_FINGERPRINT,android.permission.INTERACT_ACROSS_USERS
android.hardware.fingerprint.FingerprintManagerisHardwareDetected()boolean  ::  android.permission.USE_FINGERPRINT
android.hardware.hdmi.HdmiControlManagersetStandbyMode(boolean)void  ::  android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManageraddHotplugEventListener(HotplugEventListener)void  ::  android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManagerremoveHotplugEventListener(HotplugEventListener)void  ::  android.permission.HDMI_CEC
android.hardware.location.ContextHubManagergetContextHubHandles()int[]  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManagergetContextHubInfo(int)ContextHubInfo  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManagerloadNanoApp(int,NanoApp)int  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManagerunloadNanoApp(int)int  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManagergetNanoAppInstanceInfo(int)NanoAppInstanceInfo  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManagerfindNanoAppOnHub(int,NanoAppFilter)int[]  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManagersendMessage(int,int,ContextHubMessage)int  ::  android.permission.LOCATION_HARDWARE
android.location.LocationManagerrequestLocationUpdates(String,long,float,LocationListener)void  ::  android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.location.LocationManagerrequestLocationUpdates(String,long,float,LocationListener,Looper)void  ::  android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.location.LocationManagerrequestLocationUpdates(long,float,Criteria,LocationListener,Looper)void  ::  android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.location.LocationManagerrequestLocationUpdates(String,long,float,PendingIntent)void  ::  android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.location.LocationManagerrequestLocationUpdates(long,float,Criteria,PendingIntent)void  ::  android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.location.LocationManagerrequestSingleUpdate(String,LocationListener,Looper)void  ::  android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.location.LocationManagerrequestSingleUpdate(Criteria,LocationListener,Looper)void  ::  android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.location.LocationManagerrequestSingleUpdate(String,PendingIntent)void  ::  android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.location.LocationManagerrequestSingleUpdate(Criteria,PendingIntent)void  ::  android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.location.LocationManagerrequestLocationUpdates(LocationRequest,LocationListener,Looper)void  ::  android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.location.LocationManagerrequestLocationUpdates(LocationRequest,PendingIntent)void  ::  android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.location.LocationManageraddProximityAlert(double,double,float,long,PendingIntent)void  ::  android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.location.LocationManageraddGeofence(LocationRequest,Geofence,PendingIntent)void  ::  android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.location.LocationManagergetLastKnownLocation(String)Location  ::  android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.location.LocationManageraddGpsStatusListener(Listener)boolean  ::  android.permission.ACCESS_FINE_LOCATION
android.location.LocationManagerregisterGnssStatusCallback(Callback)boolean  ::  android.permission.ACCESS_FINE_LOCATION
android.location.LocationManagerregisterGnssStatusCallback(Callback,Handler)boolean  ::  android.permission.ACCESS_FINE_LOCATION
android.location.LocationManageraddNmeaListener(NmeaListener)boolean  ::  android.permission.ACCESS_FINE_LOCATION
android.location.LocationManageraddNmeaListener(OnNmeaMessageListener)boolean  ::  android.permission.ACCESS_FINE_LOCATION
android.location.LocationManageraddNmeaListener(OnNmeaMessageListener,Handler)boolean  ::  android.permission.ACCESS_FINE_LOCATION
android.location.LocationManagerregisterGnssMeasurementsCallback(Callback)boolean  ::  android.permission.ACCESS_FINE_LOCATION
android.location.LocationManagerregisterGnssMeasurementsCallback(Callback,Handler)boolean  ::  android.permission.ACCESS_FINE_LOCATION
android.location.LocationManagerregisterGnssNavigationMessageCallback(Callback,Handler)boolean  ::  android.permission.ACCESS_FINE_LOCATION
android.location.LocationManagergetGpsStatus(GpsStatus)GpsStatus  ::  android.permission.ACCESS_FINE_LOCATION
android.location.LocationManagergetGnssBatchSize()int  ::  android.permission.LOCATION_HARDWARE
android.location.LocationManagerregisterGnssBatchedLocationCallback(long,boolean,BatchedLocationCallback,Handler)boolean  ::  android.permission.LOCATION_HARDWARE
android.location.LocationManagerflushGnssBatch()void  ::  android.permission.LOCATION_HARDWARE
android.location.LocationManagerunregisterGnssBatchedLocationCallback(BatchedLocationCallback)boolean  ::  android.permission.LOCATION_HARDWARE
android.media.AudioManagerregisterAudioPolicy(AudioPolicy)int  ::  android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManagerunregisterAudioPolicyAsync(AudioPolicy)void  ::  android.permission.MODIFY_AUDIO_ROUTING
android.media.RingtoneManagerenableSyncFromParent(Context)void  ::  android.permission.WRITE_SECURE_SETTINGS
android.media.session.MediaSessionManagersetOnVolumeKeyLongPressListener(OnVolumeKeyLongPressListener,Handler)void  ::  android.permission.SET_VOLUME_KEY_LONG_PRESS_LISTENER
android.media.session.MediaSessionManagersetOnMediaKeyListener(OnMediaKeyListener,Handler)void  ::  android.permission.SET_MEDIA_KEY_LISTENER
android.media.soundtrigger.SoundTriggerDetectorstartRecognition(int)boolean  ::  android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerDetectorstopRecognition()boolean  ::  android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManagerupdateModel(Model)void  ::  android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManagergetModel(UUID)Model  ::  android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManagerdeleteModel(UUID)void  ::  android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManagercreateSoundTriggerDetector(UUID,NonNull,Handler)SoundTriggerDetector  ::  android.permission.MANAGE_SOUND_TRIGGER
android.media.tv.TvInputManagersetParentalControlsEnabled(boolean)void  ::  android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManageraddBlockedRating(TvContentRating)void  ::  android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManagerremoveBlockedRating(TvContentRating)void  ::  android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManagernotifyPreviewProgramBrowsableDisabled(String,long)void  ::  android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManagernotifyWatchNextProgramBrowsableDisabled(String,long)void  ::  android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManagernotifyPreviewProgramAddedToWatchNext(String,long,long)void  ::  android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManagergetAvailableTvStreamConfigList(String)List<TvStreamConfig>  ::  android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManagercaptureFrame(String,Surface,TvStreamConfig)boolean  ::  android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManagergetHardwareList()List<TvInputHardwareInfo>  ::  android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManageracquireTvInputHardware(int,HardwareCallback,TvInputInfo)Hardware  ::  android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManageracquireTvInputHardware(int,TvInputInfo,HardwareCallback)Hardware  ::  android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManagerreleaseTvInputHardware(int,Hardware)void  ::  android.permission.TV_INPUT_HARDWARE
android.media.tv.TvViewunblockContent(TvContentRating)void  ::  android.permission.MODIFY_PARENTAL_CONTROLS
android.net.ConnectivityManagergetNetworkPreference()int  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagergetActiveNetworkInfo()NetworkInfo  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagergetActiveNetwork()Network  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagergetActiveNetworkForUid(int)Network  ::  android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManagergetActiveNetworkInfoForUid(int)NetworkInfo  ::  android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManagergetNetworkInfo(int)NetworkInfo  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagergetNetworkInfo(Network)NetworkInfo  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagergetAllNetworkInfo()NetworkInfo[]  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagergetNetworkForType(int)Network  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagergetAllNetworks()Network[]  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagergetActiveLinkProperties()LinkProperties  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagergetLinkProperties(int)LinkProperties  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagergetLinkProperties(Network)LinkProperties  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagergetNetworkCapabilities(Network)NetworkCapabilities  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagergetActiveNetworkQuotaInfo()NetworkQuotaInfo  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagergetTetherableIfaces()String[]  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagergetTetheredIfaces()String[]  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagergetTetheringErroredIfaces()String[]  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagerisTetheringSupported()boolean  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagerstartTethering(int,boolean,OnStartTetheringCallback,Handler)void  ::  android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManagerstopTethering(int)void  ::  android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManagergetTetherableUsbRegexs()String[]  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagergetTetherableWifiRegexs()String[]  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagergetTetherableBluetoothRegexs()String[]  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagergetLastTetherError(String)int  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagersetGlobalProxy(ProxyInfo)void  ::  android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManagerisNetworkSupported(int)boolean  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagerisActiveNetworkMetered()boolean  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagersetAirplaneMode(boolean)void  ::  android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManagerregisterNetworkCallback(NetworkRequest,NetworkCallback)void  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagerregisterNetworkCallback(NetworkRequest,NetworkCallback,Handler)void  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagerregisterNetworkCallback(NetworkRequest,PendingIntent)void  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagerregisterDefaultNetworkCallback(NetworkCallback)void  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagerregisterDefaultNetworkCallback(NetworkCallback,Handler)void  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManagersetAcceptUnvalidated(Network,boolean,boolean)void  ::  android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManagersetAvoidUnvalidated(Network)void  ::  android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManagerstartCaptivePortalApp(Network)void  ::  android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManagergetMultipathPreference(Network)int  ::  android.permission.ACCESS_NETWORK_STATE
android.net.NetworkScoreManagergetActiveScorer()NetworkScorerAppData  ::  android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManagerupdateScores(ScoredNetwork[])boolean  ::  android.permission.SCORE_NETWORKS
android.net.NetworkScoreManagerclearScores()boolean  ::  android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManagersetActiveScorer(String)boolean  ::  android.permission.SCORE_NETWORKS
android.net.NetworkScoreManagerdisableScoring()void  ::  android.permission.REQUEST_NETWORK_SCORES
android.net.TrafficStatssetThreadStatsUid(int)void  ::  android.permission.UPDATE_DEVICE_STATS
android.net.TrafficStatsclearThreadStatsUid()void  ::  android.permission.UPDATE_DEVICE_STATS
android.net.VpnServiceprepareAndAuthorize(Context)void  ::  android.permission.CONTROL_VPN
android.net.wifi.RttManagerstartRanging(RttParams[],RttListener)void  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.RttManagerstopRanging(RttListener)void  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.RttManagerenableResponder(ResponderCallback)void  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.RttManagerdisableResponder(ResponderCallback)void  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.WifiManagergetPrivilegedConfiguredNetworks()List<WifiConfiguration>  ::  android.permission.READ_WIFI_CREDENTIAL
android.net.wifi.WifiManagergetConnectionStatistics()WifiConnectionStatistics  ::  android.permission.READ_WIFI_CREDENTIAL
android.net.wifi.WifiManagerstartScan(WorkSource)boolean  ::  android.permission.UPDATE_DEVICE_STATS
android.net.wifi.WifiManagersetWifiApEnabled(WifiConfiguration,boolean)boolean  ::  android.permission.TETHER_PRIVILEGED
android.net.wifi.WifiManagergetWifiApState()int  ::  android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManagerisWifiApEnabled()boolean  ::  android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManagergetWifiApConfiguration()WifiConfiguration  ::  android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManagersetWifiApConfiguration(WifiConfiguration)boolean  ::  android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiScannerstartBackgroundScan(ScanSettings,ScanListener)void  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScannerstartBackgroundScan(ScanSettings,ScanListener,WorkSource)void  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScannerstopBackgroundScan(ScanListener)void  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScannergetScanResults()boolean  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScannerstartScan(ScanSettings,ScanListener)void  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScannerstartScan(ScanSettings,ScanListener,WorkSource)void  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScannerstopScan(ScanListener)void  ::  android.permission.LOCATION_HARDWARE
android.nfc.NfcAdapterenable()boolean  ::  android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapterdisable()boolean  ::  android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapterdisable(boolean)boolean  ::  android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapterenableNdefPush()boolean  ::  android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapterdisableNdefPush()boolean  ::  android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapteraddNfcUnlockHandler(NfcUnlockHandler,String[])boolean  ::  android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapterremoveNfcUnlockHandler(NfcUnlockHandler)boolean  ::  android.permission.WRITE_SECURE_SETTINGS
android.os.BuildgetSerial()String  ::  android.permission.READ_PHONE_STATE
android.os.IncidentManagerreportIncident(IncidentReportArgs)void  ::  android.permission.DUMP,android.permission.PACKAGE_USAGE_STATS
android.os.IncidentManagerreportIncident(String,byte[])void  ::  android.permission.DUMP,android.permission.PACKAGE_USAGE_STATS
android.os.PowerManageruserActivity(long,int,int)void  ::  android.permission.DEVICE_POWER,android.permission.USER_ACTIVITY
android.os.RecoverySystemprocessPackage(Context,File,ProgressListener,Handler)void  ::  android.permission.RECOVERY
android.os.RecoverySystemprocessPackage(Context,File,ProgressListener)void  ::  android.permission.RECOVERY
android.os.RecoverySysteminstallPackage(Context,File)void  ::  android.permission.RECOVERY
android.os.RecoverySysteminstallPackage(Context,File,boolean)void  ::  android.permission.RECOVERY
android.os.RecoverySystemscheduleUpdateOnBoot(Context,File)void  ::  android.permission.RECOVERY
android.os.RecoverySystemcancelScheduledUpdate(Context)void  ::  android.permission.RECOVERY
android.os.RecoverySystemrebootWipeAb(Context,File,String)void  ::  android.permission.RECOVERY,android.permission.REBOOT
android.os.UserManagerisManagedProfile()boolean  ::  android.permission.MANAGE_USERS
android.os.UserManagerisManagedProfile(int)boolean  ::  android.permission.MANAGE_USERS
android.os.UserManagergetUserRestrictionSource(String,UserHandle)int  ::  android.permission.MANAGE_USERS
android.os.UserManagergetUserRestrictionSources(String,UserHandle)List<EnforcingUser>  ::  android.permission.MANAGE_USERS
android.os.UserManagergetSeedAccountName()String  ::  android.permission.MANAGE_USERS
android.os.UserManagergetSeedAccountType()String  ::  android.permission.MANAGE_USERS
android.os.UserManagergetSeedAccountOptions()PersistableBundle  ::  android.permission.MANAGE_USERS
android.os.UserManagerclearSeedAccountData()void  ::  android.permission.MANAGE_USERS
android.os.UserManagergetSerialNumbersOfUsers(boolean)long[]  ::  android.permission.MANAGE_USERS
android.os.UserManagergetUserAccount(int)String  ::  android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS_FULL
android.os.UserManagersetUserAccount(int,String)void  ::  android.permission.MANAGE_USERS,android.permission.INTERACT_ACROSS_USERS_FULL
android.os.Vibratorvibrate(long)void  ::  android.permission.VIBRATE
android.os.Vibratorvibrate(long,AudioAttributes)void  ::  android.permission.VIBRATE
android.os.Vibratorvibrate(long[],int)void  ::  android.permission.VIBRATE
android.os.Vibratorvibrate(long[],int,AudioAttributes)void  ::  android.permission.VIBRATE
android.os.Vibratorvibrate(VibrationEffect)void  ::  android.permission.VIBRATE
android.os.Vibratorvibrate(VibrationEffect,AudioAttributes)void  ::  android.permission.VIBRATE
android.os.Vibratorvibrate(int,String,VibrationEffect,AudioAttributes)void  ::  android.permission.VIBRATE
android.os.Vibratorcancel()void  ::  android.permission.VIBRATE
android.provider.SettingsputString(ContentResolver,String,String,String,boolean)boolean  ::  android.permission.WRITE_SECURE_SETTINGS
android.provider.SettingsresetToDefaults(ContentResolver,String)void  ::  android.permission.WRITE_SECURE_SETTINGS
android.provider.SettingsputString(ContentResolver,String,String,String,boolean)boolean  ::  android.permission.WRITE_SECURE_SETTINGS
android.provider.SettingsresetToDefaults(ContentResolver,String)void  ::  android.permission.WRITE_SECURE_SETTINGS
android.security.keystore.AttestationUtilsattestDeviceIds(Context,int[],byte[])X509Certificate[]  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
android.service.oemlock.OemLockManagersetOemUnlockAllowedByCarrier(boolean,byte[])void  ::  android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManagerisOemUnlockAllowedByCarrier()boolean  ::  android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManagersetOemUnlockAllowedByUser(boolean)void  ::  android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManagerisOemUnlockAllowedByUser()boolean  ::  android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManagergetDataBlockSize()int  ::  android.permission.ACCESS_PDB_STATE
android.service.persistentdata.PersistentDataBlockManagerwipe()void  ::  android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManagersetOemUnlockEnabled(boolean)void  ::  android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManagergetOemUnlockEnabled()boolean  ::  android.permission.OEM_UNLOCK_STATE,android.permission.READ_OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManagergetFlashLockState()int  ::  android.permission.OEM_UNLOCK_STATE,android.permission.READ_OEM_UNLOCK_STATE
android.telecom.TelecomManagergetDefaultOutgoingPhoneAccount(String)PhoneAccountHandle  ::  android.permission.READ_PHONE_STATE
android.telecom.TelecomManagergetPhoneAccountsSupportingScheme(String)List<PhoneAccountHandle>  ::  android.permission.READ_PHONE_STATE,android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManagergetCallCapablePhoneAccounts()List<PhoneAccountHandle>  ::  android.permission.READ_PHONE_STATE
android.telecom.TelecomManagergetSelfManagedPhoneAccounts()List<PhoneAccountHandle>  ::  android.permission.READ_PHONE_STATE
android.telecom.TelecomManagerisVoiceMailNumber(PhoneAccountHandle,String)boolean  ::  android.permission.READ_PHONE_STATE
android.telecom.TelecomManagergetVoiceMailNumber(PhoneAccountHandle)String  ::  android.permission.READ_PHONE_STATE
android.telecom.TelecomManagergetLine1Number(PhoneAccountHandle)String  ::  android.permission.READ_PHONE_STATE
android.telecom.TelecomManagerisInCall()boolean  ::  android.permission.READ_PHONE_STATE
android.telecom.TelecomManagerisInManagedCall()boolean  ::  android.permission.READ_PHONE_STATE
android.telecom.TelecomManagerisRinging()boolean  ::  android.permission.READ_PHONE_STATE,android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManagerendCall()boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManageracceptRingingCall()void  ::  android.permission.ANSWER_PHONE_CALLS,android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManageracceptRingingCall(int)void  ::  android.permission.ANSWER_PHONE_CALLS,android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManagersilenceRinger()void  ::  android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManagerisTtySupported()boolean  ::  android.permission.READ_PHONE_STATE,android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManagerhandleMmi(String)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManagerhandleMmi(String,PhoneAccountHandle)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManagergetAdnUriForPhoneAccount(PhoneAccountHandle)Uri  ::  android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManagercancelMissedCallsNotification()void  ::  android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManagershowInCallScreen(boolean)void  ::  android.permission.READ_PHONE_STATE
android.telecom.TelecomManagerplaceCall(Uri,Bundle)void  ::  android.permission.MANAGE_OWN_CALLS,android.permission.CALL_PHONE
android.telecom.TelecomManagerenablePhoneAccount(PhoneAccountHandle,boolean)void  ::  android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManagerdumpAnalytics()TelecomAnalytics  ::  android.permission.DUMP
android.telephony.CarrierConfigManagerupdateConfigForPhoneId(int,String)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManagersendTextMessageWithoutPersisting(String,String,String,PendingIntent,PendingIntent)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManagersendMultipartTextMessageWithoutPersisting(String,String,List<String>,List<PendingIntent>,List<PendingIntent>)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManagergetDeviceSoftwareVersion()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetDeviceSoftwareVersion(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetDeviceId()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetDeviceId(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetImei()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetImei(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetMeid()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetMeid(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetCellLocation()CellLocation  ::  android.permission.ACCESS_COARSE_LOCATION,android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManagerenableLocationUpdates()void  ::  android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManagerenableLocationUpdates(int)void  ::  android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManagerdisableLocationUpdates()void  ::  android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManagergetNeighboringCellInfo()List<NeighboringCellInfo>  ::  android.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManagergetCarrierConfig()PersistableBundle  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetNetworkType(int)int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetDataNetworkType()int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetDataNetworkType(int)int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetVoiceNetworkType()int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetVoiceNetworkType(int)int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetSimSerialNumber()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetSimSerialNumber(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetLteOnCdmaMode()int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetLteOnCdmaMode(int)int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetSubscriberId()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetSubscriberId(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetGroupIdLevel1()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetGroupIdLevel1(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetLine1Number()String  ::  android.permission.READ_PHONE_NUMBERS,android.permission.READ_SMS,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetLine1Number(int)String  ::  android.permission.READ_PHONE_NUMBERS,android.permission.READ_SMS,android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetLine1AlphaTag()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetLine1AlphaTag(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetMsisdn()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetMsisdn(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetVoiceMailNumber()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetVoiceMailNumber(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetCompleteVoiceMailNumber()String  ::  android.permission.CALL_PRIVILEGED
android.telephony.TelephonyManagergetCompleteVoiceMailNumber(int)String  ::  android.permission.CALL_PRIVILEGED
android.telephony.TelephonyManagergetVisualVoicemailPackageName()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagersendVisualVoicemailSmsForSubscriber(int,String,int,String,PendingIntent)void  ::  android.permission.SEND_SMS
android.telephony.TelephonyManagergetVoiceActivationState(int)int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetDataActivationState(int)int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetVoiceMessageCount()int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetVoiceMessageCount(int)int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetVoiceMailAlphaTag()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetVoiceMailAlphaTag(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetCdmaEriIconIndex()int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetCdmaEriIconIndex(int)int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetCdmaEriIconMode()int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetCdmaEriIconMode(int)int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetCdmaEriText()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetCdmaEriText(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetAllCellInfo()List<CellInfo>  ::  android.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManagergetForbiddenPlmns()String[]  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetForbiddenPlmns(int,int)String[]  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetCdmaMdn()String  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManagergetCdmaMdn(int)String  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManagergetCdmaMin()String  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManagergetCdmaMin(int)String  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManagercall(String,String)void  ::  android.permission.CALL_PHONE
android.telephony.TelephonyManagerendCall()boolean  ::  android.permission.CALL_PHONE
android.telephony.TelephonyManageranswerRingingCall()void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManagerisOffhook()boolean  ::  android.permission.READ_PHONE_STATE,android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManagerisRinging()boolean  ::  android.permission.READ_PHONE_STATE,android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManagerisIdle()boolean  ::  android.permission.READ_PHONE_STATE,android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManagerisRadioOn()boolean  ::  android.permission.READ_PHONE_STATE,android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManagersupplyPin(String)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManagersupplyPuk(String,String)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManagersupplyPinReportResult(String)int[]  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManagersupplyPukReportResult(String,String)int[]  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManagersendUssdRequest(String,UssdResponseCallback,Handler)void  ::  android.permission.CALL_PHONE
android.telephony.TelephonyManagerhandlePinMmi(String)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManagerhandlePinMmiForSubscriber(int,String)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManagertoggleRadioOnOff()void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManagersetRadio(boolean)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManagersetRadioPower(boolean)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManagerenableDataConnectivity()boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManagerdisableDataConnectivity()boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManagersetDataEnabled(boolean)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManagersetDataEnabled(int,boolean)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManagerenableVideoCalling(boolean)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManagerisVideoCallingEnabled()boolean  ::  android.permission.READ_PHONE_STATE,android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManagergetServiceState()ServiceState  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManagergetTelephonyHistograms()List<TelephonyHistogram>  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManagersetAllowedCarriers(int,List<CarrierIdentifier>)int  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManagergetAllowedCarriers(int)List<CarrierIdentifier>  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
android.view.DisplayrequestColorMode(int)void  ::  android.permission.CONFIGURE_DISPLAY_COLOR_MODE
android.view.inputmethod.InputMethodManagersetCurrentInputMethodSubtype(InputMethodSubtype)boolean  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.settingslib.SuggestionParsersatisifesRequiredUserType(Tile)boolean  ::  android.permission.MANAGE_USERS
